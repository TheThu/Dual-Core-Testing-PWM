
Testing Dual Core_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda4  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0810c03c  0810c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c05c  0810c05c  0001c05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c064  0810c064  0001c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810c068  0810c068  0001c068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  0810c06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  10000010  0810c07c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  10000070  0810c0dc  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b3c  100000d0  0810c13c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  10000c0c  0810c13c  00020c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003da04  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000056b2  00000000  00000000  0005db04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002730  00000000  00000000  000631b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002540  00000000  00000000  000658e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00049477  00000000  00000000  00067e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000229b0  00000000  00000000  000b129f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001d7f05  00000000  00000000  000d3c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002abb54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac9c  00000000  00000000  002abbd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810c024 	.word	0x0810c024

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	0810c024 	.word	0x0810c024

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b972 	b.w	81005d4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9e08      	ldr	r6, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	4688      	mov	r8, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	d14b      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100316:	428a      	cmp	r2, r1
 8100318:	4615      	mov	r5, r2
 810031a:	d967      	bls.n	81003ec <__udivmoddi4+0xe4>
 810031c:	fab2 f282 	clz	r2, r2
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0720 	rsb	r7, r2, #32
 8100326:	fa01 f302 	lsl.w	r3, r1, r2
 810032a:	fa20 f707 	lsr.w	r7, r0, r7
 810032e:	4095      	lsls	r5, r2
 8100330:	ea47 0803 	orr.w	r8, r7, r3
 8100334:	4094      	lsls	r4, r2
 8100336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810033a:	0c23      	lsrs	r3, r4, #16
 810033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100340:	fa1f fc85 	uxth.w	ip, r5
 8100344:	fb0e 8817 	mls	r8, lr, r7, r8
 8100348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034c:	fb07 f10c 	mul.w	r1, r7, ip
 8100350:	4299      	cmp	r1, r3
 8100352:	d909      	bls.n	8100368 <__udivmoddi4+0x60>
 8100354:	18eb      	adds	r3, r5, r3
 8100356:	f107 30ff 	add.w	r0, r7, #4294967295
 810035a:	f080 811b 	bcs.w	8100594 <__udivmoddi4+0x28c>
 810035e:	4299      	cmp	r1, r3
 8100360:	f240 8118 	bls.w	8100594 <__udivmoddi4+0x28c>
 8100364:	3f02      	subs	r7, #2
 8100366:	442b      	add	r3, r5
 8100368:	1a5b      	subs	r3, r3, r1
 810036a:	b2a4      	uxth	r4, r4
 810036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8100370:	fb0e 3310 	mls	r3, lr, r0, r3
 8100374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100378:	fb00 fc0c 	mul.w	ip, r0, ip
 810037c:	45a4      	cmp	ip, r4
 810037e:	d909      	bls.n	8100394 <__udivmoddi4+0x8c>
 8100380:	192c      	adds	r4, r5, r4
 8100382:	f100 33ff 	add.w	r3, r0, #4294967295
 8100386:	f080 8107 	bcs.w	8100598 <__udivmoddi4+0x290>
 810038a:	45a4      	cmp	ip, r4
 810038c:	f240 8104 	bls.w	8100598 <__udivmoddi4+0x290>
 8100390:	3802      	subs	r0, #2
 8100392:	442c      	add	r4, r5
 8100394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100398:	eba4 040c 	sub.w	r4, r4, ip
 810039c:	2700      	movs	r7, #0
 810039e:	b11e      	cbz	r6, 81003a8 <__udivmoddi4+0xa0>
 81003a0:	40d4      	lsrs	r4, r2
 81003a2:	2300      	movs	r3, #0
 81003a4:	e9c6 4300 	strd	r4, r3, [r6]
 81003a8:	4639      	mov	r1, r7
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d909      	bls.n	81003c6 <__udivmoddi4+0xbe>
 81003b2:	2e00      	cmp	r6, #0
 81003b4:	f000 80eb 	beq.w	810058e <__udivmoddi4+0x286>
 81003b8:	2700      	movs	r7, #0
 81003ba:	e9c6 0100 	strd	r0, r1, [r6]
 81003be:	4638      	mov	r0, r7
 81003c0:	4639      	mov	r1, r7
 81003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003c6:	fab3 f783 	clz	r7, r3
 81003ca:	2f00      	cmp	r7, #0
 81003cc:	d147      	bne.n	810045e <__udivmoddi4+0x156>
 81003ce:	428b      	cmp	r3, r1
 81003d0:	d302      	bcc.n	81003d8 <__udivmoddi4+0xd0>
 81003d2:	4282      	cmp	r2, r0
 81003d4:	f200 80fa 	bhi.w	81005cc <__udivmoddi4+0x2c4>
 81003d8:	1a84      	subs	r4, r0, r2
 81003da:	eb61 0303 	sbc.w	r3, r1, r3
 81003de:	2001      	movs	r0, #1
 81003e0:	4698      	mov	r8, r3
 81003e2:	2e00      	cmp	r6, #0
 81003e4:	d0e0      	beq.n	81003a8 <__udivmoddi4+0xa0>
 81003e6:	e9c6 4800 	strd	r4, r8, [r6]
 81003ea:	e7dd      	b.n	81003a8 <__udivmoddi4+0xa0>
 81003ec:	b902      	cbnz	r2, 81003f0 <__udivmoddi4+0xe8>
 81003ee:	deff      	udf	#255	; 0xff
 81003f0:	fab2 f282 	clz	r2, r2
 81003f4:	2a00      	cmp	r2, #0
 81003f6:	f040 808f 	bne.w	8100518 <__udivmoddi4+0x210>
 81003fa:	1b49      	subs	r1, r1, r5
 81003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100400:	fa1f f885 	uxth.w	r8, r5
 8100404:	2701      	movs	r7, #1
 8100406:	fbb1 fcfe 	udiv	ip, r1, lr
 810040a:	0c23      	lsrs	r3, r4, #16
 810040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100414:	fb08 f10c 	mul.w	r1, r8, ip
 8100418:	4299      	cmp	r1, r3
 810041a:	d907      	bls.n	810042c <__udivmoddi4+0x124>
 810041c:	18eb      	adds	r3, r5, r3
 810041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100422:	d202      	bcs.n	810042a <__udivmoddi4+0x122>
 8100424:	4299      	cmp	r1, r3
 8100426:	f200 80cd 	bhi.w	81005c4 <__udivmoddi4+0x2bc>
 810042a:	4684      	mov	ip, r0
 810042c:	1a59      	subs	r1, r3, r1
 810042e:	b2a3      	uxth	r3, r4
 8100430:	fbb1 f0fe 	udiv	r0, r1, lr
 8100434:	fb0e 1410 	mls	r4, lr, r0, r1
 8100438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 810043c:	fb08 f800 	mul.w	r8, r8, r0
 8100440:	45a0      	cmp	r8, r4
 8100442:	d907      	bls.n	8100454 <__udivmoddi4+0x14c>
 8100444:	192c      	adds	r4, r5, r4
 8100446:	f100 33ff 	add.w	r3, r0, #4294967295
 810044a:	d202      	bcs.n	8100452 <__udivmoddi4+0x14a>
 810044c:	45a0      	cmp	r8, r4
 810044e:	f200 80b6 	bhi.w	81005be <__udivmoddi4+0x2b6>
 8100452:	4618      	mov	r0, r3
 8100454:	eba4 0408 	sub.w	r4, r4, r8
 8100458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 810045c:	e79f      	b.n	810039e <__udivmoddi4+0x96>
 810045e:	f1c7 0c20 	rsb	ip, r7, #32
 8100462:	40bb      	lsls	r3, r7
 8100464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100468:	ea4e 0e03 	orr.w	lr, lr, r3
 810046c:	fa01 f407 	lsl.w	r4, r1, r7
 8100470:	fa20 f50c 	lsr.w	r5, r0, ip
 8100474:	fa21 f30c 	lsr.w	r3, r1, ip
 8100478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 810047c:	4325      	orrs	r5, r4
 810047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8100482:	0c2c      	lsrs	r4, r5, #16
 8100484:	fb08 3319 	mls	r3, r8, r9, r3
 8100488:	fa1f fa8e 	uxth.w	sl, lr
 810048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100490:	fb09 f40a 	mul.w	r4, r9, sl
 8100494:	429c      	cmp	r4, r3
 8100496:	fa02 f207 	lsl.w	r2, r2, r7
 810049a:	fa00 f107 	lsl.w	r1, r0, r7
 810049e:	d90b      	bls.n	81004b8 <__udivmoddi4+0x1b0>
 81004a0:	eb1e 0303 	adds.w	r3, lr, r3
 81004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 81004a8:	f080 8087 	bcs.w	81005ba <__udivmoddi4+0x2b2>
 81004ac:	429c      	cmp	r4, r3
 81004ae:	f240 8084 	bls.w	81005ba <__udivmoddi4+0x2b2>
 81004b2:	f1a9 0902 	sub.w	r9, r9, #2
 81004b6:	4473      	add	r3, lr
 81004b8:	1b1b      	subs	r3, r3, r4
 81004ba:	b2ad      	uxth	r5, r5
 81004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 81004c0:	fb08 3310 	mls	r3, r8, r0, r3
 81004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 81004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 81004cc:	45a2      	cmp	sl, r4
 81004ce:	d908      	bls.n	81004e2 <__udivmoddi4+0x1da>
 81004d0:	eb1e 0404 	adds.w	r4, lr, r4
 81004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 81004d8:	d26b      	bcs.n	81005b2 <__udivmoddi4+0x2aa>
 81004da:	45a2      	cmp	sl, r4
 81004dc:	d969      	bls.n	81005b2 <__udivmoddi4+0x2aa>
 81004de:	3802      	subs	r0, #2
 81004e0:	4474      	add	r4, lr
 81004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81004e6:	fba0 8902 	umull	r8, r9, r0, r2
 81004ea:	eba4 040a 	sub.w	r4, r4, sl
 81004ee:	454c      	cmp	r4, r9
 81004f0:	46c2      	mov	sl, r8
 81004f2:	464b      	mov	r3, r9
 81004f4:	d354      	bcc.n	81005a0 <__udivmoddi4+0x298>
 81004f6:	d051      	beq.n	810059c <__udivmoddi4+0x294>
 81004f8:	2e00      	cmp	r6, #0
 81004fa:	d069      	beq.n	81005d0 <__udivmoddi4+0x2c8>
 81004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8100500:	eb64 0403 	sbc.w	r4, r4, r3
 8100504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100508:	40fd      	lsrs	r5, r7
 810050a:	40fc      	lsrs	r4, r7
 810050c:	ea4c 0505 	orr.w	r5, ip, r5
 8100510:	e9c6 5400 	strd	r5, r4, [r6]
 8100514:	2700      	movs	r7, #0
 8100516:	e747      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100518:	f1c2 0320 	rsb	r3, r2, #32
 810051c:	fa20 f703 	lsr.w	r7, r0, r3
 8100520:	4095      	lsls	r5, r2
 8100522:	fa01 f002 	lsl.w	r0, r1, r2
 8100526:	fa21 f303 	lsr.w	r3, r1, r3
 810052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810052e:	4338      	orrs	r0, r7
 8100530:	0c01      	lsrs	r1, r0, #16
 8100532:	fbb3 f7fe 	udiv	r7, r3, lr
 8100536:	fa1f f885 	uxth.w	r8, r5
 810053a:	fb0e 3317 	mls	r3, lr, r7, r3
 810053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100542:	fb07 f308 	mul.w	r3, r7, r8
 8100546:	428b      	cmp	r3, r1
 8100548:	fa04 f402 	lsl.w	r4, r4, r2
 810054c:	d907      	bls.n	810055e <__udivmoddi4+0x256>
 810054e:	1869      	adds	r1, r5, r1
 8100550:	f107 3cff 	add.w	ip, r7, #4294967295
 8100554:	d22f      	bcs.n	81005b6 <__udivmoddi4+0x2ae>
 8100556:	428b      	cmp	r3, r1
 8100558:	d92d      	bls.n	81005b6 <__udivmoddi4+0x2ae>
 810055a:	3f02      	subs	r7, #2
 810055c:	4429      	add	r1, r5
 810055e:	1acb      	subs	r3, r1, r3
 8100560:	b281      	uxth	r1, r0
 8100562:	fbb3 f0fe 	udiv	r0, r3, lr
 8100566:	fb0e 3310 	mls	r3, lr, r0, r3
 810056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810056e:	fb00 f308 	mul.w	r3, r0, r8
 8100572:	428b      	cmp	r3, r1
 8100574:	d907      	bls.n	8100586 <__udivmoddi4+0x27e>
 8100576:	1869      	adds	r1, r5, r1
 8100578:	f100 3cff 	add.w	ip, r0, #4294967295
 810057c:	d217      	bcs.n	81005ae <__udivmoddi4+0x2a6>
 810057e:	428b      	cmp	r3, r1
 8100580:	d915      	bls.n	81005ae <__udivmoddi4+0x2a6>
 8100582:	3802      	subs	r0, #2
 8100584:	4429      	add	r1, r5
 8100586:	1ac9      	subs	r1, r1, r3
 8100588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 810058c:	e73b      	b.n	8100406 <__udivmoddi4+0xfe>
 810058e:	4637      	mov	r7, r6
 8100590:	4630      	mov	r0, r6
 8100592:	e709      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100594:	4607      	mov	r7, r0
 8100596:	e6e7      	b.n	8100368 <__udivmoddi4+0x60>
 8100598:	4618      	mov	r0, r3
 810059a:	e6fb      	b.n	8100394 <__udivmoddi4+0x8c>
 810059c:	4541      	cmp	r1, r8
 810059e:	d2ab      	bcs.n	81004f8 <__udivmoddi4+0x1f0>
 81005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 81005a4:	eb69 020e 	sbc.w	r2, r9, lr
 81005a8:	3801      	subs	r0, #1
 81005aa:	4613      	mov	r3, r2
 81005ac:	e7a4      	b.n	81004f8 <__udivmoddi4+0x1f0>
 81005ae:	4660      	mov	r0, ip
 81005b0:	e7e9      	b.n	8100586 <__udivmoddi4+0x27e>
 81005b2:	4618      	mov	r0, r3
 81005b4:	e795      	b.n	81004e2 <__udivmoddi4+0x1da>
 81005b6:	4667      	mov	r7, ip
 81005b8:	e7d1      	b.n	810055e <__udivmoddi4+0x256>
 81005ba:	4681      	mov	r9, r0
 81005bc:	e77c      	b.n	81004b8 <__udivmoddi4+0x1b0>
 81005be:	3802      	subs	r0, #2
 81005c0:	442c      	add	r4, r5
 81005c2:	e747      	b.n	8100454 <__udivmoddi4+0x14c>
 81005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005c8:	442b      	add	r3, r5
 81005ca:	e72f      	b.n	810042c <__udivmoddi4+0x124>
 81005cc:	4638      	mov	r0, r7
 81005ce:	e708      	b.n	81003e2 <__udivmoddi4+0xda>
 81005d0:	4637      	mov	r7, r6
 81005d2:	e6e9      	b.n	81003a8 <__udivmoddi4+0xa0>

081005d4 <__aeabi_idiv0>:
 81005d4:	4770      	bx	lr
 81005d6:	bf00      	nop

081005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d8:	b480      	push	{r7}
 81005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005dc:	4b0b      	ldr	r3, [pc, #44]	; (810060c <SystemInit+0x34>)
 81005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005e2:	4a0a      	ldr	r2, [pc, #40]	; (810060c <SystemInit+0x34>)
 81005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 81005ec:	4b07      	ldr	r3, [pc, #28]	; (810060c <SystemInit+0x34>)
 81005ee:	691b      	ldr	r3, [r3, #16]
 81005f0:	4a06      	ldr	r2, [pc, #24]	; (810060c <SystemInit+0x34>)
 81005f2:	f043 0304 	orr.w	r3, r3, #4
 81005f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81005f8:	4b04      	ldr	r3, [pc, #16]	; (810060c <SystemInit+0x34>)
 81005fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81005fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100600:	bf00      	nop
 8100602:	46bd      	mov	sp, r7
 8100604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100608:	4770      	bx	lr
 810060a:	bf00      	nop
 810060c:	e000ed00 	.word	0xe000ed00

08100610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100610:	b580      	push	{r7, lr}
 8100612:	b082      	sub	sp, #8
 8100614:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100616:	4b2b      	ldr	r3, [pc, #172]	; (81006c4 <main+0xb4>)
 8100618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810061c:	4a29      	ldr	r2, [pc, #164]	; (81006c4 <main+0xb4>)
 810061e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100626:	4b27      	ldr	r3, [pc, #156]	; (81006c4 <main+0xb4>)
 8100628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810062c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100630:	607b      	str	r3, [r7, #4]
 8100632:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100634:	2001      	movs	r0, #1
 8100636:	f003 ff45 	bl	81044c4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810063a:	f004 f907 	bl	810484c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810063e:	2201      	movs	r2, #1
 8100640:	2102      	movs	r1, #2
 8100642:	2000      	movs	r0, #0
 8100644:	f004 f898 	bl	8104778 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100648:	4b1f      	ldr	r3, [pc, #124]	; (81006c8 <main+0xb8>)
 810064a:	681b      	ldr	r3, [r3, #0]
 810064c:	091b      	lsrs	r3, r3, #4
 810064e:	f003 030f 	and.w	r3, r3, #15
 8100652:	2b07      	cmp	r3, #7
 8100654:	d108      	bne.n	8100668 <main+0x58>
 8100656:	4b1d      	ldr	r3, [pc, #116]	; (81006cc <main+0xbc>)
 8100658:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810065c:	4a1b      	ldr	r2, [pc, #108]	; (81006cc <main+0xbc>)
 810065e:	f043 0301 	orr.w	r3, r3, #1
 8100662:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100666:	e007      	b.n	8100678 <main+0x68>
 8100668:	4b18      	ldr	r3, [pc, #96]	; (81006cc <main+0xbc>)
 810066a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810066e:	4a17      	ldr	r2, [pc, #92]	; (81006cc <main+0xbc>)
 8100670:	f043 0301 	orr.w	r3, r3, #1
 8100674:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100678:	f001 fd94 	bl	81021a4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810067c:	f000 fd40 	bl	8101100 <MX_GPIO_Init>
  MX_ADC1_Init();
 8100680:	f000 f826 	bl	81006d0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8100684:	f000 f89c 	bl	81007c0 <MX_ADC3_Init>
  MX_ETH_Init();
 8100688:	f000 f8fc 	bl	8100884 <MX_ETH_Init>
  MX_FMC_Init();
 810068c:	f000 fcea 	bl	8101064 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 8100690:	f000 f94a 	bl	8100928 <MX_HDMI_CEC_Init>
  MX_QUADSPI_Init();
 8100694:	f000 f97c 	bl	8100990 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8100698:	f000 f9a2 	bl	81009e0 <MX_RTC_Init>
  MX_SAI1_Init();
 810069c:	f000 f9ee 	bl	8100a7c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 81006a0:	f000 fa88 	bl	8100bb4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX1_Init();
 81006a4:	f000 faac 	bl	8100c00 <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 81006a8:	f000 fae2 	bl	8100c70 <MX_SPI2_Init>
  MX_SPI5_Init();
 81006ac:	f000 fb34 	bl	8100d18 <MX_SPI5_Init>
  MX_TIM8_Init();
 81006b0:	f000 fb86 	bl	8100dc0 <MX_TIM8_Init>
  MX_TIM13_Init();
 81006b4:	f000 fc12 	bl	8100edc <MX_TIM13_Init>
  MX_UART8_Init();
 81006b8:	f000 fc56 	bl	8100f68 <MX_UART8_Init>
  MX_USB_OTG_HS_PCD_Init();
 81006bc:	f000 fca0 	bl	8101000 <MX_USB_OTG_HS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006c0:	e7fe      	b.n	81006c0 <main+0xb0>
 81006c2:	bf00      	nop
 81006c4:	58024400 	.word	0x58024400
 81006c8:	e000ed00 	.word	0xe000ed00
 81006cc:	58026400 	.word	0x58026400

081006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 81006d0:	b580      	push	{r7, lr}
 81006d2:	b08a      	sub	sp, #40	; 0x28
 81006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81006d6:	f107 031c 	add.w	r3, r7, #28
 81006da:	2200      	movs	r2, #0
 81006dc:	601a      	str	r2, [r3, #0]
 81006de:	605a      	str	r2, [r3, #4]
 81006e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81006e2:	463b      	mov	r3, r7
 81006e4:	2200      	movs	r2, #0
 81006e6:	601a      	str	r2, [r3, #0]
 81006e8:	605a      	str	r2, [r3, #4]
 81006ea:	609a      	str	r2, [r3, #8]
 81006ec:	60da      	str	r2, [r3, #12]
 81006ee:	611a      	str	r2, [r3, #16]
 81006f0:	615a      	str	r2, [r3, #20]
 81006f2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 81006f4:	4b2f      	ldr	r3, [pc, #188]	; (81007b4 <MX_ADC1_Init+0xe4>)
 81006f6:	4a30      	ldr	r2, [pc, #192]	; (81007b8 <MX_ADC1_Init+0xe8>)
 81006f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 81006fa:	4b2e      	ldr	r3, [pc, #184]	; (81007b4 <MX_ADC1_Init+0xe4>)
 81006fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8100700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100702:	4b2c      	ldr	r3, [pc, #176]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100704:	2200      	movs	r2, #0
 8100706:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100708:	4b2a      	ldr	r3, [pc, #168]	; (81007b4 <MX_ADC1_Init+0xe4>)
 810070a:	2200      	movs	r2, #0
 810070c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810070e:	4b29      	ldr	r3, [pc, #164]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100710:	2204      	movs	r2, #4
 8100712:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100714:	4b27      	ldr	r3, [pc, #156]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100716:	2200      	movs	r2, #0
 8100718:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 810071a:	4b26      	ldr	r3, [pc, #152]	; (81007b4 <MX_ADC1_Init+0xe4>)
 810071c:	2200      	movs	r2, #0
 810071e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8100720:	4b24      	ldr	r3, [pc, #144]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100722:	2201      	movs	r2, #1
 8100724:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100726:	4b23      	ldr	r3, [pc, #140]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100728:	2200      	movs	r2, #0
 810072a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 810072c:	4b21      	ldr	r3, [pc, #132]	; (81007b4 <MX_ADC1_Init+0xe4>)
 810072e:	2200      	movs	r2, #0
 8100730:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100732:	4b20      	ldr	r3, [pc, #128]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100734:	2200      	movs	r2, #0
 8100736:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100738:	4b1e      	ldr	r3, [pc, #120]	; (81007b4 <MX_ADC1_Init+0xe4>)
 810073a:	2200      	movs	r2, #0
 810073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810073e:	4b1d      	ldr	r3, [pc, #116]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100740:	2200      	movs	r2, #0
 8100742:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100744:	4b1b      	ldr	r3, [pc, #108]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100746:	2200      	movs	r2, #0
 8100748:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 810074a:	4b1a      	ldr	r3, [pc, #104]	; (81007b4 <MX_ADC1_Init+0xe4>)
 810074c:	2200      	movs	r2, #0
 810074e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8100752:	4818      	ldr	r0, [pc, #96]	; (81007b4 <MX_ADC1_Init+0xe4>)
 8100754:	f001 ffb2 	bl	81026bc <HAL_ADC_Init>
 8100758:	4603      	mov	r3, r0
 810075a:	2b00      	cmp	r3, #0
 810075c:	d001      	beq.n	8100762 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 810075e:	f000 fd7f 	bl	8101260 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8100762:	2300      	movs	r3, #0
 8100764:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8100766:	f107 031c 	add.w	r3, r7, #28
 810076a:	4619      	mov	r1, r3
 810076c:	4811      	ldr	r0, [pc, #68]	; (81007b4 <MX_ADC1_Init+0xe4>)
 810076e:	f002 fd77 	bl	8103260 <HAL_ADCEx_MultiModeConfigChannel>
 8100772:	4603      	mov	r3, r0
 8100774:	2b00      	cmp	r3, #0
 8100776:	d001      	beq.n	810077c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8100778:	f000 fd72 	bl	8101260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 810077c:	4b0f      	ldr	r3, [pc, #60]	; (81007bc <MX_ADC1_Init+0xec>)
 810077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100780:	2306      	movs	r3, #6
 8100782:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100784:	2300      	movs	r3, #0
 8100786:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100788:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810078c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810078e:	2304      	movs	r3, #4
 8100790:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100792:	2300      	movs	r3, #0
 8100794:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100796:	463b      	mov	r3, r7
 8100798:	4619      	mov	r1, r3
 810079a:	4806      	ldr	r0, [pc, #24]	; (81007b4 <MX_ADC1_Init+0xe4>)
 810079c:	f002 f92e 	bl	81029fc <HAL_ADC_ConfigChannel>
 81007a0:	4603      	mov	r3, r0
 81007a2:	2b00      	cmp	r3, #0
 81007a4:	d001      	beq.n	81007aa <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 81007a6:	f000 fd5b 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81007aa:	bf00      	nop
 81007ac:	3728      	adds	r7, #40	; 0x28
 81007ae:	46bd      	mov	sp, r7
 81007b0:	bd80      	pop	{r7, pc}
 81007b2:	bf00      	nop
 81007b4:	100007f8 	.word	0x100007f8
 81007b8:	40022000 	.word	0x40022000
 81007bc:	04300002 	.word	0x04300002

081007c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 81007c0:	b580      	push	{r7, lr}
 81007c2:	b088      	sub	sp, #32
 81007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81007c6:	1d3b      	adds	r3, r7, #4
 81007c8:	2200      	movs	r2, #0
 81007ca:	601a      	str	r2, [r3, #0]
 81007cc:	605a      	str	r2, [r3, #4]
 81007ce:	609a      	str	r2, [r3, #8]
 81007d0:	60da      	str	r2, [r3, #12]
 81007d2:	611a      	str	r2, [r3, #16]
 81007d4:	615a      	str	r2, [r3, #20]
 81007d6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 81007d8:	4b28      	ldr	r3, [pc, #160]	; (810087c <MX_ADC3_Init+0xbc>)
 81007da:	4a29      	ldr	r2, [pc, #164]	; (8100880 <MX_ADC3_Init+0xc0>)
 81007dc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 81007de:	4b27      	ldr	r3, [pc, #156]	; (810087c <MX_ADC3_Init+0xbc>)
 81007e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81007e4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 81007e6:	4b25      	ldr	r3, [pc, #148]	; (810087c <MX_ADC3_Init+0xbc>)
 81007e8:	2200      	movs	r2, #0
 81007ea:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81007ec:	4b23      	ldr	r3, [pc, #140]	; (810087c <MX_ADC3_Init+0xbc>)
 81007ee:	2200      	movs	r2, #0
 81007f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81007f2:	4b22      	ldr	r3, [pc, #136]	; (810087c <MX_ADC3_Init+0xbc>)
 81007f4:	2204      	movs	r2, #4
 81007f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 81007f8:	4b20      	ldr	r3, [pc, #128]	; (810087c <MX_ADC3_Init+0xbc>)
 81007fa:	2200      	movs	r2, #0
 81007fc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 81007fe:	4b1f      	ldr	r3, [pc, #124]	; (810087c <MX_ADC3_Init+0xbc>)
 8100800:	2200      	movs	r2, #0
 8100802:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8100804:	4b1d      	ldr	r3, [pc, #116]	; (810087c <MX_ADC3_Init+0xbc>)
 8100806:	2201      	movs	r2, #1
 8100808:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 810080a:	4b1c      	ldr	r3, [pc, #112]	; (810087c <MX_ADC3_Init+0xbc>)
 810080c:	2200      	movs	r2, #0
 810080e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100810:	4b1a      	ldr	r3, [pc, #104]	; (810087c <MX_ADC3_Init+0xbc>)
 8100812:	2200      	movs	r2, #0
 8100814:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100816:	4b19      	ldr	r3, [pc, #100]	; (810087c <MX_ADC3_Init+0xbc>)
 8100818:	2200      	movs	r2, #0
 810081a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810081c:	4b17      	ldr	r3, [pc, #92]	; (810087c <MX_ADC3_Init+0xbc>)
 810081e:	2200      	movs	r2, #0
 8100820:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100822:	4b16      	ldr	r3, [pc, #88]	; (810087c <MX_ADC3_Init+0xbc>)
 8100824:	2200      	movs	r2, #0
 8100826:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100828:	4b14      	ldr	r3, [pc, #80]	; (810087c <MX_ADC3_Init+0xbc>)
 810082a:	2200      	movs	r2, #0
 810082c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 810082e:	4b13      	ldr	r3, [pc, #76]	; (810087c <MX_ADC3_Init+0xbc>)
 8100830:	2200      	movs	r2, #0
 8100832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100836:	4811      	ldr	r0, [pc, #68]	; (810087c <MX_ADC3_Init+0xbc>)
 8100838:	f001 ff40 	bl	81026bc <HAL_ADC_Init>
 810083c:	4603      	mov	r3, r0
 810083e:	2b00      	cmp	r3, #0
 8100840:	d001      	beq.n	8100846 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8100842:	f000 fd0d 	bl	8101260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8100846:	2301      	movs	r3, #1
 8100848:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810084a:	2306      	movs	r3, #6
 810084c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810084e:	2300      	movs	r3, #0
 8100850:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100852:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100856:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100858:	2304      	movs	r3, #4
 810085a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 810085c:	2300      	movs	r3, #0
 810085e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8100860:	1d3b      	adds	r3, r7, #4
 8100862:	4619      	mov	r1, r3
 8100864:	4805      	ldr	r0, [pc, #20]	; (810087c <MX_ADC3_Init+0xbc>)
 8100866:	f002 f8c9 	bl	81029fc <HAL_ADC_ConfigChannel>
 810086a:	4603      	mov	r3, r0
 810086c:	2b00      	cmp	r3, #0
 810086e:	d001      	beq.n	8100874 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8100870:	f000 fcf6 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8100874:	bf00      	nop
 8100876:	3720      	adds	r7, #32
 8100878:	46bd      	mov	sp, r7
 810087a:	bd80      	pop	{r7, pc}
 810087c:	1000085c 	.word	0x1000085c
 8100880:	58026000 	.word	0x58026000

08100884 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8100884:	b580      	push	{r7, lr}
 8100886:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8100888:	4b22      	ldr	r3, [pc, #136]	; (8100914 <MX_ETH_Init+0x90>)
 810088a:	4a23      	ldr	r2, [pc, #140]	; (8100918 <MX_ETH_Init+0x94>)
 810088c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 810088e:	4b21      	ldr	r3, [pc, #132]	; (8100914 <MX_ETH_Init+0x90>)
 8100890:	685b      	ldr	r3, [r3, #4]
 8100892:	2200      	movs	r2, #0
 8100894:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8100896:	4b1f      	ldr	r3, [pc, #124]	; (8100914 <MX_ETH_Init+0x90>)
 8100898:	685b      	ldr	r3, [r3, #4]
 810089a:	3301      	adds	r3, #1
 810089c:	2280      	movs	r2, #128	; 0x80
 810089e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 81008a0:	4b1c      	ldr	r3, [pc, #112]	; (8100914 <MX_ETH_Init+0x90>)
 81008a2:	685b      	ldr	r3, [r3, #4]
 81008a4:	3302      	adds	r3, #2
 81008a6:	22e1      	movs	r2, #225	; 0xe1
 81008a8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 81008aa:	4b1a      	ldr	r3, [pc, #104]	; (8100914 <MX_ETH_Init+0x90>)
 81008ac:	685b      	ldr	r3, [r3, #4]
 81008ae:	3303      	adds	r3, #3
 81008b0:	2200      	movs	r2, #0
 81008b2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 81008b4:	4b17      	ldr	r3, [pc, #92]	; (8100914 <MX_ETH_Init+0x90>)
 81008b6:	685b      	ldr	r3, [r3, #4]
 81008b8:	3304      	adds	r3, #4
 81008ba:	2200      	movs	r2, #0
 81008bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 81008be:	4b15      	ldr	r3, [pc, #84]	; (8100914 <MX_ETH_Init+0x90>)
 81008c0:	685b      	ldr	r3, [r3, #4]
 81008c2:	3305      	adds	r3, #5
 81008c4:	2200      	movs	r2, #0
 81008c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81008c8:	4b12      	ldr	r3, [pc, #72]	; (8100914 <MX_ETH_Init+0x90>)
 81008ca:	2201      	movs	r2, #1
 81008cc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81008ce:	4b11      	ldr	r3, [pc, #68]	; (8100914 <MX_ETH_Init+0x90>)
 81008d0:	4a12      	ldr	r2, [pc, #72]	; (810091c <MX_ETH_Init+0x98>)
 81008d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81008d4:	4b0f      	ldr	r3, [pc, #60]	; (8100914 <MX_ETH_Init+0x90>)
 81008d6:	4a12      	ldr	r2, [pc, #72]	; (8100920 <MX_ETH_Init+0x9c>)
 81008d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 81008da:	4b0e      	ldr	r3, [pc, #56]	; (8100914 <MX_ETH_Init+0x90>)
 81008dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 81008e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 81008e2:	480c      	ldr	r0, [pc, #48]	; (8100914 <MX_ETH_Init+0x90>)
 81008e4:	f003 f828 	bl	8103938 <HAL_ETH_Init>
 81008e8:	4603      	mov	r3, r0
 81008ea:	2b00      	cmp	r3, #0
 81008ec:	d001      	beq.n	81008f2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 81008ee:	f000 fcb7 	bl	8101260 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 81008f2:	2234      	movs	r2, #52	; 0x34
 81008f4:	2100      	movs	r1, #0
 81008f6:	480b      	ldr	r0, [pc, #44]	; (8100924 <MX_ETH_Init+0xa0>)
 81008f8:	f00b fb8c 	bl	810c014 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 81008fc:	4b09      	ldr	r3, [pc, #36]	; (8100924 <MX_ETH_Init+0xa0>)
 81008fe:	2221      	movs	r2, #33	; 0x21
 8100900:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100902:	4b08      	ldr	r3, [pc, #32]	; (8100924 <MX_ETH_Init+0xa0>)
 8100904:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8100908:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 810090a:	4b06      	ldr	r3, [pc, #24]	; (8100924 <MX_ETH_Init+0xa0>)
 810090c:	2200      	movs	r2, #0
 810090e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100910:	bf00      	nop
 8100912:	bd80      	pop	{r7, pc}
 8100914:	10000b18 	.word	0x10000b18
 8100918:	40028000 	.word	0x40028000
 810091c:	10000070 	.word	0x10000070
 8100920:	10000010 	.word	0x10000010
 8100924:	10000b88 	.word	0x10000b88

08100928 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100928:	b580      	push	{r7, lr}
 810092a:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 810092c:	4b15      	ldr	r3, [pc, #84]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 810092e:	4a16      	ldr	r2, [pc, #88]	; (8100988 <MX_HDMI_CEC_Init+0x60>)
 8100930:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100932:	4b14      	ldr	r3, [pc, #80]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 8100934:	2200      	movs	r2, #0
 8100936:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100938:	4b12      	ldr	r3, [pc, #72]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 810093a:	2200      	movs	r2, #0
 810093c:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 810093e:	4b11      	ldr	r3, [pc, #68]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 8100940:	2210      	movs	r2, #16
 8100942:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100944:	4b0f      	ldr	r3, [pc, #60]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 8100946:	2200      	movs	r2, #0
 8100948:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 810094a:	4b0e      	ldr	r3, [pc, #56]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 810094c:	2200      	movs	r2, #0
 810094e:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100950:	4b0c      	ldr	r3, [pc, #48]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 8100952:	2200      	movs	r2, #0
 8100954:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100956:	4b0b      	ldr	r3, [pc, #44]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 8100958:	2200      	movs	r2, #0
 810095a:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 810095c:	4b09      	ldr	r3, [pc, #36]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 810095e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8100962:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100964:	4b07      	ldr	r3, [pc, #28]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 8100966:	2200      	movs	r2, #0
 8100968:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 810096a:	4b06      	ldr	r3, [pc, #24]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 810096c:	4a07      	ldr	r2, [pc, #28]	; (810098c <MX_HDMI_CEC_Init+0x64>)
 810096e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100970:	4804      	ldr	r0, [pc, #16]	; (8100984 <MX_HDMI_CEC_Init+0x5c>)
 8100972:	f002 fd53 	bl	810341c <HAL_CEC_Init>
 8100976:	4603      	mov	r3, r0
 8100978:	2b00      	cmp	r3, #0
 810097a:	d001      	beq.n	8100980 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 810097c:	f000 fc70 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100980:	bf00      	nop
 8100982:	bd80      	pop	{r7, pc}
 8100984:	100006cc 	.word	0x100006cc
 8100988:	40006c00 	.word	0x40006c00
 810098c:	10000b08 	.word	0x10000b08

08100990 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100990:	b580      	push	{r7, lr}
 8100992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100994:	4b10      	ldr	r3, [pc, #64]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 8100996:	4a11      	ldr	r2, [pc, #68]	; (81009dc <MX_QUADSPI_Init+0x4c>)
 8100998:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 810099a:	4b0f      	ldr	r3, [pc, #60]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 810099c:	22ff      	movs	r2, #255	; 0xff
 810099e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 81009a0:	4b0d      	ldr	r3, [pc, #52]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 81009a2:	2201      	movs	r2, #1
 81009a4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 81009a6:	4b0c      	ldr	r3, [pc, #48]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 81009a8:	2200      	movs	r2, #0
 81009aa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 81009ac:	4b0a      	ldr	r3, [pc, #40]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 81009ae:	2201      	movs	r2, #1
 81009b0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 81009b2:	4b09      	ldr	r3, [pc, #36]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 81009b4:	2200      	movs	r2, #0
 81009b6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 81009b8:	4b07      	ldr	r3, [pc, #28]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 81009ba:	2200      	movs	r2, #0
 81009bc:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 81009be:	4b06      	ldr	r3, [pc, #24]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 81009c0:	2240      	movs	r2, #64	; 0x40
 81009c2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 81009c4:	4804      	ldr	r0, [pc, #16]	; (81009d8 <MX_QUADSPI_Init+0x48>)
 81009c6:	f003 ff4f 	bl	8104868 <HAL_QSPI_Init>
 81009ca:	4603      	mov	r3, r0
 81009cc:	2b00      	cmp	r3, #0
 81009ce:	d001      	beq.n	81009d4 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 81009d0:	f000 fc46 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 81009d4:	bf00      	nop
 81009d6:	bd80      	pop	{r7, pc}
 81009d8:	10000bbc 	.word	0x10000bbc
 81009dc:	52005000 	.word	0x52005000

081009e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 81009e0:	b580      	push	{r7, lr}
 81009e2:	b08a      	sub	sp, #40	; 0x28
 81009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 81009e6:	463b      	mov	r3, r7
 81009e8:	2228      	movs	r2, #40	; 0x28
 81009ea:	2100      	movs	r1, #0
 81009ec:	4618      	mov	r0, r3
 81009ee:	f00b fb11 	bl	810c014 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 81009f2:	4b20      	ldr	r3, [pc, #128]	; (8100a74 <MX_RTC_Init+0x94>)
 81009f4:	4a20      	ldr	r2, [pc, #128]	; (8100a78 <MX_RTC_Init+0x98>)
 81009f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 81009f8:	4b1e      	ldr	r3, [pc, #120]	; (8100a74 <MX_RTC_Init+0x94>)
 81009fa:	2200      	movs	r2, #0
 81009fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 81009fe:	4b1d      	ldr	r3, [pc, #116]	; (8100a74 <MX_RTC_Init+0x94>)
 8100a00:	227f      	movs	r2, #127	; 0x7f
 8100a02:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100a04:	4b1b      	ldr	r3, [pc, #108]	; (8100a74 <MX_RTC_Init+0x94>)
 8100a06:	22ff      	movs	r2, #255	; 0xff
 8100a08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100a0a:	4b1a      	ldr	r3, [pc, #104]	; (8100a74 <MX_RTC_Init+0x94>)
 8100a0c:	2200      	movs	r2, #0
 8100a0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100a10:	4b18      	ldr	r3, [pc, #96]	; (8100a74 <MX_RTC_Init+0x94>)
 8100a12:	2200      	movs	r2, #0
 8100a14:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100a16:	4b17      	ldr	r3, [pc, #92]	; (8100a74 <MX_RTC_Init+0x94>)
 8100a18:	2200      	movs	r2, #0
 8100a1a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100a1c:	4b15      	ldr	r3, [pc, #84]	; (8100a74 <MX_RTC_Init+0x94>)
 8100a1e:	2200      	movs	r2, #0
 8100a20:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100a22:	4814      	ldr	r0, [pc, #80]	; (8100a74 <MX_RTC_Init+0x94>)
 8100a24:	f005 f81c 	bl	8105a60 <HAL_RTC_Init>
 8100a28:	4603      	mov	r3, r0
 8100a2a:	2b00      	cmp	r3, #0
 8100a2c:	d001      	beq.n	8100a32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100a2e:	f000 fc17 	bl	8101260 <Error_Handler>
  }
  /** Enable the RTC Tamper 1 
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100a32:	2301      	movs	r3, #1
 8100a34:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100a36:	2301      	movs	r3, #1
 8100a38:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100a3a:	2300      	movs	r3, #0
 8100a3c:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100a3e:	2300      	movs	r3, #0
 8100a40:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100a42:	2300      	movs	r3, #0
 8100a44:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100a46:	2300      	movs	r3, #0
 8100a48:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100a4a:	2300      	movs	r3, #0
 8100a4c:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100a4e:	2300      	movs	r3, #0
 8100a50:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100a52:	2380      	movs	r3, #128	; 0x80
 8100a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100a56:	463b      	mov	r3, r7
 8100a58:	4619      	mov	r1, r3
 8100a5a:	4806      	ldr	r0, [pc, #24]	; (8100a74 <MX_RTC_Init+0x94>)
 8100a5c:	f005 f8eb 	bl	8105c36 <HAL_RTCEx_SetTamper>
 8100a60:	4603      	mov	r3, r0
 8100a62:	2b00      	cmp	r3, #0
 8100a64:	d001      	beq.n	8100a6a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100a66:	f000 fbfb 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100a6a:	bf00      	nop
 8100a6c:	3728      	adds	r7, #40	; 0x28
 8100a6e:	46bd      	mov	sp, r7
 8100a70:	bd80      	pop	{r7, pc}
 8100a72:	bf00      	nop
 8100a74:	1000098c 	.word	0x1000098c
 8100a78:	58004000 	.word	0x58004000

08100a7c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100a7c:	b580      	push	{r7, lr}
 8100a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100a80:	4b47      	ldr	r3, [pc, #284]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100a82:	4a48      	ldr	r2, [pc, #288]	; (8100ba4 <MX_SAI1_Init+0x128>)
 8100a84:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100a86:	4b46      	ldr	r3, [pc, #280]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100a88:	2200      	movs	r2, #0
 8100a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100a8c:	4b44      	ldr	r3, [pc, #272]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100a8e:	2200      	movs	r2, #0
 8100a90:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100a92:	4b43      	ldr	r3, [pc, #268]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100a94:	2240      	movs	r2, #64	; 0x40
 8100a96:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100a98:	4b41      	ldr	r3, [pc, #260]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100a9a:	2200      	movs	r2, #0
 8100a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100a9e:	4b40      	ldr	r3, [pc, #256]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100aa4:	4b3e      	ldr	r3, [pc, #248]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100aa6:	2200      	movs	r2, #0
 8100aa8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100aaa:	4b3d      	ldr	r3, [pc, #244]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100aac:	2200      	movs	r2, #0
 8100aae:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100ab0:	4b3b      	ldr	r3, [pc, #236]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100ab2:	2200      	movs	r2, #0
 8100ab4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100ab6:	4b3a      	ldr	r3, [pc, #232]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100ab8:	2200      	movs	r2, #0
 8100aba:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100abc:	4b38      	ldr	r3, [pc, #224]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100abe:	4a3a      	ldr	r2, [pc, #232]	; (8100ba8 <MX_SAI1_Init+0x12c>)
 8100ac0:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100ac2:	4b37      	ldr	r3, [pc, #220]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100ac4:	2200      	movs	r2, #0
 8100ac6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100ac8:	4b35      	ldr	r3, [pc, #212]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100aca:	2200      	movs	r2, #0
 8100acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100ace:	4b34      	ldr	r3, [pc, #208]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100ad0:	2200      	movs	r2, #0
 8100ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100ad4:	4b32      	ldr	r3, [pc, #200]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100ad6:	2200      	movs	r2, #0
 8100ad8:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100ada:	4b31      	ldr	r3, [pc, #196]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100adc:	2200      	movs	r2, #0
 8100ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100ae2:	4b2f      	ldr	r3, [pc, #188]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100ae4:	2201      	movs	r2, #1
 8100ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100ae8:	4b2d      	ldr	r3, [pc, #180]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100aee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100af0:	4b2b      	ldr	r3, [pc, #172]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100af2:	2208      	movs	r2, #8
 8100af4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100af6:	4b2a      	ldr	r3, [pc, #168]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100af8:	2201      	movs	r2, #1
 8100afa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100afc:	4b28      	ldr	r3, [pc, #160]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100afe:	2200      	movs	r2, #0
 8100b00:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100b02:	4b27      	ldr	r3, [pc, #156]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100b04:	2200      	movs	r2, #0
 8100b06:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100b08:	4b25      	ldr	r3, [pc, #148]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100b0a:	2200      	movs	r2, #0
 8100b0c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100b0e:	4b24      	ldr	r3, [pc, #144]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100b10:	2200      	movs	r2, #0
 8100b12:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100b14:	4b22      	ldr	r3, [pc, #136]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100b16:	2200      	movs	r2, #0
 8100b18:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100b1a:	4b21      	ldr	r3, [pc, #132]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100b1c:	2201      	movs	r2, #1
 8100b1e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100b20:	4b1f      	ldr	r3, [pc, #124]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100b22:	2200      	movs	r2, #0
 8100b24:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100b26:	481e      	ldr	r0, [pc, #120]	; (8100ba0 <MX_SAI1_Init+0x124>)
 8100b28:	f005 f964 	bl	8105df4 <HAL_SAI_Init>
 8100b2c:	4603      	mov	r3, r0
 8100b2e:	2b00      	cmp	r3, #0
 8100b30:	d001      	beq.n	8100b36 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8100b32:	f000 fb95 	bl	8101260 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100b36:	4b1d      	ldr	r3, [pc, #116]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b38:	4a1d      	ldr	r2, [pc, #116]	; (8100bb0 <MX_SAI1_Init+0x134>)
 8100b3a:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100b3c:	4b1b      	ldr	r3, [pc, #108]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b3e:	2204      	movs	r2, #4
 8100b40:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100b42:	4b1a      	ldr	r3, [pc, #104]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b44:	2200      	movs	r2, #0
 8100b46:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100b48:	4b18      	ldr	r3, [pc, #96]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b4a:	2200      	movs	r2, #0
 8100b4c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100b4e:	4b17      	ldr	r3, [pc, #92]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b50:	2200      	movs	r2, #0
 8100b52:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100b54:	4b15      	ldr	r3, [pc, #84]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b56:	2200      	movs	r2, #0
 8100b58:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100b5a:	4b14      	ldr	r3, [pc, #80]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b5c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8100b60:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100b62:	4b12      	ldr	r3, [pc, #72]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b64:	2200      	movs	r2, #0
 8100b66:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100b68:	4b10      	ldr	r3, [pc, #64]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b6a:	2200      	movs	r2, #0
 8100b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100b6e:	4b0f      	ldr	r3, [pc, #60]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b70:	2200      	movs	r2, #0
 8100b72:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100b74:	4b0d      	ldr	r3, [pc, #52]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b76:	2200      	movs	r2, #0
 8100b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100b7c:	4b0b      	ldr	r3, [pc, #44]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b7e:	2201      	movs	r2, #1
 8100b80:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100b82:	4b0a      	ldr	r3, [pc, #40]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100b88:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100b8a:	4808      	ldr	r0, [pc, #32]	; (8100bac <MX_SAI1_Init+0x130>)
 8100b8c:	f005 f932 	bl	8105df4 <HAL_SAI_Init>
 8100b90:	4603      	mov	r3, r0
 8100b92:	2b00      	cmp	r3, #0
 8100b94:	d001      	beq.n	8100b9a <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 8100b96:	f000 fb63 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100b9a:	bf00      	nop
 8100b9c:	bd80      	pop	{r7, pc}
 8100b9e:	bf00      	nop
 8100ba0:	10000a3c 	.word	0x10000a3c
 8100ba4:	40015804 	.word	0x40015804
 8100ba8:	0002ee00 	.word	0x0002ee00
 8100bac:	10000710 	.word	0x10000710
 8100bb0:	40015824 	.word	0x40015824

08100bb4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100bb4:	b580      	push	{r7, lr}
 8100bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100bb8:	4b0f      	ldr	r3, [pc, #60]	; (8100bf8 <MX_SDMMC1_SD_Init+0x44>)
 8100bba:	4a10      	ldr	r2, [pc, #64]	; (8100bfc <MX_SDMMC1_SD_Init+0x48>)
 8100bbc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100bbe:	4b0e      	ldr	r3, [pc, #56]	; (8100bf8 <MX_SDMMC1_SD_Init+0x44>)
 8100bc0:	2200      	movs	r2, #0
 8100bc2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100bc4:	4b0c      	ldr	r3, [pc, #48]	; (8100bf8 <MX_SDMMC1_SD_Init+0x44>)
 8100bc6:	2200      	movs	r2, #0
 8100bc8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100bca:	4b0b      	ldr	r3, [pc, #44]	; (8100bf8 <MX_SDMMC1_SD_Init+0x44>)
 8100bcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8100bd0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100bd2:	4b09      	ldr	r3, [pc, #36]	; (8100bf8 <MX_SDMMC1_SD_Init+0x44>)
 8100bd4:	2200      	movs	r2, #0
 8100bd6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100bd8:	4b07      	ldr	r3, [pc, #28]	; (8100bf8 <MX_SDMMC1_SD_Init+0x44>)
 8100bda:	2200      	movs	r2, #0
 8100bdc:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8100bde:	4b06      	ldr	r3, [pc, #24]	; (8100bf8 <MX_SDMMC1_SD_Init+0x44>)
 8100be0:	2201      	movs	r2, #1
 8100be2:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100be4:	4804      	ldr	r0, [pc, #16]	; (8100bf8 <MX_SDMMC1_SD_Init+0x44>)
 8100be6:	f005 fbbd 	bl	8106364 <HAL_SD_Init>
 8100bea:	4603      	mov	r3, r0
 8100bec:	2b00      	cmp	r3, #0
 8100bee:	d001      	beq.n	8100bf4 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8100bf0:	f000 fb36 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100bf4:	bf00      	nop
 8100bf6:	bd80      	pop	{r7, pc}
 8100bf8:	1000064c 	.word	0x1000064c
 8100bfc:	52007000 	.word	0x52007000

08100c00 <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100c00:	b580      	push	{r7, lr}
 8100c02:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100c04:	4b19      	ldr	r3, [pc, #100]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c06:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8100c0a:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100c0c:	4b17      	ldr	r3, [pc, #92]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c0e:	2200      	movs	r2, #0
 8100c10:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100c12:	4b16      	ldr	r3, [pc, #88]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c14:	2200      	movs	r2, #0
 8100c16:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100c18:	4b14      	ldr	r3, [pc, #80]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c1a:	2200      	movs	r2, #0
 8100c1c:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100c1e:	4b13      	ldr	r3, [pc, #76]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c20:	2200      	movs	r2, #0
 8100c22:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100c24:	4b11      	ldr	r3, [pc, #68]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c26:	2200      	movs	r2, #0
 8100c28:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100c2a:	4b10      	ldr	r3, [pc, #64]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c2c:	2200      	movs	r2, #0
 8100c2e:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100c30:	4b0e      	ldr	r3, [pc, #56]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c32:	2200      	movs	r2, #0
 8100c34:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100c36:	4b0d      	ldr	r3, [pc, #52]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c38:	2200      	movs	r2, #0
 8100c3a:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100c3c:	4b0b      	ldr	r3, [pc, #44]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c3e:	2200      	movs	r2, #0
 8100c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100c42:	4b0a      	ldr	r3, [pc, #40]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c44:	2200      	movs	r2, #0
 8100c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100c48:	4b08      	ldr	r3, [pc, #32]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c4a:	2200      	movs	r2, #0
 8100c4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100c50:	4b06      	ldr	r3, [pc, #24]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c52:	2200      	movs	r2, #0
 8100c54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100c58:	4804      	ldr	r0, [pc, #16]	; (8100c6c <MX_SPDIFRX1_Init+0x6c>)
 8100c5a:	f006 fc31 	bl	81074c0 <HAL_SPDIFRX_Init>
 8100c5e:	4603      	mov	r3, r0
 8100c60:	2b00      	cmp	r3, #0
 8100c62:	d001      	beq.n	8100c68 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100c64:	f000 fafc 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100c68:	bf00      	nop
 8100c6a:	bd80      	pop	{r7, pc}
 8100c6c:	100007a8 	.word	0x100007a8

08100c70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100c70:	b580      	push	{r7, lr}
 8100c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100c74:	4b26      	ldr	r3, [pc, #152]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100c76:	4a27      	ldr	r2, [pc, #156]	; (8100d14 <MX_SPI2_Init+0xa4>)
 8100c78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100c7a:	4b25      	ldr	r3, [pc, #148]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100c7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100c80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100c82:	4b23      	ldr	r3, [pc, #140]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100c84:	2200      	movs	r2, #0
 8100c86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8100c88:	4b21      	ldr	r3, [pc, #132]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100c8a:	2203      	movs	r2, #3
 8100c8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100c8e:	4b20      	ldr	r3, [pc, #128]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100c90:	2200      	movs	r2, #0
 8100c92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100c94:	4b1e      	ldr	r3, [pc, #120]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100c96:	2200      	movs	r2, #0
 8100c98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8100c9a:	4b1d      	ldr	r3, [pc, #116]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100c9c:	2200      	movs	r2, #0
 8100c9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100ca0:	4b1b      	ldr	r3, [pc, #108]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100ca2:	2200      	movs	r2, #0
 8100ca4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100ca6:	4b1a      	ldr	r3, [pc, #104]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100ca8:	2200      	movs	r2, #0
 8100caa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100cac:	4b18      	ldr	r3, [pc, #96]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cae:	2200      	movs	r2, #0
 8100cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100cb2:	4b17      	ldr	r3, [pc, #92]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cb4:	2200      	movs	r2, #0
 8100cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100cb8:	4b15      	ldr	r3, [pc, #84]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cba:	2200      	movs	r2, #0
 8100cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100cbe:	4b14      	ldr	r3, [pc, #80]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100cc4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100cc6:	4b12      	ldr	r3, [pc, #72]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cc8:	2200      	movs	r2, #0
 8100cca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100ccc:	4b10      	ldr	r3, [pc, #64]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cce:	2200      	movs	r2, #0
 8100cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100cd2:	4b0f      	ldr	r3, [pc, #60]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cd4:	2200      	movs	r2, #0
 8100cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100cd8:	4b0d      	ldr	r3, [pc, #52]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cda:	2200      	movs	r2, #0
 8100cdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100cde:	4b0c      	ldr	r3, [pc, #48]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100ce0:	2200      	movs	r2, #0
 8100ce2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100ce4:	4b0a      	ldr	r3, [pc, #40]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100ce6:	2200      	movs	r2, #0
 8100ce8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100cea:	4b09      	ldr	r3, [pc, #36]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cec:	2200      	movs	r2, #0
 8100cee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100cf0:	4b07      	ldr	r3, [pc, #28]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cf2:	2200      	movs	r2, #0
 8100cf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100cf6:	4b06      	ldr	r3, [pc, #24]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cf8:	2200      	movs	r2, #0
 8100cfa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100cfc:	4804      	ldr	r0, [pc, #16]	; (8100d10 <MX_SPI2_Init+0xa0>)
 8100cfe:	f006 fc4d 	bl	810759c <HAL_SPI_Init>
 8100d02:	4603      	mov	r3, r0
 8100d04:	2b00      	cmp	r3, #0
 8100d06:	d001      	beq.n	8100d0c <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8100d08:	f000 faaa 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100d0c:	bf00      	nop
 8100d0e:	bd80      	pop	{r7, pc}
 8100d10:	100000f4 	.word	0x100000f4
 8100d14:	40003800 	.word	0x40003800

08100d18 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100d18:	b580      	push	{r7, lr}
 8100d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100d1c:	4b26      	ldr	r3, [pc, #152]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d1e:	4a27      	ldr	r2, [pc, #156]	; (8100dbc <MX_SPI5_Init+0xa4>)
 8100d20:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100d22:	4b25      	ldr	r3, [pc, #148]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100d28:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100d2a:	4b23      	ldr	r3, [pc, #140]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d2c:	2200      	movs	r2, #0
 8100d2e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100d30:	4b21      	ldr	r3, [pc, #132]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d32:	2203      	movs	r2, #3
 8100d34:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100d36:	4b20      	ldr	r3, [pc, #128]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d38:	2200      	movs	r2, #0
 8100d3a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100d3c:	4b1e      	ldr	r3, [pc, #120]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d3e:	2200      	movs	r2, #0
 8100d40:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100d42:	4b1d      	ldr	r3, [pc, #116]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d44:	2200      	movs	r2, #0
 8100d46:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100d48:	4b1b      	ldr	r3, [pc, #108]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d4a:	2200      	movs	r2, #0
 8100d4c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100d4e:	4b1a      	ldr	r3, [pc, #104]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d50:	2200      	movs	r2, #0
 8100d52:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100d54:	4b18      	ldr	r3, [pc, #96]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d56:	2200      	movs	r2, #0
 8100d58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100d5a:	4b17      	ldr	r3, [pc, #92]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d5c:	2200      	movs	r2, #0
 8100d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100d60:	4b15      	ldr	r3, [pc, #84]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d62:	2200      	movs	r2, #0
 8100d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100d66:	4b14      	ldr	r3, [pc, #80]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100d6c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100d6e:	4b12      	ldr	r3, [pc, #72]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d70:	2200      	movs	r2, #0
 8100d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100d74:	4b10      	ldr	r3, [pc, #64]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d76:	2200      	movs	r2, #0
 8100d78:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100d7a:	4b0f      	ldr	r3, [pc, #60]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d7c:	2200      	movs	r2, #0
 8100d7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100d80:	4b0d      	ldr	r3, [pc, #52]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d82:	2200      	movs	r2, #0
 8100d84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100d86:	4b0c      	ldr	r3, [pc, #48]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d88:	2200      	movs	r2, #0
 8100d8a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100d8c:	4b0a      	ldr	r3, [pc, #40]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d8e:	2200      	movs	r2, #0
 8100d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100d92:	4b09      	ldr	r3, [pc, #36]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d94:	2200      	movs	r2, #0
 8100d96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100d98:	4b07      	ldr	r3, [pc, #28]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100d9e:	4b06      	ldr	r3, [pc, #24]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100da0:	2200      	movs	r2, #0
 8100da2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100da4:	4804      	ldr	r0, [pc, #16]	; (8100db8 <MX_SPI5_Init+0xa0>)
 8100da6:	f006 fbf9 	bl	810759c <HAL_SPI_Init>
 8100daa:	4603      	mov	r3, r0
 8100dac:	2b00      	cmp	r3, #0
 8100dae:	d001      	beq.n	8100db4 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100db0:	f000 fa56 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100db4:	bf00      	nop
 8100db6:	bd80      	pop	{r7, pc}
 8100db8:	100001bc 	.word	0x100001bc
 8100dbc:	40015000 	.word	0x40015000

08100dc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100dc0:	b580      	push	{r7, lr}
 8100dc2:	b096      	sub	sp, #88	; 0x58
 8100dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100dc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100dca:	2200      	movs	r2, #0
 8100dcc:	601a      	str	r2, [r3, #0]
 8100dce:	605a      	str	r2, [r3, #4]
 8100dd0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100dd6:	2200      	movs	r2, #0
 8100dd8:	601a      	str	r2, [r3, #0]
 8100dda:	605a      	str	r2, [r3, #4]
 8100ddc:	609a      	str	r2, [r3, #8]
 8100dde:	60da      	str	r2, [r3, #12]
 8100de0:	611a      	str	r2, [r3, #16]
 8100de2:	615a      	str	r2, [r3, #20]
 8100de4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100de6:	1d3b      	adds	r3, r7, #4
 8100de8:	222c      	movs	r2, #44	; 0x2c
 8100dea:	2100      	movs	r1, #0
 8100dec:	4618      	mov	r0, r3
 8100dee:	f00b f911 	bl	810c014 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100df2:	4b38      	ldr	r3, [pc, #224]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100df4:	4a38      	ldr	r2, [pc, #224]	; (8100ed8 <MX_TIM8_Init+0x118>)
 8100df6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100df8:	4b36      	ldr	r3, [pc, #216]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100dfa:	2200      	movs	r2, #0
 8100dfc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100dfe:	4b35      	ldr	r3, [pc, #212]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100e00:	2200      	movs	r2, #0
 8100e02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8100e04:	4b33      	ldr	r3, [pc, #204]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100e06:	2200      	movs	r2, #0
 8100e08:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100e0a:	4b32      	ldr	r3, [pc, #200]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100e0c:	2200      	movs	r2, #0
 8100e0e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100e10:	4b30      	ldr	r3, [pc, #192]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100e16:	4b2f      	ldr	r3, [pc, #188]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100e18:	2200      	movs	r2, #0
 8100e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100e1c:	482d      	ldr	r0, [pc, #180]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100e1e:	f006 fcfb 	bl	8107818 <HAL_TIM_OC_Init>
 8100e22:	4603      	mov	r3, r0
 8100e24:	2b00      	cmp	r3, #0
 8100e26:	d001      	beq.n	8100e2c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8100e28:	f000 fa1a 	bl	8101260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100e2c:	2300      	movs	r3, #0
 8100e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100e30:	2300      	movs	r3, #0
 8100e32:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100e34:	2300      	movs	r3, #0
 8100e36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100e38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100e3c:	4619      	mov	r1, r3
 8100e3e:	4825      	ldr	r0, [pc, #148]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100e40:	f007 faf6 	bl	8108430 <HAL_TIMEx_MasterConfigSynchronization>
 8100e44:	4603      	mov	r3, r0
 8100e46:	2b00      	cmp	r3, #0
 8100e48:	d001      	beq.n	8100e4e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8100e4a:	f000 fa09 	bl	8101260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100e4e:	2300      	movs	r3, #0
 8100e50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8100e52:	2300      	movs	r3, #0
 8100e54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100e56:	2300      	movs	r3, #0
 8100e58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100e5a:	2300      	movs	r3, #0
 8100e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100e5e:	2300      	movs	r3, #0
 8100e60:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100e62:	2300      	movs	r3, #0
 8100e64:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100e66:	2300      	movs	r3, #0
 8100e68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100e6e:	2204      	movs	r2, #4
 8100e70:	4619      	mov	r1, r3
 8100e72:	4818      	ldr	r0, [pc, #96]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100e74:	f006 fd30 	bl	81078d8 <HAL_TIM_OC_ConfigChannel>
 8100e78:	4603      	mov	r3, r0
 8100e7a:	2b00      	cmp	r3, #0
 8100e7c:	d001      	beq.n	8100e82 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8100e7e:	f000 f9ef 	bl	8101260 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100e82:	2300      	movs	r3, #0
 8100e84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100e86:	2300      	movs	r3, #0
 8100e88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100e8a:	2300      	movs	r3, #0
 8100e8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100e8e:	2300      	movs	r3, #0
 8100e90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100e92:	2300      	movs	r3, #0
 8100e94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100e9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100e9c:	2300      	movs	r3, #0
 8100e9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100ea0:	2300      	movs	r3, #0
 8100ea2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100ea8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100eaa:	2300      	movs	r3, #0
 8100eac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100eae:	2300      	movs	r3, #0
 8100eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100eb2:	1d3b      	adds	r3, r7, #4
 8100eb4:	4619      	mov	r1, r3
 8100eb6:	4807      	ldr	r0, [pc, #28]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100eb8:	f007 fb42 	bl	8108540 <HAL_TIMEx_ConfigBreakDeadTime>
 8100ebc:	4603      	mov	r3, r0
 8100ebe:	2b00      	cmp	r3, #0
 8100ec0:	d001      	beq.n	8100ec6 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8100ec2:	f000 f9cd 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8100ec6:	4803      	ldr	r0, [pc, #12]	; (8100ed4 <MX_TIM8_Init+0x114>)
 8100ec8:	f000 fe70 	bl	8101bac <HAL_TIM_MspPostInit>

}
 8100ecc:	bf00      	nop
 8100ece:	3758      	adds	r7, #88	; 0x58
 8100ed0:	46bd      	mov	sp, r7
 8100ed2:	bd80      	pop	{r7, pc}
 8100ed4:	1000017c 	.word	0x1000017c
 8100ed8:	40010400 	.word	0x40010400

08100edc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8100edc:	b580      	push	{r7, lr}
 8100ede:	b084      	sub	sp, #16
 8100ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8100ee2:	463b      	mov	r3, r7
 8100ee4:	2200      	movs	r2, #0
 8100ee6:	601a      	str	r2, [r3, #0]
 8100ee8:	605a      	str	r2, [r3, #4]
 8100eea:	609a      	str	r2, [r3, #8]
 8100eec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100eee:	4b1c      	ldr	r3, [pc, #112]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100ef0:	4a1c      	ldr	r2, [pc, #112]	; (8100f64 <MX_TIM13_Init+0x88>)
 8100ef2:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8100ef4:	4b1a      	ldr	r3, [pc, #104]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100ef6:	2200      	movs	r2, #0
 8100ef8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100efa:	4b19      	ldr	r3, [pc, #100]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100efc:	2200      	movs	r2, #0
 8100efe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8100f00:	4b17      	ldr	r3, [pc, #92]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100f02:	2200      	movs	r2, #0
 8100f04:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100f06:	4b16      	ldr	r3, [pc, #88]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100f08:	2200      	movs	r2, #0
 8100f0a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100f0c:	4b14      	ldr	r3, [pc, #80]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100f0e:	2200      	movs	r2, #0
 8100f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100f12:	4813      	ldr	r0, [pc, #76]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100f14:	f006 fc55 	bl	81077c2 <HAL_TIM_Base_Init>
 8100f18:	4603      	mov	r3, r0
 8100f1a:	2b00      	cmp	r3, #0
 8100f1c:	d001      	beq.n	8100f22 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 8100f1e:	f000 f99f 	bl	8101260 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8100f22:	480f      	ldr	r0, [pc, #60]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100f24:	f006 fca3 	bl	810786e <HAL_TIM_IC_Init>
 8100f28:	4603      	mov	r3, r0
 8100f2a:	2b00      	cmp	r3, #0
 8100f2c:	d001      	beq.n	8100f32 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 8100f2e:	f000 f997 	bl	8101260 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100f32:	2300      	movs	r3, #0
 8100f34:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100f36:	2301      	movs	r3, #1
 8100f38:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100f3a:	2300      	movs	r3, #0
 8100f3c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100f3e:	2300      	movs	r3, #0
 8100f40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100f42:	463b      	mov	r3, r7
 8100f44:	2200      	movs	r2, #0
 8100f46:	4619      	mov	r1, r3
 8100f48:	4805      	ldr	r0, [pc, #20]	; (8100f60 <MX_TIM13_Init+0x84>)
 8100f4a:	f006 fd43 	bl	81079d4 <HAL_TIM_IC_ConfigChannel>
 8100f4e:	4603      	mov	r3, r0
 8100f50:	2b00      	cmp	r3, #0
 8100f52:	d001      	beq.n	8100f58 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 8100f54:	f000 f984 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100f58:	bf00      	nop
 8100f5a:	3710      	adds	r7, #16
 8100f5c:	46bd      	mov	sp, r7
 8100f5e:	bd80      	pop	{r7, pc}
 8100f60:	100008c0 	.word	0x100008c0
 8100f64:	40001c00 	.word	0x40001c00

08100f68 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8100f68:	b580      	push	{r7, lr}
 8100f6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8100f6c:	4b22      	ldr	r3, [pc, #136]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100f6e:	4a23      	ldr	r2, [pc, #140]	; (8100ffc <MX_UART8_Init+0x94>)
 8100f70:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8100f72:	4b21      	ldr	r3, [pc, #132]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100f78:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8100f7a:	4b1f      	ldr	r3, [pc, #124]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100f7c:	2200      	movs	r2, #0
 8100f7e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8100f80:	4b1d      	ldr	r3, [pc, #116]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100f82:	2200      	movs	r2, #0
 8100f84:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8100f86:	4b1c      	ldr	r3, [pc, #112]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100f88:	2200      	movs	r2, #0
 8100f8a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8100f8c:	4b1a      	ldr	r3, [pc, #104]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100f8e:	220c      	movs	r2, #12
 8100f90:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100f92:	4b19      	ldr	r3, [pc, #100]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100f94:	2200      	movs	r2, #0
 8100f96:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8100f98:	4b17      	ldr	r3, [pc, #92]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100f9a:	2200      	movs	r2, #0
 8100f9c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100f9e:	4b16      	ldr	r3, [pc, #88]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100fa0:	2200      	movs	r2, #0
 8100fa2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100fa4:	4b14      	ldr	r3, [pc, #80]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100fa6:	2200      	movs	r2, #0
 8100fa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100faa:	4b13      	ldr	r3, [pc, #76]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100fac:	2200      	movs	r2, #0
 8100fae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8100fb0:	4811      	ldr	r0, [pc, #68]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100fb2:	f007 fb43 	bl	810863c <HAL_UART_Init>
 8100fb6:	4603      	mov	r3, r0
 8100fb8:	2b00      	cmp	r3, #0
 8100fba:	d001      	beq.n	8100fc0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8100fbc:	f000 f950 	bl	8101260 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100fc0:	2100      	movs	r1, #0
 8100fc2:	480d      	ldr	r0, [pc, #52]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100fc4:	f009 fead 	bl	810ad22 <HAL_UARTEx_SetTxFifoThreshold>
 8100fc8:	4603      	mov	r3, r0
 8100fca:	2b00      	cmp	r3, #0
 8100fcc:	d001      	beq.n	8100fd2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8100fce:	f000 f947 	bl	8101260 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100fd2:	2100      	movs	r1, #0
 8100fd4:	4808      	ldr	r0, [pc, #32]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100fd6:	f009 fee2 	bl	810ad9e <HAL_UARTEx_SetRxFifoThreshold>
 8100fda:	4603      	mov	r3, r0
 8100fdc:	2b00      	cmp	r3, #0
 8100fde:	d001      	beq.n	8100fe4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8100fe0:	f000 f93e 	bl	8101260 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8100fe4:	4804      	ldr	r0, [pc, #16]	; (8100ff8 <MX_UART8_Init+0x90>)
 8100fe6:	f009 fe63 	bl	810acb0 <HAL_UARTEx_DisableFifoMode>
 8100fea:	4603      	mov	r3, r0
 8100fec:	2b00      	cmp	r3, #0
 8100fee:	d001      	beq.n	8100ff4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8100ff0:	f000 f936 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8100ff4:	bf00      	nop
 8100ff6:	bd80      	pop	{r7, pc}
 8100ff8:	100009b0 	.word	0x100009b0
 8100ffc:	40007c00 	.word	0x40007c00

08101000 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8101000:	b580      	push	{r7, lr}
 8101002:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8101004:	4b15      	ldr	r3, [pc, #84]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101006:	4a16      	ldr	r2, [pc, #88]	; (8101060 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8101008:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 810100a:	4b14      	ldr	r3, [pc, #80]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810100c:	2209      	movs	r2, #9
 810100e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8101010:	4b12      	ldr	r3, [pc, #72]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101012:	2200      	movs	r2, #0
 8101014:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8101016:	4b11      	ldr	r3, [pc, #68]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101018:	2200      	movs	r2, #0
 810101a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 810101c:	4b0f      	ldr	r3, [pc, #60]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810101e:	2201      	movs	r2, #1
 8101020:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8101022:	4b0e      	ldr	r3, [pc, #56]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101024:	2200      	movs	r2, #0
 8101026:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8101028:	4b0c      	ldr	r3, [pc, #48]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810102a:	2200      	movs	r2, #0
 810102c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 810102e:	4b0b      	ldr	r3, [pc, #44]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101030:	2200      	movs	r2, #0
 8101032:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8101034:	4b09      	ldr	r3, [pc, #36]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101036:	2200      	movs	r2, #0
 8101038:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 810103a:	4b08      	ldr	r3, [pc, #32]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810103c:	2200      	movs	r2, #0
 810103e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8101040:	4b06      	ldr	r3, [pc, #24]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101042:	2200      	movs	r2, #0
 8101044:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8101046:	4805      	ldr	r0, [pc, #20]	; (810105c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101048:	f003 fa4e 	bl	81044e8 <HAL_PCD_Init>
 810104c:	4603      	mov	r3, r0
 810104e:	2b00      	cmp	r3, #0
 8101050:	d001      	beq.n	8101056 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8101052:	f000 f905 	bl	8101260 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8101056:	bf00      	nop
 8101058:	bd80      	pop	{r7, pc}
 810105a:	bf00      	nop
 810105c:	10000244 	.word	0x10000244
 8101060:	40040000 	.word	0x40040000

08101064 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8101064:	b580      	push	{r7, lr}
 8101066:	b088      	sub	sp, #32
 8101068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 810106a:	1d3b      	adds	r3, r7, #4
 810106c:	2200      	movs	r2, #0
 810106e:	601a      	str	r2, [r3, #0]
 8101070:	605a      	str	r2, [r3, #4]
 8101072:	609a      	str	r2, [r3, #8]
 8101074:	60da      	str	r2, [r3, #12]
 8101076:	611a      	str	r2, [r3, #16]
 8101078:	615a      	str	r2, [r3, #20]
 810107a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 810107c:	4b1e      	ldr	r3, [pc, #120]	; (81010f8 <MX_FMC_Init+0x94>)
 810107e:	4a1f      	ldr	r2, [pc, #124]	; (81010fc <MX_FMC_Init+0x98>)
 8101080:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8101082:	4b1d      	ldr	r3, [pc, #116]	; (81010f8 <MX_FMC_Init+0x94>)
 8101084:	2201      	movs	r2, #1
 8101086:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8101088:	4b1b      	ldr	r3, [pc, #108]	; (81010f8 <MX_FMC_Init+0x94>)
 810108a:	2200      	movs	r2, #0
 810108c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 810108e:	4b1a      	ldr	r3, [pc, #104]	; (81010f8 <MX_FMC_Init+0x94>)
 8101090:	2208      	movs	r2, #8
 8101092:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8101094:	4b18      	ldr	r3, [pc, #96]	; (81010f8 <MX_FMC_Init+0x94>)
 8101096:	2220      	movs	r2, #32
 8101098:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 810109a:	4b17      	ldr	r3, [pc, #92]	; (81010f8 <MX_FMC_Init+0x94>)
 810109c:	2200      	movs	r2, #0
 810109e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 81010a0:	4b15      	ldr	r3, [pc, #84]	; (81010f8 <MX_FMC_Init+0x94>)
 81010a2:	2280      	movs	r2, #128	; 0x80
 81010a4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 81010a6:	4b14      	ldr	r3, [pc, #80]	; (81010f8 <MX_FMC_Init+0x94>)
 81010a8:	2200      	movs	r2, #0
 81010aa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 81010ac:	4b12      	ldr	r3, [pc, #72]	; (81010f8 <MX_FMC_Init+0x94>)
 81010ae:	2200      	movs	r2, #0
 81010b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 81010b2:	4b11      	ldr	r3, [pc, #68]	; (81010f8 <MX_FMC_Init+0x94>)
 81010b4:	2200      	movs	r2, #0
 81010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 81010b8:	4b0f      	ldr	r3, [pc, #60]	; (81010f8 <MX_FMC_Init+0x94>)
 81010ba:	2200      	movs	r2, #0
 81010bc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 81010be:	2310      	movs	r3, #16
 81010c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 81010c2:	2310      	movs	r3, #16
 81010c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 81010c6:	2310      	movs	r3, #16
 81010c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 81010ca:	2310      	movs	r3, #16
 81010cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 81010ce:	2310      	movs	r3, #16
 81010d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 81010d2:	2310      	movs	r3, #16
 81010d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 81010d6:	2310      	movs	r3, #16
 81010d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 81010da:	1d3b      	adds	r3, r7, #4
 81010dc:	4619      	mov	r1, r3
 81010de:	4806      	ldr	r0, [pc, #24]	; (81010f8 <MX_FMC_Init+0x94>)
 81010e0:	f006 f9b2 	bl	8107448 <HAL_SDRAM_Init>
 81010e4:	4603      	mov	r3, r0
 81010e6:	2b00      	cmp	r3, #0
 81010e8:	d001      	beq.n	81010ee <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 81010ea:	f000 f8b9 	bl	8101260 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 81010ee:	bf00      	nop
 81010f0:	3720      	adds	r7, #32
 81010f2:	46bd      	mov	sp, r7
 81010f4:	bd80      	pop	{r7, pc}
 81010f6:	bf00      	nop
 81010f8:	10000ad4 	.word	0x10000ad4
 81010fc:	52004140 	.word	0x52004140

08101100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101100:	b480      	push	{r7}
 8101102:	b08d      	sub	sp, #52	; 0x34
 8101104:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8101106:	4b55      	ldr	r3, [pc, #340]	; (810125c <MX_GPIO_Init+0x15c>)
 8101108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810110c:	4a53      	ldr	r2, [pc, #332]	; (810125c <MX_GPIO_Init+0x15c>)
 810110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101116:	4b51      	ldr	r3, [pc, #324]	; (810125c <MX_GPIO_Init+0x15c>)
 8101118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810111c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101124:	4b4d      	ldr	r3, [pc, #308]	; (810125c <MX_GPIO_Init+0x15c>)
 8101126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810112a:	4a4c      	ldr	r2, [pc, #304]	; (810125c <MX_GPIO_Init+0x15c>)
 810112c:	f043 0302 	orr.w	r3, r3, #2
 8101130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101134:	4b49      	ldr	r3, [pc, #292]	; (810125c <MX_GPIO_Init+0x15c>)
 8101136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810113a:	f003 0302 	and.w	r3, r3, #2
 810113e:	62bb      	str	r3, [r7, #40]	; 0x28
 8101140:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101142:	4b46      	ldr	r3, [pc, #280]	; (810125c <MX_GPIO_Init+0x15c>)
 8101144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101148:	4a44      	ldr	r2, [pc, #272]	; (810125c <MX_GPIO_Init+0x15c>)
 810114a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101152:	4b42      	ldr	r3, [pc, #264]	; (810125c <MX_GPIO_Init+0x15c>)
 8101154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810115c:	627b      	str	r3, [r7, #36]	; 0x24
 810115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101160:	4b3e      	ldr	r3, [pc, #248]	; (810125c <MX_GPIO_Init+0x15c>)
 8101162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101166:	4a3d      	ldr	r2, [pc, #244]	; (810125c <MX_GPIO_Init+0x15c>)
 8101168:	f043 0304 	orr.w	r3, r3, #4
 810116c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101170:	4b3a      	ldr	r3, [pc, #232]	; (810125c <MX_GPIO_Init+0x15c>)
 8101172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101176:	f003 0304 	and.w	r3, r3, #4
 810117a:	623b      	str	r3, [r7, #32]
 810117c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810117e:	4b37      	ldr	r3, [pc, #220]	; (810125c <MX_GPIO_Init+0x15c>)
 8101180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101184:	4a35      	ldr	r2, [pc, #212]	; (810125c <MX_GPIO_Init+0x15c>)
 8101186:	f043 0310 	orr.w	r3, r3, #16
 810118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810118e:	4b33      	ldr	r3, [pc, #204]	; (810125c <MX_GPIO_Init+0x15c>)
 8101190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101194:	f003 0310 	and.w	r3, r3, #16
 8101198:	61fb      	str	r3, [r7, #28]
 810119a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 810119c:	4b2f      	ldr	r3, [pc, #188]	; (810125c <MX_GPIO_Init+0x15c>)
 810119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011a2:	4a2e      	ldr	r2, [pc, #184]	; (810125c <MX_GPIO_Init+0x15c>)
 81011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011ac:	4b2b      	ldr	r3, [pc, #172]	; (810125c <MX_GPIO_Init+0x15c>)
 81011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81011b6:	61bb      	str	r3, [r7, #24]
 81011b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81011ba:	4b28      	ldr	r3, [pc, #160]	; (810125c <MX_GPIO_Init+0x15c>)
 81011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011c0:	4a26      	ldr	r2, [pc, #152]	; (810125c <MX_GPIO_Init+0x15c>)
 81011c2:	f043 0308 	orr.w	r3, r3, #8
 81011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011ca:	4b24      	ldr	r3, [pc, #144]	; (810125c <MX_GPIO_Init+0x15c>)
 81011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011d0:	f003 0308 	and.w	r3, r3, #8
 81011d4:	617b      	str	r3, [r7, #20]
 81011d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81011d8:	4b20      	ldr	r3, [pc, #128]	; (810125c <MX_GPIO_Init+0x15c>)
 81011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011de:	4a1f      	ldr	r2, [pc, #124]	; (810125c <MX_GPIO_Init+0x15c>)
 81011e0:	f043 0301 	orr.w	r3, r3, #1
 81011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011e8:	4b1c      	ldr	r3, [pc, #112]	; (810125c <MX_GPIO_Init+0x15c>)
 81011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ee:	f003 0301 	and.w	r3, r3, #1
 81011f2:	613b      	str	r3, [r7, #16]
 81011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81011f6:	4b19      	ldr	r3, [pc, #100]	; (810125c <MX_GPIO_Init+0x15c>)
 81011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011fc:	4a17      	ldr	r2, [pc, #92]	; (810125c <MX_GPIO_Init+0x15c>)
 81011fe:	f043 0320 	orr.w	r3, r3, #32
 8101202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101206:	4b15      	ldr	r3, [pc, #84]	; (810125c <MX_GPIO_Init+0x15c>)
 8101208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810120c:	f003 0320 	and.w	r3, r3, #32
 8101210:	60fb      	str	r3, [r7, #12]
 8101212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8101214:	4b11      	ldr	r3, [pc, #68]	; (810125c <MX_GPIO_Init+0x15c>)
 8101216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810121a:	4a10      	ldr	r2, [pc, #64]	; (810125c <MX_GPIO_Init+0x15c>)
 810121c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101224:	4b0d      	ldr	r3, [pc, #52]	; (810125c <MX_GPIO_Init+0x15c>)
 8101226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810122a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810122e:	60bb      	str	r3, [r7, #8]
 8101230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101232:	4b0a      	ldr	r3, [pc, #40]	; (810125c <MX_GPIO_Init+0x15c>)
 8101234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101238:	4a08      	ldr	r2, [pc, #32]	; (810125c <MX_GPIO_Init+0x15c>)
 810123a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101242:	4b06      	ldr	r3, [pc, #24]	; (810125c <MX_GPIO_Init+0x15c>)
 8101244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810124c:	607b      	str	r3, [r7, #4]
 810124e:	687b      	ldr	r3, [r7, #4]

}
 8101250:	bf00      	nop
 8101252:	3734      	adds	r7, #52	; 0x34
 8101254:	46bd      	mov	sp, r7
 8101256:	f85d 7b04 	ldr.w	r7, [sp], #4
 810125a:	4770      	bx	lr
 810125c:	58024400 	.word	0x58024400

08101260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101260:	b480      	push	{r7}
 8101262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8101264:	bf00      	nop
 8101266:	46bd      	mov	sp, r7
 8101268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810126c:	4770      	bx	lr
	...

08101270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101270:	b480      	push	{r7}
 8101272:	b083      	sub	sp, #12
 8101274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101276:	4b0a      	ldr	r3, [pc, #40]	; (81012a0 <HAL_MspInit+0x30>)
 8101278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810127c:	4a08      	ldr	r2, [pc, #32]	; (81012a0 <HAL_MspInit+0x30>)
 810127e:	f043 0302 	orr.w	r3, r3, #2
 8101282:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101286:	4b06      	ldr	r3, [pc, #24]	; (81012a0 <HAL_MspInit+0x30>)
 8101288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810128c:	f003 0302 	and.w	r3, r3, #2
 8101290:	607b      	str	r3, [r7, #4]
 8101292:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101294:	bf00      	nop
 8101296:	370c      	adds	r7, #12
 8101298:	46bd      	mov	sp, r7
 810129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810129e:	4770      	bx	lr
 81012a0:	58024400 	.word	0x58024400

081012a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81012a4:	b580      	push	{r7, lr}
 81012a6:	b08c      	sub	sp, #48	; 0x30
 81012a8:	af00      	add	r7, sp, #0
 81012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012ac:	f107 031c 	add.w	r3, r7, #28
 81012b0:	2200      	movs	r2, #0
 81012b2:	601a      	str	r2, [r3, #0]
 81012b4:	605a      	str	r2, [r3, #4]
 81012b6:	609a      	str	r2, [r3, #8]
 81012b8:	60da      	str	r2, [r3, #12]
 81012ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	681b      	ldr	r3, [r3, #0]
 81012c0:	4a3e      	ldr	r2, [pc, #248]	; (81013bc <HAL_ADC_MspInit+0x118>)
 81012c2:	4293      	cmp	r3, r2
 81012c4:	d12a      	bne.n	810131c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012c6:	4b3e      	ldr	r3, [pc, #248]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 81012c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012cc:	4a3c      	ldr	r2, [pc, #240]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 81012ce:	f043 0320 	orr.w	r3, r3, #32
 81012d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81012d6:	4b3a      	ldr	r3, [pc, #232]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 81012d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012dc:	f003 0320 	and.w	r3, r3, #32
 81012e0:	61bb      	str	r3, [r7, #24]
 81012e2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81012e4:	4b36      	ldr	r3, [pc, #216]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 81012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ea:	4a35      	ldr	r2, [pc, #212]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 81012ec:	f043 0301 	orr.w	r3, r3, #1
 81012f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012f4:	4b32      	ldr	r3, [pc, #200]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 81012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012fa:	f003 0301 	and.w	r3, r3, #1
 81012fe:	617b      	str	r3, [r7, #20]
 8101300:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1 
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101302:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8101306:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 810130a:	f001 f841 	bl	8102390 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 810130e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8101312:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8101316:	f001 f83b 	bl	8102390 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 810131a:	e04a      	b.n	81013b2 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	681b      	ldr	r3, [r3, #0]
 8101320:	4a28      	ldr	r2, [pc, #160]	; (81013c4 <HAL_ADC_MspInit+0x120>)
 8101322:	4293      	cmp	r3, r2
 8101324:	d145      	bne.n	81013b2 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101326:	4b26      	ldr	r3, [pc, #152]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 8101328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810132c:	4a24      	ldr	r2, [pc, #144]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 810132e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8101332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101336:	4b22      	ldr	r3, [pc, #136]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 8101338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810133c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101340:	613b      	str	r3, [r7, #16]
 8101342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101344:	4b1e      	ldr	r3, [pc, #120]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 8101346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810134a:	4a1d      	ldr	r2, [pc, #116]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 810134c:	f043 0320 	orr.w	r3, r3, #32
 8101350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101354:	4b1a      	ldr	r3, [pc, #104]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 8101356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810135a:	f003 0320 	and.w	r3, r3, #32
 810135e:	60fb      	str	r3, [r7, #12]
 8101360:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101362:	4b17      	ldr	r3, [pc, #92]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 8101364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101368:	4a15      	ldr	r2, [pc, #84]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 810136a:	f043 0304 	orr.w	r3, r3, #4
 810136e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101372:	4b13      	ldr	r3, [pc, #76]	; (81013c0 <HAL_ADC_MspInit+0x11c>)
 8101374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101378:	f003 0304 	and.w	r3, r3, #4
 810137c:	60bb      	str	r3, [r7, #8]
 810137e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8101380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101386:	2303      	movs	r3, #3
 8101388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810138a:	2300      	movs	r3, #0
 810138c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 810138e:	f107 031c 	add.w	r3, r7, #28
 8101392:	4619      	mov	r1, r3
 8101394:	480c      	ldr	r0, [pc, #48]	; (81013c8 <HAL_ADC_MspInit+0x124>)
 8101396:	f002 fee5 	bl	8104164 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 810139a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 810139e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 81013a2:	f000 fff5 	bl	8102390 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81013a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 81013aa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 81013ae:	f000 ffef 	bl	8102390 <HAL_SYSCFG_AnalogSwitchConfig>
}
 81013b2:	bf00      	nop
 81013b4:	3730      	adds	r7, #48	; 0x30
 81013b6:	46bd      	mov	sp, r7
 81013b8:	bd80      	pop	{r7, pc}
 81013ba:	bf00      	nop
 81013bc:	40022000 	.word	0x40022000
 81013c0:	58024400 	.word	0x58024400
 81013c4:	58026000 	.word	0x58026000
 81013c8:	58021400 	.word	0x58021400

081013cc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 81013cc:	b580      	push	{r7, lr}
 81013ce:	b08e      	sub	sp, #56	; 0x38
 81013d0:	af00      	add	r7, sp, #0
 81013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81013d8:	2200      	movs	r2, #0
 81013da:	601a      	str	r2, [r3, #0]
 81013dc:	605a      	str	r2, [r3, #4]
 81013de:	609a      	str	r2, [r3, #8]
 81013e0:	60da      	str	r2, [r3, #12]
 81013e2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	681b      	ldr	r3, [r3, #0]
 81013e8:	4a49      	ldr	r2, [pc, #292]	; (8101510 <HAL_ETH_MspInit+0x144>)
 81013ea:	4293      	cmp	r3, r2
 81013ec:	f040 808b 	bne.w	8101506 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81013f0:	4b48      	ldr	r3, [pc, #288]	; (8101514 <HAL_ETH_MspInit+0x148>)
 81013f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81013f6:	4a47      	ldr	r2, [pc, #284]	; (8101514 <HAL_ETH_MspInit+0x148>)
 81013f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81013fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101400:	4b44      	ldr	r3, [pc, #272]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810140a:	623b      	str	r3, [r7, #32]
 810140c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 810140e:	4b41      	ldr	r3, [pc, #260]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101414:	4a3f      	ldr	r2, [pc, #252]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810141a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810141e:	4b3d      	ldr	r3, [pc, #244]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101428:	61fb      	str	r3, [r7, #28]
 810142a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 810142c:	4b39      	ldr	r3, [pc, #228]	; (8101514 <HAL_ETH_MspInit+0x148>)
 810142e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101432:	4a38      	ldr	r2, [pc, #224]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101438:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810143c:	4b35      	ldr	r3, [pc, #212]	; (8101514 <HAL_ETH_MspInit+0x148>)
 810143e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101446:	61bb      	str	r3, [r7, #24]
 8101448:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 810144a:	4b32      	ldr	r3, [pc, #200]	; (8101514 <HAL_ETH_MspInit+0x148>)
 810144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101450:	4a30      	ldr	r2, [pc, #192]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810145a:	4b2e      	ldr	r3, [pc, #184]	; (8101514 <HAL_ETH_MspInit+0x148>)
 810145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101464:	617b      	str	r3, [r7, #20]
 8101466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101468:	4b2a      	ldr	r3, [pc, #168]	; (8101514 <HAL_ETH_MspInit+0x148>)
 810146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810146e:	4a29      	ldr	r2, [pc, #164]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101470:	f043 0304 	orr.w	r3, r3, #4
 8101474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101478:	4b26      	ldr	r3, [pc, #152]	; (8101514 <HAL_ETH_MspInit+0x148>)
 810147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810147e:	f003 0304 	and.w	r3, r3, #4
 8101482:	613b      	str	r3, [r7, #16]
 8101484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101486:	4b23      	ldr	r3, [pc, #140]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810148c:	4a21      	ldr	r2, [pc, #132]	; (8101514 <HAL_ETH_MspInit+0x148>)
 810148e:	f043 0301 	orr.w	r3, r3, #1
 8101492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101496:	4b1f      	ldr	r3, [pc, #124]	; (8101514 <HAL_ETH_MspInit+0x148>)
 8101498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810149c:	f003 0301 	and.w	r3, r3, #1
 81014a0:	60fb      	str	r3, [r7, #12]
 81014a2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1 
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 81014a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 81014a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014aa:	2302      	movs	r3, #2
 81014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ae:	2300      	movs	r3, #0
 81014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014b2:	2300      	movs	r3, #0
 81014b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81014b6:	230b      	movs	r3, #11
 81014b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014be:	4619      	mov	r1, r3
 81014c0:	4815      	ldr	r0, [pc, #84]	; (8101518 <HAL_ETH_MspInit+0x14c>)
 81014c2:	f002 fe4f 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 81014c6:	2332      	movs	r3, #50	; 0x32
 81014c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014ca:	2302      	movs	r3, #2
 81014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ce:	2300      	movs	r3, #0
 81014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014d2:	2300      	movs	r3, #0
 81014d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81014d6:	230b      	movs	r3, #11
 81014d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014de:	4619      	mov	r1, r3
 81014e0:	480e      	ldr	r0, [pc, #56]	; (810151c <HAL_ETH_MspInit+0x150>)
 81014e2:	f002 fe3f 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 81014e6:	2386      	movs	r3, #134	; 0x86
 81014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014ea:	2302      	movs	r3, #2
 81014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ee:	2300      	movs	r3, #0
 81014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014f2:	2300      	movs	r3, #0
 81014f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81014f6:	230b      	movs	r3, #11
 81014f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014fe:	4619      	mov	r1, r3
 8101500:	4807      	ldr	r0, [pc, #28]	; (8101520 <HAL_ETH_MspInit+0x154>)
 8101502:	f002 fe2f 	bl	8104164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8101506:	bf00      	nop
 8101508:	3738      	adds	r7, #56	; 0x38
 810150a:	46bd      	mov	sp, r7
 810150c:	bd80      	pop	{r7, pc}
 810150e:	bf00      	nop
 8101510:	40028000 	.word	0x40028000
 8101514:	58024400 	.word	0x58024400
 8101518:	58021800 	.word	0x58021800
 810151c:	58020800 	.word	0x58020800
 8101520:	58020000 	.word	0x58020000

08101524 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101524:	b580      	push	{r7, lr}
 8101526:	b08a      	sub	sp, #40	; 0x28
 8101528:	af00      	add	r7, sp, #0
 810152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810152c:	f107 0314 	add.w	r3, r7, #20
 8101530:	2200      	movs	r2, #0
 8101532:	601a      	str	r2, [r3, #0]
 8101534:	605a      	str	r2, [r3, #4]
 8101536:	609a      	str	r2, [r3, #8]
 8101538:	60da      	str	r2, [r3, #12]
 810153a:	611a      	str	r2, [r3, #16]
  if(hcec->Instance==CEC)
 810153c:	687b      	ldr	r3, [r7, #4]
 810153e:	681b      	ldr	r3, [r3, #0]
 8101540:	4a1e      	ldr	r2, [pc, #120]	; (81015bc <HAL_CEC_MspInit+0x98>)
 8101542:	4293      	cmp	r3, r2
 8101544:	d135      	bne.n	81015b2 <HAL_CEC_MspInit+0x8e>
  {
  /* USER CODE BEGIN CEC_MspInit 0 */

  /* USER CODE END CEC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8101546:	4b1e      	ldr	r3, [pc, #120]	; (81015c0 <HAL_CEC_MspInit+0x9c>)
 8101548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810154c:	4a1c      	ldr	r2, [pc, #112]	; (81015c0 <HAL_CEC_MspInit+0x9c>)
 810154e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8101552:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101556:	4b1a      	ldr	r3, [pc, #104]	; (81015c0 <HAL_CEC_MspInit+0x9c>)
 8101558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810155c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101560:	613b      	str	r3, [r7, #16]
 8101562:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101564:	4b16      	ldr	r3, [pc, #88]	; (81015c0 <HAL_CEC_MspInit+0x9c>)
 8101566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810156a:	4a15      	ldr	r2, [pc, #84]	; (81015c0 <HAL_CEC_MspInit+0x9c>)
 810156c:	f043 0302 	orr.w	r3, r3, #2
 8101570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101574:	4b12      	ldr	r3, [pc, #72]	; (81015c0 <HAL_CEC_MspInit+0x9c>)
 8101576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810157a:	f003 0302 	and.w	r3, r3, #2
 810157e:	60fb      	str	r3, [r7, #12]
 8101580:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration    
    PB6     ------> CEC 
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8101582:	2340      	movs	r3, #64	; 0x40
 8101584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101586:	2312      	movs	r3, #18
 8101588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810158a:	2300      	movs	r3, #0
 810158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810158e:	2300      	movs	r3, #0
 8101590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101592:	2305      	movs	r3, #5
 8101594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8101596:	f107 0314 	add.w	r3, r7, #20
 810159a:	4619      	mov	r1, r3
 810159c:	4809      	ldr	r0, [pc, #36]	; (81015c4 <HAL_CEC_MspInit+0xa0>)
 810159e:	f002 fde1 	bl	8104164 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 81015a2:	2200      	movs	r2, #0
 81015a4:	2100      	movs	r1, #0
 81015a6:	205e      	movs	r0, #94	; 0x5e
 81015a8:	f002 f97d 	bl	81038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 81015ac:	205e      	movs	r0, #94	; 0x5e
 81015ae:	f002 f994 	bl	81038da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 81015b2:	bf00      	nop
 81015b4:	3728      	adds	r7, #40	; 0x28
 81015b6:	46bd      	mov	sp, r7
 81015b8:	bd80      	pop	{r7, pc}
 81015ba:	bf00      	nop
 81015bc:	40006c00 	.word	0x40006c00
 81015c0:	58024400 	.word	0x58024400
 81015c4:	58020400 	.word	0x58020400

081015c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 81015c8:	b580      	push	{r7, lr}
 81015ca:	b08e      	sub	sp, #56	; 0x38
 81015cc:	af00      	add	r7, sp, #0
 81015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015d4:	2200      	movs	r2, #0
 81015d6:	601a      	str	r2, [r3, #0]
 81015d8:	605a      	str	r2, [r3, #4]
 81015da:	609a      	str	r2, [r3, #8]
 81015dc:	60da      	str	r2, [r3, #12]
 81015de:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 81015e0:	687b      	ldr	r3, [r7, #4]
 81015e2:	681b      	ldr	r3, [r3, #0]
 81015e4:	4a6a      	ldr	r2, [pc, #424]	; (8101790 <HAL_QSPI_MspInit+0x1c8>)
 81015e6:	4293      	cmp	r3, r2
 81015e8:	f040 80cd 	bne.w	8101786 <HAL_QSPI_MspInit+0x1be>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 81015ec:	4b69      	ldr	r3, [pc, #420]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 81015ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81015f2:	4a68      	ldr	r2, [pc, #416]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 81015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81015f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 81015fc:	4b65      	ldr	r3, [pc, #404]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 81015fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101606:	623b      	str	r3, [r7, #32]
 8101608:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 810160a:	4b62      	ldr	r3, [pc, #392]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 810160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101610:	4a60      	ldr	r2, [pc, #384]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 8101612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810161a:	4b5e      	ldr	r3, [pc, #376]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 810161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101624:	61fb      	str	r3, [r7, #28]
 8101626:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101628:	4b5a      	ldr	r3, [pc, #360]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 810162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810162e:	4a59      	ldr	r2, [pc, #356]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 8101630:	f043 0320 	orr.w	r3, r3, #32
 8101634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101638:	4b56      	ldr	r3, [pc, #344]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 810163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810163e:	f003 0320 	and.w	r3, r3, #32
 8101642:	61bb      	str	r3, [r7, #24]
 8101644:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101646:	4b53      	ldr	r3, [pc, #332]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 8101648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810164c:	4a51      	ldr	r2, [pc, #324]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 810164e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101656:	4b4f      	ldr	r3, [pc, #316]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 8101658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810165c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101660:	617b      	str	r3, [r7, #20]
 8101662:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101664:	4b4b      	ldr	r3, [pc, #300]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 8101666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810166a:	4a4a      	ldr	r2, [pc, #296]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 810166c:	f043 0302 	orr.w	r3, r3, #2
 8101670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101674:	4b47      	ldr	r3, [pc, #284]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 8101676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810167a:	f003 0302 	and.w	r3, r3, #2
 810167e:	613b      	str	r3, [r7, #16]
 8101680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101682:	4b44      	ldr	r3, [pc, #272]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 8101684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101688:	4a42      	ldr	r2, [pc, #264]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 810168a:	f043 0308 	orr.w	r3, r3, #8
 810168e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101692:	4b40      	ldr	r3, [pc, #256]	; (8101794 <HAL_QSPI_MspInit+0x1cc>)
 8101694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101698:	f003 0308 	and.w	r3, r3, #8
 810169c:	60fb      	str	r3, [r7, #12]
 810169e:	68fb      	ldr	r3, [r7, #12]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 81016a0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 81016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016a6:	2302      	movs	r3, #2
 81016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016aa:	2300      	movs	r3, #0
 81016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016ae:	2300      	movs	r3, #0
 81016b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81016b2:	2309      	movs	r3, #9
 81016b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81016ba:	4619      	mov	r1, r3
 81016bc:	4836      	ldr	r0, [pc, #216]	; (8101798 <HAL_QSPI_MspInit+0x1d0>)
 81016be:	f002 fd51 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 81016c2:	2340      	movs	r3, #64	; 0x40
 81016c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016c6:	2302      	movs	r3, #2
 81016c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016ca:	2300      	movs	r3, #0
 81016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016ce:	2300      	movs	r3, #0
 81016d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81016d2:	230a      	movs	r3, #10
 81016d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 81016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81016da:	4619      	mov	r1, r3
 81016dc:	482e      	ldr	r0, [pc, #184]	; (8101798 <HAL_QSPI_MspInit+0x1d0>)
 81016de:	f002 fd41 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 81016e2:	23c0      	movs	r3, #192	; 0xc0
 81016e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016e6:	2302      	movs	r3, #2
 81016e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016ea:	2300      	movs	r3, #0
 81016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016ee:	2300      	movs	r3, #0
 81016f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81016f2:	2309      	movs	r3, #9
 81016f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81016fa:	4619      	mov	r1, r3
 81016fc:	4827      	ldr	r0, [pc, #156]	; (810179c <HAL_QSPI_MspInit+0x1d4>)
 81016fe:	f002 fd31 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8101702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101708:	2302      	movs	r3, #2
 810170a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810170c:	2300      	movs	r3, #0
 810170e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101710:	2300      	movs	r3, #0
 8101712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101714:	230a      	movs	r3, #10
 8101716:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8101718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810171c:	4619      	mov	r1, r3
 810171e:	481f      	ldr	r0, [pc, #124]	; (810179c <HAL_QSPI_MspInit+0x1d4>)
 8101720:	f002 fd20 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8101724:	230c      	movs	r3, #12
 8101726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101728:	2302      	movs	r3, #2
 810172a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810172c:	2300      	movs	r3, #0
 810172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101730:	2300      	movs	r3, #0
 8101732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101734:	2309      	movs	r3, #9
 8101736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810173c:	4619      	mov	r1, r3
 810173e:	4818      	ldr	r0, [pc, #96]	; (81017a0 <HAL_QSPI_MspInit+0x1d8>)
 8101740:	f002 fd10 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8101744:	2304      	movs	r3, #4
 8101746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101748:	2302      	movs	r3, #2
 810174a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810174c:	2300      	movs	r3, #0
 810174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101750:	2300      	movs	r3, #0
 8101752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101754:	2309      	movs	r3, #9
 8101756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8101758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810175c:	4619      	mov	r1, r3
 810175e:	4811      	ldr	r0, [pc, #68]	; (81017a4 <HAL_QSPI_MspInit+0x1dc>)
 8101760:	f002 fd00 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8101764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810176a:	2302      	movs	r3, #2
 810176c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810176e:	2300      	movs	r3, #0
 8101770:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101772:	2300      	movs	r3, #0
 8101774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101776:	2309      	movs	r3, #9
 8101778:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 810177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810177e:	4619      	mov	r1, r3
 8101780:	4809      	ldr	r0, [pc, #36]	; (81017a8 <HAL_QSPI_MspInit+0x1e0>)
 8101782:	f002 fcef 	bl	8104164 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8101786:	bf00      	nop
 8101788:	3738      	adds	r7, #56	; 0x38
 810178a:	46bd      	mov	sp, r7
 810178c:	bd80      	pop	{r7, pc}
 810178e:	bf00      	nop
 8101790:	52005000 	.word	0x52005000
 8101794:	58024400 	.word	0x58024400
 8101798:	58021800 	.word	0x58021800
 810179c:	58021400 	.word	0x58021400
 81017a0:	58021c00 	.word	0x58021c00
 81017a4:	58020400 	.word	0x58020400
 81017a8:	58020c00 	.word	0x58020c00

081017ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 81017ac:	b480      	push	{r7}
 81017ae:	b083      	sub	sp, #12
 81017b0:	af00      	add	r7, sp, #0
 81017b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	681b      	ldr	r3, [r3, #0]
 81017b8:	4a07      	ldr	r2, [pc, #28]	; (81017d8 <HAL_RTC_MspInit+0x2c>)
 81017ba:	4293      	cmp	r3, r2
 81017bc:	d105      	bne.n	81017ca <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 81017be:	4b07      	ldr	r3, [pc, #28]	; (81017dc <HAL_RTC_MspInit+0x30>)
 81017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81017c2:	4a06      	ldr	r2, [pc, #24]	; (81017dc <HAL_RTC_MspInit+0x30>)
 81017c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81017c8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 81017ca:	bf00      	nop
 81017cc:	370c      	adds	r7, #12
 81017ce:	46bd      	mov	sp, r7
 81017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017d4:	4770      	bx	lr
 81017d6:	bf00      	nop
 81017d8:	58004000 	.word	0x58004000
 81017dc:	58024400 	.word	0x58024400

081017e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 81017e0:	b580      	push	{r7, lr}
 81017e2:	b08a      	sub	sp, #40	; 0x28
 81017e4:	af00      	add	r7, sp, #0
 81017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017e8:	f107 0314 	add.w	r3, r7, #20
 81017ec:	2200      	movs	r2, #0
 81017ee:	601a      	str	r2, [r3, #0]
 81017f0:	605a      	str	r2, [r3, #4]
 81017f2:	609a      	str	r2, [r3, #8]
 81017f4:	60da      	str	r2, [r3, #12]
 81017f6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 81017f8:	687b      	ldr	r3, [r7, #4]
 81017fa:	681b      	ldr	r3, [r3, #0]
 81017fc:	4a2a      	ldr	r2, [pc, #168]	; (81018a8 <HAL_SD_MspInit+0xc8>)
 81017fe:	4293      	cmp	r3, r2
 8101800:	d14d      	bne.n	810189e <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101802:	4b2a      	ldr	r3, [pc, #168]	; (81018ac <HAL_SD_MspInit+0xcc>)
 8101804:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101808:	4a28      	ldr	r2, [pc, #160]	; (81018ac <HAL_SD_MspInit+0xcc>)
 810180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810180e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101812:	4b26      	ldr	r3, [pc, #152]	; (81018ac <HAL_SD_MspInit+0xcc>)
 8101814:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810181c:	613b      	str	r3, [r7, #16]
 810181e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101820:	4b22      	ldr	r3, [pc, #136]	; (81018ac <HAL_SD_MspInit+0xcc>)
 8101822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101826:	4a21      	ldr	r2, [pc, #132]	; (81018ac <HAL_SD_MspInit+0xcc>)
 8101828:	f043 0304 	orr.w	r3, r3, #4
 810182c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101830:	4b1e      	ldr	r3, [pc, #120]	; (81018ac <HAL_SD_MspInit+0xcc>)
 8101832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101836:	f003 0304 	and.w	r3, r3, #4
 810183a:	60fb      	str	r3, [r7, #12]
 810183c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810183e:	4b1b      	ldr	r3, [pc, #108]	; (81018ac <HAL_SD_MspInit+0xcc>)
 8101840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101844:	4a19      	ldr	r2, [pc, #100]	; (81018ac <HAL_SD_MspInit+0xcc>)
 8101846:	f043 0308 	orr.w	r3, r3, #8
 810184a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810184e:	4b17      	ldr	r3, [pc, #92]	; (81018ac <HAL_SD_MspInit+0xcc>)
 8101850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101854:	f003 0308 	and.w	r3, r3, #8
 8101858:	60bb      	str	r3, [r7, #8]
 810185a:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1 
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin 
 810185c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8101860:	617b      	str	r3, [r7, #20]
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101862:	2302      	movs	r3, #2
 8101864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101866:	2300      	movs	r3, #0
 8101868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810186a:	2303      	movs	r3, #3
 810186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810186e:	230c      	movs	r3, #12
 8101870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101872:	f107 0314 	add.w	r3, r7, #20
 8101876:	4619      	mov	r1, r3
 8101878:	480d      	ldr	r0, [pc, #52]	; (81018b0 <HAL_SD_MspInit+0xd0>)
 810187a:	f002 fc73 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 810187e:	2304      	movs	r3, #4
 8101880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101882:	2302      	movs	r3, #2
 8101884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101886:	2300      	movs	r3, #0
 8101888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810188a:	2303      	movs	r3, #3
 810188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810188e:	230c      	movs	r3, #12
 8101890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101892:	f107 0314 	add.w	r3, r7, #20
 8101896:	4619      	mov	r1, r3
 8101898:	4806      	ldr	r0, [pc, #24]	; (81018b4 <HAL_SD_MspInit+0xd4>)
 810189a:	f002 fc63 	bl	8104164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 810189e:	bf00      	nop
 81018a0:	3728      	adds	r7, #40	; 0x28
 81018a2:	46bd      	mov	sp, r7
 81018a4:	bd80      	pop	{r7, pc}
 81018a6:	bf00      	nop
 81018a8:	52007000 	.word	0x52007000
 81018ac:	58024400 	.word	0x58024400
 81018b0:	58020800 	.word	0x58020800
 81018b4:	58020c00 	.word	0x58020c00

081018b8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	b08a      	sub	sp, #40	; 0x28
 81018bc:	af00      	add	r7, sp, #0
 81018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018c0:	f107 0314 	add.w	r3, r7, #20
 81018c4:	2200      	movs	r2, #0
 81018c6:	601a      	str	r2, [r3, #0]
 81018c8:	605a      	str	r2, [r3, #4]
 81018ca:	609a      	str	r2, [r3, #8]
 81018cc:	60da      	str	r2, [r3, #12]
 81018ce:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	681b      	ldr	r3, [r3, #0]
 81018d4:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 81018d8:	d12d      	bne.n	8101936 <HAL_SPDIFRX_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 81018da:	4b19      	ldr	r3, [pc, #100]	; (8101940 <HAL_SPDIFRX_MspInit+0x88>)
 81018dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018e0:	4a17      	ldr	r2, [pc, #92]	; (8101940 <HAL_SPDIFRX_MspInit+0x88>)
 81018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81018e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81018ea:	4b15      	ldr	r3, [pc, #84]	; (8101940 <HAL_SPDIFRX_MspInit+0x88>)
 81018ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81018f4:	613b      	str	r3, [r7, #16]
 81018f6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81018f8:	4b11      	ldr	r3, [pc, #68]	; (8101940 <HAL_SPDIFRX_MspInit+0x88>)
 81018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018fe:	4a10      	ldr	r2, [pc, #64]	; (8101940 <HAL_SPDIFRX_MspInit+0x88>)
 8101900:	f043 0308 	orr.w	r3, r3, #8
 8101904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101908:	4b0d      	ldr	r3, [pc, #52]	; (8101940 <HAL_SPDIFRX_MspInit+0x88>)
 810190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810190e:	f003 0308 	and.w	r3, r3, #8
 8101912:	60fb      	str	r3, [r7, #12]
 8101914:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX1 GPIO Configuration    
    PD7     ------> SPDIFRX1_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101916:	2380      	movs	r3, #128	; 0x80
 8101918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810191a:	2302      	movs	r3, #2
 810191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810191e:	2300      	movs	r3, #0
 8101920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101922:	2300      	movs	r3, #0
 8101924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101926:	2309      	movs	r3, #9
 8101928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 810192a:	f107 0314 	add.w	r3, r7, #20
 810192e:	4619      	mov	r1, r3
 8101930:	4804      	ldr	r0, [pc, #16]	; (8101944 <HAL_SPDIFRX_MspInit+0x8c>)
 8101932:	f002 fc17 	bl	8104164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8101936:	bf00      	nop
 8101938:	3728      	adds	r7, #40	; 0x28
 810193a:	46bd      	mov	sp, r7
 810193c:	bd80      	pop	{r7, pc}
 810193e:	bf00      	nop
 8101940:	58024400 	.word	0x58024400
 8101944:	58020c00 	.word	0x58020c00

08101948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101948:	b580      	push	{r7, lr}
 810194a:	b08e      	sub	sp, #56	; 0x38
 810194c:	af00      	add	r7, sp, #0
 810194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101954:	2200      	movs	r2, #0
 8101956:	601a      	str	r2, [r3, #0]
 8101958:	605a      	str	r2, [r3, #4]
 810195a:	609a      	str	r2, [r3, #8]
 810195c:	60da      	str	r2, [r3, #12]
 810195e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	4a54      	ldr	r2, [pc, #336]	; (8101ab8 <HAL_SPI_MspInit+0x170>)
 8101966:	4293      	cmp	r3, r2
 8101968:	d14e      	bne.n	8101a08 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 810196a:	4b54      	ldr	r3, [pc, #336]	; (8101abc <HAL_SPI_MspInit+0x174>)
 810196c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101970:	4a52      	ldr	r2, [pc, #328]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101976:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810197a:	4b50      	ldr	r3, [pc, #320]	; (8101abc <HAL_SPI_MspInit+0x174>)
 810197c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101984:	623b      	str	r3, [r7, #32]
 8101986:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101988:	4b4c      	ldr	r3, [pc, #304]	; (8101abc <HAL_SPI_MspInit+0x174>)
 810198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810198e:	4a4b      	ldr	r2, [pc, #300]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101990:	f043 0301 	orr.w	r3, r3, #1
 8101994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101998:	4b48      	ldr	r3, [pc, #288]	; (8101abc <HAL_SPI_MspInit+0x174>)
 810199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810199e:	f003 0301 	and.w	r3, r3, #1
 81019a2:	61fb      	str	r3, [r7, #28]
 81019a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81019a6:	4b45      	ldr	r3, [pc, #276]	; (8101abc <HAL_SPI_MspInit+0x174>)
 81019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ac:	4a43      	ldr	r2, [pc, #268]	; (8101abc <HAL_SPI_MspInit+0x174>)
 81019ae:	f043 0304 	orr.w	r3, r3, #4
 81019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019b6:	4b41      	ldr	r3, [pc, #260]	; (8101abc <HAL_SPI_MspInit+0x174>)
 81019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019bc:	f003 0304 	and.w	r3, r3, #4
 81019c0:	61bb      	str	r3, [r7, #24]
 81019c2:	69bb      	ldr	r3, [r7, #24]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|PMOD_1_Pin;
 81019c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81019c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019ca:	2302      	movs	r3, #2
 81019cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019ce:	2300      	movs	r3, #0
 81019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019d2:	2300      	movs	r3, #0
 81019d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 81019d6:	2305      	movs	r3, #5
 81019d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81019de:	4619      	mov	r1, r3
 81019e0:	4837      	ldr	r0, [pc, #220]	; (8101ac0 <HAL_SPI_MspInit+0x178>)
 81019e2:	f002 fbbf 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 81019e6:	230c      	movs	r3, #12
 81019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019ea:	2302      	movs	r3, #2
 81019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019ee:	2300      	movs	r3, #0
 81019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019f2:	2300      	movs	r3, #0
 81019f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 81019f6:	2305      	movs	r3, #5
 81019f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81019fe:	4619      	mov	r1, r3
 8101a00:	4830      	ldr	r0, [pc, #192]	; (8101ac4 <HAL_SPI_MspInit+0x17c>)
 8101a02:	f002 fbaf 	bl	8104164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101a06:	e052      	b.n	8101aae <HAL_SPI_MspInit+0x166>
  else if(hspi->Instance==SPI5)
 8101a08:	687b      	ldr	r3, [r7, #4]
 8101a0a:	681b      	ldr	r3, [r3, #0]
 8101a0c:	4a2e      	ldr	r2, [pc, #184]	; (8101ac8 <HAL_SPI_MspInit+0x180>)
 8101a0e:	4293      	cmp	r3, r2
 8101a10:	d14d      	bne.n	8101aae <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101a12:	4b2a      	ldr	r3, [pc, #168]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a18:	4a28      	ldr	r2, [pc, #160]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101a1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101a22:	4b26      	ldr	r3, [pc, #152]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101a2c:	617b      	str	r3, [r7, #20]
 8101a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101a30:	4b22      	ldr	r3, [pc, #136]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a36:	4a21      	ldr	r2, [pc, #132]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a40:	4b1e      	ldr	r3, [pc, #120]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101a4a:	613b      	str	r3, [r7, #16]
 8101a4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101a4e:	4b1b      	ldr	r3, [pc, #108]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a54:	4a19      	ldr	r2, [pc, #100]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a5e:	4b17      	ldr	r3, [pc, #92]	; (8101abc <HAL_SPI_MspInit+0x174>)
 8101a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101a68:	60fb      	str	r3, [r7, #12]
 8101a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101a6c:	2303      	movs	r3, #3
 8101a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a70:	2302      	movs	r3, #2
 8101a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a74:	2300      	movs	r3, #0
 8101a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a78:	2300      	movs	r3, #0
 8101a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101a7c:	2305      	movs	r3, #5
 8101a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101a84:	4619      	mov	r1, r3
 8101a86:	4811      	ldr	r0, [pc, #68]	; (8101acc <HAL_SPI_MspInit+0x184>)
 8101a88:	f002 fb6c 	bl	8104164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101a8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a92:	2302      	movs	r3, #2
 8101a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a96:	2300      	movs	r3, #0
 8101a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a9a:	2300      	movs	r3, #0
 8101a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101a9e:	2305      	movs	r3, #5
 8101aa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101aa6:	4619      	mov	r1, r3
 8101aa8:	4809      	ldr	r0, [pc, #36]	; (8101ad0 <HAL_SPI_MspInit+0x188>)
 8101aaa:	f002 fb5b 	bl	8104164 <HAL_GPIO_Init>
}
 8101aae:	bf00      	nop
 8101ab0:	3738      	adds	r7, #56	; 0x38
 8101ab2:	46bd      	mov	sp, r7
 8101ab4:	bd80      	pop	{r7, pc}
 8101ab6:	bf00      	nop
 8101ab8:	40003800 	.word	0x40003800
 8101abc:	58024400 	.word	0x58024400
 8101ac0:	58020000 	.word	0x58020000
 8101ac4:	58020800 	.word	0x58020800
 8101ac8:	40015000 	.word	0x40015000
 8101acc:	58022800 	.word	0x58022800
 8101ad0:	58022400 	.word	0x58022400

08101ad4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8101ad4:	b480      	push	{r7}
 8101ad6:	b085      	sub	sp, #20
 8101ad8:	af00      	add	r7, sp, #0
 8101ada:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8101adc:	687b      	ldr	r3, [r7, #4]
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	4a0b      	ldr	r2, [pc, #44]	; (8101b10 <HAL_TIM_OC_MspInit+0x3c>)
 8101ae2:	4293      	cmp	r3, r2
 8101ae4:	d10e      	bne.n	8101b04 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101ae6:	4b0b      	ldr	r3, [pc, #44]	; (8101b14 <HAL_TIM_OC_MspInit+0x40>)
 8101ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101aec:	4a09      	ldr	r2, [pc, #36]	; (8101b14 <HAL_TIM_OC_MspInit+0x40>)
 8101aee:	f043 0302 	orr.w	r3, r3, #2
 8101af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101af6:	4b07      	ldr	r3, [pc, #28]	; (8101b14 <HAL_TIM_OC_MspInit+0x40>)
 8101af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101afc:	f003 0302 	and.w	r3, r3, #2
 8101b00:	60fb      	str	r3, [r7, #12]
 8101b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8101b04:	bf00      	nop
 8101b06:	3714      	adds	r7, #20
 8101b08:	46bd      	mov	sp, r7
 8101b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b0e:	4770      	bx	lr
 8101b10:	40010400 	.word	0x40010400
 8101b14:	58024400 	.word	0x58024400

08101b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b08a      	sub	sp, #40	; 0x28
 8101b1c:	af00      	add	r7, sp, #0
 8101b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b20:	f107 0314 	add.w	r3, r7, #20
 8101b24:	2200      	movs	r2, #0
 8101b26:	601a      	str	r2, [r3, #0]
 8101b28:	605a      	str	r2, [r3, #4]
 8101b2a:	609a      	str	r2, [r3, #8]
 8101b2c:	60da      	str	r2, [r3, #12]
 8101b2e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8101b30:	687b      	ldr	r3, [r7, #4]
 8101b32:	681b      	ldr	r3, [r3, #0]
 8101b34:	4a1a      	ldr	r2, [pc, #104]	; (8101ba0 <HAL_TIM_Base_MspInit+0x88>)
 8101b36:	4293      	cmp	r3, r2
 8101b38:	d12e      	bne.n	8101b98 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101b3a:	4b1a      	ldr	r3, [pc, #104]	; (8101ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8101b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b40:	4a18      	ldr	r2, [pc, #96]	; (8101ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8101b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101b46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b4a:	4b16      	ldr	r3, [pc, #88]	; (8101ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8101b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101b54:	613b      	str	r3, [r7, #16]
 8101b56:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101b58:	4b12      	ldr	r3, [pc, #72]	; (8101ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8101b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b5e:	4a11      	ldr	r2, [pc, #68]	; (8101ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8101b60:	f043 0320 	orr.w	r3, r3, #32
 8101b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b68:	4b0e      	ldr	r3, [pc, #56]	; (8101ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8101b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b6e:	f003 0320 	and.w	r3, r3, #32
 8101b72:	60fb      	str	r3, [r7, #12]
 8101b74:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration    
    PF8     ------> TIM13_CH1 
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8101b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b7c:	2302      	movs	r3, #2
 8101b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b80:	2300      	movs	r3, #0
 8101b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b84:	2300      	movs	r3, #0
 8101b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8101b88:	2309      	movs	r3, #9
 8101b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8101b8c:	f107 0314 	add.w	r3, r7, #20
 8101b90:	4619      	mov	r1, r3
 8101b92:	4805      	ldr	r0, [pc, #20]	; (8101ba8 <HAL_TIM_Base_MspInit+0x90>)
 8101b94:	f002 fae6 	bl	8104164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8101b98:	bf00      	nop
 8101b9a:	3728      	adds	r7, #40	; 0x28
 8101b9c:	46bd      	mov	sp, r7
 8101b9e:	bd80      	pop	{r7, pc}
 8101ba0:	40001c00 	.word	0x40001c00
 8101ba4:	58024400 	.word	0x58024400
 8101ba8:	58021400 	.word	0x58021400

08101bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101bac:	b580      	push	{r7, lr}
 8101bae:	b088      	sub	sp, #32
 8101bb0:	af00      	add	r7, sp, #0
 8101bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bb4:	f107 030c 	add.w	r3, r7, #12
 8101bb8:	2200      	movs	r2, #0
 8101bba:	601a      	str	r2, [r3, #0]
 8101bbc:	605a      	str	r2, [r3, #4]
 8101bbe:	609a      	str	r2, [r3, #8]
 8101bc0:	60da      	str	r2, [r3, #12]
 8101bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	681b      	ldr	r3, [r3, #0]
 8101bc8:	4a12      	ldr	r2, [pc, #72]	; (8101c14 <HAL_TIM_MspPostInit+0x68>)
 8101bca:	4293      	cmp	r3, r2
 8101bcc:	d11e      	bne.n	8101c0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101bce:	4b12      	ldr	r3, [pc, #72]	; (8101c18 <HAL_TIM_MspPostInit+0x6c>)
 8101bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd4:	4a10      	ldr	r2, [pc, #64]	; (8101c18 <HAL_TIM_MspPostInit+0x6c>)
 8101bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bde:	4b0e      	ldr	r3, [pc, #56]	; (8101c18 <HAL_TIM_MspPostInit+0x6c>)
 8101be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101be8:	60bb      	str	r3, [r7, #8]
 8101bea:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration    
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8101bec:	23c0      	movs	r3, #192	; 0xc0
 8101bee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bf0:	2302      	movs	r3, #2
 8101bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bf4:	2300      	movs	r3, #0
 8101bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bf8:	2300      	movs	r3, #0
 8101bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101bfc:	2303      	movs	r3, #3
 8101bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101c00:	f107 030c 	add.w	r3, r7, #12
 8101c04:	4619      	mov	r1, r3
 8101c06:	4805      	ldr	r0, [pc, #20]	; (8101c1c <HAL_TIM_MspPostInit+0x70>)
 8101c08:	f002 faac 	bl	8104164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8101c0c:	bf00      	nop
 8101c0e:	3720      	adds	r7, #32
 8101c10:	46bd      	mov	sp, r7
 8101c12:	bd80      	pop	{r7, pc}
 8101c14:	40010400 	.word	0x40010400
 8101c18:	58024400 	.word	0x58024400
 8101c1c:	58022400 	.word	0x58022400

08101c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101c20:	b580      	push	{r7, lr}
 8101c22:	b08a      	sub	sp, #40	; 0x28
 8101c24:	af00      	add	r7, sp, #0
 8101c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c28:	f107 0314 	add.w	r3, r7, #20
 8101c2c:	2200      	movs	r2, #0
 8101c2e:	601a      	str	r2, [r3, #0]
 8101c30:	605a      	str	r2, [r3, #4]
 8101c32:	609a      	str	r2, [r3, #8]
 8101c34:	60da      	str	r2, [r3, #12]
 8101c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	681b      	ldr	r3, [r3, #0]
 8101c3c:	4a25      	ldr	r2, [pc, #148]	; (8101cd4 <HAL_UART_MspInit+0xb4>)
 8101c3e:	4293      	cmp	r3, r2
 8101c40:	d12f      	bne.n	8101ca2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8101c42:	4b25      	ldr	r3, [pc, #148]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c48:	4a23      	ldr	r2, [pc, #140]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8101c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101c52:	4b21      	ldr	r3, [pc, #132]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8101c5c:	613b      	str	r3, [r7, #16]
 8101c5e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101c60:	4b1d      	ldr	r3, [pc, #116]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c66:	4a1c      	ldr	r2, [pc, #112]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c70:	4b19      	ldr	r3, [pc, #100]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101c7a:	60fb      	str	r3, [r7, #12]
 8101c7c:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration    
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8101c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c84:	2302      	movs	r3, #2
 8101c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c88:	2300      	movs	r3, #0
 8101c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c8c:	2300      	movs	r3, #0
 8101c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8101c90:	2308      	movs	r3, #8
 8101c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101c94:	f107 0314 	add.w	r3, r7, #20
 8101c98:	4619      	mov	r1, r3
 8101c9a:	4810      	ldr	r0, [pc, #64]	; (8101cdc <HAL_UART_MspInit+0xbc>)
 8101c9c:	f002 fa62 	bl	8104164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8101ca0:	e013      	b.n	8101cca <HAL_UART_MspInit+0xaa>
  else if(huart->Instance==USART1)
 8101ca2:	687b      	ldr	r3, [r7, #4]
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	4a0e      	ldr	r2, [pc, #56]	; (8101ce0 <HAL_UART_MspInit+0xc0>)
 8101ca8:	4293      	cmp	r3, r2
 8101caa:	d10e      	bne.n	8101cca <HAL_UART_MspInit+0xaa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8101cac:	4b0a      	ldr	r3, [pc, #40]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101cb2:	4a09      	ldr	r2, [pc, #36]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101cb4:	f043 0310 	orr.w	r3, r3, #16
 8101cb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101cbc:	4b06      	ldr	r3, [pc, #24]	; (8101cd8 <HAL_UART_MspInit+0xb8>)
 8101cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101cc2:	f003 0310 	and.w	r3, r3, #16
 8101cc6:	60bb      	str	r3, [r7, #8]
 8101cc8:	68bb      	ldr	r3, [r7, #8]
}
 8101cca:	bf00      	nop
 8101ccc:	3728      	adds	r7, #40	; 0x28
 8101cce:	46bd      	mov	sp, r7
 8101cd0:	bd80      	pop	{r7, pc}
 8101cd2:	bf00      	nop
 8101cd4:	40007c00 	.word	0x40007c00
 8101cd8:	58024400 	.word	0x58024400
 8101cdc:	58022400 	.word	0x58022400
 8101ce0:	40011000 	.word	0x40011000

08101ce4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101ce4:	b580      	push	{r7, lr}
 8101ce6:	b08e      	sub	sp, #56	; 0x38
 8101ce8:	af00      	add	r7, sp, #0
 8101cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101cf0:	2200      	movs	r2, #0
 8101cf2:	601a      	str	r2, [r3, #0]
 8101cf4:	605a      	str	r2, [r3, #4]
 8101cf6:	609a      	str	r2, [r3, #8]
 8101cf8:	60da      	str	r2, [r3, #12]
 8101cfa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	681b      	ldr	r3, [r3, #0]
 8101d00:	4a61      	ldr	r2, [pc, #388]	; (8101e88 <HAL_PCD_MspInit+0x1a4>)
 8101d02:	4293      	cmp	r3, r2
 8101d04:	f040 80bb 	bne.w	8101e7e <HAL_PCD_MspInit+0x19a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d08:	4b60      	ldr	r3, [pc, #384]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d0e:	4a5f      	ldr	r2, [pc, #380]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d10:	f043 0302 	orr.w	r3, r3, #2
 8101d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d18:	4b5c      	ldr	r3, [pc, #368]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d1e:	f003 0302 	and.w	r3, r3, #2
 8101d22:	623b      	str	r3, [r7, #32]
 8101d24:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8101d26:	4b59      	ldr	r3, [pc, #356]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d2c:	4a57      	ldr	r2, [pc, #348]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d36:	4b55      	ldr	r3, [pc, #340]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101d40:	61fb      	str	r3, [r7, #28]
 8101d42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101d44:	4b51      	ldr	r3, [pc, #324]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d4a:	4a50      	ldr	r2, [pc, #320]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d4c:	f043 0304 	orr.w	r3, r3, #4
 8101d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d54:	4b4d      	ldr	r3, [pc, #308]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d5a:	f003 0304 	and.w	r3, r3, #4
 8101d5e:	61bb      	str	r3, [r7, #24]
 8101d60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101d62:	4b4a      	ldr	r3, [pc, #296]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d68:	4a48      	ldr	r2, [pc, #288]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d72:	4b46      	ldr	r3, [pc, #280]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101d7c:	617b      	str	r3, [r7, #20]
 8101d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101d80:	4b42      	ldr	r3, [pc, #264]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d86:	4a41      	ldr	r2, [pc, #260]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d88:	f043 0301 	orr.w	r3, r3, #1
 8101d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d90:	4b3e      	ldr	r3, [pc, #248]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d96:	f003 0301 	and.w	r3, r3, #1
 8101d9a:	613b      	str	r3, [r7, #16]
 8101d9c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin 
 8101d9e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8101da2:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101da4:	2302      	movs	r3, #2
 8101da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101da8:	2300      	movs	r3, #0
 8101daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101dac:	2302      	movs	r3, #2
 8101dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101db0:	230a      	movs	r3, #10
 8101db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101db8:	4619      	mov	r1, r3
 8101dba:	4835      	ldr	r0, [pc, #212]	; (8101e90 <HAL_PCD_MspInit+0x1ac>)
 8101dbc:	f002 f9d2 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8101dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dc6:	2302      	movs	r3, #2
 8101dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dca:	2300      	movs	r3, #0
 8101dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101dce:	2302      	movs	r3, #2
 8101dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101dd2:	230a      	movs	r3, #10
 8101dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8101dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101dda:	4619      	mov	r1, r3
 8101ddc:	482d      	ldr	r0, [pc, #180]	; (8101e94 <HAL_PCD_MspInit+0x1b0>)
 8101dde:	f002 f9c1 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8101de2:	2301      	movs	r3, #1
 8101de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101de6:	2302      	movs	r3, #2
 8101de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dea:	2300      	movs	r3, #0
 8101dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101dee:	2302      	movs	r3, #2
 8101df0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101df2:	230a      	movs	r3, #10
 8101df4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8101df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101dfa:	4619      	mov	r1, r3
 8101dfc:	4826      	ldr	r0, [pc, #152]	; (8101e98 <HAL_PCD_MspInit+0x1b4>)
 8101dfe:	f002 f9b1 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8101e02:	2310      	movs	r3, #16
 8101e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e06:	2302      	movs	r3, #2
 8101e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e0a:	2300      	movs	r3, #0
 8101e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101e0e:	2302      	movs	r3, #2
 8101e10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101e12:	230a      	movs	r3, #10
 8101e14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8101e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101e1a:	4619      	mov	r1, r3
 8101e1c:	481f      	ldr	r0, [pc, #124]	; (8101e9c <HAL_PCD_MspInit+0x1b8>)
 8101e1e:	f002 f9a1 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8101e22:	2328      	movs	r3, #40	; 0x28
 8101e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e26:	2302      	movs	r3, #2
 8101e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e2a:	2300      	movs	r3, #0
 8101e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8101e2e:	2302      	movs	r3, #2
 8101e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8101e32:	230a      	movs	r3, #10
 8101e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101e3a:	4619      	mov	r1, r3
 8101e3c:	4818      	ldr	r0, [pc, #96]	; (8101ea0 <HAL_PCD_MspInit+0x1bc>)
 8101e3e:	f002 f991 	bl	8104164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8101e42:	4b12      	ldr	r3, [pc, #72]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101e48:	4a10      	ldr	r2, [pc, #64]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101e52:	4b0e      	ldr	r3, [pc, #56]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101e5c:	60fb      	str	r3, [r7, #12]
 8101e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8101e60:	4b0a      	ldr	r3, [pc, #40]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101e66:	4a09      	ldr	r2, [pc, #36]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101e68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8101e6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101e70:	4b06      	ldr	r3, [pc, #24]	; (8101e8c <HAL_PCD_MspInit+0x1a8>)
 8101e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101e76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8101e7a:	60bb      	str	r3, [r7, #8]
 8101e7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8101e7e:	bf00      	nop
 8101e80:	3738      	adds	r7, #56	; 0x38
 8101e82:	46bd      	mov	sp, r7
 8101e84:	bd80      	pop	{r7, pc}
 8101e86:	bf00      	nop
 8101e88:	40040000 	.word	0x40040000
 8101e8c:	58024400 	.word	0x58024400
 8101e90:	58020400 	.word	0x58020400
 8101e94:	58022000 	.word	0x58022000
 8101e98:	58020800 	.word	0x58020800
 8101e9c:	58021c00 	.word	0x58021c00
 8101ea0:	58020000 	.word	0x58020000

08101ea4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8101ea4:	b580      	push	{r7, lr}
 8101ea6:	b086      	sub	sp, #24
 8101ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8101eaa:	1d3b      	adds	r3, r7, #4
 8101eac:	2200      	movs	r2, #0
 8101eae:	601a      	str	r2, [r3, #0]
 8101eb0:	605a      	str	r2, [r3, #4]
 8101eb2:	609a      	str	r2, [r3, #8]
 8101eb4:	60da      	str	r2, [r3, #12]
 8101eb6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8101eb8:	4b3d      	ldr	r3, [pc, #244]	; (8101fb0 <HAL_FMC_MspInit+0x10c>)
 8101eba:	681b      	ldr	r3, [r3, #0]
 8101ebc:	2b00      	cmp	r3, #0
 8101ebe:	d172      	bne.n	8101fa6 <HAL_FMC_MspInit+0x102>
    return;
  }
  FMC_Initialized = 1;
 8101ec0:	4b3b      	ldr	r3, [pc, #236]	; (8101fb0 <HAL_FMC_MspInit+0x10c>)
 8101ec2:	2201      	movs	r2, #1
 8101ec4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8101ec6:	4b3b      	ldr	r3, [pc, #236]	; (8101fb4 <HAL_FMC_MspInit+0x110>)
 8101ec8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101ecc:	4a39      	ldr	r2, [pc, #228]	; (8101fb4 <HAL_FMC_MspInit+0x110>)
 8101ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101ed2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101ed6:	4b37      	ldr	r3, [pc, #220]	; (8101fb4 <HAL_FMC_MspInit+0x110>)
 8101ed8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101ee0:	603b      	str	r3, [r7, #0]
 8101ee2:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin 
 8101ee4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8101ee8:	607b      	str	r3, [r7, #4]
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin 
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101eea:	2302      	movs	r3, #2
 8101eec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101eee:	2300      	movs	r3, #0
 8101ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101ef2:	2303      	movs	r3, #3
 8101ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101ef6:	230c      	movs	r3, #12
 8101ef8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101efa:	1d3b      	adds	r3, r7, #4
 8101efc:	4619      	mov	r1, r3
 8101efe:	482e      	ldr	r0, [pc, #184]	; (8101fb8 <HAL_FMC_MspInit+0x114>)
 8101f00:	f002 f930 	bl	8104164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin 
 8101f04:	f64f 7383 	movw	r3, #65411	; 0xff83
 8101f08:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin 
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f0a:	2302      	movs	r3, #2
 8101f0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f0e:	2300      	movs	r3, #0
 8101f10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101f12:	2303      	movs	r3, #3
 8101f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101f16:	230c      	movs	r3, #12
 8101f18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101f1a:	1d3b      	adds	r3, r7, #4
 8101f1c:	4619      	mov	r1, r3
 8101f1e:	4827      	ldr	r0, [pc, #156]	; (8101fbc <HAL_FMC_MspInit+0x118>)
 8101f20:	f002 f920 	bl	8104164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin 
 8101f24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8101f28:	607b      	str	r3, [r7, #4]
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin 
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f2a:	2302      	movs	r3, #2
 8101f2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f2e:	2300      	movs	r3, #0
 8101f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101f32:	2303      	movs	r3, #3
 8101f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101f36:	230c      	movs	r3, #12
 8101f38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101f3a:	1d3b      	adds	r3, r7, #4
 8101f3c:	4619      	mov	r1, r3
 8101f3e:	4820      	ldr	r0, [pc, #128]	; (8101fc0 <HAL_FMC_MspInit+0x11c>)
 8101f40:	f002 f910 	bl	8104164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin 
 8101f44:	f248 1317 	movw	r3, #33047	; 0x8117
 8101f48:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f4a:	2302      	movs	r3, #2
 8101f4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f4e:	2300      	movs	r3, #0
 8101f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101f52:	2303      	movs	r3, #3
 8101f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101f56:	230c      	movs	r3, #12
 8101f58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101f5a:	1d3b      	adds	r3, r7, #4
 8101f5c:	4619      	mov	r1, r3
 8101f5e:	4819      	ldr	r0, [pc, #100]	; (8101fc4 <HAL_FMC_MspInit+0x120>)
 8101f60:	f002 f900 	bl	8104164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin 
 8101f64:	f24c 7303 	movw	r3, #50947	; 0xc703
 8101f68:	607b      	str	r3, [r7, #4]
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f6a:	2302      	movs	r3, #2
 8101f6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f6e:	2300      	movs	r3, #0
 8101f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101f72:	2303      	movs	r3, #3
 8101f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101f76:	230c      	movs	r3, #12
 8101f78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101f7a:	1d3b      	adds	r3, r7, #4
 8101f7c:	4619      	mov	r1, r3
 8101f7e:	4812      	ldr	r0, [pc, #72]	; (8101fc8 <HAL_FMC_MspInit+0x124>)
 8101f80:	f002 f8f0 	bl	8104164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin 
 8101f84:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8101f88:	607b      	str	r3, [r7, #4]
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin 
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f8a:	2302      	movs	r3, #2
 8101f8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f8e:	2300      	movs	r3, #0
 8101f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101f92:	2303      	movs	r3, #3
 8101f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101f96:	230c      	movs	r3, #12
 8101f98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101f9a:	1d3b      	adds	r3, r7, #4
 8101f9c:	4619      	mov	r1, r3
 8101f9e:	480b      	ldr	r0, [pc, #44]	; (8101fcc <HAL_FMC_MspInit+0x128>)
 8101fa0:	f002 f8e0 	bl	8104164 <HAL_GPIO_Init>
 8101fa4:	e000      	b.n	8101fa8 <HAL_FMC_MspInit+0x104>
    return;
 8101fa6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8101fa8:	3718      	adds	r7, #24
 8101faa:	46bd      	mov	sp, r7
 8101fac:	bd80      	pop	{r7, pc}
 8101fae:	bf00      	nop
 8101fb0:	100000ec 	.word	0x100000ec
 8101fb4:	58024400 	.word	0x58024400
 8101fb8:	58022000 	.word	0x58022000
 8101fbc:	58021000 	.word	0x58021000
 8101fc0:	58021c00 	.word	0x58021c00
 8101fc4:	58021800 	.word	0x58021800
 8101fc8:	58020c00 	.word	0x58020c00
 8101fcc:	58021400 	.word	0x58021400

08101fd0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8101fd0:	b580      	push	{r7, lr}
 8101fd2:	b082      	sub	sp, #8
 8101fd4:	af00      	add	r7, sp, #0
 8101fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8101fd8:	f7ff ff64 	bl	8101ea4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8101fdc:	bf00      	nop
 8101fde:	3708      	adds	r7, #8
 8101fe0:	46bd      	mov	sp, r7
 8101fe2:	bd80      	pop	{r7, pc}

08101fe4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101fe4:	b580      	push	{r7, lr}
 8101fe6:	b08a      	sub	sp, #40	; 0x28
 8101fe8:	af00      	add	r7, sp, #0
 8101fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	4a35      	ldr	r2, [pc, #212]	; (81020c8 <HAL_SAI_MspInit+0xe4>)
 8101ff2:	4293      	cmp	r3, r2
 8101ff4:	d137      	bne.n	8102066 <HAL_SAI_MspInit+0x82>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8101ff6:	4b35      	ldr	r3, [pc, #212]	; (81020cc <HAL_SAI_MspInit+0xe8>)
 8101ff8:	681b      	ldr	r3, [r3, #0]
 8101ffa:	2b00      	cmp	r3, #0
 8101ffc:	d10e      	bne.n	810201c <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101ffe:	4b34      	ldr	r3, [pc, #208]	; (81020d0 <HAL_SAI_MspInit+0xec>)
 8102000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102004:	4a32      	ldr	r2, [pc, #200]	; (81020d0 <HAL_SAI_MspInit+0xec>)
 8102006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810200a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810200e:	4b30      	ldr	r3, [pc, #192]	; (81020d0 <HAL_SAI_MspInit+0xec>)
 8102010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102018:	613b      	str	r3, [r7, #16]
 810201a:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 810201c:	4b2b      	ldr	r3, [pc, #172]	; (81020cc <HAL_SAI_MspInit+0xe8>)
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	3301      	adds	r3, #1
 8102022:	4a2a      	ldr	r2, [pc, #168]	; (81020cc <HAL_SAI_MspInit+0xe8>)
 8102024:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8102026:	2370      	movs	r3, #112	; 0x70
 8102028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810202a:	2302      	movs	r3, #2
 810202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810202e:	2300      	movs	r3, #0
 8102030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102032:	2300      	movs	r3, #0
 8102034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102036:	2306      	movs	r3, #6
 8102038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810203a:	f107 0314 	add.w	r3, r7, #20
 810203e:	4619      	mov	r1, r3
 8102040:	4824      	ldr	r0, [pc, #144]	; (81020d4 <HAL_SAI_MspInit+0xf0>)
 8102042:	f002 f88f 	bl	8104164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8102046:	2380      	movs	r3, #128	; 0x80
 8102048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810204a:	2302      	movs	r3, #2
 810204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810204e:	2300      	movs	r3, #0
 8102050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102052:	2300      	movs	r3, #0
 8102054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102056:	2306      	movs	r3, #6
 8102058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 810205a:	f107 0314 	add.w	r3, r7, #20
 810205e:	4619      	mov	r1, r3
 8102060:	481d      	ldr	r0, [pc, #116]	; (81020d8 <HAL_SAI_MspInit+0xf4>)
 8102062:	f002 f87f 	bl	8104164 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8102066:	687b      	ldr	r3, [r7, #4]
 8102068:	681b      	ldr	r3, [r3, #0]
 810206a:	4a1c      	ldr	r2, [pc, #112]	; (81020dc <HAL_SAI_MspInit+0xf8>)
 810206c:	4293      	cmp	r3, r2
 810206e:	d127      	bne.n	81020c0 <HAL_SAI_MspInit+0xdc>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8102070:	4b16      	ldr	r3, [pc, #88]	; (81020cc <HAL_SAI_MspInit+0xe8>)
 8102072:	681b      	ldr	r3, [r3, #0]
 8102074:	2b00      	cmp	r3, #0
 8102076:	d10e      	bne.n	8102096 <HAL_SAI_MspInit+0xb2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8102078:	4b15      	ldr	r3, [pc, #84]	; (81020d0 <HAL_SAI_MspInit+0xec>)
 810207a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810207e:	4a14      	ldr	r2, [pc, #80]	; (81020d0 <HAL_SAI_MspInit+0xec>)
 8102080:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102084:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102088:	4b11      	ldr	r3, [pc, #68]	; (81020d0 <HAL_SAI_MspInit+0xec>)
 810208a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810208e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102092:	60fb      	str	r3, [r7, #12]
 8102094:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8102096:	4b0d      	ldr	r3, [pc, #52]	; (81020cc <HAL_SAI_MspInit+0xe8>)
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	3301      	adds	r3, #1
 810209c:	4a0b      	ldr	r2, [pc, #44]	; (81020cc <HAL_SAI_MspInit+0xe8>)
 810209e:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 81020a0:	2308      	movs	r3, #8
 81020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020a4:	2302      	movs	r3, #2
 81020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020a8:	2300      	movs	r3, #0
 81020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020ac:	2300      	movs	r3, #0
 81020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81020b0:	2306      	movs	r3, #6
 81020b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 81020b4:	f107 0314 	add.w	r3, r7, #20
 81020b8:	4619      	mov	r1, r3
 81020ba:	4806      	ldr	r0, [pc, #24]	; (81020d4 <HAL_SAI_MspInit+0xf0>)
 81020bc:	f002 f852 	bl	8104164 <HAL_GPIO_Init>

    }
}
 81020c0:	bf00      	nop
 81020c2:	3728      	adds	r7, #40	; 0x28
 81020c4:	46bd      	mov	sp, r7
 81020c6:	bd80      	pop	{r7, pc}
 81020c8:	40015804 	.word	0x40015804
 81020cc:	100000f0 	.word	0x100000f0
 81020d0:	58024400 	.word	0x58024400
 81020d4:	58021000 	.word	0x58021000
 81020d8:	58021800 	.word	0x58021800
 81020dc:	40015824 	.word	0x40015824

081020e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81020e0:	b480      	push	{r7}
 81020e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 81020e4:	bf00      	nop
 81020e6:	46bd      	mov	sp, r7
 81020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ec:	4770      	bx	lr

081020ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81020ee:	b480      	push	{r7}
 81020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81020f2:	e7fe      	b.n	81020f2 <HardFault_Handler+0x4>

081020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81020f4:	b480      	push	{r7}
 81020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81020f8:	e7fe      	b.n	81020f8 <MemManage_Handler+0x4>

081020fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81020fa:	b480      	push	{r7}
 81020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81020fe:	e7fe      	b.n	81020fe <BusFault_Handler+0x4>

08102100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102100:	b480      	push	{r7}
 8102102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102104:	e7fe      	b.n	8102104 <UsageFault_Handler+0x4>

08102106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102106:	b480      	push	{r7}
 8102108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810210a:	bf00      	nop
 810210c:	46bd      	mov	sp, r7
 810210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102112:	4770      	bx	lr

08102114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102114:	b480      	push	{r7}
 8102116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102118:	bf00      	nop
 810211a:	46bd      	mov	sp, r7
 810211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102120:	4770      	bx	lr

08102122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102122:	b480      	push	{r7}
 8102124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102126:	bf00      	nop
 8102128:	46bd      	mov	sp, r7
 810212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810212e:	4770      	bx	lr

08102130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102130:	b580      	push	{r7, lr}
 8102132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102134:	f000 f8ca 	bl	81022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102138:	bf00      	nop
 810213a:	bd80      	pop	{r7, pc}

0810213c <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102140:	4802      	ldr	r0, [pc, #8]	; (810214c <CEC_IRQHandler+0x10>)
 8102142:	f001 f9cd 	bl	81034e0 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8102146:	bf00      	nop
 8102148:	bd80      	pop	{r7, pc}
 810214a:	bf00      	nop
 810214c:	100006cc 	.word	0x100006cc

08102150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8102150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102188 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102154:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8102156:	e003      	b.n	8102160 <LoopCopyDataInit>

08102158 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8102158:	4b0c      	ldr	r3, [pc, #48]	; (810218c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 810215a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 810215c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810215e:	3104      	adds	r1, #4

08102160 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8102160:	480b      	ldr	r0, [pc, #44]	; (8102190 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8102162:	4b0c      	ldr	r3, [pc, #48]	; (8102194 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8102164:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8102166:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8102168:	d3f6      	bcc.n	8102158 <CopyDataInit>
  ldr  r2, =_sbss
 810216a:	4a0b      	ldr	r2, [pc, #44]	; (8102198 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 810216c:	e002      	b.n	8102174 <LoopFillZerobss>

0810216e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 810216e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8102170:	f842 3b04 	str.w	r3, [r2], #4

08102174 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8102174:	4b09      	ldr	r3, [pc, #36]	; (810219c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8102176:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8102178:	d3f9      	bcc.n	810216e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 810217a:	f7fe fa2d 	bl	81005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 810217e:	f009 ff25 	bl	810bfcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102182:	f7fe fa45 	bl	8100610 <main>
  bx  lr    
 8102186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102188:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 810218c:	0810c06c 	.word	0x0810c06c
  ldr  r0, =_sdata
 8102190:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8102194:	10000010 	.word	0x10000010
  ldr  r2, =_sbss
 8102198:	100000d0 	.word	0x100000d0
  ldr  r3, = _ebss
 810219c:	10000c0c 	.word	0x10000c0c

081021a0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81021a0:	e7fe      	b.n	81021a0 <ADC3_IRQHandler>
	...

081021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81021a4:	b580      	push	{r7, lr}
 81021a6:	b082      	sub	sp, #8
 81021a8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81021aa:	4b28      	ldr	r3, [pc, #160]	; (810224c <HAL_Init+0xa8>)
 81021ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021b0:	4a26      	ldr	r2, [pc, #152]	; (810224c <HAL_Init+0xa8>)
 81021b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81021b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81021ba:	4b24      	ldr	r3, [pc, #144]	; (810224c <HAL_Init+0xa8>)
 81021bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81021c4:	603b      	str	r3, [r7, #0]
 81021c6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81021c8:	4b21      	ldr	r3, [pc, #132]	; (8102250 <HAL_Init+0xac>)
 81021ca:	681b      	ldr	r3, [r3, #0]
 81021cc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81021d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81021d4:	4a1e      	ldr	r2, [pc, #120]	; (8102250 <HAL_Init+0xac>)
 81021d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81021da:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81021dc:	4b1c      	ldr	r3, [pc, #112]	; (8102250 <HAL_Init+0xac>)
 81021de:	681b      	ldr	r3, [r3, #0]
 81021e0:	4a1b      	ldr	r2, [pc, #108]	; (8102250 <HAL_Init+0xac>)
 81021e2:	f043 0301 	orr.w	r3, r3, #1
 81021e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81021e8:	2003      	movs	r0, #3
 81021ea:	f001 fb51 	bl	8103890 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81021ee:	f002 fbf5 	bl	81049dc <HAL_RCC_GetSysClockFreq>
 81021f2:	4601      	mov	r1, r0
 81021f4:	4b15      	ldr	r3, [pc, #84]	; (810224c <HAL_Init+0xa8>)
 81021f6:	699b      	ldr	r3, [r3, #24]
 81021f8:	0a1b      	lsrs	r3, r3, #8
 81021fa:	f003 030f 	and.w	r3, r3, #15
 81021fe:	4a15      	ldr	r2, [pc, #84]	; (8102254 <HAL_Init+0xb0>)
 8102200:	5cd3      	ldrb	r3, [r2, r3]
 8102202:	f003 031f 	and.w	r3, r3, #31
 8102206:	fa21 f303 	lsr.w	r3, r1, r3
 810220a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810220c:	4b0f      	ldr	r3, [pc, #60]	; (810224c <HAL_Init+0xa8>)
 810220e:	699b      	ldr	r3, [r3, #24]
 8102210:	f003 030f 	and.w	r3, r3, #15
 8102214:	4a0f      	ldr	r2, [pc, #60]	; (8102254 <HAL_Init+0xb0>)
 8102216:	5cd3      	ldrb	r3, [r2, r3]
 8102218:	f003 031f 	and.w	r3, r3, #31
 810221c:	687a      	ldr	r2, [r7, #4]
 810221e:	fa22 f303 	lsr.w	r3, r2, r3
 8102222:	4a0d      	ldr	r2, [pc, #52]	; (8102258 <HAL_Init+0xb4>)
 8102224:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102226:	4b0c      	ldr	r3, [pc, #48]	; (8102258 <HAL_Init+0xb4>)
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	4a0c      	ldr	r2, [pc, #48]	; (810225c <HAL_Init+0xb8>)
 810222c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810222e:	2000      	movs	r0, #0
 8102230:	f000 f816 	bl	8102260 <HAL_InitTick>
 8102234:	4603      	mov	r3, r0
 8102236:	2b00      	cmp	r3, #0
 8102238:	d001      	beq.n	810223e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810223a:	2301      	movs	r3, #1
 810223c:	e002      	b.n	8102244 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810223e:	f7ff f817 	bl	8101270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102242:	2300      	movs	r3, #0
}
 8102244:	4618      	mov	r0, r3
 8102246:	3708      	adds	r7, #8
 8102248:	46bd      	mov	sp, r7
 810224a:	bd80      	pop	{r7, pc}
 810224c:	58024400 	.word	0x58024400
 8102250:	40024400 	.word	0x40024400
 8102254:	0810c04c 	.word	0x0810c04c
 8102258:	10000004 	.word	0x10000004
 810225c:	10000000 	.word	0x10000000

08102260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102260:	b580      	push	{r7, lr}
 8102262:	b082      	sub	sp, #8
 8102264:	af00      	add	r7, sp, #0
 8102266:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102268:	4b15      	ldr	r3, [pc, #84]	; (81022c0 <HAL_InitTick+0x60>)
 810226a:	781b      	ldrb	r3, [r3, #0]
 810226c:	2b00      	cmp	r3, #0
 810226e:	d101      	bne.n	8102274 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102270:	2301      	movs	r3, #1
 8102272:	e021      	b.n	81022b8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102274:	4b13      	ldr	r3, [pc, #76]	; (81022c4 <HAL_InitTick+0x64>)
 8102276:	681a      	ldr	r2, [r3, #0]
 8102278:	4b11      	ldr	r3, [pc, #68]	; (81022c0 <HAL_InitTick+0x60>)
 810227a:	781b      	ldrb	r3, [r3, #0]
 810227c:	4619      	mov	r1, r3
 810227e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102282:	fbb3 f3f1 	udiv	r3, r3, r1
 8102286:	fbb2 f3f3 	udiv	r3, r2, r3
 810228a:	4618      	mov	r0, r3
 810228c:	f001 fb33 	bl	81038f6 <HAL_SYSTICK_Config>
 8102290:	4603      	mov	r3, r0
 8102292:	2b00      	cmp	r3, #0
 8102294:	d001      	beq.n	810229a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8102296:	2301      	movs	r3, #1
 8102298:	e00e      	b.n	81022b8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	2b0f      	cmp	r3, #15
 810229e:	d80a      	bhi.n	81022b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81022a0:	2200      	movs	r2, #0
 81022a2:	6879      	ldr	r1, [r7, #4]
 81022a4:	f04f 30ff 	mov.w	r0, #4294967295
 81022a8:	f001 fafd 	bl	81038a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81022ac:	4a06      	ldr	r2, [pc, #24]	; (81022c8 <HAL_InitTick+0x68>)
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81022b2:	2300      	movs	r3, #0
 81022b4:	e000      	b.n	81022b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81022b6:	2301      	movs	r3, #1
}
 81022b8:	4618      	mov	r0, r3
 81022ba:	3708      	adds	r7, #8
 81022bc:	46bd      	mov	sp, r7
 81022be:	bd80      	pop	{r7, pc}
 81022c0:	1000000c 	.word	0x1000000c
 81022c4:	10000000 	.word	0x10000000
 81022c8:	10000008 	.word	0x10000008

081022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81022cc:	b480      	push	{r7}
 81022ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81022d0:	4b06      	ldr	r3, [pc, #24]	; (81022ec <HAL_IncTick+0x20>)
 81022d2:	781b      	ldrb	r3, [r3, #0]
 81022d4:	461a      	mov	r2, r3
 81022d6:	4b06      	ldr	r3, [pc, #24]	; (81022f0 <HAL_IncTick+0x24>)
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	4413      	add	r3, r2
 81022dc:	4a04      	ldr	r2, [pc, #16]	; (81022f0 <HAL_IncTick+0x24>)
 81022de:	6013      	str	r3, [r2, #0]
}
 81022e0:	bf00      	nop
 81022e2:	46bd      	mov	sp, r7
 81022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e8:	4770      	bx	lr
 81022ea:	bf00      	nop
 81022ec:	1000000c 	.word	0x1000000c
 81022f0:	10000c08 	.word	0x10000c08

081022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81022f4:	b480      	push	{r7}
 81022f6:	af00      	add	r7, sp, #0
  return uwTick;
 81022f8:	4b03      	ldr	r3, [pc, #12]	; (8102308 <HAL_GetTick+0x14>)
 81022fa:	681b      	ldr	r3, [r3, #0]
}
 81022fc:	4618      	mov	r0, r3
 81022fe:	46bd      	mov	sp, r7
 8102300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102304:	4770      	bx	lr
 8102306:	bf00      	nop
 8102308:	10000c08 	.word	0x10000c08

0810230c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810230c:	b580      	push	{r7, lr}
 810230e:	b084      	sub	sp, #16
 8102310:	af00      	add	r7, sp, #0
 8102312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102314:	f7ff ffee 	bl	81022f4 <HAL_GetTick>
 8102318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810231e:	68fb      	ldr	r3, [r7, #12]
 8102320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102324:	d005      	beq.n	8102332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102326:	4b09      	ldr	r3, [pc, #36]	; (810234c <HAL_Delay+0x40>)
 8102328:	781b      	ldrb	r3, [r3, #0]
 810232a:	461a      	mov	r2, r3
 810232c:	68fb      	ldr	r3, [r7, #12]
 810232e:	4413      	add	r3, r2
 8102330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102332:	bf00      	nop
 8102334:	f7ff ffde 	bl	81022f4 <HAL_GetTick>
 8102338:	4602      	mov	r2, r0
 810233a:	68bb      	ldr	r3, [r7, #8]
 810233c:	1ad3      	subs	r3, r2, r3
 810233e:	68fa      	ldr	r2, [r7, #12]
 8102340:	429a      	cmp	r2, r3
 8102342:	d8f7      	bhi.n	8102334 <HAL_Delay+0x28>
  {
  }
}
 8102344:	bf00      	nop
 8102346:	3710      	adds	r7, #16
 8102348:	46bd      	mov	sp, r7
 810234a:	bd80      	pop	{r7, pc}
 810234c:	1000000c 	.word	0x1000000c

08102350 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102350:	b480      	push	{r7}
 8102352:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102354:	4b03      	ldr	r3, [pc, #12]	; (8102364 <HAL_GetREVID+0x14>)
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	0c1b      	lsrs	r3, r3, #16
}
 810235a:	4618      	mov	r0, r3
 810235c:	46bd      	mov	sp, r7
 810235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102362:	4770      	bx	lr
 8102364:	5c001000 	.word	0x5c001000

08102368 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8102368:	b480      	push	{r7}
 810236a:	b083      	sub	sp, #12
 810236c:	af00      	add	r7, sp, #0
 810236e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102370:	4b06      	ldr	r3, [pc, #24]	; (810238c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102372:	685b      	ldr	r3, [r3, #4]
 8102374:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102378:	4904      	ldr	r1, [pc, #16]	; (810238c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	4313      	orrs	r3, r2
 810237e:	604b      	str	r3, [r1, #4]
}
 8102380:	bf00      	nop
 8102382:	370c      	adds	r7, #12
 8102384:	46bd      	mov	sp, r7
 8102386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810238a:	4770      	bx	lr
 810238c:	58000400 	.word	0x58000400

08102390 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102390:	b480      	push	{r7}
 8102392:	b083      	sub	sp, #12
 8102394:	af00      	add	r7, sp, #0
 8102396:	6078      	str	r0, [r7, #4]
 8102398:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810239a:	4b07      	ldr	r3, [pc, #28]	; (81023b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810239c:	685a      	ldr	r2, [r3, #4]
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	43db      	mvns	r3, r3
 81023a2:	401a      	ands	r2, r3
 81023a4:	4904      	ldr	r1, [pc, #16]	; (81023b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 81023a6:	683b      	ldr	r3, [r7, #0]
 81023a8:	4313      	orrs	r3, r2
 81023aa:	604b      	str	r3, [r1, #4]
}
 81023ac:	bf00      	nop
 81023ae:	370c      	adds	r7, #12
 81023b0:	46bd      	mov	sp, r7
 81023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023b6:	4770      	bx	lr
 81023b8:	58000400 	.word	0x58000400

081023bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81023bc:	b480      	push	{r7}
 81023be:	b083      	sub	sp, #12
 81023c0:	af00      	add	r7, sp, #0
 81023c2:	6078      	str	r0, [r7, #4]
 81023c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	689b      	ldr	r3, [r3, #8]
 81023ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81023ce:	683b      	ldr	r3, [r7, #0]
 81023d0:	431a      	orrs	r2, r3
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	609a      	str	r2, [r3, #8]
}
 81023d6:	bf00      	nop
 81023d8:	370c      	adds	r7, #12
 81023da:	46bd      	mov	sp, r7
 81023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023e0:	4770      	bx	lr

081023e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81023e2:	b480      	push	{r7}
 81023e4:	b083      	sub	sp, #12
 81023e6:	af00      	add	r7, sp, #0
 81023e8:	6078      	str	r0, [r7, #4]
 81023ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	689b      	ldr	r3, [r3, #8]
 81023f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81023f4:	683b      	ldr	r3, [r7, #0]
 81023f6:	431a      	orrs	r2, r3
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	609a      	str	r2, [r3, #8]
}
 81023fc:	bf00      	nop
 81023fe:	370c      	adds	r7, #12
 8102400:	46bd      	mov	sp, r7
 8102402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102406:	4770      	bx	lr

08102408 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102408:	b480      	push	{r7}
 810240a:	b083      	sub	sp, #12
 810240c:	af00      	add	r7, sp, #0
 810240e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	689b      	ldr	r3, [r3, #8]
 8102414:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102418:	4618      	mov	r0, r3
 810241a:	370c      	adds	r7, #12
 810241c:	46bd      	mov	sp, r7
 810241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102422:	4770      	bx	lr

08102424 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102424:	b490      	push	{r4, r7}
 8102426:	b084      	sub	sp, #16
 8102428:	af00      	add	r7, sp, #0
 810242a:	60f8      	str	r0, [r7, #12]
 810242c:	60b9      	str	r1, [r7, #8]
 810242e:	607a      	str	r2, [r7, #4]
 8102430:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102432:	68fb      	ldr	r3, [r7, #12]
 8102434:	3360      	adds	r3, #96	; 0x60
 8102436:	461a      	mov	r2, r3
 8102438:	68bb      	ldr	r3, [r7, #8]
 810243a:	009b      	lsls	r3, r3, #2
 810243c:	4413      	add	r3, r2
 810243e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8102440:	6823      	ldr	r3, [r4, #0]
 8102442:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 810244c:	683b      	ldr	r3, [r7, #0]
 810244e:	430b      	orrs	r3, r1
 8102450:	4313      	orrs	r3, r2
 8102452:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8102454:	bf00      	nop
 8102456:	3710      	adds	r7, #16
 8102458:	46bd      	mov	sp, r7
 810245a:	bc90      	pop	{r4, r7}
 810245c:	4770      	bx	lr

0810245e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 810245e:	b480      	push	{r7}
 8102460:	b085      	sub	sp, #20
 8102462:	af00      	add	r7, sp, #0
 8102464:	60f8      	str	r0, [r7, #12]
 8102466:	60b9      	str	r1, [r7, #8]
 8102468:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 810246a:	68fb      	ldr	r3, [r7, #12]
 810246c:	691b      	ldr	r3, [r3, #16]
 810246e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8102472:	68bb      	ldr	r3, [r7, #8]
 8102474:	f003 031f 	and.w	r3, r3, #31
 8102478:	6879      	ldr	r1, [r7, #4]
 810247a:	fa01 f303 	lsl.w	r3, r1, r3
 810247e:	431a      	orrs	r2, r3
 8102480:	68fb      	ldr	r3, [r7, #12]
 8102482:	611a      	str	r2, [r3, #16]
}
 8102484:	bf00      	nop
 8102486:	3714      	adds	r7, #20
 8102488:	46bd      	mov	sp, r7
 810248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810248e:	4770      	bx	lr

08102490 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102490:	b490      	push	{r4, r7}
 8102492:	b084      	sub	sp, #16
 8102494:	af00      	add	r7, sp, #0
 8102496:	60f8      	str	r0, [r7, #12]
 8102498:	60b9      	str	r1, [r7, #8]
 810249a:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810249c:	68fb      	ldr	r3, [r7, #12]
 810249e:	3360      	adds	r3, #96	; 0x60
 81024a0:	461a      	mov	r2, r3
 81024a2:	68bb      	ldr	r3, [r7, #8]
 81024a4:	009b      	lsls	r3, r3, #2
 81024a6:	4413      	add	r3, r2
 81024a8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81024aa:	6823      	ldr	r3, [r4, #0]
 81024ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	4313      	orrs	r3, r2
 81024b4:	6023      	str	r3, [r4, #0]
}
 81024b6:	bf00      	nop
 81024b8:	3710      	adds	r7, #16
 81024ba:	46bd      	mov	sp, r7
 81024bc:	bc90      	pop	{r4, r7}
 81024be:	4770      	bx	lr

081024c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81024c0:	b490      	push	{r4, r7}
 81024c2:	b084      	sub	sp, #16
 81024c4:	af00      	add	r7, sp, #0
 81024c6:	60f8      	str	r0, [r7, #12]
 81024c8:	60b9      	str	r1, [r7, #8]
 81024ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81024cc:	68fb      	ldr	r3, [r7, #12]
 81024ce:	3330      	adds	r3, #48	; 0x30
 81024d0:	461a      	mov	r2, r3
 81024d2:	68bb      	ldr	r3, [r7, #8]
 81024d4:	0a1b      	lsrs	r3, r3, #8
 81024d6:	009b      	lsls	r3, r3, #2
 81024d8:	f003 030c 	and.w	r3, r3, #12
 81024dc:	4413      	add	r3, r2
 81024de:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 81024e0:	6822      	ldr	r2, [r4, #0]
 81024e2:	68bb      	ldr	r3, [r7, #8]
 81024e4:	f003 031f 	and.w	r3, r3, #31
 81024e8:	211f      	movs	r1, #31
 81024ea:	fa01 f303 	lsl.w	r3, r1, r3
 81024ee:	43db      	mvns	r3, r3
 81024f0:	401a      	ands	r2, r3
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	0e9b      	lsrs	r3, r3, #26
 81024f6:	f003 011f 	and.w	r1, r3, #31
 81024fa:	68bb      	ldr	r3, [r7, #8]
 81024fc:	f003 031f 	and.w	r3, r3, #31
 8102500:	fa01 f303 	lsl.w	r3, r1, r3
 8102504:	4313      	orrs	r3, r2
 8102506:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102508:	bf00      	nop
 810250a:	3710      	adds	r7, #16
 810250c:	46bd      	mov	sp, r7
 810250e:	bc90      	pop	{r4, r7}
 8102510:	4770      	bx	lr

08102512 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102512:	b490      	push	{r4, r7}
 8102514:	b084      	sub	sp, #16
 8102516:	af00      	add	r7, sp, #0
 8102518:	60f8      	str	r0, [r7, #12]
 810251a:	60b9      	str	r1, [r7, #8]
 810251c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810251e:	68fb      	ldr	r3, [r7, #12]
 8102520:	3314      	adds	r3, #20
 8102522:	461a      	mov	r2, r3
 8102524:	68bb      	ldr	r3, [r7, #8]
 8102526:	0e5b      	lsrs	r3, r3, #25
 8102528:	009b      	lsls	r3, r3, #2
 810252a:	f003 0304 	and.w	r3, r3, #4
 810252e:	4413      	add	r3, r2
 8102530:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8102532:	6822      	ldr	r2, [r4, #0]
 8102534:	68bb      	ldr	r3, [r7, #8]
 8102536:	0d1b      	lsrs	r3, r3, #20
 8102538:	f003 031f 	and.w	r3, r3, #31
 810253c:	2107      	movs	r1, #7
 810253e:	fa01 f303 	lsl.w	r3, r1, r3
 8102542:	43db      	mvns	r3, r3
 8102544:	401a      	ands	r2, r3
 8102546:	68bb      	ldr	r3, [r7, #8]
 8102548:	0d1b      	lsrs	r3, r3, #20
 810254a:	f003 031f 	and.w	r3, r3, #31
 810254e:	6879      	ldr	r1, [r7, #4]
 8102550:	fa01 f303 	lsl.w	r3, r1, r3
 8102554:	4313      	orrs	r3, r2
 8102556:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102558:	bf00      	nop
 810255a:	3710      	adds	r7, #16
 810255c:	46bd      	mov	sp, r7
 810255e:	bc90      	pop	{r4, r7}
 8102560:	4770      	bx	lr
	...

08102564 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102564:	b480      	push	{r7}
 8102566:	b085      	sub	sp, #20
 8102568:	af00      	add	r7, sp, #0
 810256a:	60f8      	str	r0, [r7, #12]
 810256c:	60b9      	str	r1, [r7, #8]
 810256e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102570:	68fb      	ldr	r3, [r7, #12]
 8102572:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8102576:	68bb      	ldr	r3, [r7, #8]
 8102578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810257c:	43db      	mvns	r3, r3
 810257e:	401a      	ands	r2, r3
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	f003 0318 	and.w	r3, r3, #24
 8102586:	4908      	ldr	r1, [pc, #32]	; (81025a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102588:	40d9      	lsrs	r1, r3
 810258a:	68bb      	ldr	r3, [r7, #8]
 810258c:	400b      	ands	r3, r1
 810258e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102592:	431a      	orrs	r2, r3
 8102594:	68fb      	ldr	r3, [r7, #12]
 8102596:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 810259a:	bf00      	nop
 810259c:	3714      	adds	r7, #20
 810259e:	46bd      	mov	sp, r7
 81025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025a4:	4770      	bx	lr
 81025a6:	bf00      	nop
 81025a8:	000fffff 	.word	0x000fffff

081025ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81025ac:	b480      	push	{r7}
 81025ae:	b083      	sub	sp, #12
 81025b0:	af00      	add	r7, sp, #0
 81025b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	689b      	ldr	r3, [r3, #8]
 81025b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 81025bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81025c0:	687a      	ldr	r2, [r7, #4]
 81025c2:	6093      	str	r3, [r2, #8]
}
 81025c4:	bf00      	nop
 81025c6:	370c      	adds	r7, #12
 81025c8:	46bd      	mov	sp, r7
 81025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025ce:	4770      	bx	lr

081025d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81025d0:	b480      	push	{r7}
 81025d2:	b083      	sub	sp, #12
 81025d4:	af00      	add	r7, sp, #0
 81025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	689b      	ldr	r3, [r3, #8]
 81025dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81025e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81025e4:	d101      	bne.n	81025ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81025e6:	2301      	movs	r3, #1
 81025e8:	e000      	b.n	81025ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81025ea:	2300      	movs	r3, #0
}
 81025ec:	4618      	mov	r0, r3
 81025ee:	370c      	adds	r7, #12
 81025f0:	46bd      	mov	sp, r7
 81025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025f6:	4770      	bx	lr

081025f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81025f8:	b480      	push	{r7}
 81025fa:	b083      	sub	sp, #12
 81025fc:	af00      	add	r7, sp, #0
 81025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	689b      	ldr	r3, [r3, #8]
 8102604:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810260c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102614:	bf00      	nop
 8102616:	370c      	adds	r7, #12
 8102618:	46bd      	mov	sp, r7
 810261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810261e:	4770      	bx	lr

08102620 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102620:	b480      	push	{r7}
 8102622:	b083      	sub	sp, #12
 8102624:	af00      	add	r7, sp, #0
 8102626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	689b      	ldr	r3, [r3, #8]
 810262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102634:	d101      	bne.n	810263a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102636:	2301      	movs	r3, #1
 8102638:	e000      	b.n	810263c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810263a:	2300      	movs	r3, #0
}
 810263c:	4618      	mov	r0, r3
 810263e:	370c      	adds	r7, #12
 8102640:	46bd      	mov	sp, r7
 8102642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102646:	4770      	bx	lr

08102648 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102648:	b480      	push	{r7}
 810264a:	b083      	sub	sp, #12
 810264c:	af00      	add	r7, sp, #0
 810264e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	689b      	ldr	r3, [r3, #8]
 8102654:	f003 0301 	and.w	r3, r3, #1
 8102658:	2b01      	cmp	r3, #1
 810265a:	d101      	bne.n	8102660 <LL_ADC_IsEnabled+0x18>
 810265c:	2301      	movs	r3, #1
 810265e:	e000      	b.n	8102662 <LL_ADC_IsEnabled+0x1a>
 8102660:	2300      	movs	r3, #0
}
 8102662:	4618      	mov	r0, r3
 8102664:	370c      	adds	r7, #12
 8102666:	46bd      	mov	sp, r7
 8102668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810266c:	4770      	bx	lr

0810266e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810266e:	b480      	push	{r7}
 8102670:	b083      	sub	sp, #12
 8102672:	af00      	add	r7, sp, #0
 8102674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	689b      	ldr	r3, [r3, #8]
 810267a:	f003 0304 	and.w	r3, r3, #4
 810267e:	2b04      	cmp	r3, #4
 8102680:	d101      	bne.n	8102686 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102682:	2301      	movs	r3, #1
 8102684:	e000      	b.n	8102688 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102686:	2300      	movs	r3, #0
}
 8102688:	4618      	mov	r0, r3
 810268a:	370c      	adds	r7, #12
 810268c:	46bd      	mov	sp, r7
 810268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102692:	4770      	bx	lr

08102694 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102694:	b480      	push	{r7}
 8102696:	b083      	sub	sp, #12
 8102698:	af00      	add	r7, sp, #0
 810269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	689b      	ldr	r3, [r3, #8]
 81026a0:	f003 0308 	and.w	r3, r3, #8
 81026a4:	2b08      	cmp	r3, #8
 81026a6:	d101      	bne.n	81026ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 81026a8:	2301      	movs	r3, #1
 81026aa:	e000      	b.n	81026ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81026ac:	2300      	movs	r3, #0
}
 81026ae:	4618      	mov	r0, r3
 81026b0:	370c      	adds	r7, #12
 81026b2:	46bd      	mov	sp, r7
 81026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026b8:	4770      	bx	lr
	...

081026bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81026bc:	b590      	push	{r4, r7, lr}
 81026be:	b089      	sub	sp, #36	; 0x24
 81026c0:	af00      	add	r7, sp, #0
 81026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81026c4:	2300      	movs	r3, #0
 81026c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81026c8:	2300      	movs	r3, #0
 81026ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d101      	bne.n	81026d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81026d2:	2301      	movs	r3, #1
 81026d4:	e18e      	b.n	81029f4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	68db      	ldr	r3, [r3, #12]
 81026da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81026dc:	687b      	ldr	r3, [r7, #4]
 81026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026e0:	2b00      	cmp	r3, #0
 81026e2:	d109      	bne.n	81026f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81026e4:	6878      	ldr	r0, [r7, #4]
 81026e6:	f7fe fddd 	bl	81012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	2200      	movs	r2, #0
 81026ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	2200      	movs	r2, #0
 81026f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	4618      	mov	r0, r3
 81026fe:	f7ff ff67 	bl	81025d0 <LL_ADC_IsDeepPowerDownEnabled>
 8102702:	4603      	mov	r3, r0
 8102704:	2b00      	cmp	r3, #0
 8102706:	d004      	beq.n	8102712 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	681b      	ldr	r3, [r3, #0]
 810270c:	4618      	mov	r0, r3
 810270e:	f7ff ff4d 	bl	81025ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102712:	687b      	ldr	r3, [r7, #4]
 8102714:	681b      	ldr	r3, [r3, #0]
 8102716:	4618      	mov	r0, r3
 8102718:	f7ff ff82 	bl	8102620 <LL_ADC_IsInternalRegulatorEnabled>
 810271c:	4603      	mov	r3, r0
 810271e:	2b00      	cmp	r3, #0
 8102720:	d113      	bne.n	810274a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	4618      	mov	r0, r3
 8102728:	f7ff ff66 	bl	81025f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 810272c:	4b9b      	ldr	r3, [pc, #620]	; (810299c <HAL_ADC_Init+0x2e0>)
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	099b      	lsrs	r3, r3, #6
 8102732:	4a9b      	ldr	r2, [pc, #620]	; (81029a0 <HAL_ADC_Init+0x2e4>)
 8102734:	fba2 2303 	umull	r2, r3, r2, r3
 8102738:	099b      	lsrs	r3, r3, #6
 810273a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810273c:	e002      	b.n	8102744 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 810273e:	68bb      	ldr	r3, [r7, #8]
 8102740:	3b01      	subs	r3, #1
 8102742:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102744:	68bb      	ldr	r3, [r7, #8]
 8102746:	2b00      	cmp	r3, #0
 8102748:	d1f9      	bne.n	810273e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	681b      	ldr	r3, [r3, #0]
 810274e:	4618      	mov	r0, r3
 8102750:	f7ff ff66 	bl	8102620 <LL_ADC_IsInternalRegulatorEnabled>
 8102754:	4603      	mov	r3, r0
 8102756:	2b00      	cmp	r3, #0
 8102758:	d10d      	bne.n	8102776 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810275e:	f043 0210 	orr.w	r2, r3, #16
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810276a:	f043 0201 	orr.w	r2, r3, #1
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102772:	2301      	movs	r3, #1
 8102774:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	4618      	mov	r0, r3
 810277c:	f7ff ff77 	bl	810266e <LL_ADC_REG_IsConversionOngoing>
 8102780:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102786:	f003 0310 	and.w	r3, r3, #16
 810278a:	2b00      	cmp	r3, #0
 810278c:	f040 8129 	bne.w	81029e2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102790:	697b      	ldr	r3, [r7, #20]
 8102792:	2b00      	cmp	r3, #0
 8102794:	f040 8125 	bne.w	81029e2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810279c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81027a0:	f043 0202 	orr.w	r2, r3, #2
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	681b      	ldr	r3, [r3, #0]
 81027ac:	4618      	mov	r0, r3
 81027ae:	f7ff ff4b 	bl	8102648 <LL_ADC_IsEnabled>
 81027b2:	4603      	mov	r3, r0
 81027b4:	2b00      	cmp	r3, #0
 81027b6:	d136      	bne.n	8102826 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	4a79      	ldr	r2, [pc, #484]	; (81029a4 <HAL_ADC_Init+0x2e8>)
 81027be:	4293      	cmp	r3, r2
 81027c0:	d004      	beq.n	81027cc <HAL_ADC_Init+0x110>
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	4a78      	ldr	r2, [pc, #480]	; (81029a8 <HAL_ADC_Init+0x2ec>)
 81027c8:	4293      	cmp	r3, r2
 81027ca:	d10e      	bne.n	81027ea <HAL_ADC_Init+0x12e>
 81027cc:	4875      	ldr	r0, [pc, #468]	; (81029a4 <HAL_ADC_Init+0x2e8>)
 81027ce:	f7ff ff3b 	bl	8102648 <LL_ADC_IsEnabled>
 81027d2:	4604      	mov	r4, r0
 81027d4:	4874      	ldr	r0, [pc, #464]	; (81029a8 <HAL_ADC_Init+0x2ec>)
 81027d6:	f7ff ff37 	bl	8102648 <LL_ADC_IsEnabled>
 81027da:	4603      	mov	r3, r0
 81027dc:	4323      	orrs	r3, r4
 81027de:	2b00      	cmp	r3, #0
 81027e0:	bf0c      	ite	eq
 81027e2:	2301      	moveq	r3, #1
 81027e4:	2300      	movne	r3, #0
 81027e6:	b2db      	uxtb	r3, r3
 81027e8:	e008      	b.n	81027fc <HAL_ADC_Init+0x140>
 81027ea:	4870      	ldr	r0, [pc, #448]	; (81029ac <HAL_ADC_Init+0x2f0>)
 81027ec:	f7ff ff2c 	bl	8102648 <LL_ADC_IsEnabled>
 81027f0:	4603      	mov	r3, r0
 81027f2:	2b00      	cmp	r3, #0
 81027f4:	bf0c      	ite	eq
 81027f6:	2301      	moveq	r3, #1
 81027f8:	2300      	movne	r3, #0
 81027fa:	b2db      	uxtb	r3, r3
 81027fc:	2b00      	cmp	r3, #0
 81027fe:	d012      	beq.n	8102826 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	4a67      	ldr	r2, [pc, #412]	; (81029a4 <HAL_ADC_Init+0x2e8>)
 8102806:	4293      	cmp	r3, r2
 8102808:	d004      	beq.n	8102814 <HAL_ADC_Init+0x158>
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	681b      	ldr	r3, [r3, #0]
 810280e:	4a66      	ldr	r2, [pc, #408]	; (81029a8 <HAL_ADC_Init+0x2ec>)
 8102810:	4293      	cmp	r3, r2
 8102812:	d101      	bne.n	8102818 <HAL_ADC_Init+0x15c>
 8102814:	4a66      	ldr	r2, [pc, #408]	; (81029b0 <HAL_ADC_Init+0x2f4>)
 8102816:	e000      	b.n	810281a <HAL_ADC_Init+0x15e>
 8102818:	4a66      	ldr	r2, [pc, #408]	; (81029b4 <HAL_ADC_Init+0x2f8>)
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	685b      	ldr	r3, [r3, #4]
 810281e:	4619      	mov	r1, r3
 8102820:	4610      	mov	r0, r2
 8102822:	f7ff fdcb 	bl	81023bc <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102826:	f7ff fd93 	bl	8102350 <HAL_GetREVID>
 810282a:	4602      	mov	r2, r0
 810282c:	f241 0303 	movw	r3, #4099	; 0x1003
 8102830:	429a      	cmp	r2, r3
 8102832:	d914      	bls.n	810285e <HAL_ADC_Init+0x1a2>
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	689b      	ldr	r3, [r3, #8]
 8102838:	2b10      	cmp	r3, #16
 810283a:	d110      	bne.n	810285e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	7d5b      	ldrb	r3, [r3, #21]
 8102840:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102846:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810284c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	7f1b      	ldrb	r3, [r3, #28]
 8102852:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8102854:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102856:	f043 030c 	orr.w	r3, r3, #12
 810285a:	61bb      	str	r3, [r7, #24]
 810285c:	e00d      	b.n	810287a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	7d5b      	ldrb	r3, [r3, #21]
 8102862:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102868:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810286e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	7f1b      	ldrb	r3, [r3, #28]
 8102874:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102876:	4313      	orrs	r3, r2
 8102878:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	7f1b      	ldrb	r3, [r3, #28]
 810287e:	2b01      	cmp	r3, #1
 8102880:	d106      	bne.n	8102890 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	6a1b      	ldr	r3, [r3, #32]
 8102886:	3b01      	subs	r3, #1
 8102888:	045b      	lsls	r3, r3, #17
 810288a:	69ba      	ldr	r2, [r7, #24]
 810288c:	4313      	orrs	r3, r2
 810288e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102894:	2b00      	cmp	r3, #0
 8102896:	d009      	beq.n	81028ac <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810289c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81028a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81028a6:	69ba      	ldr	r2, [r7, #24]
 81028a8:	4313      	orrs	r3, r2
 81028aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	68da      	ldr	r2, [r3, #12]
 81028b2:	4b41      	ldr	r3, [pc, #260]	; (81029b8 <HAL_ADC_Init+0x2fc>)
 81028b4:	4013      	ands	r3, r2
 81028b6:	687a      	ldr	r2, [r7, #4]
 81028b8:	6812      	ldr	r2, [r2, #0]
 81028ba:	69b9      	ldr	r1, [r7, #24]
 81028bc:	430b      	orrs	r3, r1
 81028be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4618      	mov	r0, r3
 81028c6:	f7ff fed2 	bl	810266e <LL_ADC_REG_IsConversionOngoing>
 81028ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	4618      	mov	r0, r3
 81028d2:	f7ff fedf 	bl	8102694 <LL_ADC_INJ_IsConversionOngoing>
 81028d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81028d8:	693b      	ldr	r3, [r7, #16]
 81028da:	2b00      	cmp	r3, #0
 81028dc:	d14c      	bne.n	8102978 <HAL_ADC_Init+0x2bc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81028de:	68fb      	ldr	r3, [r7, #12]
 81028e0:	2b00      	cmp	r3, #0
 81028e2:	d149      	bne.n	8102978 <HAL_ADC_Init+0x2bc>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	7d1b      	ldrb	r3, [r3, #20]
 81028e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81028ee:	4313      	orrs	r3, r2
 81028f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	68db      	ldr	r3, [r3, #12]
 81028f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81028fc:	f023 0303 	bic.w	r3, r3, #3
 8102900:	687a      	ldr	r2, [r7, #4]
 8102902:	6812      	ldr	r2, [r2, #0]
 8102904:	69b9      	ldr	r1, [r7, #24]
 8102906:	430b      	orrs	r3, r1
 8102908:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8102910:	2b01      	cmp	r3, #1
 8102912:	d11b      	bne.n	810294c <HAL_ADC_Init+0x290>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102918:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	691a      	ldr	r2, [r3, #16]
 8102920:	4b26      	ldr	r3, [pc, #152]	; (81029bc <HAL_ADC_Init+0x300>)
 8102922:	4013      	ands	r3, r2
 8102924:	687a      	ldr	r2, [r7, #4]
 8102926:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102928:	3a01      	subs	r2, #1
 810292a:	0411      	lsls	r1, r2, #16
 810292c:	687a      	ldr	r2, [r7, #4]
 810292e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102930:	4311      	orrs	r1, r2
 8102932:	687a      	ldr	r2, [r7, #4]
 8102934:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102936:	4311      	orrs	r1, r2
 8102938:	687a      	ldr	r2, [r7, #4]
 810293a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810293c:	430a      	orrs	r2, r1
 810293e:	431a      	orrs	r2, r3
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	f042 0201 	orr.w	r2, r2, #1
 8102948:	611a      	str	r2, [r3, #16]
 810294a:	e007      	b.n	810295c <HAL_ADC_Init+0x2a0>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	681b      	ldr	r3, [r3, #0]
 8102950:	691a      	ldr	r2, [r3, #16]
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	f022 0201 	bic.w	r2, r2, #1
 810295a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	691b      	ldr	r3, [r3, #16]
 8102962:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810296a:	687b      	ldr	r3, [r7, #4]
 810296c:	681b      	ldr	r3, [r3, #0]
 810296e:	430a      	orrs	r2, r1
 8102970:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102972:	6878      	ldr	r0, [r7, #4]
 8102974:	f000 fb56 	bl	8103024 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	68db      	ldr	r3, [r3, #12]
 810297c:	2b01      	cmp	r3, #1
 810297e:	d11f      	bne.n	81029c0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102986:	f023 010f 	bic.w	r1, r3, #15
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	699b      	ldr	r3, [r3, #24]
 810298e:	1e5a      	subs	r2, r3, #1
 8102990:	687b      	ldr	r3, [r7, #4]
 8102992:	681b      	ldr	r3, [r3, #0]
 8102994:	430a      	orrs	r2, r1
 8102996:	631a      	str	r2, [r3, #48]	; 0x30
 8102998:	e01a      	b.n	81029d0 <HAL_ADC_Init+0x314>
 810299a:	bf00      	nop
 810299c:	10000000 	.word	0x10000000
 81029a0:	053e2d63 	.word	0x053e2d63
 81029a4:	40022000 	.word	0x40022000
 81029a8:	40022100 	.word	0x40022100
 81029ac:	58026000 	.word	0x58026000
 81029b0:	40022300 	.word	0x40022300
 81029b4:	58026300 	.word	0x58026300
 81029b8:	fff0c003 	.word	0xfff0c003
 81029bc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	f022 020f 	bic.w	r2, r2, #15
 81029ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029d4:	f023 0303 	bic.w	r3, r3, #3
 81029d8:	f043 0201 	orr.w	r2, r3, #1
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	655a      	str	r2, [r3, #84]	; 0x54
 81029e0:	e007      	b.n	81029f2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029e6:	f043 0210 	orr.w	r2, r3, #16
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81029ee:	2301      	movs	r3, #1
 81029f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81029f2:	7ffb      	ldrb	r3, [r7, #31]
}
 81029f4:	4618      	mov	r0, r3
 81029f6:	3724      	adds	r7, #36	; 0x24
 81029f8:	46bd      	mov	sp, r7
 81029fa:	bd90      	pop	{r4, r7, pc}

081029fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81029fc:	b590      	push	{r4, r7, lr}
 81029fe:	b099      	sub	sp, #100	; 0x64
 8102a00:	af00      	add	r7, sp, #0
 8102a02:	6078      	str	r0, [r7, #4]
 8102a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102a06:	2300      	movs	r3, #0
 8102a08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102a0c:	2300      	movs	r3, #0
 8102a0e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102a10:	683b      	ldr	r3, [r7, #0]
 8102a12:	68db      	ldr	r3, [r3, #12]
 8102a14:	4a99      	ldr	r2, [pc, #612]	; (8102c7c <HAL_ADC_ConfigChannel+0x280>)
 8102a16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102a1e:	2b01      	cmp	r3, #1
 8102a20:	d101      	bne.n	8102a26 <HAL_ADC_ConfigChannel+0x2a>
 8102a22:	2302      	movs	r3, #2
 8102a24:	e2e6      	b.n	8102ff4 <HAL_ADC_ConfigChannel+0x5f8>
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	2201      	movs	r2, #1
 8102a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	4618      	mov	r0, r3
 8102a34:	f7ff fe1b 	bl	810266e <LL_ADC_REG_IsConversionOngoing>
 8102a38:	4603      	mov	r3, r0
 8102a3a:	2b00      	cmp	r3, #0
 8102a3c:	f040 82cb 	bne.w	8102fd6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102a40:	683b      	ldr	r3, [r7, #0]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102a48:	2b00      	cmp	r3, #0
 8102a4a:	d108      	bne.n	8102a5e <HAL_ADC_ConfigChannel+0x62>
 8102a4c:	683b      	ldr	r3, [r7, #0]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	0e9b      	lsrs	r3, r3, #26
 8102a52:	f003 031f 	and.w	r3, r3, #31
 8102a56:	2201      	movs	r2, #1
 8102a58:	fa02 f303 	lsl.w	r3, r2, r3
 8102a5c:	e00f      	b.n	8102a7e <HAL_ADC_ConfigChannel+0x82>
 8102a5e:	683b      	ldr	r3, [r7, #0]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102a66:	fa93 f3a3 	rbit	r3, r3
 8102a6a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102a6e:	fab3 f383 	clz	r3, r3
 8102a72:	b2db      	uxtb	r3, r3
 8102a74:	f003 031f 	and.w	r3, r3, #31
 8102a78:	2201      	movs	r2, #1
 8102a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8102a7e:	687a      	ldr	r2, [r7, #4]
 8102a80:	6812      	ldr	r2, [r2, #0]
 8102a82:	69d1      	ldr	r1, [r2, #28]
 8102a84:	687a      	ldr	r2, [r7, #4]
 8102a86:	6812      	ldr	r2, [r2, #0]
 8102a88:	430b      	orrs	r3, r1
 8102a8a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	6818      	ldr	r0, [r3, #0]
 8102a90:	683b      	ldr	r3, [r7, #0]
 8102a92:	6859      	ldr	r1, [r3, #4]
 8102a94:	683b      	ldr	r3, [r7, #0]
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	461a      	mov	r2, r3
 8102a9a:	f7ff fd11 	bl	81024c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	681b      	ldr	r3, [r3, #0]
 8102aa2:	4618      	mov	r0, r3
 8102aa4:	f7ff fde3 	bl	810266e <LL_ADC_REG_IsConversionOngoing>
 8102aa8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	4618      	mov	r0, r3
 8102ab0:	f7ff fdf0 	bl	8102694 <LL_ADC_INJ_IsConversionOngoing>
 8102ab4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102ab8:	2b00      	cmp	r3, #0
 8102aba:	f040 80b3 	bne.w	8102c24 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	f040 80af 	bne.w	8102c24 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	6818      	ldr	r0, [r3, #0]
 8102aca:	683b      	ldr	r3, [r7, #0]
 8102acc:	6819      	ldr	r1, [r3, #0]
 8102ace:	683b      	ldr	r3, [r7, #0]
 8102ad0:	689b      	ldr	r3, [r3, #8]
 8102ad2:	461a      	mov	r2, r3
 8102ad4:	f7ff fd1d 	bl	8102512 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102ad8:	4b69      	ldr	r3, [pc, #420]	; (8102c80 <HAL_ADC_ConfigChannel+0x284>)
 8102ada:	681b      	ldr	r3, [r3, #0]
 8102adc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102ae4:	d10b      	bne.n	8102afe <HAL_ADC_ConfigChannel+0x102>
 8102ae6:	683b      	ldr	r3, [r7, #0]
 8102ae8:	695a      	ldr	r2, [r3, #20]
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	681b      	ldr	r3, [r3, #0]
 8102aee:	68db      	ldr	r3, [r3, #12]
 8102af0:	089b      	lsrs	r3, r3, #2
 8102af2:	f003 0307 	and.w	r3, r3, #7
 8102af6:	005b      	lsls	r3, r3, #1
 8102af8:	fa02 f303 	lsl.w	r3, r2, r3
 8102afc:	e01d      	b.n	8102b3a <HAL_ADC_ConfigChannel+0x13e>
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	681b      	ldr	r3, [r3, #0]
 8102b02:	68db      	ldr	r3, [r3, #12]
 8102b04:	f003 0310 	and.w	r3, r3, #16
 8102b08:	2b00      	cmp	r3, #0
 8102b0a:	d10b      	bne.n	8102b24 <HAL_ADC_ConfigChannel+0x128>
 8102b0c:	683b      	ldr	r3, [r7, #0]
 8102b0e:	695a      	ldr	r2, [r3, #20]
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	68db      	ldr	r3, [r3, #12]
 8102b16:	089b      	lsrs	r3, r3, #2
 8102b18:	f003 0307 	and.w	r3, r3, #7
 8102b1c:	005b      	lsls	r3, r3, #1
 8102b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8102b22:	e00a      	b.n	8102b3a <HAL_ADC_ConfigChannel+0x13e>
 8102b24:	683b      	ldr	r3, [r7, #0]
 8102b26:	695a      	ldr	r2, [r3, #20]
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	68db      	ldr	r3, [r3, #12]
 8102b2e:	089b      	lsrs	r3, r3, #2
 8102b30:	f003 0304 	and.w	r3, r3, #4
 8102b34:	005b      	lsls	r3, r3, #1
 8102b36:	fa02 f303 	lsl.w	r3, r2, r3
 8102b3a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102b3c:	683b      	ldr	r3, [r7, #0]
 8102b3e:	691b      	ldr	r3, [r3, #16]
 8102b40:	2b04      	cmp	r3, #4
 8102b42:	d027      	beq.n	8102b94 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	6818      	ldr	r0, [r3, #0]
 8102b48:	683b      	ldr	r3, [r7, #0]
 8102b4a:	6919      	ldr	r1, [r3, #16]
 8102b4c:	683b      	ldr	r3, [r7, #0]
 8102b4e:	681a      	ldr	r2, [r3, #0]
 8102b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102b52:	f7ff fc67 	bl	8102424 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	6818      	ldr	r0, [r3, #0]
 8102b5a:	683b      	ldr	r3, [r7, #0]
 8102b5c:	6919      	ldr	r1, [r3, #16]
 8102b5e:	683b      	ldr	r3, [r7, #0]
 8102b60:	7e5b      	ldrb	r3, [r3, #25]
 8102b62:	2b01      	cmp	r3, #1
 8102b64:	d102      	bne.n	8102b6c <HAL_ADC_ConfigChannel+0x170>
 8102b66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102b6a:	e000      	b.n	8102b6e <HAL_ADC_ConfigChannel+0x172>
 8102b6c:	2300      	movs	r3, #0
 8102b6e:	461a      	mov	r2, r3
 8102b70:	f7ff fc8e 	bl	8102490 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	6818      	ldr	r0, [r3, #0]
 8102b78:	683b      	ldr	r3, [r7, #0]
 8102b7a:	6919      	ldr	r1, [r3, #16]
 8102b7c:	683b      	ldr	r3, [r7, #0]
 8102b7e:	7e1b      	ldrb	r3, [r3, #24]
 8102b80:	2b01      	cmp	r3, #1
 8102b82:	d102      	bne.n	8102b8a <HAL_ADC_ConfigChannel+0x18e>
 8102b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102b88:	e000      	b.n	8102b8c <HAL_ADC_ConfigChannel+0x190>
 8102b8a:	2300      	movs	r3, #0
 8102b8c:	461a      	mov	r2, r3
 8102b8e:	f7ff fc66 	bl	810245e <LL_ADC_SetDataRightShift>
 8102b92:	e047      	b.n	8102c24 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	681b      	ldr	r3, [r3, #0]
 8102b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102b9e:	683b      	ldr	r3, [r7, #0]
 8102ba0:	681b      	ldr	r3, [r3, #0]
 8102ba2:	069b      	lsls	r3, r3, #26
 8102ba4:	429a      	cmp	r2, r3
 8102ba6:	d107      	bne.n	8102bb8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102bb6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102bbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102bc2:	683b      	ldr	r3, [r7, #0]
 8102bc4:	681b      	ldr	r3, [r3, #0]
 8102bc6:	069b      	lsls	r3, r3, #26
 8102bc8:	429a      	cmp	r2, r3
 8102bca:	d107      	bne.n	8102bdc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102bcc:	687b      	ldr	r3, [r7, #4]
 8102bce:	681b      	ldr	r3, [r3, #0]
 8102bd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102bda:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102be6:	683b      	ldr	r3, [r7, #0]
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	069b      	lsls	r3, r3, #26
 8102bec:	429a      	cmp	r2, r3
 8102bee:	d107      	bne.n	8102c00 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102bfe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102c0a:	683b      	ldr	r3, [r7, #0]
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	069b      	lsls	r3, r3, #26
 8102c10:	429a      	cmp	r2, r3
 8102c12:	d107      	bne.n	8102c24 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102c22:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	4618      	mov	r0, r3
 8102c2a:	f7ff fd0d 	bl	8102648 <LL_ADC_IsEnabled>
 8102c2e:	4603      	mov	r3, r0
 8102c30:	2b00      	cmp	r3, #0
 8102c32:	f040 81d9 	bne.w	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	6818      	ldr	r0, [r3, #0]
 8102c3a:	683b      	ldr	r3, [r7, #0]
 8102c3c:	6819      	ldr	r1, [r3, #0]
 8102c3e:	683b      	ldr	r3, [r7, #0]
 8102c40:	68db      	ldr	r3, [r3, #12]
 8102c42:	461a      	mov	r2, r3
 8102c44:	f7ff fc8e 	bl	8102564 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102c48:	683b      	ldr	r3, [r7, #0]
 8102c4a:	68db      	ldr	r3, [r3, #12]
 8102c4c:	4a0b      	ldr	r2, [pc, #44]	; (8102c7c <HAL_ADC_ConfigChannel+0x280>)
 8102c4e:	4293      	cmp	r3, r2
 8102c50:	f040 8101 	bne.w	8102e56 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102c58:	683b      	ldr	r3, [r7, #0]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c60:	2b00      	cmp	r3, #0
 8102c62:	d10f      	bne.n	8102c84 <HAL_ADC_ConfigChannel+0x288>
 8102c64:	683b      	ldr	r3, [r7, #0]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	0e9b      	lsrs	r3, r3, #26
 8102c6a:	3301      	adds	r3, #1
 8102c6c:	f003 031f 	and.w	r3, r3, #31
 8102c70:	2b09      	cmp	r3, #9
 8102c72:	bf94      	ite	ls
 8102c74:	2301      	movls	r3, #1
 8102c76:	2300      	movhi	r3, #0
 8102c78:	b2db      	uxtb	r3, r3
 8102c7a:	e016      	b.n	8102caa <HAL_ADC_ConfigChannel+0x2ae>
 8102c7c:	47ff0000 	.word	0x47ff0000
 8102c80:	5c001000 	.word	0x5c001000
 8102c84:	683b      	ldr	r3, [r7, #0]
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102c8c:	fa93 f3a3 	rbit	r3, r3
 8102c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102c94:	fab3 f383 	clz	r3, r3
 8102c98:	b2db      	uxtb	r3, r3
 8102c9a:	3301      	adds	r3, #1
 8102c9c:	f003 031f 	and.w	r3, r3, #31
 8102ca0:	2b09      	cmp	r3, #9
 8102ca2:	bf94      	ite	ls
 8102ca4:	2301      	movls	r3, #1
 8102ca6:	2300      	movhi	r3, #0
 8102ca8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102caa:	2b00      	cmp	r3, #0
 8102cac:	d064      	beq.n	8102d78 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102cae:	683b      	ldr	r3, [r7, #0]
 8102cb0:	681b      	ldr	r3, [r3, #0]
 8102cb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cb6:	2b00      	cmp	r3, #0
 8102cb8:	d107      	bne.n	8102cca <HAL_ADC_ConfigChannel+0x2ce>
 8102cba:	683b      	ldr	r3, [r7, #0]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	0e9b      	lsrs	r3, r3, #26
 8102cc0:	3301      	adds	r3, #1
 8102cc2:	069b      	lsls	r3, r3, #26
 8102cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102cc8:	e00e      	b.n	8102ce8 <HAL_ADC_ConfigChannel+0x2ec>
 8102cca:	683b      	ldr	r3, [r7, #0]
 8102ccc:	681b      	ldr	r3, [r3, #0]
 8102cce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102cd2:	fa93 f3a3 	rbit	r3, r3
 8102cd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8102cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102cda:	fab3 f383 	clz	r3, r3
 8102cde:	b2db      	uxtb	r3, r3
 8102ce0:	3301      	adds	r3, #1
 8102ce2:	069b      	lsls	r3, r3, #26
 8102ce4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102ce8:	683b      	ldr	r3, [r7, #0]
 8102cea:	681b      	ldr	r3, [r3, #0]
 8102cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cf0:	2b00      	cmp	r3, #0
 8102cf2:	d109      	bne.n	8102d08 <HAL_ADC_ConfigChannel+0x30c>
 8102cf4:	683b      	ldr	r3, [r7, #0]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	0e9b      	lsrs	r3, r3, #26
 8102cfa:	3301      	adds	r3, #1
 8102cfc:	f003 031f 	and.w	r3, r3, #31
 8102d00:	2101      	movs	r1, #1
 8102d02:	fa01 f303 	lsl.w	r3, r1, r3
 8102d06:	e010      	b.n	8102d2a <HAL_ADC_ConfigChannel+0x32e>
 8102d08:	683b      	ldr	r3, [r7, #0]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d10:	fa93 f3a3 	rbit	r3, r3
 8102d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8102d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d18:	fab3 f383 	clz	r3, r3
 8102d1c:	b2db      	uxtb	r3, r3
 8102d1e:	3301      	adds	r3, #1
 8102d20:	f003 031f 	and.w	r3, r3, #31
 8102d24:	2101      	movs	r1, #1
 8102d26:	fa01 f303 	lsl.w	r3, r1, r3
 8102d2a:	ea42 0103 	orr.w	r1, r2, r3
 8102d2e:	683b      	ldr	r3, [r7, #0]
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d10a      	bne.n	8102d50 <HAL_ADC_ConfigChannel+0x354>
 8102d3a:	683b      	ldr	r3, [r7, #0]
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	0e9b      	lsrs	r3, r3, #26
 8102d40:	3301      	adds	r3, #1
 8102d42:	f003 021f 	and.w	r2, r3, #31
 8102d46:	4613      	mov	r3, r2
 8102d48:	005b      	lsls	r3, r3, #1
 8102d4a:	4413      	add	r3, r2
 8102d4c:	051b      	lsls	r3, r3, #20
 8102d4e:	e011      	b.n	8102d74 <HAL_ADC_ConfigChannel+0x378>
 8102d50:	683b      	ldr	r3, [r7, #0]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d58:	fa93 f3a3 	rbit	r3, r3
 8102d5c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8102d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102d60:	fab3 f383 	clz	r3, r3
 8102d64:	b2db      	uxtb	r3, r3
 8102d66:	3301      	adds	r3, #1
 8102d68:	f003 021f 	and.w	r2, r3, #31
 8102d6c:	4613      	mov	r3, r2
 8102d6e:	005b      	lsls	r3, r3, #1
 8102d70:	4413      	add	r3, r2
 8102d72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102d74:	430b      	orrs	r3, r1
 8102d76:	e069      	b.n	8102e4c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102d78:	683b      	ldr	r3, [r7, #0]
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102d80:	2b00      	cmp	r3, #0
 8102d82:	d107      	bne.n	8102d94 <HAL_ADC_ConfigChannel+0x398>
 8102d84:	683b      	ldr	r3, [r7, #0]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	0e9b      	lsrs	r3, r3, #26
 8102d8a:	3301      	adds	r3, #1
 8102d8c:	069b      	lsls	r3, r3, #26
 8102d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102d92:	e00e      	b.n	8102db2 <HAL_ADC_ConfigChannel+0x3b6>
 8102d94:	683b      	ldr	r3, [r7, #0]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102d9a:	6a3b      	ldr	r3, [r7, #32]
 8102d9c:	fa93 f3a3 	rbit	r3, r3
 8102da0:	61fb      	str	r3, [r7, #28]
  return result;
 8102da2:	69fb      	ldr	r3, [r7, #28]
 8102da4:	fab3 f383 	clz	r3, r3
 8102da8:	b2db      	uxtb	r3, r3
 8102daa:	3301      	adds	r3, #1
 8102dac:	069b      	lsls	r3, r3, #26
 8102dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102db2:	683b      	ldr	r3, [r7, #0]
 8102db4:	681b      	ldr	r3, [r3, #0]
 8102db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102dba:	2b00      	cmp	r3, #0
 8102dbc:	d109      	bne.n	8102dd2 <HAL_ADC_ConfigChannel+0x3d6>
 8102dbe:	683b      	ldr	r3, [r7, #0]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	0e9b      	lsrs	r3, r3, #26
 8102dc4:	3301      	adds	r3, #1
 8102dc6:	f003 031f 	and.w	r3, r3, #31
 8102dca:	2101      	movs	r1, #1
 8102dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8102dd0:	e010      	b.n	8102df4 <HAL_ADC_ConfigChannel+0x3f8>
 8102dd2:	683b      	ldr	r3, [r7, #0]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102dd8:	69bb      	ldr	r3, [r7, #24]
 8102dda:	fa93 f3a3 	rbit	r3, r3
 8102dde:	617b      	str	r3, [r7, #20]
  return result;
 8102de0:	697b      	ldr	r3, [r7, #20]
 8102de2:	fab3 f383 	clz	r3, r3
 8102de6:	b2db      	uxtb	r3, r3
 8102de8:	3301      	adds	r3, #1
 8102dea:	f003 031f 	and.w	r3, r3, #31
 8102dee:	2101      	movs	r1, #1
 8102df0:	fa01 f303 	lsl.w	r3, r1, r3
 8102df4:	ea42 0103 	orr.w	r1, r2, r3
 8102df8:	683b      	ldr	r3, [r7, #0]
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e00:	2b00      	cmp	r3, #0
 8102e02:	d10d      	bne.n	8102e20 <HAL_ADC_ConfigChannel+0x424>
 8102e04:	683b      	ldr	r3, [r7, #0]
 8102e06:	681b      	ldr	r3, [r3, #0]
 8102e08:	0e9b      	lsrs	r3, r3, #26
 8102e0a:	3301      	adds	r3, #1
 8102e0c:	f003 021f 	and.w	r2, r3, #31
 8102e10:	4613      	mov	r3, r2
 8102e12:	005b      	lsls	r3, r3, #1
 8102e14:	4413      	add	r3, r2
 8102e16:	3b1e      	subs	r3, #30
 8102e18:	051b      	lsls	r3, r3, #20
 8102e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102e1e:	e014      	b.n	8102e4a <HAL_ADC_ConfigChannel+0x44e>
 8102e20:	683b      	ldr	r3, [r7, #0]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102e26:	693b      	ldr	r3, [r7, #16]
 8102e28:	fa93 f3a3 	rbit	r3, r3
 8102e2c:	60fb      	str	r3, [r7, #12]
  return result;
 8102e2e:	68fb      	ldr	r3, [r7, #12]
 8102e30:	fab3 f383 	clz	r3, r3
 8102e34:	b2db      	uxtb	r3, r3
 8102e36:	3301      	adds	r3, #1
 8102e38:	f003 021f 	and.w	r2, r3, #31
 8102e3c:	4613      	mov	r3, r2
 8102e3e:	005b      	lsls	r3, r3, #1
 8102e40:	4413      	add	r3, r2
 8102e42:	3b1e      	subs	r3, #30
 8102e44:	051b      	lsls	r3, r3, #20
 8102e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102e4a:	430b      	orrs	r3, r1
 8102e4c:	683a      	ldr	r2, [r7, #0]
 8102e4e:	6892      	ldr	r2, [r2, #8]
 8102e50:	4619      	mov	r1, r3
 8102e52:	f7ff fb5e 	bl	8102512 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102e56:	683b      	ldr	r3, [r7, #0]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	f280 80c4 	bge.w	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	4a65      	ldr	r2, [pc, #404]	; (8102ffc <HAL_ADC_ConfigChannel+0x600>)
 8102e66:	4293      	cmp	r3, r2
 8102e68:	d004      	beq.n	8102e74 <HAL_ADC_ConfigChannel+0x478>
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	4a64      	ldr	r2, [pc, #400]	; (8103000 <HAL_ADC_ConfigChannel+0x604>)
 8102e70:	4293      	cmp	r3, r2
 8102e72:	d101      	bne.n	8102e78 <HAL_ADC_ConfigChannel+0x47c>
 8102e74:	4b63      	ldr	r3, [pc, #396]	; (8103004 <HAL_ADC_ConfigChannel+0x608>)
 8102e76:	e000      	b.n	8102e7a <HAL_ADC_ConfigChannel+0x47e>
 8102e78:	4b63      	ldr	r3, [pc, #396]	; (8103008 <HAL_ADC_ConfigChannel+0x60c>)
 8102e7a:	4618      	mov	r0, r3
 8102e7c:	f7ff fac4 	bl	8102408 <LL_ADC_GetCommonPathInternalCh>
 8102e80:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	681b      	ldr	r3, [r3, #0]
 8102e86:	4a5d      	ldr	r2, [pc, #372]	; (8102ffc <HAL_ADC_ConfigChannel+0x600>)
 8102e88:	4293      	cmp	r3, r2
 8102e8a:	d004      	beq.n	8102e96 <HAL_ADC_ConfigChannel+0x49a>
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	4a5b      	ldr	r2, [pc, #364]	; (8103000 <HAL_ADC_ConfigChannel+0x604>)
 8102e92:	4293      	cmp	r3, r2
 8102e94:	d10e      	bne.n	8102eb4 <HAL_ADC_ConfigChannel+0x4b8>
 8102e96:	4859      	ldr	r0, [pc, #356]	; (8102ffc <HAL_ADC_ConfigChannel+0x600>)
 8102e98:	f7ff fbd6 	bl	8102648 <LL_ADC_IsEnabled>
 8102e9c:	4604      	mov	r4, r0
 8102e9e:	4858      	ldr	r0, [pc, #352]	; (8103000 <HAL_ADC_ConfigChannel+0x604>)
 8102ea0:	f7ff fbd2 	bl	8102648 <LL_ADC_IsEnabled>
 8102ea4:	4603      	mov	r3, r0
 8102ea6:	4323      	orrs	r3, r4
 8102ea8:	2b00      	cmp	r3, #0
 8102eaa:	bf0c      	ite	eq
 8102eac:	2301      	moveq	r3, #1
 8102eae:	2300      	movne	r3, #0
 8102eb0:	b2db      	uxtb	r3, r3
 8102eb2:	e008      	b.n	8102ec6 <HAL_ADC_ConfigChannel+0x4ca>
 8102eb4:	4855      	ldr	r0, [pc, #340]	; (810300c <HAL_ADC_ConfigChannel+0x610>)
 8102eb6:	f7ff fbc7 	bl	8102648 <LL_ADC_IsEnabled>
 8102eba:	4603      	mov	r3, r0
 8102ebc:	2b00      	cmp	r3, #0
 8102ebe:	bf0c      	ite	eq
 8102ec0:	2301      	moveq	r3, #1
 8102ec2:	2300      	movne	r3, #0
 8102ec4:	b2db      	uxtb	r3, r3
 8102ec6:	2b00      	cmp	r3, #0
 8102ec8:	d07b      	beq.n	8102fc2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102eca:	683b      	ldr	r3, [r7, #0]
 8102ecc:	681b      	ldr	r3, [r3, #0]
 8102ece:	4a50      	ldr	r2, [pc, #320]	; (8103010 <HAL_ADC_ConfigChannel+0x614>)
 8102ed0:	4293      	cmp	r3, r2
 8102ed2:	d12e      	bne.n	8102f32 <HAL_ADC_ConfigChannel+0x536>
 8102ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102eda:	2b00      	cmp	r3, #0
 8102edc:	d129      	bne.n	8102f32 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	681b      	ldr	r3, [r3, #0]
 8102ee2:	4a4a      	ldr	r2, [pc, #296]	; (810300c <HAL_ADC_ConfigChannel+0x610>)
 8102ee4:	4293      	cmp	r3, r2
 8102ee6:	d17f      	bne.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a43      	ldr	r2, [pc, #268]	; (8102ffc <HAL_ADC_ConfigChannel+0x600>)
 8102eee:	4293      	cmp	r3, r2
 8102ef0:	d004      	beq.n	8102efc <HAL_ADC_ConfigChannel+0x500>
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	4a42      	ldr	r2, [pc, #264]	; (8103000 <HAL_ADC_ConfigChannel+0x604>)
 8102ef8:	4293      	cmp	r3, r2
 8102efa:	d101      	bne.n	8102f00 <HAL_ADC_ConfigChannel+0x504>
 8102efc:	4a41      	ldr	r2, [pc, #260]	; (8103004 <HAL_ADC_ConfigChannel+0x608>)
 8102efe:	e000      	b.n	8102f02 <HAL_ADC_ConfigChannel+0x506>
 8102f00:	4a41      	ldr	r2, [pc, #260]	; (8103008 <HAL_ADC_ConfigChannel+0x60c>)
 8102f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102f08:	4619      	mov	r1, r3
 8102f0a:	4610      	mov	r0, r2
 8102f0c:	f7ff fa69 	bl	81023e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8102f10:	4b40      	ldr	r3, [pc, #256]	; (8103014 <HAL_ADC_ConfigChannel+0x618>)
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	099b      	lsrs	r3, r3, #6
 8102f16:	4a40      	ldr	r2, [pc, #256]	; (8103018 <HAL_ADC_ConfigChannel+0x61c>)
 8102f18:	fba2 2303 	umull	r2, r3, r2, r3
 8102f1c:	099b      	lsrs	r3, r3, #6
 8102f1e:	005b      	lsls	r3, r3, #1
 8102f20:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8102f22:	e002      	b.n	8102f2a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8102f24:	68bb      	ldr	r3, [r7, #8]
 8102f26:	3b01      	subs	r3, #1
 8102f28:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8102f2a:	68bb      	ldr	r3, [r7, #8]
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	d1f9      	bne.n	8102f24 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102f30:	e05a      	b.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102f32:	683b      	ldr	r3, [r7, #0]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	4a39      	ldr	r2, [pc, #228]	; (810301c <HAL_ADC_ConfigChannel+0x620>)
 8102f38:	4293      	cmp	r3, r2
 8102f3a:	d11e      	bne.n	8102f7a <HAL_ADC_ConfigChannel+0x57e>
 8102f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102f42:	2b00      	cmp	r3, #0
 8102f44:	d119      	bne.n	8102f7a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	4a30      	ldr	r2, [pc, #192]	; (810300c <HAL_ADC_ConfigChannel+0x610>)
 8102f4c:	4293      	cmp	r3, r2
 8102f4e:	d14b      	bne.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	681b      	ldr	r3, [r3, #0]
 8102f54:	4a29      	ldr	r2, [pc, #164]	; (8102ffc <HAL_ADC_ConfigChannel+0x600>)
 8102f56:	4293      	cmp	r3, r2
 8102f58:	d004      	beq.n	8102f64 <HAL_ADC_ConfigChannel+0x568>
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	4a28      	ldr	r2, [pc, #160]	; (8103000 <HAL_ADC_ConfigChannel+0x604>)
 8102f60:	4293      	cmp	r3, r2
 8102f62:	d101      	bne.n	8102f68 <HAL_ADC_ConfigChannel+0x56c>
 8102f64:	4a27      	ldr	r2, [pc, #156]	; (8103004 <HAL_ADC_ConfigChannel+0x608>)
 8102f66:	e000      	b.n	8102f6a <HAL_ADC_ConfigChannel+0x56e>
 8102f68:	4a27      	ldr	r2, [pc, #156]	; (8103008 <HAL_ADC_ConfigChannel+0x60c>)
 8102f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102f70:	4619      	mov	r1, r3
 8102f72:	4610      	mov	r0, r2
 8102f74:	f7ff fa35 	bl	81023e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102f78:	e036      	b.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102f7a:	683b      	ldr	r3, [r7, #0]
 8102f7c:	681b      	ldr	r3, [r3, #0]
 8102f7e:	4a28      	ldr	r2, [pc, #160]	; (8103020 <HAL_ADC_ConfigChannel+0x624>)
 8102f80:	4293      	cmp	r3, r2
 8102f82:	d131      	bne.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
 8102f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102f8a:	2b00      	cmp	r3, #0
 8102f8c:	d12c      	bne.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102f8e:	687b      	ldr	r3, [r7, #4]
 8102f90:	681b      	ldr	r3, [r3, #0]
 8102f92:	4a1e      	ldr	r2, [pc, #120]	; (810300c <HAL_ADC_ConfigChannel+0x610>)
 8102f94:	4293      	cmp	r3, r2
 8102f96:	d127      	bne.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	4a17      	ldr	r2, [pc, #92]	; (8102ffc <HAL_ADC_ConfigChannel+0x600>)
 8102f9e:	4293      	cmp	r3, r2
 8102fa0:	d004      	beq.n	8102fac <HAL_ADC_ConfigChannel+0x5b0>
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	681b      	ldr	r3, [r3, #0]
 8102fa6:	4a16      	ldr	r2, [pc, #88]	; (8103000 <HAL_ADC_ConfigChannel+0x604>)
 8102fa8:	4293      	cmp	r3, r2
 8102faa:	d101      	bne.n	8102fb0 <HAL_ADC_ConfigChannel+0x5b4>
 8102fac:	4a15      	ldr	r2, [pc, #84]	; (8103004 <HAL_ADC_ConfigChannel+0x608>)
 8102fae:	e000      	b.n	8102fb2 <HAL_ADC_ConfigChannel+0x5b6>
 8102fb0:	4a15      	ldr	r2, [pc, #84]	; (8103008 <HAL_ADC_ConfigChannel+0x60c>)
 8102fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102fb8:	4619      	mov	r1, r3
 8102fba:	4610      	mov	r0, r2
 8102fbc:	f7ff fa11 	bl	81023e2 <LL_ADC_SetCommonPathInternalCh>
 8102fc0:	e012      	b.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fc6:	f043 0220 	orr.w	r2, r3, #32
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102fce:	2301      	movs	r3, #1
 8102fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8102fd4:	e008      	b.n	8102fe8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fda:	f043 0220 	orr.w	r2, r3, #32
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102fe2:	2301      	movs	r3, #1
 8102fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	2200      	movs	r2, #0
 8102fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8102ff4:	4618      	mov	r0, r3
 8102ff6:	3764      	adds	r7, #100	; 0x64
 8102ff8:	46bd      	mov	sp, r7
 8102ffa:	bd90      	pop	{r4, r7, pc}
 8102ffc:	40022000 	.word	0x40022000
 8103000:	40022100 	.word	0x40022100
 8103004:	40022300 	.word	0x40022300
 8103008:	58026300 	.word	0x58026300
 810300c:	58026000 	.word	0x58026000
 8103010:	cb840000 	.word	0xcb840000
 8103014:	10000000 	.word	0x10000000
 8103018:	053e2d63 	.word	0x053e2d63
 810301c:	c7520000 	.word	0xc7520000
 8103020:	cfb80000 	.word	0xcfb80000

08103024 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8103024:	b580      	push	{r7, lr}
 8103026:	b084      	sub	sp, #16
 8103028:	af00      	add	r7, sp, #0
 810302a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	4a70      	ldr	r2, [pc, #448]	; (81031f4 <ADC_ConfigureBoostMode+0x1d0>)
 8103032:	4293      	cmp	r3, r2
 8103034:	d004      	beq.n	8103040 <ADC_ConfigureBoostMode+0x1c>
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	4a6f      	ldr	r2, [pc, #444]	; (81031f8 <ADC_ConfigureBoostMode+0x1d4>)
 810303c:	4293      	cmp	r3, r2
 810303e:	d109      	bne.n	8103054 <ADC_ConfigureBoostMode+0x30>
 8103040:	4b6e      	ldr	r3, [pc, #440]	; (81031fc <ADC_ConfigureBoostMode+0x1d8>)
 8103042:	689b      	ldr	r3, [r3, #8]
 8103044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103048:	2b00      	cmp	r3, #0
 810304a:	bf14      	ite	ne
 810304c:	2301      	movne	r3, #1
 810304e:	2300      	moveq	r3, #0
 8103050:	b2db      	uxtb	r3, r3
 8103052:	e008      	b.n	8103066 <ADC_ConfigureBoostMode+0x42>
 8103054:	4b6a      	ldr	r3, [pc, #424]	; (8103200 <ADC_ConfigureBoostMode+0x1dc>)
 8103056:	689b      	ldr	r3, [r3, #8]
 8103058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810305c:	2b00      	cmp	r3, #0
 810305e:	bf14      	ite	ne
 8103060:	2301      	movne	r3, #1
 8103062:	2300      	moveq	r3, #0
 8103064:	b2db      	uxtb	r3, r3
 8103066:	2b00      	cmp	r3, #0
 8103068:	d01a      	beq.n	81030a0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810306a:	f001 fe29 	bl	8104cc0 <HAL_RCC_GetHCLKFreq>
 810306e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	685b      	ldr	r3, [r3, #4]
 8103074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103078:	d006      	beq.n	8103088 <ADC_ConfigureBoostMode+0x64>
 810307a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810307e:	d00b      	beq.n	8103098 <ADC_ConfigureBoostMode+0x74>
 8103080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103084:	d000      	beq.n	8103088 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8103086:	e05d      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	685b      	ldr	r3, [r3, #4]
 810308c:	0c1b      	lsrs	r3, r3, #16
 810308e:	68fa      	ldr	r2, [r7, #12]
 8103090:	fbb2 f3f3 	udiv	r3, r2, r3
 8103094:	60fb      	str	r3, [r7, #12]
        break;
 8103096:	e055      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8103098:	68fb      	ldr	r3, [r7, #12]
 810309a:	089b      	lsrs	r3, r3, #2
 810309c:	60fb      	str	r3, [r7, #12]
        break;
 810309e:	e051      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81030a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 81030a4:	f001 fe6a 	bl	8104d7c <HAL_RCCEx_GetPeriphCLKFreq>
 81030a8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	685b      	ldr	r3, [r3, #4]
 81030ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81030b2:	d02a      	beq.n	810310a <ADC_ConfigureBoostMode+0xe6>
 81030b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81030b8:	d813      	bhi.n	81030e2 <ADC_ConfigureBoostMode+0xbe>
 81030ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81030be:	d024      	beq.n	810310a <ADC_ConfigureBoostMode+0xe6>
 81030c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81030c4:	d806      	bhi.n	81030d4 <ADC_ConfigureBoostMode+0xb0>
 81030c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81030ca:	d01e      	beq.n	810310a <ADC_ConfigureBoostMode+0xe6>
 81030cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81030d0:	d01b      	beq.n	810310a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 81030d2:	e037      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 81030d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81030d8:	d017      	beq.n	810310a <ADC_ConfigureBoostMode+0xe6>
 81030da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81030de:	d014      	beq.n	810310a <ADC_ConfigureBoostMode+0xe6>
        break;
 81030e0:	e030      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 81030e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81030e6:	d021      	beq.n	810312c <ADC_ConfigureBoostMode+0x108>
 81030e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81030ec:	d806      	bhi.n	81030fc <ADC_ConfigureBoostMode+0xd8>
 81030ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81030f2:	d013      	beq.n	810311c <ADC_ConfigureBoostMode+0xf8>
 81030f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81030f8:	d014      	beq.n	8103124 <ADC_ConfigureBoostMode+0x100>
        break;
 81030fa:	e023      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 81030fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103100:	d018      	beq.n	8103134 <ADC_ConfigureBoostMode+0x110>
 8103102:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103106:	d019      	beq.n	810313c <ADC_ConfigureBoostMode+0x118>
        break;
 8103108:	e01c      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	685b      	ldr	r3, [r3, #4]
 810310e:	0c9b      	lsrs	r3, r3, #18
 8103110:	005b      	lsls	r3, r3, #1
 8103112:	68fa      	ldr	r2, [r7, #12]
 8103114:	fbb2 f3f3 	udiv	r3, r2, r3
 8103118:	60fb      	str	r3, [r7, #12]
        break;
 810311a:	e013      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 810311c:	68fb      	ldr	r3, [r7, #12]
 810311e:	091b      	lsrs	r3, r3, #4
 8103120:	60fb      	str	r3, [r7, #12]
      break;
 8103122:	e00f      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8103124:	68fb      	ldr	r3, [r7, #12]
 8103126:	095b      	lsrs	r3, r3, #5
 8103128:	60fb      	str	r3, [r7, #12]
        break;
 810312a:	e00b      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 810312c:	68fb      	ldr	r3, [r7, #12]
 810312e:	099b      	lsrs	r3, r3, #6
 8103130:	60fb      	str	r3, [r7, #12]
        break;
 8103132:	e007      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8103134:	68fb      	ldr	r3, [r7, #12]
 8103136:	09db      	lsrs	r3, r3, #7
 8103138:	60fb      	str	r3, [r7, #12]
        break;
 810313a:	e003      	b.n	8103144 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 810313c:	68fb      	ldr	r3, [r7, #12]
 810313e:	0a1b      	lsrs	r3, r3, #8
 8103140:	60fb      	str	r3, [r7, #12]
        break;
 8103142:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103144:	f7ff f904 	bl	8102350 <HAL_GetREVID>
 8103148:	4602      	mov	r2, r0
 810314a:	f241 0303 	movw	r3, #4099	; 0x1003
 810314e:	429a      	cmp	r2, r3
 8103150:	d815      	bhi.n	810317e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8103152:	68fb      	ldr	r3, [r7, #12]
 8103154:	4a2b      	ldr	r2, [pc, #172]	; (8103204 <ADC_ConfigureBoostMode+0x1e0>)
 8103156:	4293      	cmp	r3, r2
 8103158:	d908      	bls.n	810316c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	689a      	ldr	r2, [r3, #8]
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103168:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 810316a:	e03e      	b.n	81031ea <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	689a      	ldr	r2, [r3, #8]
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810317a:	609a      	str	r2, [r3, #8]
}
 810317c:	e035      	b.n	81031ea <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 810317e:	68fb      	ldr	r3, [r7, #12]
 8103180:	085b      	lsrs	r3, r3, #1
 8103182:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103184:	68fb      	ldr	r3, [r7, #12]
 8103186:	4a20      	ldr	r2, [pc, #128]	; (8103208 <ADC_ConfigureBoostMode+0x1e4>)
 8103188:	4293      	cmp	r3, r2
 810318a:	d808      	bhi.n	810319e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	689a      	ldr	r2, [r3, #8]
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 810319a:	609a      	str	r2, [r3, #8]
}
 810319c:	e025      	b.n	81031ea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 810319e:	68fb      	ldr	r3, [r7, #12]
 81031a0:	4a1a      	ldr	r2, [pc, #104]	; (810320c <ADC_ConfigureBoostMode+0x1e8>)
 81031a2:	4293      	cmp	r3, r2
 81031a4:	d80a      	bhi.n	81031bc <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	689b      	ldr	r3, [r3, #8]
 81031ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81031b8:	609a      	str	r2, [r3, #8]
}
 81031ba:	e016      	b.n	81031ea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 81031bc:	68fb      	ldr	r3, [r7, #12]
 81031be:	4a14      	ldr	r2, [pc, #80]	; (8103210 <ADC_ConfigureBoostMode+0x1ec>)
 81031c0:	4293      	cmp	r3, r2
 81031c2:	d80a      	bhi.n	81031da <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	689b      	ldr	r3, [r3, #8]
 81031ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81031d6:	609a      	str	r2, [r3, #8]
}
 81031d8:	e007      	b.n	81031ea <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	681b      	ldr	r3, [r3, #0]
 81031de:	689a      	ldr	r2, [r3, #8]
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 81031e8:	609a      	str	r2, [r3, #8]
}
 81031ea:	bf00      	nop
 81031ec:	3710      	adds	r7, #16
 81031ee:	46bd      	mov	sp, r7
 81031f0:	bd80      	pop	{r7, pc}
 81031f2:	bf00      	nop
 81031f4:	40022000 	.word	0x40022000
 81031f8:	40022100 	.word	0x40022100
 81031fc:	40022300 	.word	0x40022300
 8103200:	58026300 	.word	0x58026300
 8103204:	01312d00 	.word	0x01312d00
 8103208:	005f5e10 	.word	0x005f5e10
 810320c:	00bebc20 	.word	0x00bebc20
 8103210:	017d7840 	.word	0x017d7840

08103214 <LL_ADC_IsEnabled>:
{
 8103214:	b480      	push	{r7}
 8103216:	b083      	sub	sp, #12
 8103218:	af00      	add	r7, sp, #0
 810321a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810321c:	687b      	ldr	r3, [r7, #4]
 810321e:	689b      	ldr	r3, [r3, #8]
 8103220:	f003 0301 	and.w	r3, r3, #1
 8103224:	2b01      	cmp	r3, #1
 8103226:	d101      	bne.n	810322c <LL_ADC_IsEnabled+0x18>
 8103228:	2301      	movs	r3, #1
 810322a:	e000      	b.n	810322e <LL_ADC_IsEnabled+0x1a>
 810322c:	2300      	movs	r3, #0
}
 810322e:	4618      	mov	r0, r3
 8103230:	370c      	adds	r7, #12
 8103232:	46bd      	mov	sp, r7
 8103234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103238:	4770      	bx	lr

0810323a <LL_ADC_REG_IsConversionOngoing>:
{
 810323a:	b480      	push	{r7}
 810323c:	b083      	sub	sp, #12
 810323e:	af00      	add	r7, sp, #0
 8103240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	689b      	ldr	r3, [r3, #8]
 8103246:	f003 0304 	and.w	r3, r3, #4
 810324a:	2b04      	cmp	r3, #4
 810324c:	d101      	bne.n	8103252 <LL_ADC_REG_IsConversionOngoing+0x18>
 810324e:	2301      	movs	r3, #1
 8103250:	e000      	b.n	8103254 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103252:	2300      	movs	r3, #0
}
 8103254:	4618      	mov	r0, r3
 8103256:	370c      	adds	r7, #12
 8103258:	46bd      	mov	sp, r7
 810325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810325e:	4770      	bx	lr

08103260 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103260:	b590      	push	{r4, r7, lr}
 8103262:	b09f      	sub	sp, #124	; 0x7c
 8103264:	af00      	add	r7, sp, #0
 8103266:	6078      	str	r0, [r7, #4]
 8103268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810326a:	2300      	movs	r3, #0
 810326c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103276:	2b01      	cmp	r3, #1
 8103278:	d101      	bne.n	810327e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 810327a:	2302      	movs	r3, #2
 810327c:	e0c0      	b.n	8103400 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	2201      	movs	r2, #1
 8103282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	4a5f      	ldr	r2, [pc, #380]	; (8103408 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 810328c:	4293      	cmp	r3, r2
 810328e:	d102      	bne.n	8103296 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8103290:	4b5e      	ldr	r3, [pc, #376]	; (810340c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8103292:	60bb      	str	r3, [r7, #8]
 8103294:	e001      	b.n	810329a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8103296:	2300      	movs	r3, #0
 8103298:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810329a:	68bb      	ldr	r3, [r7, #8]
 810329c:	2b00      	cmp	r3, #0
 810329e:	d10b      	bne.n	81032b8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032a4:	f043 0220 	orr.w	r2, r3, #32
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	2200      	movs	r2, #0
 81032b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81032b4:	2301      	movs	r3, #1
 81032b6:	e0a3      	b.n	8103400 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81032b8:	68bb      	ldr	r3, [r7, #8]
 81032ba:	4618      	mov	r0, r3
 81032bc:	f7ff ffbd 	bl	810323a <LL_ADC_REG_IsConversionOngoing>
 81032c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	681b      	ldr	r3, [r3, #0]
 81032c6:	4618      	mov	r0, r3
 81032c8:	f7ff ffb7 	bl	810323a <LL_ADC_REG_IsConversionOngoing>
 81032cc:	4603      	mov	r3, r0
 81032ce:	2b00      	cmp	r3, #0
 81032d0:	f040 8085 	bne.w	81033de <HAL_ADCEx_MultiModeConfigChannel+0x17e>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81032d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81032d6:	2b00      	cmp	r3, #0
 81032d8:	f040 8081 	bne.w	81033de <HAL_ADCEx_MultiModeConfigChannel+0x17e>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	4a49      	ldr	r2, [pc, #292]	; (8103408 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 81032e2:	4293      	cmp	r3, r2
 81032e4:	d004      	beq.n	81032f0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	4a48      	ldr	r2, [pc, #288]	; (810340c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 81032ec:	4293      	cmp	r3, r2
 81032ee:	d101      	bne.n	81032f4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 81032f0:	4b47      	ldr	r3, [pc, #284]	; (8103410 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81032f2:	e000      	b.n	81032f6 <HAL_ADCEx_MultiModeConfigChannel+0x96>
 81032f4:	4b47      	ldr	r3, [pc, #284]	; (8103414 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81032f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81032f8:	683b      	ldr	r3, [r7, #0]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	2b00      	cmp	r3, #0
 81032fe:	d03b      	beq.n	8103378 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103302:	689b      	ldr	r3, [r3, #8]
 8103304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103308:	683b      	ldr	r3, [r7, #0]
 810330a:	685b      	ldr	r3, [r3, #4]
 810330c:	431a      	orrs	r2, r3
 810330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103310:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	4a3c      	ldr	r2, [pc, #240]	; (8103408 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8103318:	4293      	cmp	r3, r2
 810331a:	d004      	beq.n	8103326 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	4a3a      	ldr	r2, [pc, #232]	; (810340c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8103322:	4293      	cmp	r3, r2
 8103324:	d10e      	bne.n	8103344 <HAL_ADCEx_MultiModeConfigChannel+0xe4>
 8103326:	4838      	ldr	r0, [pc, #224]	; (8103408 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8103328:	f7ff ff74 	bl	8103214 <LL_ADC_IsEnabled>
 810332c:	4604      	mov	r4, r0
 810332e:	4837      	ldr	r0, [pc, #220]	; (810340c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8103330:	f7ff ff70 	bl	8103214 <LL_ADC_IsEnabled>
 8103334:	4603      	mov	r3, r0
 8103336:	4323      	orrs	r3, r4
 8103338:	2b00      	cmp	r3, #0
 810333a:	bf0c      	ite	eq
 810333c:	2301      	moveq	r3, #1
 810333e:	2300      	movne	r3, #0
 8103340:	b2db      	uxtb	r3, r3
 8103342:	e008      	b.n	8103356 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8103344:	4834      	ldr	r0, [pc, #208]	; (8103418 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103346:	f7ff ff65 	bl	8103214 <LL_ADC_IsEnabled>
 810334a:	4603      	mov	r3, r0
 810334c:	2b00      	cmp	r3, #0
 810334e:	bf0c      	ite	eq
 8103350:	2301      	moveq	r3, #1
 8103352:	2300      	movne	r3, #0
 8103354:	b2db      	uxtb	r3, r3
 8103356:	2b00      	cmp	r3, #0
 8103358:	d04b      	beq.n	81033f2 <HAL_ADCEx_MultiModeConfigChannel+0x192>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810335c:	689b      	ldr	r3, [r3, #8]
 810335e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103362:	f023 030f 	bic.w	r3, r3, #15
 8103366:	683a      	ldr	r2, [r7, #0]
 8103368:	6811      	ldr	r1, [r2, #0]
 810336a:	683a      	ldr	r2, [r7, #0]
 810336c:	6892      	ldr	r2, [r2, #8]
 810336e:	430a      	orrs	r2, r1
 8103370:	431a      	orrs	r2, r3
 8103372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103374:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103376:	e03c      	b.n	81033f2 <HAL_ADCEx_MultiModeConfigChannel+0x192>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810337a:	689b      	ldr	r3, [r3, #8]
 810337c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103382:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	4a1f      	ldr	r2, [pc, #124]	; (8103408 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 810338a:	4293      	cmp	r3, r2
 810338c:	d004      	beq.n	8103398 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	4a1e      	ldr	r2, [pc, #120]	; (810340c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8103394:	4293      	cmp	r3, r2
 8103396:	d10e      	bne.n	81033b6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8103398:	481b      	ldr	r0, [pc, #108]	; (8103408 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 810339a:	f7ff ff3b 	bl	8103214 <LL_ADC_IsEnabled>
 810339e:	4604      	mov	r4, r0
 81033a0:	481a      	ldr	r0, [pc, #104]	; (810340c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 81033a2:	f7ff ff37 	bl	8103214 <LL_ADC_IsEnabled>
 81033a6:	4603      	mov	r3, r0
 81033a8:	4323      	orrs	r3, r4
 81033aa:	2b00      	cmp	r3, #0
 81033ac:	bf0c      	ite	eq
 81033ae:	2301      	moveq	r3, #1
 81033b0:	2300      	movne	r3, #0
 81033b2:	b2db      	uxtb	r3, r3
 81033b4:	e008      	b.n	81033c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 81033b6:	4818      	ldr	r0, [pc, #96]	; (8103418 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81033b8:	f7ff ff2c 	bl	8103214 <LL_ADC_IsEnabled>
 81033bc:	4603      	mov	r3, r0
 81033be:	2b00      	cmp	r3, #0
 81033c0:	bf0c      	ite	eq
 81033c2:	2301      	moveq	r3, #1
 81033c4:	2300      	movne	r3, #0
 81033c6:	b2db      	uxtb	r3, r3
 81033c8:	2b00      	cmp	r3, #0
 81033ca:	d012      	beq.n	81033f2 <HAL_ADCEx_MultiModeConfigChannel+0x192>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81033cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81033ce:	689b      	ldr	r3, [r3, #8]
 81033d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81033d4:	f023 030f 	bic.w	r3, r3, #15
 81033d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81033da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81033dc:	e009      	b.n	81033f2 <HAL_ADCEx_MultiModeConfigChannel+0x192>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033e2:	f043 0220 	orr.w	r2, r3, #32
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81033ea:	2301      	movs	r3, #1
 81033ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81033f0:	e000      	b.n	81033f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81033f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	2200      	movs	r2, #0
 81033f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81033fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8103400:	4618      	mov	r0, r3
 8103402:	377c      	adds	r7, #124	; 0x7c
 8103404:	46bd      	mov	sp, r7
 8103406:	bd90      	pop	{r4, r7, pc}
 8103408:	40022000 	.word	0x40022000
 810340c:	40022100 	.word	0x40022100
 8103410:	40022300 	.word	0x40022300
 8103414:	58026300 	.word	0x58026300
 8103418:	58026000 	.word	0x58026000

0810341c <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 810341c:	b580      	push	{r7, lr}
 810341e:	b082      	sub	sp, #8
 8103420:	af00      	add	r7, sp, #0
 8103422:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	2b00      	cmp	r3, #0
 8103428:	d003      	beq.n	8103432 <HAL_CEC_Init+0x16>
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810342e:	2b00      	cmp	r3, #0
 8103430:	d101      	bne.n	8103436 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8103432:	2301      	movs	r3, #1
 8103434:	e050      	b.n	81034d8 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810343a:	2b00      	cmp	r3, #0
 810343c:	d106      	bne.n	810344c <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	2200      	movs	r2, #0
 8103442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8103446:	6878      	ldr	r0, [r7, #4]
 8103448:	f7fe f86c 	bl	8101524 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 810344c:	687b      	ldr	r3, [r7, #4]
 810344e:	2224      	movs	r2, #36	; 0x24
 8103450:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	681a      	ldr	r2, [r3, #0]
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	f022 0201 	bic.w	r2, r2, #1
 8103460:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	685a      	ldr	r2, [r3, #4]
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	689b      	ldr	r3, [r3, #8]
 810346a:	431a      	orrs	r2, r3
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	68db      	ldr	r3, [r3, #12]
 8103470:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103476:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	695b      	ldr	r3, [r3, #20]
 810347c:	431a      	orrs	r2, r3
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	699b      	ldr	r3, [r3, #24]
 8103482:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103488:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810348e:	041b      	lsls	r3, r3, #16
 8103490:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810349c:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810349e:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	695b      	ldr	r3, [r3, #20]
 81034a6:	687a      	ldr	r2, [r7, #4]
 81034a8:	6812      	ldr	r2, [r2, #0]
 81034aa:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 81034ae:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 81034b2:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	681a      	ldr	r2, [r3, #0]
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	681b      	ldr	r3, [r3, #0]
 81034be:	f042 0201 	orr.w	r2, r2, #1
 81034c2:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	2200      	movs	r2, #0
 81034c8:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	2220      	movs	r2, #32
 81034ce:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 81034d0:	687b      	ldr	r3, [r7, #4]
 81034d2:	2220      	movs	r2, #32
 81034d4:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81034d6:	2300      	movs	r3, #0
}
 81034d8:	4618      	mov	r0, r3
 81034da:	3708      	adds	r7, #8
 81034dc:	46bd      	mov	sp, r7
 81034de:	bd80      	pop	{r7, pc}

081034e0 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 81034e0:	b580      	push	{r7, lr}
 81034e2:	b084      	sub	sp, #16
 81034e4:	af00      	add	r7, sp, #0
 81034e6:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t reg;
  reg = hcec->Instance->ISR;
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	691b      	ldr	r3, [r3, #16]
 81034ee:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if ((reg & CEC_FLAG_ARBLST) != 0U)
 81034f0:	68fb      	ldr	r3, [r7, #12]
 81034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81034f6:	2b00      	cmp	r3, #0
 81034f8:	d00a      	beq.n	8103510 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	2280      	movs	r2, #128	; 0x80
 81034fe:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	691a      	ldr	r2, [r3, #16]
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	681b      	ldr	r3, [r3, #0]
 810350a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810350e:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXBR) != 0U)
 8103510:	68fb      	ldr	r3, [r7, #12]
 8103512:	f003 0301 	and.w	r3, r3, #1
 8103516:	2b00      	cmp	r3, #0
 8103518:	d01c      	beq.n	8103554 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	2222      	movs	r2, #34	; 0x22
 810351e:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103524:	3301      	adds	r3, #1
 8103526:	b29a      	uxth	r2, r3
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	68da      	ldr	r2, [r3, #12]
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103536:	b2d2      	uxtb	r2, r2
 8103538:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810353e:	1c5a      	adds	r2, r3, #1
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	691a      	ldr	r2, [r3, #16]
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	f042 0201 	orr.w	r2, r2, #1
 8103552:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXEND) != 0U)
 8103554:	68fb      	ldr	r3, [r7, #12]
 8103556:	f003 0302 	and.w	r3, r3, #2
 810355a:	2b00      	cmp	r3, #0
 810355c:	d01e      	beq.n	810359c <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	691a      	ldr	r2, [r3, #16]
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	f042 0202 	orr.w	r2, r2, #2
 810356c:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	2220      	movs	r2, #32
 8103572:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	2200      	movs	r2, #0
 8103578:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103582:	425b      	negs	r3, r3
 8103584:	441a      	add	r2, r3
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 810358e:	4619      	mov	r1, r3
 8103590:	6878      	ldr	r0, [r7, #4]
 8103592:	f000 f898 	bl	81036c6 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	2200      	movs	r2, #0
 810359a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXBR) != 0U)
 810359c:	68fb      	ldr	r3, [r7, #12]
 810359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81035a2:	2b00      	cmp	r3, #0
 81035a4:	d030      	beq.n	8103608 <HAL_CEC_IRQHandler+0x128>
  {
    if (hcec->TxXferCount == 0U)
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	d113      	bne.n	81035d6 <HAL_CEC_IRQHandler+0xf6>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	681a      	ldr	r2, [r3, #0]
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	681b      	ldr	r3, [r3, #0]
 81035b8:	f042 0204 	orr.w	r2, r2, #4
 81035bc:	601a      	str	r2, [r3, #0]
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 81035be:	687b      	ldr	r3, [r7, #4]
 81035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035c2:	781a      	ldrb	r2, [r3, #0]
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035ce:	1c5a      	adds	r2, r3, #1
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	62da      	str	r2, [r3, #44]	; 0x2c
 81035d4:	e010      	b.n	81035f8 <HAL_CEC_IRQHandler+0x118>
    }
    else
    {
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035da:	781a      	ldrb	r2, [r3, #0]
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	681b      	ldr	r3, [r3, #0]
 81035e0:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035e6:	1c5a      	adds	r2, r3, #1
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hcec->TxXferCount--;
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 81035f0:	3b01      	subs	r3, #1
 81035f2:	b29a      	uxth	r2, r3
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	691a      	ldr	r2, [r3, #16]
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	681b      	ldr	r3, [r3, #0]
 8103602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103606:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXEND) != 0U)
 8103608:	68fb      	ldr	r3, [r7, #12]
 810360a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810360e:	2b00      	cmp	r3, #0
 8103610:	d014      	beq.n	810363c <HAL_CEC_IRQHandler+0x15c>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	691a      	ldr	r2, [r3, #16]
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	681b      	ldr	r3, [r3, #0]
 810361c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103620:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	2220      	movs	r2, #32
 8103626:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	2200      	movs	r2, #0
 810362c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	2200      	movs	r2, #0
 8103634:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8103636:	6878      	ldr	r0, [r7, #4]
 8103638:	f000 f83b 	bl	81036b2 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR | CEC_ISR_TXERR |
 810363c:	68fa      	ldr	r2, [r7, #12]
 810363e:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8103642:	4013      	ands	r3, r2
 8103644:	2b00      	cmp	r3, #0
 8103646:	d030      	beq.n	81036aa <HAL_CEC_IRQHandler+0x1ca>
              CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = reg;
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	68fa      	ldr	r2, [r7, #12]
 810364c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	691b      	ldr	r3, [r3, #16]
 8103654:	687a      	ldr	r2, [r7, #4]
 8103656:	6812      	ldr	r2, [r2, #0]
 8103658:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 810365c:	f043 031c 	orr.w	r3, r3, #28
 8103660:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8103662:	68fb      	ldr	r3, [r7, #12]
 8103664:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8103668:	2b00      	cmp	r3, #0
 810366a:	d00e      	beq.n	810368a <HAL_CEC_IRQHandler+0x1aa>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103674:	425b      	negs	r3, r3
 8103676:	441a      	add	r2, r3
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	2200      	movs	r2, #0
 8103680:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	2220      	movs	r2, #32
 8103686:	63da      	str	r2, [r3, #60]	; 0x3c
 8103688:	e00c      	b.n	81036a4 <HAL_CEC_IRQHandler+0x1c4>
    }
    else if (((reg & CEC_ISR_ARBLST) == 0U) && ((reg & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 810368a:	68fb      	ldr	r3, [r7, #12]
 810368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103690:	2b00      	cmp	r3, #0
 8103692:	d107      	bne.n	81036a4 <HAL_CEC_IRQHandler+0x1c4>
 8103694:	68fb      	ldr	r3, [r7, #12]
 8103696:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 810369a:	2b00      	cmp	r3, #0
 810369c:	d002      	beq.n	81036a4 <HAL_CEC_IRQHandler+0x1c4>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	2220      	movs	r2, #32
 81036a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 81036a4:	6878      	ldr	r0, [r7, #4]
 81036a6:	f000 f819 	bl	81036dc <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 81036aa:	bf00      	nop
 81036ac:	3710      	adds	r7, #16
 81036ae:	46bd      	mov	sp, r7
 81036b0:	bd80      	pop	{r7, pc}

081036b2 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 81036b2:	b480      	push	{r7}
 81036b4:	b083      	sub	sp, #12
 81036b6:	af00      	add	r7, sp, #0
 81036b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 81036ba:	bf00      	nop
 81036bc:	370c      	adds	r7, #12
 81036be:	46bd      	mov	sp, r7
 81036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036c4:	4770      	bx	lr

081036c6 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 81036c6:	b480      	push	{r7}
 81036c8:	b083      	sub	sp, #12
 81036ca:	af00      	add	r7, sp, #0
 81036cc:	6078      	str	r0, [r7, #4]
 81036ce:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 81036d0:	bf00      	nop
 81036d2:	370c      	adds	r7, #12
 81036d4:	46bd      	mov	sp, r7
 81036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036da:	4770      	bx	lr

081036dc <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 81036dc:	b480      	push	{r7}
 81036de:	b083      	sub	sp, #12
 81036e0:	af00      	add	r7, sp, #0
 81036e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 81036e4:	bf00      	nop
 81036e6:	370c      	adds	r7, #12
 81036e8:	46bd      	mov	sp, r7
 81036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036ee:	4770      	bx	lr

081036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81036f0:	b480      	push	{r7}
 81036f2:	b085      	sub	sp, #20
 81036f4:	af00      	add	r7, sp, #0
 81036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	f003 0307 	and.w	r3, r3, #7
 81036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103700:	4b0c      	ldr	r3, [pc, #48]	; (8103734 <__NVIC_SetPriorityGrouping+0x44>)
 8103702:	68db      	ldr	r3, [r3, #12]
 8103704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103706:	68ba      	ldr	r2, [r7, #8]
 8103708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810370c:	4013      	ands	r3, r2
 810370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103714:	68bb      	ldr	r3, [r7, #8]
 8103716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103722:	4a04      	ldr	r2, [pc, #16]	; (8103734 <__NVIC_SetPriorityGrouping+0x44>)
 8103724:	68bb      	ldr	r3, [r7, #8]
 8103726:	60d3      	str	r3, [r2, #12]
}
 8103728:	bf00      	nop
 810372a:	3714      	adds	r7, #20
 810372c:	46bd      	mov	sp, r7
 810372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103732:	4770      	bx	lr
 8103734:	e000ed00 	.word	0xe000ed00

08103738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103738:	b480      	push	{r7}
 810373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810373c:	4b04      	ldr	r3, [pc, #16]	; (8103750 <__NVIC_GetPriorityGrouping+0x18>)
 810373e:	68db      	ldr	r3, [r3, #12]
 8103740:	0a1b      	lsrs	r3, r3, #8
 8103742:	f003 0307 	and.w	r3, r3, #7
}
 8103746:	4618      	mov	r0, r3
 8103748:	46bd      	mov	sp, r7
 810374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810374e:	4770      	bx	lr
 8103750:	e000ed00 	.word	0xe000ed00

08103754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103754:	b480      	push	{r7}
 8103756:	b083      	sub	sp, #12
 8103758:	af00      	add	r7, sp, #0
 810375a:	4603      	mov	r3, r0
 810375c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810375e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103762:	2b00      	cmp	r3, #0
 8103764:	db0b      	blt.n	810377e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103766:	88fb      	ldrh	r3, [r7, #6]
 8103768:	f003 021f 	and.w	r2, r3, #31
 810376c:	4907      	ldr	r1, [pc, #28]	; (810378c <__NVIC_EnableIRQ+0x38>)
 810376e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103772:	095b      	lsrs	r3, r3, #5
 8103774:	2001      	movs	r0, #1
 8103776:	fa00 f202 	lsl.w	r2, r0, r2
 810377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 810377e:	bf00      	nop
 8103780:	370c      	adds	r7, #12
 8103782:	46bd      	mov	sp, r7
 8103784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103788:	4770      	bx	lr
 810378a:	bf00      	nop
 810378c:	e000e100 	.word	0xe000e100

08103790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103790:	b480      	push	{r7}
 8103792:	b083      	sub	sp, #12
 8103794:	af00      	add	r7, sp, #0
 8103796:	4603      	mov	r3, r0
 8103798:	6039      	str	r1, [r7, #0]
 810379a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810379c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037a0:	2b00      	cmp	r3, #0
 81037a2:	db0a      	blt.n	81037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81037a4:	683b      	ldr	r3, [r7, #0]
 81037a6:	b2da      	uxtb	r2, r3
 81037a8:	490c      	ldr	r1, [pc, #48]	; (81037dc <__NVIC_SetPriority+0x4c>)
 81037aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037ae:	0112      	lsls	r2, r2, #4
 81037b0:	b2d2      	uxtb	r2, r2
 81037b2:	440b      	add	r3, r1
 81037b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81037b8:	e00a      	b.n	81037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81037ba:	683b      	ldr	r3, [r7, #0]
 81037bc:	b2da      	uxtb	r2, r3
 81037be:	4908      	ldr	r1, [pc, #32]	; (81037e0 <__NVIC_SetPriority+0x50>)
 81037c0:	88fb      	ldrh	r3, [r7, #6]
 81037c2:	f003 030f 	and.w	r3, r3, #15
 81037c6:	3b04      	subs	r3, #4
 81037c8:	0112      	lsls	r2, r2, #4
 81037ca:	b2d2      	uxtb	r2, r2
 81037cc:	440b      	add	r3, r1
 81037ce:	761a      	strb	r2, [r3, #24]
}
 81037d0:	bf00      	nop
 81037d2:	370c      	adds	r7, #12
 81037d4:	46bd      	mov	sp, r7
 81037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037da:	4770      	bx	lr
 81037dc:	e000e100 	.word	0xe000e100
 81037e0:	e000ed00 	.word	0xe000ed00

081037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81037e4:	b480      	push	{r7}
 81037e6:	b089      	sub	sp, #36	; 0x24
 81037e8:	af00      	add	r7, sp, #0
 81037ea:	60f8      	str	r0, [r7, #12]
 81037ec:	60b9      	str	r1, [r7, #8]
 81037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81037f0:	68fb      	ldr	r3, [r7, #12]
 81037f2:	f003 0307 	and.w	r3, r3, #7
 81037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81037f8:	69fb      	ldr	r3, [r7, #28]
 81037fa:	f1c3 0307 	rsb	r3, r3, #7
 81037fe:	2b04      	cmp	r3, #4
 8103800:	bf28      	it	cs
 8103802:	2304      	movcs	r3, #4
 8103804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103806:	69fb      	ldr	r3, [r7, #28]
 8103808:	3304      	adds	r3, #4
 810380a:	2b06      	cmp	r3, #6
 810380c:	d902      	bls.n	8103814 <NVIC_EncodePriority+0x30>
 810380e:	69fb      	ldr	r3, [r7, #28]
 8103810:	3b03      	subs	r3, #3
 8103812:	e000      	b.n	8103816 <NVIC_EncodePriority+0x32>
 8103814:	2300      	movs	r3, #0
 8103816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103818:	f04f 32ff 	mov.w	r2, #4294967295
 810381c:	69bb      	ldr	r3, [r7, #24]
 810381e:	fa02 f303 	lsl.w	r3, r2, r3
 8103822:	43da      	mvns	r2, r3
 8103824:	68bb      	ldr	r3, [r7, #8]
 8103826:	401a      	ands	r2, r3
 8103828:	697b      	ldr	r3, [r7, #20]
 810382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810382c:	f04f 31ff 	mov.w	r1, #4294967295
 8103830:	697b      	ldr	r3, [r7, #20]
 8103832:	fa01 f303 	lsl.w	r3, r1, r3
 8103836:	43d9      	mvns	r1, r3
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810383c:	4313      	orrs	r3, r2
         );
}
 810383e:	4618      	mov	r0, r3
 8103840:	3724      	adds	r7, #36	; 0x24
 8103842:	46bd      	mov	sp, r7
 8103844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103848:	4770      	bx	lr
	...

0810384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810384c:	b580      	push	{r7, lr}
 810384e:	b082      	sub	sp, #8
 8103850:	af00      	add	r7, sp, #0
 8103852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	3b01      	subs	r3, #1
 8103858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810385c:	d301      	bcc.n	8103862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810385e:	2301      	movs	r3, #1
 8103860:	e00f      	b.n	8103882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103862:	4a0a      	ldr	r2, [pc, #40]	; (810388c <SysTick_Config+0x40>)
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	3b01      	subs	r3, #1
 8103868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810386a:	210f      	movs	r1, #15
 810386c:	f04f 30ff 	mov.w	r0, #4294967295
 8103870:	f7ff ff8e 	bl	8103790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103874:	4b05      	ldr	r3, [pc, #20]	; (810388c <SysTick_Config+0x40>)
 8103876:	2200      	movs	r2, #0
 8103878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810387a:	4b04      	ldr	r3, [pc, #16]	; (810388c <SysTick_Config+0x40>)
 810387c:	2207      	movs	r2, #7
 810387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103880:	2300      	movs	r3, #0
}
 8103882:	4618      	mov	r0, r3
 8103884:	3708      	adds	r7, #8
 8103886:	46bd      	mov	sp, r7
 8103888:	bd80      	pop	{r7, pc}
 810388a:	bf00      	nop
 810388c:	e000e010 	.word	0xe000e010

08103890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103890:	b580      	push	{r7, lr}
 8103892:	b082      	sub	sp, #8
 8103894:	af00      	add	r7, sp, #0
 8103896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103898:	6878      	ldr	r0, [r7, #4]
 810389a:	f7ff ff29 	bl	81036f0 <__NVIC_SetPriorityGrouping>
}
 810389e:	bf00      	nop
 81038a0:	3708      	adds	r7, #8
 81038a2:	46bd      	mov	sp, r7
 81038a4:	bd80      	pop	{r7, pc}

081038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81038a6:	b580      	push	{r7, lr}
 81038a8:	b086      	sub	sp, #24
 81038aa:	af00      	add	r7, sp, #0
 81038ac:	4603      	mov	r3, r0
 81038ae:	60b9      	str	r1, [r7, #8]
 81038b0:	607a      	str	r2, [r7, #4]
 81038b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81038b4:	f7ff ff40 	bl	8103738 <__NVIC_GetPriorityGrouping>
 81038b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81038ba:	687a      	ldr	r2, [r7, #4]
 81038bc:	68b9      	ldr	r1, [r7, #8]
 81038be:	6978      	ldr	r0, [r7, #20]
 81038c0:	f7ff ff90 	bl	81037e4 <NVIC_EncodePriority>
 81038c4:	4602      	mov	r2, r0
 81038c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81038ca:	4611      	mov	r1, r2
 81038cc:	4618      	mov	r0, r3
 81038ce:	f7ff ff5f 	bl	8103790 <__NVIC_SetPriority>
}
 81038d2:	bf00      	nop
 81038d4:	3718      	adds	r7, #24
 81038d6:	46bd      	mov	sp, r7
 81038d8:	bd80      	pop	{r7, pc}

081038da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81038da:	b580      	push	{r7, lr}
 81038dc:	b082      	sub	sp, #8
 81038de:	af00      	add	r7, sp, #0
 81038e0:	4603      	mov	r3, r0
 81038e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81038e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038e8:	4618      	mov	r0, r3
 81038ea:	f7ff ff33 	bl	8103754 <__NVIC_EnableIRQ>
}
 81038ee:	bf00      	nop
 81038f0:	3708      	adds	r7, #8
 81038f2:	46bd      	mov	sp, r7
 81038f4:	bd80      	pop	{r7, pc}

081038f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81038f6:	b580      	push	{r7, lr}
 81038f8:	b082      	sub	sp, #8
 81038fa:	af00      	add	r7, sp, #0
 81038fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81038fe:	6878      	ldr	r0, [r7, #4]
 8103900:	f7ff ffa4 	bl	810384c <SysTick_Config>
 8103904:	4603      	mov	r3, r0
}
 8103906:	4618      	mov	r0, r3
 8103908:	3708      	adds	r7, #8
 810390a:	46bd      	mov	sp, r7
 810390c:	bd80      	pop	{r7, pc}
	...

08103910 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103910:	b480      	push	{r7}
 8103912:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103914:	4b07      	ldr	r3, [pc, #28]	; (8103934 <HAL_GetCurrentCPUID+0x24>)
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	091b      	lsrs	r3, r3, #4
 810391a:	f003 030f 	and.w	r3, r3, #15
 810391e:	2b07      	cmp	r3, #7
 8103920:	d101      	bne.n	8103926 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103922:	2303      	movs	r3, #3
 8103924:	e000      	b.n	8103928 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103926:	2301      	movs	r3, #1
  }
}
 8103928:	4618      	mov	r0, r3
 810392a:	46bd      	mov	sp, r7
 810392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103930:	4770      	bx	lr
 8103932:	bf00      	nop
 8103934:	e000ed00 	.word	0xe000ed00

08103938 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8103938:	b580      	push	{r7, lr}
 810393a:	b084      	sub	sp, #16
 810393c:	af00      	add	r7, sp, #0
 810393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	2b00      	cmp	r3, #0
 8103944:	d101      	bne.n	810394a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8103946:	2301      	movs	r3, #1
 8103948:	e0c8      	b.n	8103adc <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810394e:	2b00      	cmp	r3, #0
 8103950:	d102      	bne.n	8103958 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8103952:	6878      	ldr	r0, [r7, #4]
 8103954:	f7fd fd3a 	bl	81013cc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	2223      	movs	r2, #35	; 0x23
 810395c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810395e:	4b61      	ldr	r3, [pc, #388]	; (8103ae4 <HAL_ETH_Init+0x1ac>)
 8103960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103964:	4a5f      	ldr	r2, [pc, #380]	; (8103ae4 <HAL_ETH_Init+0x1ac>)
 8103966:	f043 0302 	orr.w	r3, r3, #2
 810396a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810396e:	4b5d      	ldr	r3, [pc, #372]	; (8103ae4 <HAL_ETH_Init+0x1ac>)
 8103970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103974:	f003 0302 	and.w	r3, r3, #2
 8103978:	60bb      	str	r3, [r7, #8]
 810397a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	7a1b      	ldrb	r3, [r3, #8]
 8103980:	2b00      	cmp	r3, #0
 8103982:	d103      	bne.n	810398c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8103984:	2000      	movs	r0, #0
 8103986:	f7fe fcef 	bl	8102368 <HAL_SYSCFG_ETHInterfaceSelect>
 810398a:	e003      	b.n	8103994 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 810398c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8103990:	f7fe fcea 	bl	8102368 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810399c:	681a      	ldr	r2, [r3, #0]
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	f042 0201 	orr.w	r2, r2, #1
 81039a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81039aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 81039ac:	f7fe fca2 	bl	81022f4 <HAL_GetTick>
 81039b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81039b2:	e00f      	b.n	81039d4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 81039b4:	f7fe fc9e 	bl	81022f4 <HAL_GetTick>
 81039b8:	4602      	mov	r2, r0
 81039ba:	68fb      	ldr	r3, [r7, #12]
 81039bc:	1ad3      	subs	r3, r2, r3
 81039be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81039c2:	d907      	bls.n	81039d4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	2204      	movs	r2, #4
 81039c8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	22e0      	movs	r2, #224	; 0xe0
 81039ce:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 81039d0:	2301      	movs	r3, #1
 81039d2:	e083      	b.n	8103adc <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	f003 0301 	and.w	r3, r3, #1
 81039e2:	2b00      	cmp	r3, #0
 81039e4:	d1e6      	bne.n	81039b4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 81039e6:	6878      	ldr	r0, [r7, #4]
 81039e8:	f000 fac0 	bl	8103f6c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81039ec:	f001 f968 	bl	8104cc0 <HAL_RCC_GetHCLKFreq>
 81039f0:	4602      	mov	r2, r0
 81039f2:	4b3d      	ldr	r3, [pc, #244]	; (8103ae8 <HAL_ETH_Init+0x1b0>)
 81039f4:	fba3 2302 	umull	r2, r3, r3, r2
 81039f8:	0c9a      	lsrs	r2, r3, #18
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	681b      	ldr	r3, [r3, #0]
 81039fe:	3a01      	subs	r2, #1
 8103a00:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8103a04:	6878      	ldr	r0, [r7, #4]
 8103a06:	f000 fa13 	bl	8103e30 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8103a20:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8103a24:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	695b      	ldr	r3, [r3, #20]
 8103a2a:	f003 0303 	and.w	r3, r3, #3
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d007      	beq.n	8103a42 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	2201      	movs	r2, #1
 8103a36:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	22e0      	movs	r2, #224	; 0xe0
 8103a3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8103a3e:	2301      	movs	r3, #1
 8103a40:	e04c      	b.n	8103adc <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	681b      	ldr	r3, [r3, #0]
 8103a46:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8103a4a:	3308      	adds	r3, #8
 8103a4c:	681b      	ldr	r3, [r3, #0]
 8103a4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8103a52:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8103a56:	687a      	ldr	r2, [r7, #4]
 8103a58:	6952      	ldr	r2, [r2, #20]
 8103a5a:	0052      	lsls	r2, r2, #1
 8103a5c:	6879      	ldr	r1, [r7, #4]
 8103a5e:	6809      	ldr	r1, [r1, #0]
 8103a60:	431a      	orrs	r2, r3
 8103a62:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8103a66:	3308      	adds	r3, #8
 8103a68:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8103a6a:	6878      	ldr	r0, [r7, #4]
 8103a6c:	f000 fad6 	bl	810401c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8103a70:	6878      	ldr	r0, [r7, #4]
 8103a72:	f000 fb1a 	bl	81040aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	685b      	ldr	r3, [r3, #4]
 8103a7a:	3305      	adds	r3, #5
 8103a7c:	781b      	ldrb	r3, [r3, #0]
 8103a7e:	021a      	lsls	r2, r3, #8
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	685b      	ldr	r3, [r3, #4]
 8103a84:	3304      	adds	r3, #4
 8103a86:	781b      	ldrb	r3, [r3, #0]
 8103a88:	4619      	mov	r1, r3
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	681b      	ldr	r3, [r3, #0]
 8103a8e:	430a      	orrs	r2, r1
 8103a90:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	685b      	ldr	r3, [r3, #4]
 8103a98:	3303      	adds	r3, #3
 8103a9a:	781b      	ldrb	r3, [r3, #0]
 8103a9c:	061a      	lsls	r2, r3, #24
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	685b      	ldr	r3, [r3, #4]
 8103aa2:	3302      	adds	r3, #2
 8103aa4:	781b      	ldrb	r3, [r3, #0]
 8103aa6:	041b      	lsls	r3, r3, #16
 8103aa8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	685b      	ldr	r3, [r3, #4]
 8103aae:	3301      	adds	r3, #1
 8103ab0:	781b      	ldrb	r3, [r3, #0]
 8103ab2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8103ab4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	685b      	ldr	r3, [r3, #4]
 8103aba:	781b      	ldrb	r3, [r3, #0]
 8103abc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8103ac2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8103ac4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	2200      	movs	r2, #0
 8103acc:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	2210      	movs	r2, #16
 8103ad2:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	2210      	movs	r2, #16
 8103ad8:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8103ada:	2300      	movs	r3, #0
}
 8103adc:	4618      	mov	r0, r3
 8103ade:	3710      	adds	r7, #16
 8103ae0:	46bd      	mov	sp, r7
 8103ae2:	bd80      	pop	{r7, pc}
 8103ae4:	58024400 	.word	0x58024400
 8103ae8:	431bde83 	.word	0x431bde83

08103aec <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8103aec:	b480      	push	{r7}
 8103aee:	b085      	sub	sp, #20
 8103af0:	af00      	add	r7, sp, #0
 8103af2:	6078      	str	r0, [r7, #4]
 8103af4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8103af6:	683b      	ldr	r3, [r7, #0]
 8103af8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8103afa:	683b      	ldr	r3, [r7, #0]
 8103afc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8103afe:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8103b00:	683b      	ldr	r3, [r7, #0]
 8103b02:	791b      	ldrb	r3, [r3, #4]
 8103b04:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8103b06:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8103b08:	683b      	ldr	r3, [r7, #0]
 8103b0a:	7b1b      	ldrb	r3, [r3, #12]
 8103b0c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8103b0e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8103b10:	683b      	ldr	r3, [r7, #0]
 8103b12:	7b5b      	ldrb	r3, [r3, #13]
 8103b14:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8103b16:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8103b18:	683b      	ldr	r3, [r7, #0]
 8103b1a:	7b9b      	ldrb	r3, [r3, #14]
 8103b1c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8103b1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8103b20:	683b      	ldr	r3, [r7, #0]
 8103b22:	7bdb      	ldrb	r3, [r3, #15]
 8103b24:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8103b26:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8103b28:	683a      	ldr	r2, [r7, #0]
 8103b2a:	7c12      	ldrb	r2, [r2, #16]
 8103b2c:	2a00      	cmp	r2, #0
 8103b2e:	d102      	bne.n	8103b36 <ETH_SetMACConfig+0x4a>
 8103b30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8103b34:	e000      	b.n	8103b38 <ETH_SetMACConfig+0x4c>
 8103b36:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8103b38:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8103b3a:	683a      	ldr	r2, [r7, #0]
 8103b3c:	7c52      	ldrb	r2, [r2, #17]
 8103b3e:	2a00      	cmp	r2, #0
 8103b40:	d102      	bne.n	8103b48 <ETH_SetMACConfig+0x5c>
 8103b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8103b46:	e000      	b.n	8103b4a <ETH_SetMACConfig+0x5e>
 8103b48:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8103b4a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8103b4c:	683b      	ldr	r3, [r7, #0]
 8103b4e:	7c9b      	ldrb	r3, [r3, #18]
 8103b50:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8103b52:	431a      	orrs	r2, r3
                                macconf->Speed |
 8103b54:	683b      	ldr	r3, [r7, #0]
 8103b56:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8103b58:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8103b5a:	683b      	ldr	r3, [r7, #0]
 8103b5c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8103b5e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8103b60:	683b      	ldr	r3, [r7, #0]
 8103b62:	7f1b      	ldrb	r3, [r3, #28]
 8103b64:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8103b66:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8103b68:	683b      	ldr	r3, [r7, #0]
 8103b6a:	7f5b      	ldrb	r3, [r3, #29]
 8103b6c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8103b6e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8103b70:	683a      	ldr	r2, [r7, #0]
 8103b72:	7f92      	ldrb	r2, [r2, #30]
 8103b74:	2a00      	cmp	r2, #0
 8103b76:	d102      	bne.n	8103b7e <ETH_SetMACConfig+0x92>
 8103b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103b7c:	e000      	b.n	8103b80 <ETH_SetMACConfig+0x94>
 8103b7e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8103b80:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8103b82:	683b      	ldr	r3, [r7, #0]
 8103b84:	7fdb      	ldrb	r3, [r3, #31]
 8103b86:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8103b88:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8103b8a:	683a      	ldr	r2, [r7, #0]
 8103b8c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8103b90:	2a00      	cmp	r2, #0
 8103b92:	d102      	bne.n	8103b9a <ETH_SetMACConfig+0xae>
 8103b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103b98:	e000      	b.n	8103b9c <ETH_SetMACConfig+0xb0>
 8103b9a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8103b9c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8103b9e:	683b      	ldr	r3, [r7, #0]
 8103ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8103ba2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8103ba4:	683b      	ldr	r3, [r7, #0]
 8103ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103baa:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8103bac:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8103bae:	683b      	ldr	r3, [r7, #0]
 8103bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8103bb2:	4313      	orrs	r3, r2
 8103bb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	681a      	ldr	r2, [r3, #0]
 8103bbc:	4b57      	ldr	r3, [pc, #348]	; (8103d1c <ETH_SetMACConfig+0x230>)
 8103bbe:	4013      	ands	r3, r2
 8103bc0:	687a      	ldr	r2, [r7, #4]
 8103bc2:	6812      	ldr	r2, [r2, #0]
 8103bc4:	68f9      	ldr	r1, [r7, #12]
 8103bc6:	430b      	orrs	r3, r1
 8103bc8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8103bca:	683b      	ldr	r3, [r7, #0]
 8103bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8103bd0:	683b      	ldr	r3, [r7, #0]
 8103bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8103bd6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8103bd8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8103bda:	683b      	ldr	r3, [r7, #0]
 8103bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8103be0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8103be2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8103be4:	683b      	ldr	r3, [r7, #0]
 8103be6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8103bea:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8103bec:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8103bee:	683a      	ldr	r2, [r7, #0]
 8103bf0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8103bf4:	2a00      	cmp	r2, #0
 8103bf6:	d102      	bne.n	8103bfe <ETH_SetMACConfig+0x112>
 8103bf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8103bfc:	e000      	b.n	8103c00 <ETH_SetMACConfig+0x114>
 8103bfe:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8103c00:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8103c02:	683b      	ldr	r3, [r7, #0]
 8103c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8103c06:	4313      	orrs	r3, r2
 8103c08:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	685a      	ldr	r2, [r3, #4]
 8103c10:	4b43      	ldr	r3, [pc, #268]	; (8103d20 <ETH_SetMACConfig+0x234>)
 8103c12:	4013      	ands	r3, r2
 8103c14:	687a      	ldr	r2, [r7, #4]
 8103c16:	6812      	ldr	r2, [r2, #0]
 8103c18:	68f9      	ldr	r1, [r7, #12]
 8103c1a:	430b      	orrs	r3, r1
 8103c1c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8103c1e:	683b      	ldr	r3, [r7, #0]
 8103c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103c24:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8103c26:	683b      	ldr	r3, [r7, #0]
 8103c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8103c2a:	4313      	orrs	r3, r2
 8103c2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	681b      	ldr	r3, [r3, #0]
 8103c32:	68db      	ldr	r3, [r3, #12]
 8103c34:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8103c38:	f023 0301 	bic.w	r3, r3, #1
 8103c3c:	687a      	ldr	r2, [r7, #4]
 8103c3e:	6812      	ldr	r2, [r2, #0]
 8103c40:	68f9      	ldr	r1, [r7, #12]
 8103c42:	430b      	orrs	r3, r1
 8103c44:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8103c46:	683b      	ldr	r3, [r7, #0]
 8103c48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8103c4c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8103c4e:	683b      	ldr	r3, [r7, #0]
 8103c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8103c52:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8103c54:	683a      	ldr	r2, [r7, #0]
 8103c56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8103c5a:	2a00      	cmp	r2, #0
 8103c5c:	d101      	bne.n	8103c62 <ETH_SetMACConfig+0x176>
 8103c5e:	2280      	movs	r2, #128	; 0x80
 8103c60:	e000      	b.n	8103c64 <ETH_SetMACConfig+0x178>
 8103c62:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8103c64:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8103c66:	683b      	ldr	r3, [r7, #0]
 8103c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c6a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8103c6c:	4313      	orrs	r3, r2
 8103c6e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103c76:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8103c7a:	4013      	ands	r3, r2
 8103c7c:	687a      	ldr	r2, [r7, #4]
 8103c7e:	6812      	ldr	r2, [r2, #0]
 8103c80:	68f9      	ldr	r1, [r7, #12]
 8103c82:	430b      	orrs	r3, r1
 8103c84:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8103c86:	683b      	ldr	r3, [r7, #0]
 8103c88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8103c8c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8103c8e:	683b      	ldr	r3, [r7, #0]
 8103c90:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8103c94:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8103c96:	4313      	orrs	r3, r2
 8103c98:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103ca2:	f023 0103 	bic.w	r1, r3, #3
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	681b      	ldr	r3, [r3, #0]
 8103caa:	68fa      	ldr	r2, [r7, #12]
 8103cac:	430a      	orrs	r2, r1
 8103cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	681b      	ldr	r3, [r3, #0]
 8103cb6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8103cba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8103cbe:	683b      	ldr	r3, [r7, #0]
 8103cc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	681b      	ldr	r3, [r3, #0]
 8103cc6:	430a      	orrs	r2, r1
 8103cc8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8103ccc:	683b      	ldr	r3, [r7, #0]
 8103cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8103cd0:	683a      	ldr	r2, [r7, #0]
 8103cd2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8103cd6:	2a00      	cmp	r2, #0
 8103cd8:	d101      	bne.n	8103cde <ETH_SetMACConfig+0x1f2>
 8103cda:	2240      	movs	r2, #64	; 0x40
 8103cdc:	e000      	b.n	8103ce0 <ETH_SetMACConfig+0x1f4>
 8103cde:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8103ce0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8103ce2:	683b      	ldr	r3, [r7, #0]
 8103ce4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8103ce8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8103cea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8103cec:	683b      	ldr	r3, [r7, #0]
 8103cee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8103cf2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8103cf4:	4313      	orrs	r3, r2
 8103cf6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	681b      	ldr	r3, [r3, #0]
 8103cfc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8103d00:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	68fa      	ldr	r2, [r7, #12]
 8103d0a:	430a      	orrs	r2, r1
 8103d0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8103d10:	bf00      	nop
 8103d12:	3714      	adds	r7, #20
 8103d14:	46bd      	mov	sp, r7
 8103d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d1a:	4770      	bx	lr
 8103d1c:	00048083 	.word	0x00048083
 8103d20:	c0f88000 	.word	0xc0f88000

08103d24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8103d24:	b480      	push	{r7}
 8103d26:	b085      	sub	sp, #20
 8103d28:	af00      	add	r7, sp, #0
 8103d2a:	6078      	str	r0, [r7, #4]
 8103d2c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8103d3c:	f023 0302 	bic.w	r3, r3, #2
 8103d40:	683a      	ldr	r2, [r7, #0]
 8103d42:	6812      	ldr	r2, [r2, #0]
 8103d44:	6879      	ldr	r1, [r7, #4]
 8103d46:	6809      	ldr	r1, [r1, #0]
 8103d48:	431a      	orrs	r2, r3
 8103d4a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8103d4e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8103d50:	683b      	ldr	r3, [r7, #0]
 8103d52:	791b      	ldrb	r3, [r3, #4]
 8103d54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8103d56:	683b      	ldr	r3, [r7, #0]
 8103d58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8103d5a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8103d5c:	683b      	ldr	r3, [r7, #0]
 8103d5e:	7b1b      	ldrb	r3, [r3, #12]
 8103d60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8103d62:	4313      	orrs	r3, r2
 8103d64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103d6e:	3304      	adds	r3, #4
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8103d76:	f023 0301 	bic.w	r3, r3, #1
 8103d7a:	687a      	ldr	r2, [r7, #4]
 8103d7c:	6811      	ldr	r1, [r2, #0]
 8103d7e:	68fa      	ldr	r2, [r7, #12]
 8103d80:	431a      	orrs	r2, r3
 8103d82:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8103d86:	3304      	adds	r3, #4
 8103d88:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8103d8a:	683b      	ldr	r3, [r7, #0]
 8103d8c:	7b5b      	ldrb	r3, [r3, #13]
 8103d8e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8103d90:	683b      	ldr	r3, [r7, #0]
 8103d92:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8103d94:	4313      	orrs	r3, r2
 8103d96:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8103da0:	681a      	ldr	r2, [r3, #0]
 8103da2:	4b21      	ldr	r3, [pc, #132]	; (8103e28 <ETH_SetDMAConfig+0x104>)
 8103da4:	4013      	ands	r3, r2
 8103da6:	687a      	ldr	r2, [r7, #4]
 8103da8:	6811      	ldr	r1, [r2, #0]
 8103daa:	68fa      	ldr	r2, [r7, #12]
 8103dac:	431a      	orrs	r2, r3
 8103dae:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8103db2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8103db4:	683b      	ldr	r3, [r7, #0]
 8103db6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8103db8:	683b      	ldr	r3, [r7, #0]
 8103dba:	7d1b      	ldrb	r3, [r3, #20]
 8103dbc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8103dbe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8103dc0:	683b      	ldr	r3, [r7, #0]
 8103dc2:	7f5b      	ldrb	r3, [r3, #29]
 8103dc4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8103dc6:	4313      	orrs	r3, r2
 8103dc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8103dd2:	3304      	adds	r3, #4
 8103dd4:	681a      	ldr	r2, [r3, #0]
 8103dd6:	4b15      	ldr	r3, [pc, #84]	; (8103e2c <ETH_SetDMAConfig+0x108>)
 8103dd8:	4013      	ands	r3, r2
 8103dda:	687a      	ldr	r2, [r7, #4]
 8103ddc:	6811      	ldr	r1, [r2, #0]
 8103dde:	68fa      	ldr	r2, [r7, #12]
 8103de0:	431a      	orrs	r2, r3
 8103de2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8103de6:	3304      	adds	r3, #4
 8103de8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8103dea:	683b      	ldr	r3, [r7, #0]
 8103dec:	7f1b      	ldrb	r3, [r3, #28]
 8103dee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8103df0:	683b      	ldr	r3, [r7, #0]
 8103df2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8103df4:	4313      	orrs	r3, r2
 8103df6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8103e00:	3308      	adds	r3, #8
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8103e08:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8103e0c:	687a      	ldr	r2, [r7, #4]
 8103e0e:	6811      	ldr	r1, [r2, #0]
 8103e10:	68fa      	ldr	r2, [r7, #12]
 8103e12:	431a      	orrs	r2, r3
 8103e14:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8103e18:	3308      	adds	r3, #8
 8103e1a:	601a      	str	r2, [r3, #0]
}
 8103e1c:	bf00      	nop
 8103e1e:	3714      	adds	r7, #20
 8103e20:	46bd      	mov	sp, r7
 8103e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e26:	4770      	bx	lr
 8103e28:	fffec000 	.word	0xfffec000
 8103e2c:	ffc0efef 	.word	0xffc0efef

08103e30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8103e30:	b580      	push	{r7, lr}
 8103e32:	b0a4      	sub	sp, #144	; 0x90
 8103e34:	af00      	add	r7, sp, #0
 8103e36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8103e38:	2301      	movs	r3, #1
 8103e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8103e3e:	2300      	movs	r3, #0
 8103e40:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8103e42:	2300      	movs	r3, #0
 8103e44:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8103e48:	2300      	movs	r3, #0
 8103e4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8103e4e:	2301      	movs	r3, #1
 8103e50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8103e54:	2301      	movs	r3, #1
 8103e56:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8103e5a:	2301      	movs	r3, #1
 8103e5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8103e60:	2300      	movs	r3, #0
 8103e62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8103e66:	2301      	movs	r3, #1
 8103e68:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8103e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8103e70:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8103e72:	2300      	movs	r3, #0
 8103e74:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8103e78:	2300      	movs	r3, #0
 8103e7a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8103e7c:	2300      	movs	r3, #0
 8103e7e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8103e82:	2300      	movs	r3, #0
 8103e84:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8103e88:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8103e8c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8103e8e:	2300      	movs	r3, #0
 8103e90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8103e94:	2300      	movs	r3, #0
 8103e96:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8103e98:	2301      	movs	r3, #1
 8103e9a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8103e9e:	2300      	movs	r3, #0
 8103ea0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8103ea4:	2300      	movs	r3, #0
 8103ea6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8103eaa:	2300      	movs	r3, #0
 8103eac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8103eae:	2300      	movs	r3, #0
 8103eb0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8103eb2:	2300      	movs	r3, #0
 8103eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8103eb6:	2300      	movs	r3, #0
 8103eb8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8103ebc:	2300      	movs	r3, #0
 8103ebe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8103ec2:	2301      	movs	r3, #1
 8103ec4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8103ec8:	2320      	movs	r3, #32
 8103eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8103ece:	2301      	movs	r3, #1
 8103ed0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8103ed4:	2300      	movs	r3, #0
 8103ed6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8103eda:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8103ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8103ee0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103ee4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8103ee6:	2300      	movs	r3, #0
 8103ee8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8103eec:	2302      	movs	r3, #2
 8103eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8103ef2:	2300      	movs	r3, #0
 8103ef4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8103ef8:	2300      	movs	r3, #0
 8103efa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8103efe:	2300      	movs	r3, #0
 8103f00:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8103f04:	2301      	movs	r3, #1
 8103f06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8103f0a:	2300      	movs	r3, #0
 8103f0c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8103f0e:	2301      	movs	r3, #1
 8103f10:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8103f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8103f18:	4619      	mov	r1, r3
 8103f1a:	6878      	ldr	r0, [r7, #4]
 8103f1c:	f7ff fde6 	bl	8103aec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8103f20:	2301      	movs	r3, #1
 8103f22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8103f24:	2301      	movs	r3, #1
 8103f26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8103f28:	2300      	movs	r3, #0
 8103f2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8103f2c:	2300      	movs	r3, #0
 8103f2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8103f32:	2300      	movs	r3, #0
 8103f34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8103f36:	2300      	movs	r3, #0
 8103f38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8103f3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8103f3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8103f40:	2300      	movs	r3, #0
 8103f42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8103f44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8103f48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8103f4a:	2300      	movs	r3, #0
 8103f4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8103f50:	f44f 7306 	mov.w	r3, #536	; 0x218
 8103f54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8103f56:	f107 0308 	add.w	r3, r7, #8
 8103f5a:	4619      	mov	r1, r3
 8103f5c:	6878      	ldr	r0, [r7, #4]
 8103f5e:	f7ff fee1 	bl	8103d24 <ETH_SetDMAConfig>
}
 8103f62:	bf00      	nop
 8103f64:	3790      	adds	r7, #144	; 0x90
 8103f66:	46bd      	mov	sp, r7
 8103f68:	bd80      	pop	{r7, pc}
	...

08103f6c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8103f6c:	b580      	push	{r7, lr}
 8103f6e:	b084      	sub	sp, #16
 8103f70:	af00      	add	r7, sp, #0
 8103f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8103f7c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8103f7e:	68fb      	ldr	r3, [r7, #12]
 8103f80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103f84:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8103f86:	f000 fe9b 	bl	8104cc0 <HAL_RCC_GetHCLKFreq>
 8103f8a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8103f8c:	68bb      	ldr	r3, [r7, #8]
 8103f8e:	4a1e      	ldr	r2, [pc, #120]	; (8104008 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8103f90:	4293      	cmp	r3, r2
 8103f92:	d908      	bls.n	8103fa6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8103f94:	68bb      	ldr	r3, [r7, #8]
 8103f96:	4a1d      	ldr	r2, [pc, #116]	; (810400c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8103f98:	4293      	cmp	r3, r2
 8103f9a:	d804      	bhi.n	8103fa6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8103f9c:	68fb      	ldr	r3, [r7, #12]
 8103f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8103fa2:	60fb      	str	r3, [r7, #12]
 8103fa4:	e027      	b.n	8103ff6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8103fa6:	68bb      	ldr	r3, [r7, #8]
 8103fa8:	4a18      	ldr	r2, [pc, #96]	; (810400c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8103faa:	4293      	cmp	r3, r2
 8103fac:	d908      	bls.n	8103fc0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8103fae:	68bb      	ldr	r3, [r7, #8]
 8103fb0:	4a17      	ldr	r2, [pc, #92]	; (8104010 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8103fb2:	4293      	cmp	r3, r2
 8103fb4:	d804      	bhi.n	8103fc0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8103fb6:	68fb      	ldr	r3, [r7, #12]
 8103fb8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8103fbc:	60fb      	str	r3, [r7, #12]
 8103fbe:	e01a      	b.n	8103ff6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8103fc0:	68bb      	ldr	r3, [r7, #8]
 8103fc2:	4a13      	ldr	r2, [pc, #76]	; (8104010 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8103fc4:	4293      	cmp	r3, r2
 8103fc6:	d903      	bls.n	8103fd0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8103fc8:	68bb      	ldr	r3, [r7, #8]
 8103fca:	4a12      	ldr	r2, [pc, #72]	; (8104014 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8103fcc:	4293      	cmp	r3, r2
 8103fce:	d911      	bls.n	8103ff4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8103fd0:	68bb      	ldr	r3, [r7, #8]
 8103fd2:	4a10      	ldr	r2, [pc, #64]	; (8104014 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8103fd4:	4293      	cmp	r3, r2
 8103fd6:	d908      	bls.n	8103fea <ETH_MAC_MDIO_ClkConfig+0x7e>
 8103fd8:	68bb      	ldr	r3, [r7, #8]
 8103fda:	4a0f      	ldr	r2, [pc, #60]	; (8104018 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8103fdc:	4293      	cmp	r3, r2
 8103fde:	d804      	bhi.n	8103fea <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103fe6:	60fb      	str	r3, [r7, #12]
 8103fe8:	e005      	b.n	8103ff6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8103fea:	68fb      	ldr	r3, [r7, #12]
 8103fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8103ff0:	60fb      	str	r3, [r7, #12]
 8103ff2:	e000      	b.n	8103ff6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8103ff4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	681b      	ldr	r3, [r3, #0]
 8103ffa:	68fa      	ldr	r2, [r7, #12]
 8103ffc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8104000:	bf00      	nop
 8104002:	3710      	adds	r7, #16
 8104004:	46bd      	mov	sp, r7
 8104006:	bd80      	pop	{r7, pc}
 8104008:	01312cff 	.word	0x01312cff
 810400c:	02160ebf 	.word	0x02160ebf
 8104010:	039386ff 	.word	0x039386ff
 8104014:	05f5e0ff 	.word	0x05f5e0ff
 8104018:	08f0d17f 	.word	0x08f0d17f

0810401c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810401c:	b480      	push	{r7}
 810401e:	b085      	sub	sp, #20
 8104020:	af00      	add	r7, sp, #0
 8104022:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104024:	2300      	movs	r3, #0
 8104026:	60fb      	str	r3, [r7, #12]
 8104028:	e01d      	b.n	8104066 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	68d9      	ldr	r1, [r3, #12]
 810402e:	68fa      	ldr	r2, [r7, #12]
 8104030:	4613      	mov	r3, r2
 8104032:	005b      	lsls	r3, r3, #1
 8104034:	4413      	add	r3, r2
 8104036:	00db      	lsls	r3, r3, #3
 8104038:	440b      	add	r3, r1
 810403a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 810403c:	68bb      	ldr	r3, [r7, #8]
 810403e:	2200      	movs	r2, #0
 8104040:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8104042:	68bb      	ldr	r3, [r7, #8]
 8104044:	2200      	movs	r2, #0
 8104046:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8104048:	68bb      	ldr	r3, [r7, #8]
 810404a:	2200      	movs	r2, #0
 810404c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 810404e:	68bb      	ldr	r3, [r7, #8]
 8104050:	2200      	movs	r2, #0
 8104052:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8104054:	68b9      	ldr	r1, [r7, #8]
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	68fa      	ldr	r2, [r7, #12]
 810405a:	3206      	adds	r2, #6
 810405c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	3301      	adds	r3, #1
 8104064:	60fb      	str	r3, [r7, #12]
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	2b03      	cmp	r3, #3
 810406a:	d9de      	bls.n	810402a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	2200      	movs	r2, #0
 8104070:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	681b      	ldr	r3, [r3, #0]
 8104076:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810407a:	330c      	adds	r3, #12
 810407c:	2203      	movs	r2, #3
 810407e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	68da      	ldr	r2, [r3, #12]
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810408c:	3314      	adds	r3, #20
 810408e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	68da      	ldr	r2, [r3, #12]
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	681b      	ldr	r3, [r3, #0]
 8104098:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810409c:	601a      	str	r2, [r3, #0]
}
 810409e:	bf00      	nop
 81040a0:	3714      	adds	r7, #20
 81040a2:	46bd      	mov	sp, r7
 81040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040a8:	4770      	bx	lr

081040aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81040aa:	b480      	push	{r7}
 81040ac:	b085      	sub	sp, #20
 81040ae:	af00      	add	r7, sp, #0
 81040b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81040b2:	2300      	movs	r3, #0
 81040b4:	60fb      	str	r3, [r7, #12]
 81040b6:	e024      	b.n	8104102 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	6919      	ldr	r1, [r3, #16]
 81040bc:	68fa      	ldr	r2, [r7, #12]
 81040be:	4613      	mov	r3, r2
 81040c0:	005b      	lsls	r3, r3, #1
 81040c2:	4413      	add	r3, r2
 81040c4:	00db      	lsls	r3, r3, #3
 81040c6:	440b      	add	r3, r1
 81040c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 81040ca:	68bb      	ldr	r3, [r7, #8]
 81040cc:	2200      	movs	r2, #0
 81040ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 81040d0:	68bb      	ldr	r3, [r7, #8]
 81040d2:	2200      	movs	r2, #0
 81040d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 81040d6:	68bb      	ldr	r3, [r7, #8]
 81040d8:	2200      	movs	r2, #0
 81040da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 81040dc:	68bb      	ldr	r3, [r7, #8]
 81040de:	2200      	movs	r2, #0
 81040e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 81040e2:	68bb      	ldr	r3, [r7, #8]
 81040e4:	2200      	movs	r2, #0
 81040e6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 81040e8:	68bb      	ldr	r3, [r7, #8]
 81040ea:	2200      	movs	r2, #0
 81040ec:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 81040ee:	68ba      	ldr	r2, [r7, #8]
 81040f0:	6879      	ldr	r1, [r7, #4]
 81040f2:	68fb      	ldr	r3, [r7, #12]
 81040f4:	330a      	adds	r3, #10
 81040f6:	009b      	lsls	r3, r3, #2
 81040f8:	440b      	add	r3, r1
 81040fa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81040fc:	68fb      	ldr	r3, [r7, #12]
 81040fe:	3301      	adds	r3, #1
 8104100:	60fb      	str	r3, [r7, #12]
 8104102:	68fb      	ldr	r3, [r7, #12]
 8104104:	2b03      	cmp	r3, #3
 8104106:	d9d7      	bls.n	81040b8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	2200      	movs	r2, #0
 810410c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	2200      	movs	r2, #0
 8104112:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	2200      	movs	r2, #0
 8104118:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	2200      	movs	r2, #0
 810411e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	2200      	movs	r2, #0
 8104124:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810412e:	3310      	adds	r3, #16
 8104130:	2203      	movs	r2, #3
 8104132:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	691a      	ldr	r2, [r3, #16]
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8104140:	331c      	adds	r3, #28
 8104142:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	691b      	ldr	r3, [r3, #16]
 8104148:	f503 62d8 	add.w	r2, r3, #1728	; 0x6c0
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8104154:	3308      	adds	r3, #8
 8104156:	601a      	str	r2, [r3, #0]
}
 8104158:	bf00      	nop
 810415a:	3714      	adds	r7, #20
 810415c:	46bd      	mov	sp, r7
 810415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104162:	4770      	bx	lr

08104164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104164:	b480      	push	{r7}
 8104166:	b089      	sub	sp, #36	; 0x24
 8104168:	af00      	add	r7, sp, #0
 810416a:	6078      	str	r0, [r7, #4]
 810416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810416e:	2300      	movs	r3, #0
 8104170:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104172:	4b89      	ldr	r3, [pc, #548]	; (8104398 <HAL_GPIO_Init+0x234>)
 8104174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104176:	e194      	b.n	81044a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104178:	683b      	ldr	r3, [r7, #0]
 810417a:	681a      	ldr	r2, [r3, #0]
 810417c:	2101      	movs	r1, #1
 810417e:	69fb      	ldr	r3, [r7, #28]
 8104180:	fa01 f303 	lsl.w	r3, r1, r3
 8104184:	4013      	ands	r3, r2
 8104186:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104188:	693b      	ldr	r3, [r7, #16]
 810418a:	2b00      	cmp	r3, #0
 810418c:	f000 8186 	beq.w	810449c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104190:	683b      	ldr	r3, [r7, #0]
 8104192:	685b      	ldr	r3, [r3, #4]
 8104194:	2b01      	cmp	r3, #1
 8104196:	d00b      	beq.n	81041b0 <HAL_GPIO_Init+0x4c>
 8104198:	683b      	ldr	r3, [r7, #0]
 810419a:	685b      	ldr	r3, [r3, #4]
 810419c:	2b02      	cmp	r3, #2
 810419e:	d007      	beq.n	81041b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81041a0:	683b      	ldr	r3, [r7, #0]
 81041a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81041a4:	2b11      	cmp	r3, #17
 81041a6:	d003      	beq.n	81041b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81041a8:	683b      	ldr	r3, [r7, #0]
 81041aa:	685b      	ldr	r3, [r3, #4]
 81041ac:	2b12      	cmp	r3, #18
 81041ae:	d130      	bne.n	8104212 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	689b      	ldr	r3, [r3, #8]
 81041b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81041b6:	69fb      	ldr	r3, [r7, #28]
 81041b8:	005b      	lsls	r3, r3, #1
 81041ba:	2203      	movs	r2, #3
 81041bc:	fa02 f303 	lsl.w	r3, r2, r3
 81041c0:	43db      	mvns	r3, r3
 81041c2:	69ba      	ldr	r2, [r7, #24]
 81041c4:	4013      	ands	r3, r2
 81041c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81041c8:	683b      	ldr	r3, [r7, #0]
 81041ca:	68da      	ldr	r2, [r3, #12]
 81041cc:	69fb      	ldr	r3, [r7, #28]
 81041ce:	005b      	lsls	r3, r3, #1
 81041d0:	fa02 f303 	lsl.w	r3, r2, r3
 81041d4:	69ba      	ldr	r2, [r7, #24]
 81041d6:	4313      	orrs	r3, r2
 81041d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	69ba      	ldr	r2, [r7, #24]
 81041de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81041e0:	687b      	ldr	r3, [r7, #4]
 81041e2:	685b      	ldr	r3, [r3, #4]
 81041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81041e6:	2201      	movs	r2, #1
 81041e8:	69fb      	ldr	r3, [r7, #28]
 81041ea:	fa02 f303 	lsl.w	r3, r2, r3
 81041ee:	43db      	mvns	r3, r3
 81041f0:	69ba      	ldr	r2, [r7, #24]
 81041f2:	4013      	ands	r3, r2
 81041f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81041f6:	683b      	ldr	r3, [r7, #0]
 81041f8:	685b      	ldr	r3, [r3, #4]
 81041fa:	091b      	lsrs	r3, r3, #4
 81041fc:	f003 0201 	and.w	r2, r3, #1
 8104200:	69fb      	ldr	r3, [r7, #28]
 8104202:	fa02 f303 	lsl.w	r3, r2, r3
 8104206:	69ba      	ldr	r2, [r7, #24]
 8104208:	4313      	orrs	r3, r2
 810420a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	69ba      	ldr	r2, [r7, #24]
 8104210:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	68db      	ldr	r3, [r3, #12]
 8104216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104218:	69fb      	ldr	r3, [r7, #28]
 810421a:	005b      	lsls	r3, r3, #1
 810421c:	2203      	movs	r2, #3
 810421e:	fa02 f303 	lsl.w	r3, r2, r3
 8104222:	43db      	mvns	r3, r3
 8104224:	69ba      	ldr	r2, [r7, #24]
 8104226:	4013      	ands	r3, r2
 8104228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810422a:	683b      	ldr	r3, [r7, #0]
 810422c:	689a      	ldr	r2, [r3, #8]
 810422e:	69fb      	ldr	r3, [r7, #28]
 8104230:	005b      	lsls	r3, r3, #1
 8104232:	fa02 f303 	lsl.w	r3, r2, r3
 8104236:	69ba      	ldr	r2, [r7, #24]
 8104238:	4313      	orrs	r3, r2
 810423a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	69ba      	ldr	r2, [r7, #24]
 8104240:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104242:	683b      	ldr	r3, [r7, #0]
 8104244:	685b      	ldr	r3, [r3, #4]
 8104246:	2b02      	cmp	r3, #2
 8104248:	d003      	beq.n	8104252 <HAL_GPIO_Init+0xee>
 810424a:	683b      	ldr	r3, [r7, #0]
 810424c:	685b      	ldr	r3, [r3, #4]
 810424e:	2b12      	cmp	r3, #18
 8104250:	d123      	bne.n	810429a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104252:	69fb      	ldr	r3, [r7, #28]
 8104254:	08da      	lsrs	r2, r3, #3
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	3208      	adds	r2, #8
 810425a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104260:	69fb      	ldr	r3, [r7, #28]
 8104262:	f003 0307 	and.w	r3, r3, #7
 8104266:	009b      	lsls	r3, r3, #2
 8104268:	220f      	movs	r2, #15
 810426a:	fa02 f303 	lsl.w	r3, r2, r3
 810426e:	43db      	mvns	r3, r3
 8104270:	69ba      	ldr	r2, [r7, #24]
 8104272:	4013      	ands	r3, r2
 8104274:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104276:	683b      	ldr	r3, [r7, #0]
 8104278:	691a      	ldr	r2, [r3, #16]
 810427a:	69fb      	ldr	r3, [r7, #28]
 810427c:	f003 0307 	and.w	r3, r3, #7
 8104280:	009b      	lsls	r3, r3, #2
 8104282:	fa02 f303 	lsl.w	r3, r2, r3
 8104286:	69ba      	ldr	r2, [r7, #24]
 8104288:	4313      	orrs	r3, r2
 810428a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810428c:	69fb      	ldr	r3, [r7, #28]
 810428e:	08da      	lsrs	r2, r3, #3
 8104290:	687b      	ldr	r3, [r7, #4]
 8104292:	3208      	adds	r2, #8
 8104294:	69b9      	ldr	r1, [r7, #24]
 8104296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81042a0:	69fb      	ldr	r3, [r7, #28]
 81042a2:	005b      	lsls	r3, r3, #1
 81042a4:	2203      	movs	r2, #3
 81042a6:	fa02 f303 	lsl.w	r3, r2, r3
 81042aa:	43db      	mvns	r3, r3
 81042ac:	69ba      	ldr	r2, [r7, #24]
 81042ae:	4013      	ands	r3, r2
 81042b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81042b2:	683b      	ldr	r3, [r7, #0]
 81042b4:	685b      	ldr	r3, [r3, #4]
 81042b6:	f003 0203 	and.w	r2, r3, #3
 81042ba:	69fb      	ldr	r3, [r7, #28]
 81042bc:	005b      	lsls	r3, r3, #1
 81042be:	fa02 f303 	lsl.w	r3, r2, r3
 81042c2:	69ba      	ldr	r2, [r7, #24]
 81042c4:	4313      	orrs	r3, r2
 81042c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	69ba      	ldr	r2, [r7, #24]
 81042cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81042ce:	683b      	ldr	r3, [r7, #0]
 81042d0:	685b      	ldr	r3, [r3, #4]
 81042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	f000 80e0 	beq.w	810449c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81042dc:	4b2f      	ldr	r3, [pc, #188]	; (810439c <HAL_GPIO_Init+0x238>)
 81042de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81042e2:	4a2e      	ldr	r2, [pc, #184]	; (810439c <HAL_GPIO_Init+0x238>)
 81042e4:	f043 0302 	orr.w	r3, r3, #2
 81042e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81042ec:	4b2b      	ldr	r3, [pc, #172]	; (810439c <HAL_GPIO_Init+0x238>)
 81042ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81042f2:	f003 0302 	and.w	r3, r3, #2
 81042f6:	60fb      	str	r3, [r7, #12]
 81042f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81042fa:	4a29      	ldr	r2, [pc, #164]	; (81043a0 <HAL_GPIO_Init+0x23c>)
 81042fc:	69fb      	ldr	r3, [r7, #28]
 81042fe:	089b      	lsrs	r3, r3, #2
 8104300:	3302      	adds	r3, #2
 8104302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104308:	69fb      	ldr	r3, [r7, #28]
 810430a:	f003 0303 	and.w	r3, r3, #3
 810430e:	009b      	lsls	r3, r3, #2
 8104310:	220f      	movs	r2, #15
 8104312:	fa02 f303 	lsl.w	r3, r2, r3
 8104316:	43db      	mvns	r3, r3
 8104318:	69ba      	ldr	r2, [r7, #24]
 810431a:	4013      	ands	r3, r2
 810431c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	4a20      	ldr	r2, [pc, #128]	; (81043a4 <HAL_GPIO_Init+0x240>)
 8104322:	4293      	cmp	r3, r2
 8104324:	d052      	beq.n	81043cc <HAL_GPIO_Init+0x268>
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	4a1f      	ldr	r2, [pc, #124]	; (81043a8 <HAL_GPIO_Init+0x244>)
 810432a:	4293      	cmp	r3, r2
 810432c:	d031      	beq.n	8104392 <HAL_GPIO_Init+0x22e>
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	4a1e      	ldr	r2, [pc, #120]	; (81043ac <HAL_GPIO_Init+0x248>)
 8104332:	4293      	cmp	r3, r2
 8104334:	d02b      	beq.n	810438e <HAL_GPIO_Init+0x22a>
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	4a1d      	ldr	r2, [pc, #116]	; (81043b0 <HAL_GPIO_Init+0x24c>)
 810433a:	4293      	cmp	r3, r2
 810433c:	d025      	beq.n	810438a <HAL_GPIO_Init+0x226>
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	4a1c      	ldr	r2, [pc, #112]	; (81043b4 <HAL_GPIO_Init+0x250>)
 8104342:	4293      	cmp	r3, r2
 8104344:	d01f      	beq.n	8104386 <HAL_GPIO_Init+0x222>
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	4a1b      	ldr	r2, [pc, #108]	; (81043b8 <HAL_GPIO_Init+0x254>)
 810434a:	4293      	cmp	r3, r2
 810434c:	d019      	beq.n	8104382 <HAL_GPIO_Init+0x21e>
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	4a1a      	ldr	r2, [pc, #104]	; (81043bc <HAL_GPIO_Init+0x258>)
 8104352:	4293      	cmp	r3, r2
 8104354:	d013      	beq.n	810437e <HAL_GPIO_Init+0x21a>
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	4a19      	ldr	r2, [pc, #100]	; (81043c0 <HAL_GPIO_Init+0x25c>)
 810435a:	4293      	cmp	r3, r2
 810435c:	d00d      	beq.n	810437a <HAL_GPIO_Init+0x216>
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	4a18      	ldr	r2, [pc, #96]	; (81043c4 <HAL_GPIO_Init+0x260>)
 8104362:	4293      	cmp	r3, r2
 8104364:	d007      	beq.n	8104376 <HAL_GPIO_Init+0x212>
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	4a17      	ldr	r2, [pc, #92]	; (81043c8 <HAL_GPIO_Init+0x264>)
 810436a:	4293      	cmp	r3, r2
 810436c:	d101      	bne.n	8104372 <HAL_GPIO_Init+0x20e>
 810436e:	2309      	movs	r3, #9
 8104370:	e02d      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 8104372:	230a      	movs	r3, #10
 8104374:	e02b      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 8104376:	2308      	movs	r3, #8
 8104378:	e029      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 810437a:	2307      	movs	r3, #7
 810437c:	e027      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 810437e:	2306      	movs	r3, #6
 8104380:	e025      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 8104382:	2305      	movs	r3, #5
 8104384:	e023      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 8104386:	2304      	movs	r3, #4
 8104388:	e021      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 810438a:	2303      	movs	r3, #3
 810438c:	e01f      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 810438e:	2302      	movs	r3, #2
 8104390:	e01d      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 8104392:	2301      	movs	r3, #1
 8104394:	e01b      	b.n	81043ce <HAL_GPIO_Init+0x26a>
 8104396:	bf00      	nop
 8104398:	580000c0 	.word	0x580000c0
 810439c:	58024400 	.word	0x58024400
 81043a0:	58000400 	.word	0x58000400
 81043a4:	58020000 	.word	0x58020000
 81043a8:	58020400 	.word	0x58020400
 81043ac:	58020800 	.word	0x58020800
 81043b0:	58020c00 	.word	0x58020c00
 81043b4:	58021000 	.word	0x58021000
 81043b8:	58021400 	.word	0x58021400
 81043bc:	58021800 	.word	0x58021800
 81043c0:	58021c00 	.word	0x58021c00
 81043c4:	58022000 	.word	0x58022000
 81043c8:	58022400 	.word	0x58022400
 81043cc:	2300      	movs	r3, #0
 81043ce:	69fa      	ldr	r2, [r7, #28]
 81043d0:	f002 0203 	and.w	r2, r2, #3
 81043d4:	0092      	lsls	r2, r2, #2
 81043d6:	4093      	lsls	r3, r2
 81043d8:	69ba      	ldr	r2, [r7, #24]
 81043da:	4313      	orrs	r3, r2
 81043dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81043de:	4938      	ldr	r1, [pc, #224]	; (81044c0 <HAL_GPIO_Init+0x35c>)
 81043e0:	69fb      	ldr	r3, [r7, #28]
 81043e2:	089b      	lsrs	r3, r3, #2
 81043e4:	3302      	adds	r3, #2
 81043e6:	69ba      	ldr	r2, [r7, #24]
 81043e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81043ec:	697b      	ldr	r3, [r7, #20]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81043f2:	693b      	ldr	r3, [r7, #16]
 81043f4:	43db      	mvns	r3, r3
 81043f6:	69ba      	ldr	r2, [r7, #24]
 81043f8:	4013      	ands	r3, r2
 81043fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81043fc:	683b      	ldr	r3, [r7, #0]
 81043fe:	685b      	ldr	r3, [r3, #4]
 8104400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104404:	2b00      	cmp	r3, #0
 8104406:	d003      	beq.n	8104410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104408:	69ba      	ldr	r2, [r7, #24]
 810440a:	693b      	ldr	r3, [r7, #16]
 810440c:	4313      	orrs	r3, r2
 810440e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104410:	697b      	ldr	r3, [r7, #20]
 8104412:	69ba      	ldr	r2, [r7, #24]
 8104414:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8104416:	697b      	ldr	r3, [r7, #20]
 8104418:	685b      	ldr	r3, [r3, #4]
 810441a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810441c:	693b      	ldr	r3, [r7, #16]
 810441e:	43db      	mvns	r3, r3
 8104420:	69ba      	ldr	r2, [r7, #24]
 8104422:	4013      	ands	r3, r2
 8104424:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8104426:	683b      	ldr	r3, [r7, #0]
 8104428:	685b      	ldr	r3, [r3, #4]
 810442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810442e:	2b00      	cmp	r3, #0
 8104430:	d003      	beq.n	810443a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8104432:	69ba      	ldr	r2, [r7, #24]
 8104434:	693b      	ldr	r3, [r7, #16]
 8104436:	4313      	orrs	r3, r2
 8104438:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810443a:	697b      	ldr	r3, [r7, #20]
 810443c:	69ba      	ldr	r2, [r7, #24]
 810443e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104448:	693b      	ldr	r3, [r7, #16]
 810444a:	43db      	mvns	r3, r3
 810444c:	69ba      	ldr	r2, [r7, #24]
 810444e:	4013      	ands	r3, r2
 8104450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8104452:	683b      	ldr	r3, [r7, #0]
 8104454:	685b      	ldr	r3, [r3, #4]
 8104456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810445a:	2b00      	cmp	r3, #0
 810445c:	d003      	beq.n	8104466 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810445e:	69ba      	ldr	r2, [r7, #24]
 8104460:	693b      	ldr	r3, [r7, #16]
 8104462:	4313      	orrs	r3, r2
 8104464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810446a:	69bb      	ldr	r3, [r7, #24]
 810446c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810446e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104472:	685b      	ldr	r3, [r3, #4]
 8104474:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104476:	693b      	ldr	r3, [r7, #16]
 8104478:	43db      	mvns	r3, r3
 810447a:	69ba      	ldr	r2, [r7, #24]
 810447c:	4013      	ands	r3, r2
 810447e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104480:	683b      	ldr	r3, [r7, #0]
 8104482:	685b      	ldr	r3, [r3, #4]
 8104484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104488:	2b00      	cmp	r3, #0
 810448a:	d003      	beq.n	8104494 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810448c:	69ba      	ldr	r2, [r7, #24]
 810448e:	693b      	ldr	r3, [r7, #16]
 8104490:	4313      	orrs	r3, r2
 8104492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104498:	69bb      	ldr	r3, [r7, #24]
 810449a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810449c:	69fb      	ldr	r3, [r7, #28]
 810449e:	3301      	adds	r3, #1
 81044a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81044a2:	683b      	ldr	r3, [r7, #0]
 81044a4:	681a      	ldr	r2, [r3, #0]
 81044a6:	69fb      	ldr	r3, [r7, #28]
 81044a8:	fa22 f303 	lsr.w	r3, r2, r3
 81044ac:	2b00      	cmp	r3, #0
 81044ae:	f47f ae63 	bne.w	8104178 <HAL_GPIO_Init+0x14>
  }
}
 81044b2:	bf00      	nop
 81044b4:	3724      	adds	r7, #36	; 0x24
 81044b6:	46bd      	mov	sp, r7
 81044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044bc:	4770      	bx	lr
 81044be:	bf00      	nop
 81044c0:	58000400 	.word	0x58000400

081044c4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81044c4:	b480      	push	{r7}
 81044c6:	b083      	sub	sp, #12
 81044c8:	af00      	add	r7, sp, #0
 81044ca:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81044cc:	4b05      	ldr	r3, [pc, #20]	; (81044e4 <HAL_HSEM_ActivateNotification+0x20>)
 81044ce:	681a      	ldr	r2, [r3, #0]
 81044d0:	4904      	ldr	r1, [pc, #16]	; (81044e4 <HAL_HSEM_ActivateNotification+0x20>)
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	4313      	orrs	r3, r2
 81044d6:	600b      	str	r3, [r1, #0]
#endif
}
 81044d8:	bf00      	nop
 81044da:	370c      	adds	r7, #12
 81044dc:	46bd      	mov	sp, r7
 81044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044e2:	4770      	bx	lr
 81044e4:	58026510 	.word	0x58026510

081044e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81044e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 81044ea:	b08f      	sub	sp, #60	; 0x3c
 81044ec:	af0a      	add	r7, sp, #40	; 0x28
 81044ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	2b00      	cmp	r3, #0
 81044f4:	d101      	bne.n	81044fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81044f6:	2301      	movs	r3, #1
 81044f8:	e116      	b.n	8104728 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	681b      	ldr	r3, [r3, #0]
 81044fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8104506:	b2db      	uxtb	r3, r3
 8104508:	2b00      	cmp	r3, #0
 810450a:	d106      	bne.n	810451a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	2200      	movs	r2, #0
 8104510:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8104514:	6878      	ldr	r0, [r7, #4]
 8104516:	f7fd fbe5 	bl	8101ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	2203      	movs	r2, #3
 810451e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8104522:	68bb      	ldr	r3, [r7, #8]
 8104524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810452a:	2b00      	cmp	r3, #0
 810452c:	d102      	bne.n	8104534 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	2200      	movs	r2, #0
 8104532:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	4618      	mov	r0, r3
 810453a:	f007 fb00 	bl	810bb3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	603b      	str	r3, [r7, #0]
 8104544:	687e      	ldr	r6, [r7, #4]
 8104546:	466d      	mov	r5, sp
 8104548:	f106 0410 	add.w	r4, r6, #16
 810454c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810454e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104554:	e894 0003 	ldmia.w	r4, {r0, r1}
 8104558:	e885 0003 	stmia.w	r5, {r0, r1}
 810455c:	1d33      	adds	r3, r6, #4
 810455e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104560:	6838      	ldr	r0, [r7, #0]
 8104562:	f007 fa8b 	bl	810ba7c <USB_CoreInit>
 8104566:	4603      	mov	r3, r0
 8104568:	2b00      	cmp	r3, #0
 810456a:	d005      	beq.n	8104578 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	2202      	movs	r2, #2
 8104570:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8104574:	2301      	movs	r3, #1
 8104576:	e0d7      	b.n	8104728 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	2100      	movs	r1, #0
 810457e:	4618      	mov	r0, r3
 8104580:	f007 faee 	bl	810bb60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104584:	2300      	movs	r3, #0
 8104586:	73fb      	strb	r3, [r7, #15]
 8104588:	e04a      	b.n	8104620 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 810458a:	7bfa      	ldrb	r2, [r7, #15]
 810458c:	6879      	ldr	r1, [r7, #4]
 810458e:	4613      	mov	r3, r2
 8104590:	00db      	lsls	r3, r3, #3
 8104592:	1a9b      	subs	r3, r3, r2
 8104594:	009b      	lsls	r3, r3, #2
 8104596:	440b      	add	r3, r1
 8104598:	333d      	adds	r3, #61	; 0x3d
 810459a:	2201      	movs	r2, #1
 810459c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 810459e:	7bfa      	ldrb	r2, [r7, #15]
 81045a0:	6879      	ldr	r1, [r7, #4]
 81045a2:	4613      	mov	r3, r2
 81045a4:	00db      	lsls	r3, r3, #3
 81045a6:	1a9b      	subs	r3, r3, r2
 81045a8:	009b      	lsls	r3, r3, #2
 81045aa:	440b      	add	r3, r1
 81045ac:	333c      	adds	r3, #60	; 0x3c
 81045ae:	7bfa      	ldrb	r2, [r7, #15]
 81045b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81045b2:	7bfa      	ldrb	r2, [r7, #15]
 81045b4:	7bfb      	ldrb	r3, [r7, #15]
 81045b6:	b298      	uxth	r0, r3
 81045b8:	6879      	ldr	r1, [r7, #4]
 81045ba:	4613      	mov	r3, r2
 81045bc:	00db      	lsls	r3, r3, #3
 81045be:	1a9b      	subs	r3, r3, r2
 81045c0:	009b      	lsls	r3, r3, #2
 81045c2:	440b      	add	r3, r1
 81045c4:	3342      	adds	r3, #66	; 0x42
 81045c6:	4602      	mov	r2, r0
 81045c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81045ca:	7bfa      	ldrb	r2, [r7, #15]
 81045cc:	6879      	ldr	r1, [r7, #4]
 81045ce:	4613      	mov	r3, r2
 81045d0:	00db      	lsls	r3, r3, #3
 81045d2:	1a9b      	subs	r3, r3, r2
 81045d4:	009b      	lsls	r3, r3, #2
 81045d6:	440b      	add	r3, r1
 81045d8:	333f      	adds	r3, #63	; 0x3f
 81045da:	2200      	movs	r2, #0
 81045dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81045de:	7bfa      	ldrb	r2, [r7, #15]
 81045e0:	6879      	ldr	r1, [r7, #4]
 81045e2:	4613      	mov	r3, r2
 81045e4:	00db      	lsls	r3, r3, #3
 81045e6:	1a9b      	subs	r3, r3, r2
 81045e8:	009b      	lsls	r3, r3, #2
 81045ea:	440b      	add	r3, r1
 81045ec:	3344      	adds	r3, #68	; 0x44
 81045ee:	2200      	movs	r2, #0
 81045f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81045f2:	7bfa      	ldrb	r2, [r7, #15]
 81045f4:	6879      	ldr	r1, [r7, #4]
 81045f6:	4613      	mov	r3, r2
 81045f8:	00db      	lsls	r3, r3, #3
 81045fa:	1a9b      	subs	r3, r3, r2
 81045fc:	009b      	lsls	r3, r3, #2
 81045fe:	440b      	add	r3, r1
 8104600:	3348      	adds	r3, #72	; 0x48
 8104602:	2200      	movs	r2, #0
 8104604:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8104606:	7bfa      	ldrb	r2, [r7, #15]
 8104608:	6879      	ldr	r1, [r7, #4]
 810460a:	4613      	mov	r3, r2
 810460c:	00db      	lsls	r3, r3, #3
 810460e:	1a9b      	subs	r3, r3, r2
 8104610:	009b      	lsls	r3, r3, #2
 8104612:	440b      	add	r3, r1
 8104614:	3350      	adds	r3, #80	; 0x50
 8104616:	2200      	movs	r2, #0
 8104618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810461a:	7bfb      	ldrb	r3, [r7, #15]
 810461c:	3301      	adds	r3, #1
 810461e:	73fb      	strb	r3, [r7, #15]
 8104620:	7bfa      	ldrb	r2, [r7, #15]
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	685b      	ldr	r3, [r3, #4]
 8104626:	429a      	cmp	r2, r3
 8104628:	d3af      	bcc.n	810458a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810462a:	2300      	movs	r3, #0
 810462c:	73fb      	strb	r3, [r7, #15]
 810462e:	e044      	b.n	81046ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8104630:	7bfa      	ldrb	r2, [r7, #15]
 8104632:	6879      	ldr	r1, [r7, #4]
 8104634:	4613      	mov	r3, r2
 8104636:	00db      	lsls	r3, r3, #3
 8104638:	1a9b      	subs	r3, r3, r2
 810463a:	009b      	lsls	r3, r3, #2
 810463c:	440b      	add	r3, r1
 810463e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8104642:	2200      	movs	r2, #0
 8104644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8104646:	7bfa      	ldrb	r2, [r7, #15]
 8104648:	6879      	ldr	r1, [r7, #4]
 810464a:	4613      	mov	r3, r2
 810464c:	00db      	lsls	r3, r3, #3
 810464e:	1a9b      	subs	r3, r3, r2
 8104650:	009b      	lsls	r3, r3, #2
 8104652:	440b      	add	r3, r1
 8104654:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8104658:	7bfa      	ldrb	r2, [r7, #15]
 810465a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 810465c:	7bfa      	ldrb	r2, [r7, #15]
 810465e:	6879      	ldr	r1, [r7, #4]
 8104660:	4613      	mov	r3, r2
 8104662:	00db      	lsls	r3, r3, #3
 8104664:	1a9b      	subs	r3, r3, r2
 8104666:	009b      	lsls	r3, r3, #2
 8104668:	440b      	add	r3, r1
 810466a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 810466e:	2200      	movs	r2, #0
 8104670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8104672:	7bfa      	ldrb	r2, [r7, #15]
 8104674:	6879      	ldr	r1, [r7, #4]
 8104676:	4613      	mov	r3, r2
 8104678:	00db      	lsls	r3, r3, #3
 810467a:	1a9b      	subs	r3, r3, r2
 810467c:	009b      	lsls	r3, r3, #2
 810467e:	440b      	add	r3, r1
 8104680:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8104684:	2200      	movs	r2, #0
 8104686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8104688:	7bfa      	ldrb	r2, [r7, #15]
 810468a:	6879      	ldr	r1, [r7, #4]
 810468c:	4613      	mov	r3, r2
 810468e:	00db      	lsls	r3, r3, #3
 8104690:	1a9b      	subs	r3, r3, r2
 8104692:	009b      	lsls	r3, r3, #2
 8104694:	440b      	add	r3, r1
 8104696:	f503 7302 	add.w	r3, r3, #520	; 0x208
 810469a:	2200      	movs	r2, #0
 810469c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 810469e:	7bfa      	ldrb	r2, [r7, #15]
 81046a0:	6879      	ldr	r1, [r7, #4]
 81046a2:	4613      	mov	r3, r2
 81046a4:	00db      	lsls	r3, r3, #3
 81046a6:	1a9b      	subs	r3, r3, r2
 81046a8:	009b      	lsls	r3, r3, #2
 81046aa:	440b      	add	r3, r1
 81046ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 81046b0:	2200      	movs	r2, #0
 81046b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81046b4:	7bfb      	ldrb	r3, [r7, #15]
 81046b6:	3301      	adds	r3, #1
 81046b8:	73fb      	strb	r3, [r7, #15]
 81046ba:	7bfa      	ldrb	r2, [r7, #15]
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	685b      	ldr	r3, [r3, #4]
 81046c0:	429a      	cmp	r2, r3
 81046c2:	d3b5      	bcc.n	8104630 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	603b      	str	r3, [r7, #0]
 81046ca:	687e      	ldr	r6, [r7, #4]
 81046cc:	466d      	mov	r5, sp
 81046ce:	f106 0410 	add.w	r4, r6, #16
 81046d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81046d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81046da:	e894 0003 	ldmia.w	r4, {r0, r1}
 81046de:	e885 0003 	stmia.w	r5, {r0, r1}
 81046e2:	1d33      	adds	r3, r6, #4
 81046e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 81046e6:	6838      	ldr	r0, [r7, #0]
 81046e8:	f007 fa64 	bl	810bbb4 <USB_DevInit>
 81046ec:	4603      	mov	r3, r0
 81046ee:	2b00      	cmp	r3, #0
 81046f0:	d005      	beq.n	81046fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	2202      	movs	r2, #2
 81046f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 81046fa:	2301      	movs	r3, #1
 81046fc:	e014      	b.n	8104728 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	2200      	movs	r2, #0
 8104702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	2201      	movs	r2, #1
 810470a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 810470e:	687b      	ldr	r3, [r7, #4]
 8104710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104712:	2b01      	cmp	r3, #1
 8104714:	d102      	bne.n	810471c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8104716:	6878      	ldr	r0, [r7, #4]
 8104718:	f000 f80a 	bl	8104730 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4618      	mov	r0, r3
 8104722:	f007 fc06 	bl	810bf32 <USB_DevDisconnect>

  return HAL_OK;
 8104726:	2300      	movs	r3, #0
}
 8104728:	4618      	mov	r0, r3
 810472a:	3714      	adds	r7, #20
 810472c:	46bd      	mov	sp, r7
 810472e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08104730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8104730:	b480      	push	{r7}
 8104732:	b085      	sub	sp, #20
 8104734:	af00      	add	r7, sp, #0
 8104736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	2201      	movs	r2, #1
 8104742:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8104746:	687b      	ldr	r3, [r7, #4]
 8104748:	2200      	movs	r2, #0
 810474a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 810474e:	68fb      	ldr	r3, [r7, #12]
 8104750:	699b      	ldr	r3, [r3, #24]
 8104752:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8104756:	68fb      	ldr	r3, [r7, #12]
 8104758:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 810475a:	68fb      	ldr	r3, [r7, #12]
 810475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810475e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104762:	f043 0303 	orr.w	r3, r3, #3
 8104766:	68fa      	ldr	r2, [r7, #12]
 8104768:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 810476a:	2300      	movs	r3, #0
}
 810476c:	4618      	mov	r0, r3
 810476e:	3714      	adds	r7, #20
 8104770:	46bd      	mov	sp, r7
 8104772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104776:	4770      	bx	lr

08104778 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104778:	b580      	push	{r7, lr}
 810477a:	b084      	sub	sp, #16
 810477c:	af00      	add	r7, sp, #0
 810477e:	60f8      	str	r0, [r7, #12]
 8104780:	460b      	mov	r3, r1
 8104782:	607a      	str	r2, [r7, #4]
 8104784:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104786:	4b2f      	ldr	r3, [pc, #188]	; (8104844 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	f023 0201 	bic.w	r2, r3, #1
 810478e:	492d      	ldr	r1, [pc, #180]	; (8104844 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8104790:	68fb      	ldr	r3, [r7, #12]
 8104792:	4313      	orrs	r3, r2
 8104794:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	2b00      	cmp	r3, #0
 810479a:	d121      	bne.n	81047e0 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810479c:	f7ff f8b8 	bl	8103910 <HAL_GetCurrentCPUID>
 81047a0:	4603      	mov	r3, r0
 81047a2:	2b03      	cmp	r3, #3
 81047a4:	d148      	bne.n	8104838 <HAL_PWREx_EnterSTOPMode+0xc0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81047a6:	4b27      	ldr	r3, [pc, #156]	; (8104844 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81047a8:	691b      	ldr	r3, [r3, #16]
 81047aa:	4a26      	ldr	r2, [pc, #152]	; (8104844 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81047ac:	f023 0301 	bic.w	r3, r3, #1
 81047b0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047b2:	4b25      	ldr	r3, [pc, #148]	; (8104848 <HAL_PWREx_EnterSTOPMode+0xd0>)
 81047b4:	691b      	ldr	r3, [r3, #16]
 81047b6:	4a24      	ldr	r2, [pc, #144]	; (8104848 <HAL_PWREx_EnterSTOPMode+0xd0>)
 81047b8:	f043 0304 	orr.w	r3, r3, #4
 81047bc:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81047be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81047c2:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81047c6:	7afb      	ldrb	r3, [r7, #11]
 81047c8:	2b01      	cmp	r3, #1
 81047ca:	d101      	bne.n	81047d0 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81047cc:	bf30      	wfi
 81047ce:	e000      	b.n	81047d2 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81047d0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047d2:	4b1d      	ldr	r3, [pc, #116]	; (8104848 <HAL_PWREx_EnterSTOPMode+0xd0>)
 81047d4:	691b      	ldr	r3, [r3, #16]
 81047d6:	4a1c      	ldr	r2, [pc, #112]	; (8104848 <HAL_PWREx_EnterSTOPMode+0xd0>)
 81047d8:	f023 0304 	bic.w	r3, r3, #4
 81047dc:	6113      	str	r3, [r2, #16]
 81047de:	e02e      	b.n	810483e <HAL_PWREx_EnterSTOPMode+0xc6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	2b01      	cmp	r3, #1
 81047e4:	d121      	bne.n	810482a <HAL_PWREx_EnterSTOPMode+0xb2>
  {
    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 81047e6:	4b17      	ldr	r3, [pc, #92]	; (8104844 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81047e8:	691b      	ldr	r3, [r3, #16]
 81047ea:	4a16      	ldr	r2, [pc, #88]	; (8104844 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81047ec:	f023 0302 	bic.w	r3, r3, #2
 81047f0:	6113      	str	r3, [r2, #16]

#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81047f2:	f7ff f88d 	bl	8103910 <HAL_GetCurrentCPUID>
 81047f6:	4603      	mov	r3, r0
 81047f8:	2b01      	cmp	r3, #1
 81047fa:	d11f      	bne.n	810483c <HAL_PWREx_EnterSTOPMode+0xc4>
      */
      return;
    }

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047fc:	4b12      	ldr	r3, [pc, #72]	; (8104848 <HAL_PWREx_EnterSTOPMode+0xd0>)
 81047fe:	691b      	ldr	r3, [r3, #16]
 8104800:	4a11      	ldr	r2, [pc, #68]	; (8104848 <HAL_PWREx_EnterSTOPMode+0xd0>)
 8104802:	f043 0304 	orr.w	r3, r3, #4
 8104806:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 810480c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104810:	7afb      	ldrb	r3, [r7, #11]
 8104812:	2b01      	cmp	r3, #1
 8104814:	d101      	bne.n	810481a <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104816:	bf30      	wfi
 8104818:	e000      	b.n	810481c <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810481a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810481c:	4b0a      	ldr	r3, [pc, #40]	; (8104848 <HAL_PWREx_EnterSTOPMode+0xd0>)
 810481e:	691b      	ldr	r3, [r3, #16]
 8104820:	4a09      	ldr	r2, [pc, #36]	; (8104848 <HAL_PWREx_EnterSTOPMode+0xd0>)
 8104822:	f023 0304 	bic.w	r3, r3, #4
 8104826:	6113      	str	r3, [r2, #16]
 8104828:	e009      	b.n	810483e <HAL_PWREx_EnterSTOPMode+0xc6>
  }
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810482a:	4b06      	ldr	r3, [pc, #24]	; (8104844 <HAL_PWREx_EnterSTOPMode+0xcc>)
 810482c:	691b      	ldr	r3, [r3, #16]
 810482e:	4a05      	ldr	r2, [pc, #20]	; (8104844 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8104830:	f023 0304 	bic.w	r3, r3, #4
 8104834:	6113      	str	r3, [r2, #16]
 8104836:	e002      	b.n	810483e <HAL_PWREx_EnterSTOPMode+0xc6>
      return;
 8104838:	bf00      	nop
 810483a:	e000      	b.n	810483e <HAL_PWREx_EnterSTOPMode+0xc6>
      return;
 810483c:	bf00      	nop
  }
}
 810483e:	3710      	adds	r7, #16
 8104840:	46bd      	mov	sp, r7
 8104842:	bd80      	pop	{r7, pc}
 8104844:	58024800 	.word	0x58024800
 8104848:	e000ed00 	.word	0xe000ed00

0810484c <HAL_PWREx_ClearPendingEvent>:
  *         to CSLEEP or CSTOP. It should be called just before APIs performing
  *         enter low power mode using Wait For Event request.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810484c:	b580      	push	{r7, lr}
 810484e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104850:	f7ff f85e 	bl	8103910 <HAL_GetCurrentCPUID>
 8104854:	4603      	mov	r3, r0
 8104856:	2b03      	cmp	r3, #3
 8104858:	d101      	bne.n	810485e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810485a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810485c:	e001      	b.n	8104862 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810485e:	bf40      	sev
    __WFE ();
 8104860:	bf20      	wfe
}
 8104862:	bf00      	nop
 8104864:	bd80      	pop	{r7, pc}
	...

08104868 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8104868:	b580      	push	{r7, lr}
 810486a:	b086      	sub	sp, #24
 810486c:	af02      	add	r7, sp, #8
 810486e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8104870:	f7fd fd40 	bl	81022f4 <HAL_GetTick>
 8104874:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	2b00      	cmp	r3, #0
 810487a:	d101      	bne.n	8104880 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 810487c:	2301      	movs	r3, #1
 810487e:	e061      	b.n	8104944 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104886:	b2db      	uxtb	r3, r3
 8104888:	2b00      	cmp	r3, #0
 810488a:	d107      	bne.n	810489c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 810488c:	6878      	ldr	r0, [r7, #4]
 810488e:	f7fc fe9b 	bl	81015c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8104892:	f241 3188 	movw	r1, #5000	; 0x1388
 8104896:	6878      	ldr	r0, [r7, #4]
 8104898:	f000 f85a 	bl	8104950 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	681b      	ldr	r3, [r3, #0]
 81048a2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	689b      	ldr	r3, [r3, #8]
 81048aa:	3b01      	subs	r3, #1
 81048ac:	021a      	lsls	r2, r3, #8
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	430a      	orrs	r2, r1
 81048b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81048ba:	9300      	str	r3, [sp, #0]
 81048bc:	68fb      	ldr	r3, [r7, #12]
 81048be:	2200      	movs	r2, #0
 81048c0:	2120      	movs	r1, #32
 81048c2:	6878      	ldr	r0, [r7, #4]
 81048c4:	f000 f852 	bl	810496c <QSPI_WaitFlagStateUntilTimeout>
 81048c8:	4603      	mov	r3, r0
 81048ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 81048cc:	7afb      	ldrb	r3, [r7, #11]
 81048ce:	2b00      	cmp	r3, #0
 81048d0:	d137      	bne.n	8104942 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	681b      	ldr	r3, [r3, #0]
 81048d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81048dc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 81048e0:	687a      	ldr	r2, [r7, #4]
 81048e2:	6852      	ldr	r2, [r2, #4]
 81048e4:	0611      	lsls	r1, r2, #24
 81048e6:	687a      	ldr	r2, [r7, #4]
 81048e8:	68d2      	ldr	r2, [r2, #12]
 81048ea:	4311      	orrs	r1, r2
 81048ec:	687a      	ldr	r2, [r7, #4]
 81048ee:	69d2      	ldr	r2, [r2, #28]
 81048f0:	4311      	orrs	r1, r2
 81048f2:	687a      	ldr	r2, [r7, #4]
 81048f4:	6a12      	ldr	r2, [r2, #32]
 81048f6:	4311      	orrs	r1, r2
 81048f8:	687a      	ldr	r2, [r7, #4]
 81048fa:	6812      	ldr	r2, [r2, #0]
 81048fc:	430b      	orrs	r3, r1
 81048fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8104900:	687b      	ldr	r3, [r7, #4]
 8104902:	681b      	ldr	r3, [r3, #0]
 8104904:	685a      	ldr	r2, [r3, #4]
 8104906:	4b11      	ldr	r3, [pc, #68]	; (810494c <HAL_QSPI_Init+0xe4>)
 8104908:	4013      	ands	r3, r2
 810490a:	687a      	ldr	r2, [r7, #4]
 810490c:	6912      	ldr	r2, [r2, #16]
 810490e:	0411      	lsls	r1, r2, #16
 8104910:	687a      	ldr	r2, [r7, #4]
 8104912:	6952      	ldr	r2, [r2, #20]
 8104914:	4311      	orrs	r1, r2
 8104916:	687a      	ldr	r2, [r7, #4]
 8104918:	6992      	ldr	r2, [r2, #24]
 810491a:	4311      	orrs	r1, r2
 810491c:	687a      	ldr	r2, [r7, #4]
 810491e:	6812      	ldr	r2, [r2, #0]
 8104920:	430b      	orrs	r3, r1
 8104922:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	681a      	ldr	r2, [r3, #0]
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	681b      	ldr	r3, [r3, #0]
 810492e:	f042 0201 	orr.w	r2, r2, #1
 8104932:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	2200      	movs	r2, #0
 8104938:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 810493a:	687b      	ldr	r3, [r7, #4]
 810493c:	2201      	movs	r2, #1
 810493e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8104942:	7afb      	ldrb	r3, [r7, #11]
}
 8104944:	4618      	mov	r0, r3
 8104946:	3710      	adds	r7, #16
 8104948:	46bd      	mov	sp, r7
 810494a:	bd80      	pop	{r7, pc}
 810494c:	ffe0f8fe 	.word	0xffe0f8fe

08104950 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8104950:	b480      	push	{r7}
 8104952:	b083      	sub	sp, #12
 8104954:	af00      	add	r7, sp, #0
 8104956:	6078      	str	r0, [r7, #4]
 8104958:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	683a      	ldr	r2, [r7, #0]
 810495e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8104960:	bf00      	nop
 8104962:	370c      	adds	r7, #12
 8104964:	46bd      	mov	sp, r7
 8104966:	f85d 7b04 	ldr.w	r7, [sp], #4
 810496a:	4770      	bx	lr

0810496c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 810496c:	b580      	push	{r7, lr}
 810496e:	b084      	sub	sp, #16
 8104970:	af00      	add	r7, sp, #0
 8104972:	60f8      	str	r0, [r7, #12]
 8104974:	60b9      	str	r1, [r7, #8]
 8104976:	603b      	str	r3, [r7, #0]
 8104978:	4613      	mov	r3, r2
 810497a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 810497c:	e01a      	b.n	81049b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810497e:	69bb      	ldr	r3, [r7, #24]
 8104980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104984:	d016      	beq.n	81049b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104986:	f7fd fcb5 	bl	81022f4 <HAL_GetTick>
 810498a:	4602      	mov	r2, r0
 810498c:	683b      	ldr	r3, [r7, #0]
 810498e:	1ad3      	subs	r3, r2, r3
 8104990:	69ba      	ldr	r2, [r7, #24]
 8104992:	429a      	cmp	r2, r3
 8104994:	d302      	bcc.n	810499c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8104996:	69bb      	ldr	r3, [r7, #24]
 8104998:	2b00      	cmp	r3, #0
 810499a:	d10b      	bne.n	81049b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 810499c:	68fb      	ldr	r3, [r7, #12]
 810499e:	2204      	movs	r2, #4
 81049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81049a8:	f043 0201 	orr.w	r2, r3, #1
 81049ac:	68fb      	ldr	r3, [r7, #12]
 81049ae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 81049b0:	2301      	movs	r3, #1
 81049b2:	e00e      	b.n	81049d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81049b4:	68fb      	ldr	r3, [r7, #12]
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	689a      	ldr	r2, [r3, #8]
 81049ba:	68bb      	ldr	r3, [r7, #8]
 81049bc:	4013      	ands	r3, r2
 81049be:	2b00      	cmp	r3, #0
 81049c0:	bf14      	ite	ne
 81049c2:	2301      	movne	r3, #1
 81049c4:	2300      	moveq	r3, #0
 81049c6:	b2db      	uxtb	r3, r3
 81049c8:	461a      	mov	r2, r3
 81049ca:	79fb      	ldrb	r3, [r7, #7]
 81049cc:	429a      	cmp	r2, r3
 81049ce:	d1d6      	bne.n	810497e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81049d0:	2300      	movs	r3, #0
}
 81049d2:	4618      	mov	r0, r3
 81049d4:	3710      	adds	r7, #16
 81049d6:	46bd      	mov	sp, r7
 81049d8:	bd80      	pop	{r7, pc}
	...

081049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81049dc:	b480      	push	{r7}
 81049de:	b089      	sub	sp, #36	; 0x24
 81049e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81049e2:	4baf      	ldr	r3, [pc, #700]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81049e4:	691b      	ldr	r3, [r3, #16]
 81049e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81049ea:	2b18      	cmp	r3, #24
 81049ec:	f200 814e 	bhi.w	8104c8c <HAL_RCC_GetSysClockFreq+0x2b0>
 81049f0:	a201      	add	r2, pc, #4	; (adr r2, 81049f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049f6:	bf00      	nop
 81049f8:	08104a5d 	.word	0x08104a5d
 81049fc:	08104c8d 	.word	0x08104c8d
 8104a00:	08104c8d 	.word	0x08104c8d
 8104a04:	08104c8d 	.word	0x08104c8d
 8104a08:	08104c8d 	.word	0x08104c8d
 8104a0c:	08104c8d 	.word	0x08104c8d
 8104a10:	08104c8d 	.word	0x08104c8d
 8104a14:	08104c8d 	.word	0x08104c8d
 8104a18:	08104a83 	.word	0x08104a83
 8104a1c:	08104c8d 	.word	0x08104c8d
 8104a20:	08104c8d 	.word	0x08104c8d
 8104a24:	08104c8d 	.word	0x08104c8d
 8104a28:	08104c8d 	.word	0x08104c8d
 8104a2c:	08104c8d 	.word	0x08104c8d
 8104a30:	08104c8d 	.word	0x08104c8d
 8104a34:	08104c8d 	.word	0x08104c8d
 8104a38:	08104a89 	.word	0x08104a89
 8104a3c:	08104c8d 	.word	0x08104c8d
 8104a40:	08104c8d 	.word	0x08104c8d
 8104a44:	08104c8d 	.word	0x08104c8d
 8104a48:	08104c8d 	.word	0x08104c8d
 8104a4c:	08104c8d 	.word	0x08104c8d
 8104a50:	08104c8d 	.word	0x08104c8d
 8104a54:	08104c8d 	.word	0x08104c8d
 8104a58:	08104a8f 	.word	0x08104a8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104a5c:	4b90      	ldr	r3, [pc, #576]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	f003 0320 	and.w	r3, r3, #32
 8104a64:	2b00      	cmp	r3, #0
 8104a66:	d009      	beq.n	8104a7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104a68:	4b8d      	ldr	r3, [pc, #564]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	08db      	lsrs	r3, r3, #3
 8104a6e:	f003 0303 	and.w	r3, r3, #3
 8104a72:	4a8c      	ldr	r2, [pc, #560]	; (8104ca4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8104a74:	fa22 f303 	lsr.w	r3, r2, r3
 8104a78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8104a7a:	e10a      	b.n	8104c92 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104a7c:	4b89      	ldr	r3, [pc, #548]	; (8104ca4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8104a7e:	61bb      	str	r3, [r7, #24]
    break;
 8104a80:	e107      	b.n	8104c92 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104a82:	4b89      	ldr	r3, [pc, #548]	; (8104ca8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8104a84:	61bb      	str	r3, [r7, #24]
    break;
 8104a86:	e104      	b.n	8104c92 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104a88:	4b88      	ldr	r3, [pc, #544]	; (8104cac <HAL_RCC_GetSysClockFreq+0x2d0>)
 8104a8a:	61bb      	str	r3, [r7, #24]
    break;
 8104a8c:	e101      	b.n	8104c92 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104a8e:	4b84      	ldr	r3, [pc, #528]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104a92:	f003 0303 	and.w	r3, r3, #3
 8104a96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104a98:	4b81      	ldr	r3, [pc, #516]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104a9c:	091b      	lsrs	r3, r3, #4
 8104a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104aa2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104aa4:	4b7e      	ldr	r3, [pc, #504]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104aa8:	f003 0301 	and.w	r3, r3, #1
 8104aac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104aae:	4b7c      	ldr	r3, [pc, #496]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104ab2:	08db      	lsrs	r3, r3, #3
 8104ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104ab8:	68fa      	ldr	r2, [r7, #12]
 8104aba:	fb02 f303 	mul.w	r3, r2, r3
 8104abe:	ee07 3a90 	vmov	s15, r3
 8104ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ac6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8104aca:	693b      	ldr	r3, [r7, #16]
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	f000 80da 	beq.w	8104c86 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8104ad2:	697b      	ldr	r3, [r7, #20]
 8104ad4:	2b01      	cmp	r3, #1
 8104ad6:	d05a      	beq.n	8104b8e <HAL_RCC_GetSysClockFreq+0x1b2>
 8104ad8:	2b01      	cmp	r3, #1
 8104ada:	d302      	bcc.n	8104ae2 <HAL_RCC_GetSysClockFreq+0x106>
 8104adc:	2b02      	cmp	r3, #2
 8104ade:	d078      	beq.n	8104bd2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8104ae0:	e099      	b.n	8104c16 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ae2:	4b6f      	ldr	r3, [pc, #444]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	f003 0320 	and.w	r3, r3, #32
 8104aea:	2b00      	cmp	r3, #0
 8104aec:	d02d      	beq.n	8104b4a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104aee:	4b6c      	ldr	r3, [pc, #432]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104af0:	681b      	ldr	r3, [r3, #0]
 8104af2:	08db      	lsrs	r3, r3, #3
 8104af4:	f003 0303 	and.w	r3, r3, #3
 8104af8:	4a6a      	ldr	r2, [pc, #424]	; (8104ca4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8104afa:	fa22 f303 	lsr.w	r3, r2, r3
 8104afe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	ee07 3a90 	vmov	s15, r3
 8104b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b0a:	693b      	ldr	r3, [r7, #16]
 8104b0c:	ee07 3a90 	vmov	s15, r3
 8104b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b18:	4b61      	ldr	r3, [pc, #388]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b20:	ee07 3a90 	vmov	s15, r3
 8104b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b28:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b2c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8104cb0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b44:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8104b48:	e087      	b.n	8104c5a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104b4a:	693b      	ldr	r3, [r7, #16]
 8104b4c:	ee07 3a90 	vmov	s15, r3
 8104b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b54:	eddf 6a57 	vldr	s13, [pc, #348]	; 8104cb4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8104b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b5c:	4b50      	ldr	r3, [pc, #320]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b64:	ee07 3a90 	vmov	s15, r3
 8104b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b70:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8104cb0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104b8c:	e065      	b.n	8104c5a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104b8e:	693b      	ldr	r3, [r7, #16]
 8104b90:	ee07 3a90 	vmov	s15, r3
 8104b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b98:	eddf 6a47 	vldr	s13, [pc, #284]	; 8104cb8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8104b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ba0:	4b3f      	ldr	r3, [pc, #252]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ba8:	ee07 3a90 	vmov	s15, r3
 8104bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8104bb4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8104cb0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104bd0:	e043      	b.n	8104c5a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104bd2:	693b      	ldr	r3, [r7, #16]
 8104bd4:	ee07 3a90 	vmov	s15, r3
 8104bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bdc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8104cbc <HAL_RCC_GetSysClockFreq+0x2e0>
 8104be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104be4:	4b2e      	ldr	r3, [pc, #184]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bec:	ee07 3a90 	vmov	s15, r3
 8104bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8104bf8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8104cb0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c14:	e021      	b.n	8104c5a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104c16:	693b      	ldr	r3, [r7, #16]
 8104c18:	ee07 3a90 	vmov	s15, r3
 8104c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c20:	eddf 6a25 	vldr	s13, [pc, #148]	; 8104cb8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8104c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c28:	4b1d      	ldr	r3, [pc, #116]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c30:	ee07 3a90 	vmov	s15, r3
 8104c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c38:	ed97 6a02 	vldr	s12, [r7, #8]
 8104c3c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8104cb0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8104c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c58:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104c5a:	4b11      	ldr	r3, [pc, #68]	; (8104ca0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c5e:	0a5b      	lsrs	r3, r3, #9
 8104c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104c64:	3301      	adds	r3, #1
 8104c66:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104c68:	683b      	ldr	r3, [r7, #0]
 8104c6a:	ee07 3a90 	vmov	s15, r3
 8104c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c7e:	ee17 3a90 	vmov	r3, s15
 8104c82:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8104c84:	e005      	b.n	8104c92 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8104c86:	2300      	movs	r3, #0
 8104c88:	61bb      	str	r3, [r7, #24]
    break;
 8104c8a:	e002      	b.n	8104c92 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8104c8c:	4b06      	ldr	r3, [pc, #24]	; (8104ca8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8104c8e:	61bb      	str	r3, [r7, #24]
    break;
 8104c90:	bf00      	nop
  }

  return sysclockfreq;
 8104c92:	69bb      	ldr	r3, [r7, #24]
}
 8104c94:	4618      	mov	r0, r3
 8104c96:	3724      	adds	r7, #36	; 0x24
 8104c98:	46bd      	mov	sp, r7
 8104c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c9e:	4770      	bx	lr
 8104ca0:	58024400 	.word	0x58024400
 8104ca4:	03d09000 	.word	0x03d09000
 8104ca8:	003d0900 	.word	0x003d0900
 8104cac:	017d7840 	.word	0x017d7840
 8104cb0:	46000000 	.word	0x46000000
 8104cb4:	4c742400 	.word	0x4c742400
 8104cb8:	4a742400 	.word	0x4a742400
 8104cbc:	4bbebc20 	.word	0x4bbebc20

08104cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104cc0:	b580      	push	{r7, lr}
 8104cc2:	b082      	sub	sp, #8
 8104cc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104cc6:	f7ff fe89 	bl	81049dc <HAL_RCC_GetSysClockFreq>
 8104cca:	4601      	mov	r1, r0
 8104ccc:	4b11      	ldr	r3, [pc, #68]	; (8104d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8104cce:	699b      	ldr	r3, [r3, #24]
 8104cd0:	0a1b      	lsrs	r3, r3, #8
 8104cd2:	f003 030f 	and.w	r3, r3, #15
 8104cd6:	4a10      	ldr	r2, [pc, #64]	; (8104d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8104cd8:	5cd3      	ldrb	r3, [r2, r3]
 8104cda:	f003 031f 	and.w	r3, r3, #31
 8104cde:	fa21 f303 	lsr.w	r3, r1, r3
 8104ce2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104ce4:	4b0b      	ldr	r3, [pc, #44]	; (8104d14 <HAL_RCC_GetHCLKFreq+0x54>)
 8104ce6:	699b      	ldr	r3, [r3, #24]
 8104ce8:	f003 030f 	and.w	r3, r3, #15
 8104cec:	4a0a      	ldr	r2, [pc, #40]	; (8104d18 <HAL_RCC_GetHCLKFreq+0x58>)
 8104cee:	5cd3      	ldrb	r3, [r2, r3]
 8104cf0:	f003 031f 	and.w	r3, r3, #31
 8104cf4:	687a      	ldr	r2, [r7, #4]
 8104cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8104cfa:	4a08      	ldr	r2, [pc, #32]	; (8104d1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8104cfc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104cfe:	4b07      	ldr	r3, [pc, #28]	; (8104d1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8104d00:	681b      	ldr	r3, [r3, #0]
 8104d02:	4a07      	ldr	r2, [pc, #28]	; (8104d20 <HAL_RCC_GetHCLKFreq+0x60>)
 8104d04:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104d06:	4b05      	ldr	r3, [pc, #20]	; (8104d1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8104d08:	681b      	ldr	r3, [r3, #0]
}
 8104d0a:	4618      	mov	r0, r3
 8104d0c:	3708      	adds	r7, #8
 8104d0e:	46bd      	mov	sp, r7
 8104d10:	bd80      	pop	{r7, pc}
 8104d12:	bf00      	nop
 8104d14:	58024400 	.word	0x58024400
 8104d18:	0810c04c 	.word	0x0810c04c
 8104d1c:	10000004 	.word	0x10000004
 8104d20:	10000000 	.word	0x10000000

08104d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104d24:	b580      	push	{r7, lr}
 8104d26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104d28:	f7ff ffca 	bl	8104cc0 <HAL_RCC_GetHCLKFreq>
 8104d2c:	4601      	mov	r1, r0
 8104d2e:	4b06      	ldr	r3, [pc, #24]	; (8104d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104d30:	69db      	ldr	r3, [r3, #28]
 8104d32:	091b      	lsrs	r3, r3, #4
 8104d34:	f003 0307 	and.w	r3, r3, #7
 8104d38:	4a04      	ldr	r2, [pc, #16]	; (8104d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8104d3a:	5cd3      	ldrb	r3, [r2, r3]
 8104d3c:	f003 031f 	and.w	r3, r3, #31
 8104d40:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104d44:	4618      	mov	r0, r3
 8104d46:	bd80      	pop	{r7, pc}
 8104d48:	58024400 	.word	0x58024400
 8104d4c:	0810c04c 	.word	0x0810c04c

08104d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104d50:	b580      	push	{r7, lr}
 8104d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104d54:	f7ff ffb4 	bl	8104cc0 <HAL_RCC_GetHCLKFreq>
 8104d58:	4601      	mov	r1, r0
 8104d5a:	4b06      	ldr	r3, [pc, #24]	; (8104d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8104d5c:	69db      	ldr	r3, [r3, #28]
 8104d5e:	0a1b      	lsrs	r3, r3, #8
 8104d60:	f003 0307 	and.w	r3, r3, #7
 8104d64:	4a04      	ldr	r2, [pc, #16]	; (8104d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104d66:	5cd3      	ldrb	r3, [r2, r3]
 8104d68:	f003 031f 	and.w	r3, r3, #31
 8104d6c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104d70:	4618      	mov	r0, r3
 8104d72:	bd80      	pop	{r7, pc}
 8104d74:	58024400 	.word	0x58024400
 8104d78:	0810c04c 	.word	0x0810c04c

08104d7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8104d7c:	b580      	push	{r7, lr}
 8104d7e:	b090      	sub	sp, #64	; 0x40
 8104d80:	af00      	add	r7, sp, #0
 8104d82:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d8a:	d150      	bne.n	8104e2e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8104d8c:	4ba1      	ldr	r3, [pc, #644]	; (8105014 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d90:	f003 0307 	and.w	r3, r3, #7
 8104d94:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104d98:	2b04      	cmp	r3, #4
 8104d9a:	d844      	bhi.n	8104e26 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8104d9c:	a201      	add	r2, pc, #4	; (adr r2, 8104da4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8104d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104da2:	bf00      	nop
 8104da4:	08104db9 	.word	0x08104db9
 8104da8:	08104dc9 	.word	0x08104dc9
 8104dac:	08104dd9 	.word	0x08104dd9
 8104db0:	08104e21 	.word	0x08104e21
 8104db4:	08104de9 	.word	0x08104de9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104dbc:	4618      	mov	r0, r3
 8104dbe:	f000 fd03 	bl	81057c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104dc6:	e241      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104dc8:	f107 0318 	add.w	r3, r7, #24
 8104dcc:	4618      	mov	r0, r3
 8104dce:	f000 fa63 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104dd2:	69bb      	ldr	r3, [r7, #24]
 8104dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104dd6:	e239      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104dd8:	f107 030c 	add.w	r3, r7, #12
 8104ddc:	4618      	mov	r0, r3
 8104dde:	f000 fba7 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104de2:	68fb      	ldr	r3, [r7, #12]
 8104de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104de6:	e231      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104de8:	4b8a      	ldr	r3, [pc, #552]	; (8105014 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104dec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104df0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8104df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104df4:	2b00      	cmp	r3, #0
 8104df6:	d102      	bne.n	8104dfe <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8104df8:	4b87      	ldr	r3, [pc, #540]	; (8105018 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8104dfc:	e226      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8104dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104e04:	d102      	bne.n	8104e0c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8104e06:	4b85      	ldr	r3, [pc, #532]	; (810501c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e0a:	e21f      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8104e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e12:	d102      	bne.n	8104e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8104e14:	4b82      	ldr	r3, [pc, #520]	; (8105020 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e18:	e218      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8104e1a:	2300      	movs	r3, #0
 8104e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e1e:	e215      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104e20:	4b80      	ldr	r3, [pc, #512]	; (8105024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8104e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e24:	e212      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8104e26:	2300      	movs	r3, #0
 8104e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e2a:	bf00      	nop
 8104e2c:	e20e      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104e34:	d14f      	bne.n	8104ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8104e36:	4b77      	ldr	r3, [pc, #476]	; (8105014 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8104e3e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104e42:	2b80      	cmp	r3, #128	; 0x80
 8104e44:	d01c      	beq.n	8104e80 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8104e46:	2b80      	cmp	r3, #128	; 0x80
 8104e48:	d804      	bhi.n	8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8104e4a:	2b00      	cmp	r3, #0
 8104e4c:	d008      	beq.n	8104e60 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8104e4e:	2b40      	cmp	r3, #64	; 0x40
 8104e50:	d00e      	beq.n	8104e70 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8104e52:	e03c      	b.n	8104ece <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8104e54:	2bc0      	cmp	r3, #192	; 0xc0
 8104e56:	d037      	beq.n	8104ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8104e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e5c:	d018      	beq.n	8104e90 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8104e5e:	e036      	b.n	8104ece <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104e64:	4618      	mov	r0, r3
 8104e66:	f000 fcaf 	bl	81057c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e6e:	e1ed      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104e70:	f107 0318 	add.w	r3, r7, #24
 8104e74:	4618      	mov	r0, r3
 8104e76:	f000 fa0f 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104e7a:	69bb      	ldr	r3, [r7, #24]
 8104e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e7e:	e1e5      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104e80:	f107 030c 	add.w	r3, r7, #12
 8104e84:	4618      	mov	r0, r3
 8104e86:	f000 fb53 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104e8a:	68fb      	ldr	r3, [r7, #12]
 8104e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e8e:	e1dd      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104e90:	4b60      	ldr	r3, [pc, #384]	; (8105014 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104e98:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8104e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104e9c:	2b00      	cmp	r3, #0
 8104e9e:	d102      	bne.n	8104ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8104ea0:	4b5d      	ldr	r3, [pc, #372]	; (8105018 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8104ea4:	e1d2      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8104ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104eac:	d102      	bne.n	8104eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8104eae:	4b5b      	ldr	r3, [pc, #364]	; (810501c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104eb2:	e1cb      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8104eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104eba:	d102      	bne.n	8104ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8104ebc:	4b58      	ldr	r3, [pc, #352]	; (8105020 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104ec0:	e1c4      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8104ec2:	2300      	movs	r3, #0
 8104ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104ec6:	e1c1      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104ec8:	4b56      	ldr	r3, [pc, #344]	; (8105024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8104eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104ecc:	e1be      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8104ece:	2300      	movs	r3, #0
 8104ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104ed2:	bf00      	nop
 8104ed4:	e1ba      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104edc:	d153      	bne.n	8104f86 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8104ede:	4b4d      	ldr	r3, [pc, #308]	; (8105014 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ee2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8104ee6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104eee:	d01f      	beq.n	8104f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8104ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104ef4:	d805      	bhi.n	8104f02 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8104ef6:	2b00      	cmp	r3, #0
 8104ef8:	d00a      	beq.n	8104f10 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8104efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104efe:	d00f      	beq.n	8104f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8104f00:	e03d      	b.n	8104f7e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8104f02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104f06:	d037      	beq.n	8104f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8104f08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104f0c:	d018      	beq.n	8104f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8104f0e:	e036      	b.n	8104f7e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104f14:	4618      	mov	r0, r3
 8104f16:	f000 fc57 	bl	81057c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f1e:	e195      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104f20:	f107 0318 	add.w	r3, r7, #24
 8104f24:	4618      	mov	r0, r3
 8104f26:	f000 f9b7 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104f2a:	69bb      	ldr	r3, [r7, #24]
 8104f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f2e:	e18d      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104f30:	f107 030c 	add.w	r3, r7, #12
 8104f34:	4618      	mov	r0, r3
 8104f36:	f000 fafb 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104f3a:	68fb      	ldr	r3, [r7, #12]
 8104f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f3e:	e185      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104f40:	4b34      	ldr	r3, [pc, #208]	; (8105014 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104f48:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8104f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f4c:	2b00      	cmp	r3, #0
 8104f4e:	d102      	bne.n	8104f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8104f50:	4b31      	ldr	r3, [pc, #196]	; (8105018 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8104f54:	e17a      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8104f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f5c:	d102      	bne.n	8104f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8104f5e:	4b2f      	ldr	r3, [pc, #188]	; (810501c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f62:	e173      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8104f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f6a:	d102      	bne.n	8104f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8104f6c:	4b2c      	ldr	r3, [pc, #176]	; (8105020 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f70:	e16c      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8104f72:	2300      	movs	r3, #0
 8104f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f76:	e169      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104f78:	4b2a      	ldr	r3, [pc, #168]	; (8105024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8104f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f7c:	e166      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8104f7e:	2300      	movs	r3, #0
 8104f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f82:	bf00      	nop
 8104f84:	e162      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104f8c:	d15d      	bne.n	810504a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8104f8e:	4b21      	ldr	r3, [pc, #132]	; (8105014 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f92:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8104f96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104f9e:	d01f      	beq.n	8104fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8104fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104fa4:	d805      	bhi.n	8104fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8104fa6:	2b00      	cmp	r3, #0
 8104fa8:	d00a      	beq.n	8104fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8104faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104fae:	d00f      	beq.n	8104fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8104fb0:	e047      	b.n	8105042 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8104fb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104fb6:	d041      	beq.n	810503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8104fb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104fbc:	d018      	beq.n	8104ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8104fbe:	e040      	b.n	8105042 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104fc4:	4618      	mov	r0, r3
 8104fc6:	f000 fbff 	bl	81057c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104fce:	e13d      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104fd0:	f107 0318 	add.w	r3, r7, #24
 8104fd4:	4618      	mov	r0, r3
 8104fd6:	f000 f95f 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104fda:	69bb      	ldr	r3, [r7, #24]
 8104fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104fde:	e135      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104fe0:	f107 030c 	add.w	r3, r7, #12
 8104fe4:	4618      	mov	r0, r3
 8104fe6:	f000 faa3 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104fea:	68fb      	ldr	r3, [r7, #12]
 8104fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104fee:	e12d      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104ff0:	4b08      	ldr	r3, [pc, #32]	; (8105014 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104ff8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8104ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ffc:	2b00      	cmp	r3, #0
 8104ffe:	d102      	bne.n	8105006 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8105000:	4b05      	ldr	r3, [pc, #20]	; (8105018 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8105002:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8105004:	e122      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8105006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810500c:	d10c      	bne.n	8105028 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 810500e:	4b03      	ldr	r3, [pc, #12]	; (810501c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105012:	e11b      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8105014:	58024400 	.word	0x58024400
 8105018:	03d09000 	.word	0x03d09000
 810501c:	003d0900 	.word	0x003d0900
 8105020:	017d7840 	.word	0x017d7840
 8105024:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8105028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810502a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810502e:	d102      	bne.n	8105036 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8105030:	4b89      	ldr	r3, [pc, #548]	; (8105258 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8105032:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105034:	e10a      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8105036:	2300      	movs	r3, #0
 8105038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810503a:	e107      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810503c:	4b87      	ldr	r3, [pc, #540]	; (810525c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 810503e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105040:	e104      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8105042:	2300      	movs	r3, #0
 8105044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105046:	bf00      	nop
 8105048:	e100      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810504a:	687b      	ldr	r3, [r7, #4]
 810504c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105050:	d153      	bne.n	81050fa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8105052:	4b83      	ldr	r3, [pc, #524]	; (8105260 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8105054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105056:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810505a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810505e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105062:	d01f      	beq.n	81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8105064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105068:	d805      	bhi.n	8105076 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 810506a:	2b00      	cmp	r3, #0
 810506c:	d00a      	beq.n	8105084 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 810506e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105072:	d00f      	beq.n	8105094 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8105074:	e03d      	b.n	81050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8105076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810507a:	d037      	beq.n	81050ec <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 810507c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105080:	d018      	beq.n	81050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8105082:	e036      	b.n	81050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105088:	4618      	mov	r0, r3
 810508a:	f000 fb9d 	bl	81057c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105092:	e0db      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105094:	f107 0318 	add.w	r3, r7, #24
 8105098:	4618      	mov	r0, r3
 810509a:	f000 f8fd 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810509e:	69bb      	ldr	r3, [r7, #24]
 81050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050a2:	e0d3      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81050a4:	f107 030c 	add.w	r3, r7, #12
 81050a8:	4618      	mov	r0, r3
 81050aa:	f000 fa41 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81050ae:	68fb      	ldr	r3, [r7, #12]
 81050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050b2:	e0cb      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81050b4:	4b6a      	ldr	r3, [pc, #424]	; (8105260 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 81050b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81050b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81050bc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 81050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050c0:	2b00      	cmp	r3, #0
 81050c2:	d102      	bne.n	81050ca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 81050c4:	4b67      	ldr	r3, [pc, #412]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 81050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 81050c8:	e0c0      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 81050ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81050d0:	d102      	bne.n	81050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 81050d2:	4b65      	ldr	r3, [pc, #404]	; (8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 81050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050d6:	e0b9      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 81050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050de:	d102      	bne.n	81050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 81050e0:	4b5d      	ldr	r3, [pc, #372]	; (8105258 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 81050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050e4:	e0b2      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 81050e6:	2300      	movs	r3, #0
 81050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050ea:	e0af      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81050ec:	4b5b      	ldr	r3, [pc, #364]	; (810525c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 81050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050f0:	e0ac      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 81050f2:	2300      	movs	r3, #0
 81050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050f6:	bf00      	nop
 81050f8:	e0a8      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81050fa:	687b      	ldr	r3, [r7, #4]
 81050fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8105100:	d13d      	bne.n	810517e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8105102:	4b57      	ldr	r3, [pc, #348]	; (8105260 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8105104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810510a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810510e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105112:	d00c      	beq.n	810512e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8105114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105118:	d011      	beq.n	810513e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 810511a:	2b00      	cmp	r3, #0
 810511c:	d12b      	bne.n	8105176 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810511e:	f107 0318 	add.w	r3, r7, #24
 8105122:	4618      	mov	r0, r3
 8105124:	f000 f8b8 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105128:	69bb      	ldr	r3, [r7, #24]
 810512a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810512c:	e08e      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810512e:	f107 030c 	add.w	r3, r7, #12
 8105132:	4618      	mov	r0, r3
 8105134:	f000 f9fc 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8105138:	697b      	ldr	r3, [r7, #20]
 810513a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810513c:	e086      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810513e:	4b48      	ldr	r3, [pc, #288]	; (8105260 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8105140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105146:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8105148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810514a:	2b00      	cmp	r3, #0
 810514c:	d102      	bne.n	8105154 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 810514e:	4b45      	ldr	r3, [pc, #276]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8105150:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8105152:	e07b      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8105154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810515a:	d102      	bne.n	8105162 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 810515c:	4b42      	ldr	r3, [pc, #264]	; (8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 810515e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105160:	e074      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8105162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105168:	d102      	bne.n	8105170 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 810516a:	4b3b      	ldr	r3, [pc, #236]	; (8105258 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 810516c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810516e:	e06d      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8105170:	2300      	movs	r3, #0
 8105172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105174:	e06a      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8105176:	2300      	movs	r3, #0
 8105178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810517a:	bf00      	nop
 810517c:	e066      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105184:	d11f      	bne.n	81051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8105186:	4b36      	ldr	r3, [pc, #216]	; (8105260 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8105188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810518e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8105190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105192:	2b00      	cmp	r3, #0
 8105194:	d003      	beq.n	810519e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8105196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810519a:	d008      	beq.n	81051ae <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 810519c:	e00f      	b.n	81051be <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810519e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81051a2:	4618      	mov	r0, r3
 81051a4:	f000 fb10 	bl	81057c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81051ac:	e04e      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81051ae:	f107 0318 	add.w	r3, r7, #24
 81051b2:	4618      	mov	r0, r3
 81051b4:	f000 f870 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81051b8:	6a3b      	ldr	r3, [r7, #32]
 81051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81051bc:	e046      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 81051be:	2300      	movs	r3, #0
 81051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81051c2:	bf00      	nop
 81051c4:	e042      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81051cc:	d13c      	bne.n	8105248 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 81051ce:	4b24      	ldr	r3, [pc, #144]	; (8105260 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 81051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81051d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81051d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81051de:	d01e      	beq.n	810521e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 81051e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81051e4:	d805      	bhi.n	81051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 81051e6:	2b00      	cmp	r3, #0
 81051e8:	d00d      	beq.n	8105206 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 81051ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81051ee:	d00e      	beq.n	810520e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 81051f0:	e026      	b.n	8105240 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 81051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81051f6:	d01d      	beq.n	8105234 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 81051f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81051fc:	d01d      	beq.n	810523a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 81051fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105202:	d014      	beq.n	810522e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8105204:	e01c      	b.n	8105240 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105206:	f000 f831 	bl	810526c <HAL_RCCEx_GetD3PCLK1Freq>
 810520a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 810520c:	e01e      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810520e:	f107 0318 	add.w	r3, r7, #24
 8105212:	4618      	mov	r0, r3
 8105214:	f000 f840 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105218:	69fb      	ldr	r3, [r7, #28]
 810521a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810521c:	e016      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810521e:	f107 030c 	add.w	r3, r7, #12
 8105222:	4618      	mov	r0, r3
 8105224:	f000 f984 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105228:	693b      	ldr	r3, [r7, #16]
 810522a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810522c:	e00e      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 810522e:	4b0d      	ldr	r3, [pc, #52]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8105230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105232:	e00b      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8105234:	4b0c      	ldr	r3, [pc, #48]	; (8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8105236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105238:	e008      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 810523a:	4b07      	ldr	r3, [pc, #28]	; (8105258 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 810523c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810523e:	e005      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8105240:	2300      	movs	r3, #0
 8105242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105244:	bf00      	nop
 8105246:	e001      	b.n	810524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8105248:	2300      	movs	r3, #0
 810524a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 810524c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810524e:	4618      	mov	r0, r3
 8105250:	3740      	adds	r7, #64	; 0x40
 8105252:	46bd      	mov	sp, r7
 8105254:	bd80      	pop	{r7, pc}
 8105256:	bf00      	nop
 8105258:	017d7840 	.word	0x017d7840
 810525c:	00bb8000 	.word	0x00bb8000
 8105260:	58024400 	.word	0x58024400
 8105264:	03d09000 	.word	0x03d09000
 8105268:	003d0900 	.word	0x003d0900

0810526c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810526c:	b580      	push	{r7, lr}
 810526e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105270:	f7ff fd26 	bl	8104cc0 <HAL_RCC_GetHCLKFreq>
 8105274:	4601      	mov	r1, r0
 8105276:	4b06      	ldr	r3, [pc, #24]	; (8105290 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105278:	6a1b      	ldr	r3, [r3, #32]
 810527a:	091b      	lsrs	r3, r3, #4
 810527c:	f003 0307 	and.w	r3, r3, #7
 8105280:	4a04      	ldr	r2, [pc, #16]	; (8105294 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105282:	5cd3      	ldrb	r3, [r2, r3]
 8105284:	f003 031f 	and.w	r3, r3, #31
 8105288:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810528c:	4618      	mov	r0, r3
 810528e:	bd80      	pop	{r7, pc}
 8105290:	58024400 	.word	0x58024400
 8105294:	0810c04c 	.word	0x0810c04c

08105298 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105298:	b480      	push	{r7}
 810529a:	b089      	sub	sp, #36	; 0x24
 810529c:	af00      	add	r7, sp, #0
 810529e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81052a0:	4b9d      	ldr	r3, [pc, #628]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052a4:	f003 0303 	and.w	r3, r3, #3
 81052a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81052aa:	4b9b      	ldr	r3, [pc, #620]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052ae:	0b1b      	lsrs	r3, r3, #12
 81052b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81052b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81052b6:	4b98      	ldr	r3, [pc, #608]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052ba:	091b      	lsrs	r3, r3, #4
 81052bc:	f003 0301 	and.w	r3, r3, #1
 81052c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81052c2:	4b95      	ldr	r3, [pc, #596]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81052c6:	08db      	lsrs	r3, r3, #3
 81052c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81052cc:	693a      	ldr	r2, [r7, #16]
 81052ce:	fb02 f303 	mul.w	r3, r2, r3
 81052d2:	ee07 3a90 	vmov	s15, r3
 81052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81052de:	697b      	ldr	r3, [r7, #20]
 81052e0:	2b00      	cmp	r3, #0
 81052e2:	f000 810a 	beq.w	81054fa <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 81052e6:	69bb      	ldr	r3, [r7, #24]
 81052e8:	2b01      	cmp	r3, #1
 81052ea:	d05a      	beq.n	81053a2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 81052ec:	2b01      	cmp	r3, #1
 81052ee:	d302      	bcc.n	81052f6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 81052f0:	2b02      	cmp	r3, #2
 81052f2:	d078      	beq.n	81053e6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 81052f4:	e099      	b.n	810542a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81052f6:	4b88      	ldr	r3, [pc, #544]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81052f8:	681b      	ldr	r3, [r3, #0]
 81052fa:	f003 0320 	and.w	r3, r3, #32
 81052fe:	2b00      	cmp	r3, #0
 8105300:	d02d      	beq.n	810535e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105302:	4b85      	ldr	r3, [pc, #532]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	08db      	lsrs	r3, r3, #3
 8105308:	f003 0303 	and.w	r3, r3, #3
 810530c:	4a83      	ldr	r2, [pc, #524]	; (810551c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 810530e:	fa22 f303 	lsr.w	r3, r2, r3
 8105312:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105314:	68bb      	ldr	r3, [r7, #8]
 8105316:	ee07 3a90 	vmov	s15, r3
 810531a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810531e:	697b      	ldr	r3, [r7, #20]
 8105320:	ee07 3a90 	vmov	s15, r3
 8105324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810532c:	4b7a      	ldr	r3, [pc, #488]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105334:	ee07 3a90 	vmov	s15, r3
 8105338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810533c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105340:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810534c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105358:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810535c:	e087      	b.n	810546e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810535e:	697b      	ldr	r3, [r7, #20]
 8105360:	ee07 3a90 	vmov	s15, r3
 8105364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105368:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105524 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 810536c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105370:	4b69      	ldr	r3, [pc, #420]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105378:	ee07 3a90 	vmov	s15, r3
 810537c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105380:	ed97 6a03 	vldr	s12, [r7, #12]
 8105384:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810538c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105398:	ee67 7a27 	vmul.f32	s15, s14, s15
 810539c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81053a0:	e065      	b.n	810546e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81053a2:	697b      	ldr	r3, [r7, #20]
 81053a4:	ee07 3a90 	vmov	s15, r3
 81053a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81053b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053b4:	4b58      	ldr	r3, [pc, #352]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053bc:	ee07 3a90 	vmov	s15, r3
 81053c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053c4:	ed97 6a03 	vldr	s12, [r7, #12]
 81053c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81053cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81053d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81053d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81053e4:	e043      	b.n	810546e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81053e6:	697b      	ldr	r3, [r7, #20]
 81053e8:	ee07 3a90 	vmov	s15, r3
 81053ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810552c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81053f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053f8:	4b47      	ldr	r3, [pc, #284]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105400:	ee07 3a90 	vmov	s15, r3
 8105404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105408:	ed97 6a03 	vldr	s12, [r7, #12]
 810540c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810541c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105424:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105428:	e021      	b.n	810546e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810542a:	697b      	ldr	r3, [r7, #20]
 810542c:	ee07 3a90 	vmov	s15, r3
 8105430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105434:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8105528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8105438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810543c:	4b36      	ldr	r3, [pc, #216]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105444:	ee07 3a90 	vmov	s15, r3
 8105448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810544c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105450:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105520 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810545c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105468:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810546c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810546e:	4b2a      	ldr	r3, [pc, #168]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105472:	0a5b      	lsrs	r3, r3, #9
 8105474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105478:	ee07 3a90 	vmov	s15, r3
 810547c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105488:	edd7 6a07 	vldr	s13, [r7, #28]
 810548c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105494:	ee17 2a90 	vmov	r2, s15
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810549c:	4b1e      	ldr	r3, [pc, #120]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81054a0:	0c1b      	lsrs	r3, r3, #16
 81054a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81054a6:	ee07 3a90 	vmov	s15, r3
 81054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81054b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81054ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054c2:	ee17 2a90 	vmov	r2, s15
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81054ca:	4b13      	ldr	r3, [pc, #76]	; (8105518 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81054ce:	0e1b      	lsrs	r3, r3, #24
 81054d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81054d4:	ee07 3a90 	vmov	s15, r3
 81054d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81054e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81054e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81054e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81054ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81054f0:	ee17 2a90 	vmov	r2, s15
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81054f8:	e008      	b.n	810550c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	2200      	movs	r2, #0
 81054fe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	2200      	movs	r2, #0
 8105504:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	2200      	movs	r2, #0
 810550a:	609a      	str	r2, [r3, #8]
}
 810550c:	bf00      	nop
 810550e:	3724      	adds	r7, #36	; 0x24
 8105510:	46bd      	mov	sp, r7
 8105512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105516:	4770      	bx	lr
 8105518:	58024400 	.word	0x58024400
 810551c:	03d09000 	.word	0x03d09000
 8105520:	46000000 	.word	0x46000000
 8105524:	4c742400 	.word	0x4c742400
 8105528:	4a742400 	.word	0x4a742400
 810552c:	4bbebc20 	.word	0x4bbebc20

08105530 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8105530:	b480      	push	{r7}
 8105532:	b089      	sub	sp, #36	; 0x24
 8105534:	af00      	add	r7, sp, #0
 8105536:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105538:	4b9d      	ldr	r3, [pc, #628]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810553c:	f003 0303 	and.w	r3, r3, #3
 8105540:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105542:	4b9b      	ldr	r3, [pc, #620]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105546:	0d1b      	lsrs	r3, r3, #20
 8105548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810554c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810554e:	4b98      	ldr	r3, [pc, #608]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105552:	0a1b      	lsrs	r3, r3, #8
 8105554:	f003 0301 	and.w	r3, r3, #1
 8105558:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810555a:	4b95      	ldr	r3, [pc, #596]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810555e:	08db      	lsrs	r3, r3, #3
 8105560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105564:	693a      	ldr	r2, [r7, #16]
 8105566:	fb02 f303 	mul.w	r3, r2, r3
 810556a:	ee07 3a90 	vmov	s15, r3
 810556e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105572:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105576:	697b      	ldr	r3, [r7, #20]
 8105578:	2b00      	cmp	r3, #0
 810557a:	f000 810a 	beq.w	8105792 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 810557e:	69bb      	ldr	r3, [r7, #24]
 8105580:	2b01      	cmp	r3, #1
 8105582:	d05a      	beq.n	810563a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8105584:	2b01      	cmp	r3, #1
 8105586:	d302      	bcc.n	810558e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8105588:	2b02      	cmp	r3, #2
 810558a:	d078      	beq.n	810567e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 810558c:	e099      	b.n	81056c2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810558e:	4b88      	ldr	r3, [pc, #544]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	f003 0320 	and.w	r3, r3, #32
 8105596:	2b00      	cmp	r3, #0
 8105598:	d02d      	beq.n	81055f6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810559a:	4b85      	ldr	r3, [pc, #532]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810559c:	681b      	ldr	r3, [r3, #0]
 810559e:	08db      	lsrs	r3, r3, #3
 81055a0:	f003 0303 	and.w	r3, r3, #3
 81055a4:	4a83      	ldr	r2, [pc, #524]	; (81057b4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 81055a6:	fa22 f303 	lsr.w	r3, r2, r3
 81055aa:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81055ac:	68bb      	ldr	r3, [r7, #8]
 81055ae:	ee07 3a90 	vmov	s15, r3
 81055b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055b6:	697b      	ldr	r3, [r7, #20]
 81055b8:	ee07 3a90 	vmov	s15, r3
 81055bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055c4:	4b7a      	ldr	r3, [pc, #488]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055cc:	ee07 3a90 	vmov	s15, r3
 81055d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055d4:	ed97 6a03 	vldr	s12, [r7, #12]
 81055d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 81057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81055dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81055f4:	e087      	b.n	8105706 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81055f6:	697b      	ldr	r3, [r7, #20]
 81055f8:	ee07 3a90 	vmov	s15, r3
 81055fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105600:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81057bc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8105604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105608:	4b69      	ldr	r3, [pc, #420]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810560c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105610:	ee07 3a90 	vmov	s15, r3
 8105614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105618:	ed97 6a03 	vldr	s12, [r7, #12]
 810561c:	eddf 5a66 	vldr	s11, [pc, #408]	; 81057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810562c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105634:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105638:	e065      	b.n	8105706 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810563a:	697b      	ldr	r3, [r7, #20]
 810563c:	ee07 3a90 	vmov	s15, r3
 8105640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105644:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81057c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8105648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810564c:	4b58      	ldr	r3, [pc, #352]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105654:	ee07 3a90 	vmov	s15, r3
 8105658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810565c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105660:	eddf 5a55 	vldr	s11, [pc, #340]	; 81057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810566c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810567c:	e043      	b.n	8105706 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810567e:	697b      	ldr	r3, [r7, #20]
 8105680:	ee07 3a90 	vmov	s15, r3
 8105684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105688:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 810568c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105690:	4b47      	ldr	r3, [pc, #284]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105698:	ee07 3a90 	vmov	s15, r3
 810569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056a0:	ed97 6a03 	vldr	s12, [r7, #12]
 81056a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 81057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81056a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81056c0:	e021      	b.n	8105706 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81056c2:	697b      	ldr	r3, [r7, #20]
 81056c4:	ee07 3a90 	vmov	s15, r3
 81056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056cc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81057c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81056d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056d4:	4b36      	ldr	r3, [pc, #216]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056dc:	ee07 3a90 	vmov	s15, r3
 81056e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81056e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 81057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81056ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105704:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8105706:	4b2a      	ldr	r3, [pc, #168]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810570a:	0a5b      	lsrs	r3, r3, #9
 810570c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105710:	ee07 3a90 	vmov	s15, r3
 8105714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810571c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105720:	edd7 6a07 	vldr	s13, [r7, #28]
 8105724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810572c:	ee17 2a90 	vmov	r2, s15
 8105730:	687b      	ldr	r3, [r7, #4]
 8105732:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105734:	4b1e      	ldr	r3, [pc, #120]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105738:	0c1b      	lsrs	r3, r3, #16
 810573a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810573e:	ee07 3a90 	vmov	s15, r3
 8105742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810574a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810574e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810575a:	ee17 2a90 	vmov	r2, s15
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105762:	4b13      	ldr	r3, [pc, #76]	; (81057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105766:	0e1b      	lsrs	r3, r3, #24
 8105768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810576c:	ee07 3a90 	vmov	s15, r3
 8105770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105778:	ee37 7a87 	vadd.f32	s14, s15, s14
 810577c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105788:	ee17 2a90 	vmov	r2, s15
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105790:	e008      	b.n	81057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	2200      	movs	r2, #0
 8105796:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	2200      	movs	r2, #0
 810579c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810579e:	687b      	ldr	r3, [r7, #4]
 81057a0:	2200      	movs	r2, #0
 81057a2:	609a      	str	r2, [r3, #8]
}
 81057a4:	bf00      	nop
 81057a6:	3724      	adds	r7, #36	; 0x24
 81057a8:	46bd      	mov	sp, r7
 81057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057ae:	4770      	bx	lr
 81057b0:	58024400 	.word	0x58024400
 81057b4:	03d09000 	.word	0x03d09000
 81057b8:	46000000 	.word	0x46000000
 81057bc:	4c742400 	.word	0x4c742400
 81057c0:	4a742400 	.word	0x4a742400
 81057c4:	4bbebc20 	.word	0x4bbebc20

081057c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 81057c8:	b480      	push	{r7}
 81057ca:	b089      	sub	sp, #36	; 0x24
 81057cc:	af00      	add	r7, sp, #0
 81057ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81057d0:	4b9d      	ldr	r3, [pc, #628]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057d4:	f003 0303 	and.w	r3, r3, #3
 81057d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 81057da:	4b9b      	ldr	r3, [pc, #620]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057de:	091b      	lsrs	r3, r3, #4
 81057e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81057e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81057e6:	4b98      	ldr	r3, [pc, #608]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057ea:	f003 0301 	and.w	r3, r3, #1
 81057ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81057f0:	4b95      	ldr	r3, [pc, #596]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81057f4:	08db      	lsrs	r3, r3, #3
 81057f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81057fa:	693a      	ldr	r2, [r7, #16]
 81057fc:	fb02 f303 	mul.w	r3, r2, r3
 8105800:	ee07 3a90 	vmov	s15, r3
 8105804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105808:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810580c:	697b      	ldr	r3, [r7, #20]
 810580e:	2b00      	cmp	r3, #0
 8105810:	f000 810a 	beq.w	8105a28 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8105814:	69bb      	ldr	r3, [r7, #24]
 8105816:	2b01      	cmp	r3, #1
 8105818:	d05a      	beq.n	81058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 810581a:	2b01      	cmp	r3, #1
 810581c:	d302      	bcc.n	8105824 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 810581e:	2b02      	cmp	r3, #2
 8105820:	d078      	beq.n	8105914 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8105822:	e099      	b.n	8105958 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105824:	4b88      	ldr	r3, [pc, #544]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8105826:	681b      	ldr	r3, [r3, #0]
 8105828:	f003 0320 	and.w	r3, r3, #32
 810582c:	2b00      	cmp	r3, #0
 810582e:	d02d      	beq.n	810588c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105830:	4b85      	ldr	r3, [pc, #532]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	08db      	lsrs	r3, r3, #3
 8105836:	f003 0303 	and.w	r3, r3, #3
 810583a:	4a84      	ldr	r2, [pc, #528]	; (8105a4c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 810583c:	fa22 f303 	lsr.w	r3, r2, r3
 8105840:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105842:	68bb      	ldr	r3, [r7, #8]
 8105844:	ee07 3a90 	vmov	s15, r3
 8105848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810584c:	697b      	ldr	r3, [r7, #20]
 810584e:	ee07 3a90 	vmov	s15, r3
 8105852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810585a:	4b7b      	ldr	r3, [pc, #492]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 810585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105862:	ee07 3a90 	vmov	s15, r3
 8105866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810586a:	ed97 6a03 	vldr	s12, [r7, #12]
 810586e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8105872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810587a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810587e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105886:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810588a:	e087      	b.n	810599c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810588c:	697b      	ldr	r3, [r7, #20]
 810588e:	ee07 3a90 	vmov	s15, r3
 8105892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105896:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105a54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 810589a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810589e:	4b6a      	ldr	r3, [pc, #424]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058a6:	ee07 3a90 	vmov	s15, r3
 81058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81058b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 81058b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81058ce:	e065      	b.n	810599c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81058d0:	697b      	ldr	r3, [r7, #20]
 81058d2:	ee07 3a90 	vmov	s15, r3
 81058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105a58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 81058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058e2:	4b59      	ldr	r3, [pc, #356]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058ea:	ee07 3a90 	vmov	s15, r3
 81058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81058f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 81058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810590e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105912:	e043      	b.n	810599c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105914:	697b      	ldr	r3, [r7, #20]
 8105916:	ee07 3a90 	vmov	s15, r3
 810591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810591e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105a5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105926:	4b48      	ldr	r3, [pc, #288]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8105928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810592e:	ee07 3a90 	vmov	s15, r3
 8105932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105936:	ed97 6a03 	vldr	s12, [r7, #12]
 810593a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 810593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105956:	e021      	b.n	810599c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105958:	697b      	ldr	r3, [r7, #20]
 810595a:	ee07 3a90 	vmov	s15, r3
 810595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105962:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105a58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8105966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810596a:	4b37      	ldr	r3, [pc, #220]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 810596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105972:	ee07 3a90 	vmov	s15, r3
 8105976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810597a:	ed97 6a03 	vldr	s12, [r7, #12]
 810597e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105a50 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8105982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810599a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 810599c:	4b2a      	ldr	r3, [pc, #168]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 810599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81059a0:	0a5b      	lsrs	r3, r3, #9
 81059a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81059a6:	ee07 3a90 	vmov	s15, r3
 81059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81059b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81059b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81059ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81059be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81059c2:	ee17 2a90 	vmov	r2, s15
 81059c6:	687b      	ldr	r3, [r7, #4]
 81059c8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 81059ca:	4b1f      	ldr	r3, [pc, #124]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81059ce:	0c1b      	lsrs	r3, r3, #16
 81059d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81059d4:	ee07 3a90 	vmov	s15, r3
 81059d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81059e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81059e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81059e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81059ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81059f0:	ee17 2a90 	vmov	r2, s15
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 81059f8:	4b13      	ldr	r3, [pc, #76]	; (8105a48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 81059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81059fc:	0e1b      	lsrs	r3, r3, #24
 81059fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a02:	ee07 3a90 	vmov	s15, r3
 8105a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a1e:	ee17 2a90 	vmov	r2, s15
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105a26:	e008      	b.n	8105a3a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105a28:	687b      	ldr	r3, [r7, #4]
 8105a2a:	2200      	movs	r2, #0
 8105a2c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	2200      	movs	r2, #0
 8105a32:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	2200      	movs	r2, #0
 8105a38:	609a      	str	r2, [r3, #8]
}
 8105a3a:	bf00      	nop
 8105a3c:	3724      	adds	r7, #36	; 0x24
 8105a3e:	46bd      	mov	sp, r7
 8105a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a44:	4770      	bx	lr
 8105a46:	bf00      	nop
 8105a48:	58024400 	.word	0x58024400
 8105a4c:	03d09000 	.word	0x03d09000
 8105a50:	46000000 	.word	0x46000000
 8105a54:	4c742400 	.word	0x4c742400
 8105a58:	4a742400 	.word	0x4a742400
 8105a5c:	4bbebc20 	.word	0x4bbebc20

08105a60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105a60:	b580      	push	{r7, lr}
 8105a62:	b084      	sub	sp, #16
 8105a64:	af00      	add	r7, sp, #0
 8105a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105a68:	2301      	movs	r3, #1
 8105a6a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	2b00      	cmp	r3, #0
 8105a70:	f000 808c 	beq.w	8105b8c <HAL_RTC_Init+0x12c>
  {
    status = HAL_OK;
 8105a74:	2300      	movs	r3, #0
 8105a76:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8105a7e:	b2db      	uxtb	r3, r3
 8105a80:	2b00      	cmp	r3, #0
 8105a82:	d106      	bne.n	8105a92 <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	2200      	movs	r2, #0
 8105a88:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105a8c:	6878      	ldr	r0, [r7, #4]
 8105a8e:	f7fb fe8d 	bl	81017ac <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	2202      	movs	r2, #2
 8105a96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	681b      	ldr	r3, [r3, #0]
 8105a9e:	22ca      	movs	r2, #202	; 0xca
 8105aa0:	625a      	str	r2, [r3, #36]	; 0x24
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	681b      	ldr	r3, [r3, #0]
 8105aa6:	2253      	movs	r2, #83	; 0x53
 8105aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8105aaa:	6878      	ldr	r0, [r7, #4]
 8105aac:	f000 f899 	bl	8105be2 <RTC_EnterInitMode>
 8105ab0:	4603      	mov	r3, r0
 8105ab2:	2b00      	cmp	r3, #0
 8105ab4:	d00a      	beq.n	8105acc <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	22ff      	movs	r2, #255	; 0xff
 8105abc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	2204      	movs	r2, #4
 8105ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8105ac6:	2301      	movs	r3, #1
 8105ac8:	73fb      	strb	r3, [r7, #15]
 8105aca:	e05f      	b.n	8105b8c <HAL_RTC_Init+0x12c>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	681b      	ldr	r3, [r3, #0]
 8105ad0:	689b      	ldr	r3, [r3, #8]
 8105ad2:	687a      	ldr	r2, [r7, #4]
 8105ad4:	6812      	ldr	r2, [r2, #0]
 8105ad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8105ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105ade:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	681b      	ldr	r3, [r3, #0]
 8105ae4:	6899      	ldr	r1, [r3, #8]
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	685a      	ldr	r2, [r3, #4]
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	691b      	ldr	r3, [r3, #16]
 8105aee:	431a      	orrs	r2, r3
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	699b      	ldr	r3, [r3, #24]
 8105af4:	431a      	orrs	r2, r3
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	430a      	orrs	r2, r1
 8105afc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8105afe:	687b      	ldr	r3, [r7, #4]
 8105b00:	689b      	ldr	r3, [r3, #8]
 8105b02:	0419      	lsls	r1, r3, #16
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	68da      	ldr	r2, [r3, #12]
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	681b      	ldr	r3, [r3, #0]
 8105b0c:	430a      	orrs	r2, r1
 8105b0e:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	681b      	ldr	r3, [r3, #0]
 8105b14:	68da      	ldr	r2, [r3, #12]
 8105b16:	687b      	ldr	r3, [r7, #4]
 8105b18:	681b      	ldr	r3, [r3, #0]
 8105b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8105b1e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	689b      	ldr	r3, [r3, #8]
 8105b26:	f003 0320 	and.w	r3, r3, #32
 8105b2a:	2b00      	cmp	r3, #0
 8105b2c:	d10f      	bne.n	8105b4e <HAL_RTC_Init+0xee>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105b2e:	6878      	ldr	r0, [r7, #4]
 8105b30:	f000 f831 	bl	8105b96 <HAL_RTC_WaitForSynchro>
 8105b34:	4603      	mov	r3, r0
 8105b36:	2b00      	cmp	r3, #0
 8105b38:	d009      	beq.n	8105b4e <HAL_RTC_Init+0xee>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105b3a:	687b      	ldr	r3, [r7, #4]
 8105b3c:	681b      	ldr	r3, [r3, #0]
 8105b3e:	22ff      	movs	r2, #255	; 0xff
 8105b40:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	2204      	movs	r2, #4
 8105b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 8105b4a:	2301      	movs	r3, #1
 8105b4c:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 8105b4e:	7bfb      	ldrb	r3, [r7, #15]
 8105b50:	2b00      	cmp	r3, #0
 8105b52:	d11b      	bne.n	8105b8c <HAL_RTC_Init+0x12c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8105b54:	687b      	ldr	r3, [r7, #4]
 8105b56:	681b      	ldr	r3, [r3, #0]
 8105b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	681b      	ldr	r3, [r3, #0]
 8105b5e:	f022 0203 	bic.w	r2, r2, #3
 8105b62:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	69da      	ldr	r2, [r3, #28]
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	695b      	ldr	r3, [r3, #20]
 8105b72:	431a      	orrs	r2, r3
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	430a      	orrs	r2, r1
 8105b7a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	681b      	ldr	r3, [r3, #0]
 8105b80:	22ff      	movs	r2, #255	; 0xff
 8105b82:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	2201      	movs	r2, #1
 8105b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 8105b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8105b8e:	4618      	mov	r0, r3
 8105b90:	3710      	adds	r7, #16
 8105b92:	46bd      	mov	sp, r7
 8105b94:	bd80      	pop	{r7, pc}

08105b96 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105b96:	b580      	push	{r7, lr}
 8105b98:	b084      	sub	sp, #16
 8105b9a:	af00      	add	r7, sp, #0
 8105b9c:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	681b      	ldr	r3, [r3, #0]
 8105ba2:	68da      	ldr	r2, [r3, #12]
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	681b      	ldr	r3, [r3, #0]
 8105ba8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8105bac:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8105bae:	f7fc fba1 	bl	81022f4 <HAL_GetTick>
 8105bb2:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105bb4:	e009      	b.n	8105bca <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105bb6:	f7fc fb9d 	bl	81022f4 <HAL_GetTick>
 8105bba:	4602      	mov	r2, r0
 8105bbc:	68fb      	ldr	r3, [r7, #12]
 8105bbe:	1ad3      	subs	r3, r2, r3
 8105bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105bc4:	d901      	bls.n	8105bca <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8105bc6:	2303      	movs	r3, #3
 8105bc8:	e007      	b.n	8105bda <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	681b      	ldr	r3, [r3, #0]
 8105bce:	68db      	ldr	r3, [r3, #12]
 8105bd0:	f003 0320 	and.w	r3, r3, #32
 8105bd4:	2b00      	cmp	r3, #0
 8105bd6:	d0ee      	beq.n	8105bb6 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8105bd8:	2300      	movs	r3, #0
}
 8105bda:	4618      	mov	r0, r3
 8105bdc:	3710      	adds	r7, #16
 8105bde:	46bd      	mov	sp, r7
 8105be0:	bd80      	pop	{r7, pc}

08105be2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105be2:	b580      	push	{r7, lr}
 8105be4:	b084      	sub	sp, #16
 8105be6:	af00      	add	r7, sp, #0
 8105be8:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	681b      	ldr	r3, [r3, #0]
 8105bee:	68db      	ldr	r3, [r3, #12]
 8105bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d119      	bne.n	8105c2c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8105bf8:	687b      	ldr	r3, [r7, #4]
 8105bfa:	681b      	ldr	r3, [r3, #0]
 8105bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8105c00:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105c02:	f7fc fb77 	bl	81022f4 <HAL_GetTick>
 8105c06:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105c08:	e009      	b.n	8105c1e <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8105c0a:	f7fc fb73 	bl	81022f4 <HAL_GetTick>
 8105c0e:	4602      	mov	r2, r0
 8105c10:	68fb      	ldr	r3, [r7, #12]
 8105c12:	1ad3      	subs	r3, r2, r3
 8105c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105c18:	d901      	bls.n	8105c1e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8105c1a:	2303      	movs	r3, #3
 8105c1c:	e007      	b.n	8105c2e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	681b      	ldr	r3, [r3, #0]
 8105c22:	68db      	ldr	r3, [r3, #12]
 8105c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105c28:	2b00      	cmp	r3, #0
 8105c2a:	d0ee      	beq.n	8105c0a <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 8105c2c:	2300      	movs	r3, #0
}
 8105c2e:	4618      	mov	r0, r3
 8105c30:	3710      	adds	r7, #16
 8105c32:	46bd      	mov	sp, r7
 8105c34:	bd80      	pop	{r7, pc}

08105c36 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8105c36:	b480      	push	{r7}
 8105c38:	b085      	sub	sp, #20
 8105c3a:	af00      	add	r7, sp, #0
 8105c3c:	6078      	str	r0, [r7, #4]
 8105c3e:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105c46:	2b01      	cmp	r3, #1
 8105c48:	d101      	bne.n	8105c4e <HAL_RTCEx_SetTamper+0x18>
 8105c4a:	2302      	movs	r3, #2
 8105c4c:	e0cc      	b.n	8105de8 <HAL_RTCEx_SetTamper+0x1b2>
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	2201      	movs	r2, #1
 8105c52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105c56:	687b      	ldr	r3, [r7, #4]
 8105c58:	2202      	movs	r2, #2
 8105c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c64:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105c66:	683b      	ldr	r3, [r7, #0]
 8105c68:	681b      	ldr	r3, [r3, #0]
 8105c6a:	68fa      	ldr	r2, [r7, #12]
 8105c6c:	4313      	orrs	r3, r2
 8105c6e:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8105c70:	683b      	ldr	r3, [r7, #0]
 8105c72:	689b      	ldr	r3, [r3, #8]
 8105c74:	2b08      	cmp	r3, #8
 8105c76:	d003      	beq.n	8105c80 <HAL_RTCEx_SetTamper+0x4a>
 8105c78:	683b      	ldr	r3, [r7, #0]
 8105c7a:	689b      	ldr	r3, [r3, #8]
 8105c7c:	2b02      	cmp	r3, #2
 8105c7e:	d106      	bne.n	8105c8e <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8105c80:	683b      	ldr	r3, [r7, #0]
 8105c82:	681b      	ldr	r3, [r3, #0]
 8105c84:	005b      	lsls	r3, r3, #1
 8105c86:	68fa      	ldr	r2, [r7, #12]
 8105c88:	4313      	orrs	r3, r2
 8105c8a:	60fb      	str	r3, [r7, #12]
 8105c8c:	e006      	b.n	8105c9c <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8105c8e:	683b      	ldr	r3, [r7, #0]
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	005b      	lsls	r3, r3, #1
 8105c94:	43db      	mvns	r3, r3
 8105c96:	68fa      	ldr	r2, [r7, #12]
 8105c98:	4013      	ands	r3, r2
 8105c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8105c9c:	683b      	ldr	r3, [r7, #0]
 8105c9e:	68db      	ldr	r3, [r3, #12]
 8105ca0:	2b00      	cmp	r3, #0
 8105ca2:	d01e      	beq.n	8105ce2 <HAL_RTCEx_SetTamper+0xac>
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105ca4:	683b      	ldr	r3, [r7, #0]
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	f003 0301 	and.w	r3, r3, #1
 8105cac:	2b00      	cmp	r3, #0
 8105cae:	d003      	beq.n	8105cb8 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8105cb0:	68fb      	ldr	r3, [r7, #12]
 8105cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105cb6:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105cb8:	683b      	ldr	r3, [r7, #0]
 8105cba:	681b      	ldr	r3, [r3, #0]
 8105cbc:	f003 0308 	and.w	r3, r3, #8
 8105cc0:	2b00      	cmp	r3, #0
 8105cc2:	d003      	beq.n	8105ccc <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8105cc4:	68fb      	ldr	r3, [r7, #12]
 8105cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105cca:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105ccc:	683b      	ldr	r3, [r7, #0]
 8105cce:	681b      	ldr	r3, [r3, #0]
 8105cd0:	f003 0320 	and.w	r3, r3, #32
 8105cd4:	2b00      	cmp	r3, #0
 8105cd6:	d022      	beq.n	8105d1e <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105cd8:	68fb      	ldr	r3, [r7, #12]
 8105cda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105cde:	60fb      	str	r3, [r7, #12]
 8105ce0:	e01d      	b.n	8105d1e <HAL_RTCEx_SetTamper+0xe8>
#endif /* RTC_TAMPCR_TAMP3E */
  }
  else
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105ce2:	683b      	ldr	r3, [r7, #0]
 8105ce4:	681b      	ldr	r3, [r3, #0]
 8105ce6:	f003 0301 	and.w	r3, r3, #1
 8105cea:	2b00      	cmp	r3, #0
 8105cec:	d003      	beq.n	8105cf6 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105cee:	68fb      	ldr	r3, [r7, #12]
 8105cf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8105cf4:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105cf6:	683b      	ldr	r3, [r7, #0]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	f003 0308 	and.w	r3, r3, #8
 8105cfe:	2b00      	cmp	r3, #0
 8105d00:	d003      	beq.n	8105d0a <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105d02:	68fb      	ldr	r3, [r7, #12]
 8105d04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8105d08:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d0a:	683b      	ldr	r3, [r7, #0]
 8105d0c:	681b      	ldr	r3, [r3, #0]
 8105d0e:	f003 0320 	and.w	r3, r3, #32
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d003      	beq.n	8105d1e <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105d16:	68fb      	ldr	r3, [r7, #12]
 8105d18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8105d1c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP3E */
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105d1e:	683b      	ldr	r3, [r7, #0]
 8105d20:	691b      	ldr	r3, [r3, #16]
 8105d22:	2b00      	cmp	r3, #0
 8105d24:	d01e      	beq.n	8105d64 <HAL_RTCEx_SetTamper+0x12e>
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105d26:	683b      	ldr	r3, [r7, #0]
 8105d28:	681b      	ldr	r3, [r3, #0]
 8105d2a:	f003 0301 	and.w	r3, r3, #1
 8105d2e:	2b00      	cmp	r3, #0
 8105d30:	d003      	beq.n	8105d3a <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105d32:	68fb      	ldr	r3, [r7, #12]
 8105d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8105d38:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105d3a:	683b      	ldr	r3, [r7, #0]
 8105d3c:	681b      	ldr	r3, [r3, #0]
 8105d3e:	f003 0308 	and.w	r3, r3, #8
 8105d42:	2b00      	cmp	r3, #0
 8105d44:	d003      	beq.n	8105d4e <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105d46:	68fb      	ldr	r3, [r7, #12]
 8105d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105d4c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d4e:	683b      	ldr	r3, [r7, #0]
 8105d50:	681b      	ldr	r3, [r3, #0]
 8105d52:	f003 0320 	and.w	r3, r3, #32
 8105d56:	2b00      	cmp	r3, #0
 8105d58:	d022      	beq.n	8105da0 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105d60:	60fb      	str	r3, [r7, #12]
 8105d62:	e01d      	b.n	8105da0 <HAL_RTCEx_SetTamper+0x16a>
#endif /* RTC_TAMPCR_TAMP3E */
  }
  else
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105d64:	683b      	ldr	r3, [r7, #0]
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	f003 0301 	and.w	r3, r3, #1
 8105d6c:	2b00      	cmp	r3, #0
 8105d6e:	d003      	beq.n	8105d78 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8105d70:	68fb      	ldr	r3, [r7, #12]
 8105d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8105d76:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105d78:	683b      	ldr	r3, [r7, #0]
 8105d7a:	681b      	ldr	r3, [r3, #0]
 8105d7c:	f003 0308 	and.w	r3, r3, #8
 8105d80:	2b00      	cmp	r3, #0
 8105d82:	d003      	beq.n	8105d8c <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8105d84:	68fb      	ldr	r3, [r7, #12]
 8105d86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8105d8a:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105d8c:	683b      	ldr	r3, [r7, #0]
 8105d8e:	681b      	ldr	r3, [r3, #0]
 8105d90:	f003 0320 	and.w	r3, r3, #32
 8105d94:	2b00      	cmp	r3, #0
 8105d96:	d003      	beq.n	8105da0 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8105d98:	68fb      	ldr	r3, [r7, #12]
 8105d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105d9e:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP3E */
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8105da0:	68fb      	ldr	r3, [r7, #12]
 8105da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105daa:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105dac:	683b      	ldr	r3, [r7, #0]
 8105dae:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8105db0:	683b      	ldr	r3, [r7, #0]
 8105db2:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105db4:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8105db6:	683b      	ldr	r3, [r7, #0]
 8105db8:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8105dba:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8105dbc:	683b      	ldr	r3, [r7, #0]
 8105dbe:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8105dc0:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8105dc2:	683b      	ldr	r3, [r7, #0]
 8105dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8105dc6:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105dc8:	68fa      	ldr	r2, [r7, #12]
 8105dca:	4313      	orrs	r3, r2
 8105dcc:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	681b      	ldr	r3, [r3, #0]
 8105dd2:	68fa      	ldr	r2, [r7, #12]
 8105dd4:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	2201      	movs	r2, #1
 8105dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	2200      	movs	r2, #0
 8105de2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8105de6:	2300      	movs	r3, #0
}
 8105de8:	4618      	mov	r0, r3
 8105dea:	3714      	adds	r7, #20
 8105dec:	46bd      	mov	sp, r7
 8105dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105df2:	4770      	bx	lr

08105df4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8105df4:	b580      	push	{r7, lr}
 8105df6:	b08a      	sub	sp, #40	; 0x28
 8105df8:	af00      	add	r7, sp, #0
 8105dfa:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8105dfc:	687b      	ldr	r3, [r7, #4]
 8105dfe:	2b00      	cmp	r3, #0
 8105e00:	d101      	bne.n	8105e06 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8105e02:	2301      	movs	r3, #1
 8105e04:	e26a      	b.n	81062dc <HAL_SAI_Init+0x4e8>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105e06:	f7fc faa3 	bl	8102350 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8105e10:	2b01      	cmp	r3, #1
 8105e12:	d113      	bne.n	8105e3c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	681b      	ldr	r3, [r3, #0]
 8105e18:	4a8b      	ldr	r2, [pc, #556]	; (8106048 <HAL_SAI_Init+0x254>)
 8105e1a:	4293      	cmp	r3, r2
 8105e1c:	d004      	beq.n	8105e28 <HAL_SAI_Init+0x34>
 8105e1e:	687b      	ldr	r3, [r7, #4]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	4a8a      	ldr	r2, [pc, #552]	; (810604c <HAL_SAI_Init+0x258>)
 8105e24:	4293      	cmp	r3, r2
 8105e26:	d107      	bne.n	8105e38 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105e28:	687b      	ldr	r3, [r7, #4]
 8105e2a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8105e2c:	2b01      	cmp	r3, #1
 8105e2e:	d103      	bne.n	8105e38 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8105e34:	2b00      	cmp	r3, #0
 8105e36:	d001      	beq.n	8105e3c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8105e38:	2301      	movs	r3, #1
 8105e3a:	e24f      	b.n	81062dc <HAL_SAI_Init+0x4e8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105e3c:	687b      	ldr	r3, [r7, #4]
 8105e3e:	681b      	ldr	r3, [r3, #0]
 8105e40:	4a81      	ldr	r2, [pc, #516]	; (8106048 <HAL_SAI_Init+0x254>)
 8105e42:	4293      	cmp	r3, r2
 8105e44:	d004      	beq.n	8105e50 <HAL_SAI_Init+0x5c>
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	681b      	ldr	r3, [r3, #0]
 8105e4a:	4a81      	ldr	r2, [pc, #516]	; (8106050 <HAL_SAI_Init+0x25c>)
 8105e4c:	4293      	cmp	r3, r2
 8105e4e:	d102      	bne.n	8105e56 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8105e50:	4b80      	ldr	r3, [pc, #512]	; (8106054 <HAL_SAI_Init+0x260>)
 8105e52:	61bb      	str	r3, [r7, #24]
 8105e54:	e028      	b.n	8105ea8 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	681b      	ldr	r3, [r3, #0]
 8105e5a:	4a7f      	ldr	r2, [pc, #508]	; (8106058 <HAL_SAI_Init+0x264>)
 8105e5c:	4293      	cmp	r3, r2
 8105e5e:	d004      	beq.n	8105e6a <HAL_SAI_Init+0x76>
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	4a7d      	ldr	r2, [pc, #500]	; (810605c <HAL_SAI_Init+0x268>)
 8105e66:	4293      	cmp	r3, r2
 8105e68:	d102      	bne.n	8105e70 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8105e6a:	4b7d      	ldr	r3, [pc, #500]	; (8106060 <HAL_SAI_Init+0x26c>)
 8105e6c:	61bb      	str	r3, [r7, #24]
 8105e6e:	e01b      	b.n	8105ea8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	4a7b      	ldr	r2, [pc, #492]	; (8106064 <HAL_SAI_Init+0x270>)
 8105e76:	4293      	cmp	r3, r2
 8105e78:	d004      	beq.n	8105e84 <HAL_SAI_Init+0x90>
 8105e7a:	687b      	ldr	r3, [r7, #4]
 8105e7c:	681b      	ldr	r3, [r3, #0]
 8105e7e:	4a7a      	ldr	r2, [pc, #488]	; (8106068 <HAL_SAI_Init+0x274>)
 8105e80:	4293      	cmp	r3, r2
 8105e82:	d102      	bne.n	8105e8a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8105e84:	4b79      	ldr	r3, [pc, #484]	; (810606c <HAL_SAI_Init+0x278>)
 8105e86:	61bb      	str	r3, [r7, #24]
 8105e88:	e00e      	b.n	8105ea8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8105e8a:	687b      	ldr	r3, [r7, #4]
 8105e8c:	681b      	ldr	r3, [r3, #0]
 8105e8e:	4a6f      	ldr	r2, [pc, #444]	; (810604c <HAL_SAI_Init+0x258>)
 8105e90:	4293      	cmp	r3, r2
 8105e92:	d004      	beq.n	8105e9e <HAL_SAI_Init+0xaa>
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	4a75      	ldr	r2, [pc, #468]	; (8106070 <HAL_SAI_Init+0x27c>)
 8105e9a:	4293      	cmp	r3, r2
 8105e9c:	d102      	bne.n	8105ea4 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8105e9e:	4b75      	ldr	r3, [pc, #468]	; (8106074 <HAL_SAI_Init+0x280>)
 8105ea0:	61bb      	str	r3, [r7, #24]
 8105ea2:	e001      	b.n	8105ea8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8105ea4:	2301      	movs	r3, #1
 8105ea6:	e219      	b.n	81062dc <HAL_SAI_Init+0x4e8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8105eae:	b2db      	uxtb	r3, r3
 8105eb0:	2b00      	cmp	r3, #0
 8105eb2:	d106      	bne.n	8105ec2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8105eb4:	687b      	ldr	r3, [r7, #4]
 8105eb6:	2200      	movs	r2, #0
 8105eb8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8105ebc:	6878      	ldr	r0, [r7, #4]
 8105ebe:	f7fc f891 	bl	8101fe4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8105ec2:	6878      	ldr	r0, [r7, #4]
 8105ec4:	f000 fa1a 	bl	81062fc <SAI_Disable>
 8105ec8:	4603      	mov	r3, r0
 8105eca:	2b00      	cmp	r3, #0
 8105ecc:	d001      	beq.n	8105ed2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8105ece:	2301      	movs	r3, #1
 8105ed0:	e204      	b.n	81062dc <HAL_SAI_Init+0x4e8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	2202      	movs	r2, #2
 8105ed6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	68db      	ldr	r3, [r3, #12]
 8105ede:	2b01      	cmp	r3, #1
 8105ee0:	d007      	beq.n	8105ef2 <HAL_SAI_Init+0xfe>
 8105ee2:	2b01      	cmp	r3, #1
 8105ee4:	d302      	bcc.n	8105eec <HAL_SAI_Init+0xf8>
 8105ee6:	2b02      	cmp	r3, #2
 8105ee8:	d006      	beq.n	8105ef8 <HAL_SAI_Init+0x104>
 8105eea:	e008      	b.n	8105efe <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8105eec:	2300      	movs	r3, #0
 8105eee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105ef0:	e008      	b.n	8105f04 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8105ef2:	2310      	movs	r3, #16
 8105ef4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105ef6:	e005      	b.n	8105f04 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8105ef8:	2320      	movs	r3, #32
 8105efa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105efc:	e002      	b.n	8105f04 <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 8105efe:	2300      	movs	r3, #0
 8105f00:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105f02:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	689b      	ldr	r3, [r3, #8]
 8105f08:	2b05      	cmp	r3, #5
 8105f0a:	d832      	bhi.n	8105f72 <HAL_SAI_Init+0x17e>
 8105f0c:	a201      	add	r2, pc, #4	; (adr r2, 8105f14 <HAL_SAI_Init+0x120>)
 8105f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f12:	bf00      	nop
 8105f14:	08105f2d 	.word	0x08105f2d
 8105f18:	08105f33 	.word	0x08105f33
 8105f1c:	08105f3b 	.word	0x08105f3b
 8105f20:	08105f43 	.word	0x08105f43
 8105f24:	08105f53 	.word	0x08105f53
 8105f28:	08105f63 	.word	0x08105f63
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8105f2c:	2300      	movs	r3, #0
 8105f2e:	61fb      	str	r3, [r7, #28]
      break;
 8105f30:	e022      	b.n	8105f78 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8105f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8105f36:	61fb      	str	r3, [r7, #28]
      break;
 8105f38:	e01e      	b.n	8105f78 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8105f3e:	61fb      	str	r3, [r7, #28]
      break;
 8105f40:	e01a      	b.n	8105f78 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8105f46:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8105f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f4a:	f043 0301 	orr.w	r3, r3, #1
 8105f4e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105f50:	e012      	b.n	8105f78 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8105f56:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8105f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f5a:	f043 0302 	orr.w	r3, r3, #2
 8105f5e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105f60:	e00a      	b.n	8105f78 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8105f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8105f66:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8105f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105f6a:	f043 0303 	orr.w	r3, r3, #3
 8105f6e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8105f70:	e002      	b.n	8105f78 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8105f72:	2300      	movs	r3, #0
 8105f74:	61fb      	str	r3, [r7, #28]
      break;
 8105f76:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8105f78:	69bb      	ldr	r3, [r7, #24]
 8105f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105f7c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	6a1b      	ldr	r3, [r3, #32]
 8105f82:	2b00      	cmp	r3, #0
 8105f84:	f000 80a1 	beq.w	81060ca <HAL_SAI_Init+0x2d6>
  {
    uint32_t freq = 0;
 8105f88:	2300      	movs	r3, #0
 8105f8a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	681b      	ldr	r3, [r3, #0]
 8105f90:	4a2d      	ldr	r2, [pc, #180]	; (8106048 <HAL_SAI_Init+0x254>)
 8105f92:	4293      	cmp	r3, r2
 8105f94:	d004      	beq.n	8105fa0 <HAL_SAI_Init+0x1ac>
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	681b      	ldr	r3, [r3, #0]
 8105f9a:	4a2d      	ldr	r2, [pc, #180]	; (8106050 <HAL_SAI_Init+0x25c>)
 8105f9c:	4293      	cmp	r3, r2
 8105f9e:	d104      	bne.n	8105faa <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8105fa0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8105fa4:	f7fe feea 	bl	8104d7c <HAL_RCCEx_GetPeriphCLKFreq>
 8105fa8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8105faa:	687b      	ldr	r3, [r7, #4]
 8105fac:	681b      	ldr	r3, [r3, #0]
 8105fae:	4a2a      	ldr	r2, [pc, #168]	; (8106058 <HAL_SAI_Init+0x264>)
 8105fb0:	4293      	cmp	r3, r2
 8105fb2:	d004      	beq.n	8105fbe <HAL_SAI_Init+0x1ca>
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	4a28      	ldr	r2, [pc, #160]	; (810605c <HAL_SAI_Init+0x268>)
 8105fba:	4293      	cmp	r3, r2
 8105fbc:	d104      	bne.n	8105fc8 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8105fbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8105fc2:	f7fe fedb 	bl	8104d7c <HAL_RCCEx_GetPeriphCLKFreq>
 8105fc6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	681b      	ldr	r3, [r3, #0]
 8105fcc:	4a25      	ldr	r2, [pc, #148]	; (8106064 <HAL_SAI_Init+0x270>)
 8105fce:	4293      	cmp	r3, r2
 8105fd0:	d004      	beq.n	8105fdc <HAL_SAI_Init+0x1e8>
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	4a24      	ldr	r2, [pc, #144]	; (8106068 <HAL_SAI_Init+0x274>)
 8105fd8:	4293      	cmp	r3, r2
 8105fda:	d104      	bne.n	8105fe6 <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8105fdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8105fe0:	f7fe fecc 	bl	8104d7c <HAL_RCCEx_GetPeriphCLKFreq>
 8105fe4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	4a18      	ldr	r2, [pc, #96]	; (810604c <HAL_SAI_Init+0x258>)
 8105fec:	4293      	cmp	r3, r2
 8105fee:	d104      	bne.n	8105ffa <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8105ff0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8105ff4:	f7fe fec2 	bl	8104d7c <HAL_RCCEx_GetPeriphCLKFreq>
 8105ff8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	4a1c      	ldr	r2, [pc, #112]	; (8106070 <HAL_SAI_Init+0x27c>)
 8106000:	4293      	cmp	r3, r2
 8106002:	d104      	bne.n	810600e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8106004:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8106008:	f7fe feb8 	bl	8104d7c <HAL_RCCEx_GetPeriphCLKFreq>
 810600c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	699b      	ldr	r3, [r3, #24]
 8106012:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8106016:	d10f      	bne.n	8106038 <HAL_SAI_Init+0x244>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 8106018:	697a      	ldr	r2, [r7, #20]
 810601a:	4613      	mov	r3, r2
 810601c:	009b      	lsls	r3, r3, #2
 810601e:	4413      	add	r3, r2
 8106020:	005b      	lsls	r3, r3, #1
 8106022:	4619      	mov	r1, r3
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	6a1b      	ldr	r3, [r3, #32]
 8106028:	687a      	ldr	r2, [r7, #4]
 810602a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 810602c:	fb02 f303 	mul.w	r3, r2, r3
 8106030:	fbb1 f3f3 	udiv	r3, r1, r3
 8106034:	613b      	str	r3, [r7, #16]
 8106036:	e030      	b.n	810609a <HAL_SAI_Init+0x2a6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810603c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106040:	d11a      	bne.n	8106078 <HAL_SAI_Init+0x284>
 8106042:	2302      	movs	r3, #2
 8106044:	e019      	b.n	810607a <HAL_SAI_Init+0x286>
 8106046:	bf00      	nop
 8106048:	40015804 	.word	0x40015804
 810604c:	58005404 	.word	0x58005404
 8106050:	40015824 	.word	0x40015824
 8106054:	40015800 	.word	0x40015800
 8106058:	40015c04 	.word	0x40015c04
 810605c:	40015c24 	.word	0x40015c24
 8106060:	40015c00 	.word	0x40015c00
 8106064:	40016004 	.word	0x40016004
 8106068:	40016024 	.word	0x40016024
 810606c:	40016000 	.word	0x40016000
 8106070:	58005424 	.word	0x58005424
 8106074:	58005400 	.word	0x58005400
 8106078:	2301      	movs	r3, #1
 810607a:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 810607c:	697a      	ldr	r2, [r7, #20]
 810607e:	4613      	mov	r3, r2
 8106080:	009b      	lsls	r3, r3, #2
 8106082:	4413      	add	r3, r2
 8106084:	005b      	lsls	r3, r3, #1
 8106086:	4619      	mov	r1, r3
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	6a1b      	ldr	r3, [r3, #32]
 810608c:	68fa      	ldr	r2, [r7, #12]
 810608e:	fb02 f303 	mul.w	r3, r2, r3
 8106092:	021b      	lsls	r3, r3, #8
 8106094:	fbb1 f3f3 	udiv	r3, r1, r3
 8106098:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 810609a:	693b      	ldr	r3, [r7, #16]
 810609c:	4a91      	ldr	r2, [pc, #580]	; (81062e4 <HAL_SAI_Init+0x4f0>)
 810609e:	fba2 2303 	umull	r2, r3, r2, r3
 81060a2:	08da      	lsrs	r2, r3, #3
 81060a4:	687b      	ldr	r3, [r7, #4]
 81060a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81060a8:	6939      	ldr	r1, [r7, #16]
 81060aa:	4b8e      	ldr	r3, [pc, #568]	; (81062e4 <HAL_SAI_Init+0x4f0>)
 81060ac:	fba3 2301 	umull	r2, r3, r3, r1
 81060b0:	08da      	lsrs	r2, r3, #3
 81060b2:	4613      	mov	r3, r2
 81060b4:	009b      	lsls	r3, r3, #2
 81060b6:	4413      	add	r3, r2
 81060b8:	005b      	lsls	r3, r3, #1
 81060ba:	1aca      	subs	r2, r1, r3
 81060bc:	2a08      	cmp	r2, #8
 81060be:	d904      	bls.n	81060ca <HAL_SAI_Init+0x2d6>
    {
      hsai->Init.Mckdiv += 1U;
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81060c4:	1c5a      	adds	r2, r3, #1
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	685b      	ldr	r3, [r3, #4]
 81060ce:	2b00      	cmp	r3, #0
 81060d0:	d003      	beq.n	81060da <HAL_SAI_Init+0x2e6>
 81060d2:	687b      	ldr	r3, [r7, #4]
 81060d4:	685b      	ldr	r3, [r3, #4]
 81060d6:	2b02      	cmp	r3, #2
 81060d8:	d109      	bne.n	81060ee <HAL_SAI_Init+0x2fa>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81060de:	2b01      	cmp	r3, #1
 81060e0:	d101      	bne.n	81060e6 <HAL_SAI_Init+0x2f2>
 81060e2:	2300      	movs	r3, #0
 81060e4:	e001      	b.n	81060ea <HAL_SAI_Init+0x2f6>
 81060e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 81060ea:	623b      	str	r3, [r7, #32]
 81060ec:	e008      	b.n	8106100 <HAL_SAI_Init+0x30c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81060f2:	2b01      	cmp	r3, #1
 81060f4:	d102      	bne.n	81060fc <HAL_SAI_Init+0x308>
 81060f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 81060fa:	e000      	b.n	81060fe <HAL_SAI_Init+0x30a>
 81060fc:	2300      	movs	r3, #0
 81060fe:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8106100:	f7fc f926 	bl	8102350 <HAL_GetREVID>
 8106104:	4603      	mov	r3, r0
 8106106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810610a:	d331      	bcc.n	8106170 <HAL_SAI_Init+0x37c>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	681b      	ldr	r3, [r3, #0]
 8106110:	6819      	ldr	r1, [r3, #0]
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	681a      	ldr	r2, [r3, #0]
 8106116:	4b74      	ldr	r3, [pc, #464]	; (81062e8 <HAL_SAI_Init+0x4f4>)
 8106118:	400b      	ands	r3, r1
 810611a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	6819      	ldr	r1, [r3, #0]
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	685a      	ldr	r2, [r3, #4]
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810612a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106130:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106136:	431a      	orrs	r2, r3
 8106138:	6a3b      	ldr	r3, [r7, #32]
 810613a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810613c:	69fb      	ldr	r3, [r7, #28]
 810613e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106144:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	695b      	ldr	r3, [r3, #20]
 810614a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106150:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106152:	687b      	ldr	r3, [r7, #4]
 8106154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106156:	051b      	lsls	r3, r3, #20
 8106158:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810615e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	691b      	ldr	r3, [r3, #16]
 8106164:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106166:	687b      	ldr	r3, [r7, #4]
 8106168:	681b      	ldr	r3, [r3, #0]
 810616a:	430a      	orrs	r2, r1
 810616c:	601a      	str	r2, [r3, #0]
 810616e:	e02d      	b.n	81061cc <HAL_SAI_Init+0x3d8>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	6819      	ldr	r1, [r3, #0]
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	681a      	ldr	r2, [r3, #0]
 810617a:	4b5c      	ldr	r3, [pc, #368]	; (81062ec <HAL_SAI_Init+0x4f8>)
 810617c:	400b      	ands	r3, r1
 810617e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106180:	687b      	ldr	r3, [r7, #4]
 8106182:	681b      	ldr	r3, [r3, #0]
 8106184:	6819      	ldr	r1, [r3, #0]
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	685a      	ldr	r2, [r3, #4]
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810618e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106194:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810619a:	431a      	orrs	r2, r3
 810619c:	6a3b      	ldr	r3, [r7, #32]
 810619e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81061a0:	69fb      	ldr	r3, [r7, #28]
 81061a2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061a4:	687b      	ldr	r3, [r7, #4]
 81061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 81061a8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	695b      	ldr	r3, [r3, #20]
 81061ae:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81061b4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81061ba:	051b      	lsls	r3, r3, #20
 81061bc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81061c2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	430a      	orrs	r2, r1
 81061ca:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81061cc:	687b      	ldr	r3, [r7, #4]
 81061ce:	681b      	ldr	r3, [r3, #0]
 81061d0:	685b      	ldr	r3, [r3, #4]
 81061d2:	687a      	ldr	r2, [r7, #4]
 81061d4:	6812      	ldr	r2, [r2, #0]
 81061d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 81061da:	f023 030f 	bic.w	r3, r3, #15
 81061de:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	681b      	ldr	r3, [r3, #0]
 81061e4:	6859      	ldr	r1, [r3, #4]
 81061e6:	687b      	ldr	r3, [r7, #4]
 81061e8:	69da      	ldr	r2, [r3, #28]
 81061ea:	687b      	ldr	r3, [r7, #4]
 81061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81061ee:	431a      	orrs	r2, r3
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81061f4:	431a      	orrs	r2, r3
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	681b      	ldr	r3, [r3, #0]
 81061fa:	430a      	orrs	r2, r1
 81061fc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	681b      	ldr	r3, [r3, #0]
 8106202:	6899      	ldr	r1, [r3, #8]
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	681a      	ldr	r2, [r3, #0]
 8106208:	4b39      	ldr	r3, [pc, #228]	; (81062f0 <HAL_SAI_Init+0x4fc>)
 810620a:	400b      	ands	r3, r1
 810620c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	6899      	ldr	r1, [r3, #8]
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106218:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810621e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8106224:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 810622a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106230:	3b01      	subs	r3, #1
 8106232:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106234:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106236:	687b      	ldr	r3, [r7, #4]
 8106238:	681b      	ldr	r3, [r3, #0]
 810623a:	430a      	orrs	r2, r1
 810623c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	68d9      	ldr	r1, [r3, #12]
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	681a      	ldr	r2, [r3, #0]
 8106248:	f24f 0320 	movw	r3, #61472	; 0xf020
 810624c:	400b      	ands	r3, r1
 810624e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	68d9      	ldr	r1, [r3, #12]
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810625e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106260:	687b      	ldr	r3, [r7, #4]
 8106262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106264:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106266:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810626c:	3b01      	subs	r3, #1
 810626e:	021b      	lsls	r3, r3, #8
 8106270:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106272:	687b      	ldr	r3, [r7, #4]
 8106274:	681b      	ldr	r3, [r3, #0]
 8106276:	430a      	orrs	r2, r1
 8106278:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	681b      	ldr	r3, [r3, #0]
 810627e:	4a1d      	ldr	r2, [pc, #116]	; (81062f4 <HAL_SAI_Init+0x500>)
 8106280:	4293      	cmp	r3, r2
 8106282:	d004      	beq.n	810628e <HAL_SAI_Init+0x49a>
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	4a1b      	ldr	r2, [pc, #108]	; (81062f8 <HAL_SAI_Init+0x504>)
 810628a:	4293      	cmp	r3, r2
 810628c:	d119      	bne.n	81062c2 <HAL_SAI_Init+0x4ce>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810628e:	69bb      	ldr	r3, [r7, #24]
 8106290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106292:	f023 0201 	bic.w	r2, r3, #1
 8106296:	69bb      	ldr	r3, [r7, #24]
 8106298:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 810629a:	687b      	ldr	r3, [r7, #4]
 810629c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81062a0:	2b01      	cmp	r3, #1
 81062a2:	d10e      	bne.n	81062c2 <HAL_SAI_Init+0x4ce>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81062a8:	687b      	ldr	r3, [r7, #4]
 81062aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81062ac:	3b01      	subs	r3, #1
 81062ae:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81062b0:	431a      	orrs	r2, r3
 81062b2:	69bb      	ldr	r3, [r7, #24]
 81062b4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81062b6:	69bb      	ldr	r3, [r7, #24]
 81062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81062ba:	f043 0201 	orr.w	r2, r3, #1
 81062be:	69bb      	ldr	r3, [r7, #24]
 81062c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	2200      	movs	r2, #0
 81062c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	2201      	movs	r2, #1
 81062ce:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	2200      	movs	r2, #0
 81062d6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 81062da:	2300      	movs	r3, #0
}
 81062dc:	4618      	mov	r0, r3
 81062de:	3728      	adds	r7, #40	; 0x28
 81062e0:	46bd      	mov	sp, r7
 81062e2:	bd80      	pop	{r7, pc}
 81062e4:	cccccccd 	.word	0xcccccccd
 81062e8:	f005c010 	.word	0xf005c010
 81062ec:	f805c010 	.word	0xf805c010
 81062f0:	fff88000 	.word	0xfff88000
 81062f4:	40015804 	.word	0x40015804
 81062f8:	58005404 	.word	0x58005404

081062fc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81062fc:	b490      	push	{r4, r7}
 81062fe:	b084      	sub	sp, #16
 8106300:	af00      	add	r7, sp, #0
 8106302:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8106304:	4b15      	ldr	r3, [pc, #84]	; (810635c <SAI_Disable+0x60>)
 8106306:	681b      	ldr	r3, [r3, #0]
 8106308:	4a15      	ldr	r2, [pc, #84]	; (8106360 <SAI_Disable+0x64>)
 810630a:	fba2 2303 	umull	r2, r3, r2, r3
 810630e:	0b1b      	lsrs	r3, r3, #12
 8106310:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8106312:	2300      	movs	r3, #0
 8106314:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106316:	687b      	ldr	r3, [r7, #4]
 8106318:	681b      	ldr	r3, [r3, #0]
 810631a:	681a      	ldr	r2, [r3, #0]
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8106324:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106326:	2c00      	cmp	r4, #0
 8106328:	d10a      	bne.n	8106340 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106330:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 810633a:	2303      	movs	r3, #3
 810633c:	73fb      	strb	r3, [r7, #15]
      break;
 810633e:	e007      	b.n	8106350 <SAI_Disable+0x54>
    }
    count--;
 8106340:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	681b      	ldr	r3, [r3, #0]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810634c:	2b00      	cmp	r3, #0
 810634e:	d1ea      	bne.n	8106326 <SAI_Disable+0x2a>

  return status;
 8106350:	7bfb      	ldrb	r3, [r7, #15]
}
 8106352:	4618      	mov	r0, r3
 8106354:	3710      	adds	r7, #16
 8106356:	46bd      	mov	sp, r7
 8106358:	bc90      	pop	{r4, r7}
 810635a:	4770      	bx	lr
 810635c:	10000000 	.word	0x10000000
 8106360:	95cbec1b 	.word	0x95cbec1b

08106364 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8106364:	b580      	push	{r7, lr}
 8106366:	b08a      	sub	sp, #40	; 0x28
 8106368:	af00      	add	r7, sp, #0
 810636a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	2b00      	cmp	r3, #0
 8106370:	d101      	bne.n	8106376 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8106372:	2301      	movs	r3, #1
 8106374:	e07c      	b.n	8106470 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810637c:	b2db      	uxtb	r3, r3
 810637e:	2b00      	cmp	r3, #0
 8106380:	d10c      	bne.n	810639c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	2200      	movs	r2, #0
 8106386:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	699b      	ldr	r3, [r3, #24]
 810638c:	2b00      	cmp	r3, #0
 810638e:	d102      	bne.n	8106396 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	2202      	movs	r2, #2
 8106394:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8106396:	6878      	ldr	r0, [r7, #4]
 8106398:	f7fb fa22 	bl	81017e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 810639c:	687b      	ldr	r3, [r7, #4]
 810639e:	2203      	movs	r2, #3
 81063a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 81063a4:	6878      	ldr	r0, [r7, #4]
 81063a6:	f000 f867 	bl	8106478 <HAL_SD_InitCard>
 81063aa:	4603      	mov	r3, r0
 81063ac:	2b00      	cmp	r3, #0
 81063ae:	d001      	beq.n	81063b4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 81063b0:	2301      	movs	r3, #1
 81063b2:	e05d      	b.n	8106470 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 81063b4:	f107 0308 	add.w	r3, r7, #8
 81063b8:	4619      	mov	r1, r3
 81063ba:	6878      	ldr	r0, [r7, #4]
 81063bc:	f000 faa0 	bl	8106900 <HAL_SD_GetCardStatus>
 81063c0:	4603      	mov	r3, r0
 81063c2:	2b00      	cmp	r3, #0
 81063c4:	d001      	beq.n	81063ca <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 81063c6:	2301      	movs	r3, #1
 81063c8:	e052      	b.n	8106470 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81063ca:	7e3b      	ldrb	r3, [r7, #24]
 81063cc:	b2db      	uxtb	r3, r3
 81063ce:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 81063d0:	7e7b      	ldrb	r3, [r7, #25]
 81063d2:	b2db      	uxtb	r3, r3
 81063d4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81063da:	2b01      	cmp	r3, #1
 81063dc:	d10a      	bne.n	81063f4 <HAL_SD_Init+0x90>
 81063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063e0:	2b00      	cmp	r3, #0
 81063e2:	d102      	bne.n	81063ea <HAL_SD_Init+0x86>
 81063e4:	6a3b      	ldr	r3, [r7, #32]
 81063e6:	2b00      	cmp	r3, #0
 81063e8:	d004      	beq.n	81063f4 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 81063ea:	687b      	ldr	r3, [r7, #4]
 81063ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 81063f0:	65da      	str	r2, [r3, #92]	; 0x5c
 81063f2:	e00b      	b.n	810640c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81063f8:	2b01      	cmp	r3, #1
 81063fa:	d104      	bne.n	8106406 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8106402:	65da      	str	r2, [r3, #92]	; 0x5c
 8106404:	e002      	b.n	810640c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	2200      	movs	r2, #0
 810640a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	68db      	ldr	r3, [r3, #12]
 8106410:	4619      	mov	r1, r3
 8106412:	6878      	ldr	r0, [r7, #4]
 8106414:	f000 fb2a 	bl	8106a6c <HAL_SD_ConfigWideBusOperation>
 8106418:	4603      	mov	r3, r0
 810641a:	2b00      	cmp	r3, #0
 810641c:	d001      	beq.n	8106422 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 810641e:	2301      	movs	r3, #1
 8106420:	e026      	b.n	8106470 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8106422:	f7fb ff67 	bl	81022f4 <HAL_GetTick>
 8106426:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8106428:	e011      	b.n	810644e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 810642a:	f7fb ff63 	bl	81022f4 <HAL_GetTick>
 810642e:	4602      	mov	r2, r0
 8106430:	69fb      	ldr	r3, [r7, #28]
 8106432:	1ad3      	subs	r3, r2, r3
 8106434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106438:	d109      	bne.n	810644e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8106440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	2201      	movs	r2, #1
 8106446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 810644a:	2303      	movs	r3, #3
 810644c:	e010      	b.n	8106470 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810644e:	6878      	ldr	r0, [r7, #4]
 8106450:	f000 fbb6 	bl	8106bc0 <HAL_SD_GetCardState>
 8106454:	4603      	mov	r3, r0
 8106456:	2b04      	cmp	r3, #4
 8106458:	d1e7      	bne.n	810642a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	2200      	movs	r2, #0
 810645e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	2200      	movs	r2, #0
 8106464:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	2201      	movs	r2, #1
 810646a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 810646e:	2300      	movs	r3, #0
}
 8106470:	4618      	mov	r0, r3
 8106472:	3728      	adds	r7, #40	; 0x28
 8106474:	46bd      	mov	sp, r7
 8106476:	bd80      	pop	{r7, pc}

08106478 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8106478:	b5b0      	push	{r4, r5, r7, lr}
 810647a:	b08e      	sub	sp, #56	; 0x38
 810647c:	af04      	add	r7, sp, #16
 810647e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8106480:	2300      	movs	r3, #0
 8106482:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8106484:	2300      	movs	r3, #0
 8106486:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8106488:	2300      	movs	r3, #0
 810648a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 810648c:	2300      	movs	r3, #0
 810648e:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8106490:	23fa      	movs	r3, #250	; 0xfa
 8106492:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	699b      	ldr	r3, [r3, #24]
 8106498:	2b02      	cmp	r3, #2
 810649a:	d107      	bne.n	81064ac <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	681a      	ldr	r2, [r3, #0]
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	681b      	ldr	r3, [r3, #0]
 81064a6:	f042 0210 	orr.w	r2, r2, #16
 81064aa:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681d      	ldr	r5, [r3, #0]
 81064b0:	466c      	mov	r4, sp
 81064b2:	f107 0314 	add.w	r3, r7, #20
 81064b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81064ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81064be:	f107 0308 	add.w	r3, r7, #8
 81064c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 81064c4:	4628      	mov	r0, r5
 81064c6:	f004 fdd7 	bl	810b078 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	4618      	mov	r0, r3
 81064d0:	f004 fe09 	bl	810b0e6 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 81064d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 81064d8:	f7fe fc50 	bl	8104d7c <HAL_RCCEx_GetPeriphCLKFreq>
 81064dc:	4602      	mov	r2, r0
 81064de:	4b2d      	ldr	r3, [pc, #180]	; (8106594 <HAL_SD_InitCard+0x11c>)
 81064e0:	fba3 2302 	umull	r2, r3, r3, r2
 81064e4:	095b      	lsrs	r3, r3, #5
 81064e6:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 81064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81064ea:	2b00      	cmp	r3, #0
 81064ec:	d008      	beq.n	8106500 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 81064ee:	4a2a      	ldr	r2, [pc, #168]	; (8106598 <HAL_SD_InitCard+0x120>)
 81064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81064f2:	fbb2 f3f3 	udiv	r3, r2, r3
 81064f6:	3301      	adds	r3, #1
 81064f8:	4618      	mov	r0, r3
 81064fa:	f7fb ff07 	bl	810230c <HAL_Delay>
 81064fe:	e002      	b.n	8106506 <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8106500:	2002      	movs	r0, #2
 8106502:	f7fb ff03 	bl	810230c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8106506:	6878      	ldr	r0, [r7, #4]
 8106508:	f000 fc38 	bl	8106d7c <SD_PowerON>
 810650c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 810650e:	6a3b      	ldr	r3, [r7, #32]
 8106510:	2b00      	cmp	r3, #0
 8106512:	d00b      	beq.n	810652c <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	2201      	movs	r2, #1
 8106518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106520:	6a3b      	ldr	r3, [r7, #32]
 8106522:	431a      	orrs	r2, r3
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8106528:	2301      	movs	r3, #1
 810652a:	e02e      	b.n	810658a <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 810652c:	6878      	ldr	r0, [r7, #4]
 810652e:	f000 fb67 	bl	8106c00 <SD_InitCard>
 8106532:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8106534:	6a3b      	ldr	r3, [r7, #32]
 8106536:	2b00      	cmp	r3, #0
 8106538:	d00b      	beq.n	8106552 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	2201      	movs	r2, #1
 810653e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106546:	6a3b      	ldr	r3, [r7, #32]
 8106548:	431a      	orrs	r2, r3
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810654e:	2301      	movs	r3, #1
 8106550:	e01b      	b.n	810658a <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8106552:	687b      	ldr	r3, [r7, #4]
 8106554:	681b      	ldr	r3, [r3, #0]
 8106556:	f44f 7100 	mov.w	r1, #512	; 0x200
 810655a:	4618      	mov	r0, r3
 810655c:	f004 fe58 	bl	810b210 <SDMMC_CmdBlockLength>
 8106560:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8106562:	6a3b      	ldr	r3, [r7, #32]
 8106564:	2b00      	cmp	r3, #0
 8106566:	d00f      	beq.n	8106588 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	681b      	ldr	r3, [r3, #0]
 810656c:	4a0b      	ldr	r2, [pc, #44]	; (810659c <HAL_SD_InitCard+0x124>)
 810656e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106574:	6a3b      	ldr	r3, [r7, #32]
 8106576:	431a      	orrs	r2, r3
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	2201      	movs	r2, #1
 8106580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8106584:	2301      	movs	r3, #1
 8106586:	e000      	b.n	810658a <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8106588:	2300      	movs	r3, #0
}
 810658a:	4618      	mov	r0, r3
 810658c:	3728      	adds	r7, #40	; 0x28
 810658e:	46bd      	mov	sp, r7
 8106590:	bdb0      	pop	{r4, r5, r7, pc}
 8106592:	bf00      	nop
 8106594:	10624dd3 	.word	0x10624dd3
 8106598:	00012110 	.word	0x00012110
 810659c:	1fe00fff 	.word	0x1fe00fff

081065a0 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 81065a0:	b480      	push	{r7}
 81065a2:	b083      	sub	sp, #12
 81065a4:	af00      	add	r7, sp, #0
 81065a6:	4603      	mov	r3, r0
 81065a8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 81065aa:	bf00      	nop
 81065ac:	370c      	adds	r7, #12
 81065ae:	46bd      	mov	sp, r7
 81065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065b4:	4770      	bx	lr
	...

081065b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 81065b8:	b480      	push	{r7}
 81065ba:	b083      	sub	sp, #12
 81065bc:	af00      	add	r7, sp, #0
 81065be:	6078      	str	r0, [r7, #4]
 81065c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 81065c2:	687b      	ldr	r3, [r7, #4]
 81065c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81065c6:	0f9b      	lsrs	r3, r3, #30
 81065c8:	b2da      	uxtb	r2, r3
 81065ca:	683b      	ldr	r3, [r7, #0]
 81065cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81065d2:	0e9b      	lsrs	r3, r3, #26
 81065d4:	b2db      	uxtb	r3, r3
 81065d6:	f003 030f 	and.w	r3, r3, #15
 81065da:	b2da      	uxtb	r2, r3
 81065dc:	683b      	ldr	r3, [r7, #0]
 81065de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81065e4:	0e1b      	lsrs	r3, r3, #24
 81065e6:	b2db      	uxtb	r3, r3
 81065e8:	f003 0303 	and.w	r3, r3, #3
 81065ec:	b2da      	uxtb	r2, r3
 81065ee:	683b      	ldr	r3, [r7, #0]
 81065f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 81065f2:	687b      	ldr	r3, [r7, #4]
 81065f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81065f6:	0c1b      	lsrs	r3, r3, #16
 81065f8:	b2da      	uxtb	r2, r3
 81065fa:	683b      	ldr	r3, [r7, #0]
 81065fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106602:	0a1b      	lsrs	r3, r3, #8
 8106604:	b2da      	uxtb	r2, r3
 8106606:	683b      	ldr	r3, [r7, #0]
 8106608:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810660e:	b2da      	uxtb	r2, r3
 8106610:	683b      	ldr	r3, [r7, #0]
 8106612:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106618:	0d1b      	lsrs	r3, r3, #20
 810661a:	b29a      	uxth	r2, r3
 810661c:	683b      	ldr	r3, [r7, #0]
 810661e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106624:	0c1b      	lsrs	r3, r3, #16
 8106626:	b2db      	uxtb	r3, r3
 8106628:	f003 030f 	and.w	r3, r3, #15
 810662c:	b2da      	uxtb	r2, r3
 810662e:	683b      	ldr	r3, [r7, #0]
 8106630:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106636:	0bdb      	lsrs	r3, r3, #15
 8106638:	b2db      	uxtb	r3, r3
 810663a:	f003 0301 	and.w	r3, r3, #1
 810663e:	b2da      	uxtb	r2, r3
 8106640:	683b      	ldr	r3, [r7, #0]
 8106642:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106648:	0b9b      	lsrs	r3, r3, #14
 810664a:	b2db      	uxtb	r3, r3
 810664c:	f003 0301 	and.w	r3, r3, #1
 8106650:	b2da      	uxtb	r2, r3
 8106652:	683b      	ldr	r3, [r7, #0]
 8106654:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810665a:	0b5b      	lsrs	r3, r3, #13
 810665c:	b2db      	uxtb	r3, r3
 810665e:	f003 0301 	and.w	r3, r3, #1
 8106662:	b2da      	uxtb	r2, r3
 8106664:	683b      	ldr	r3, [r7, #0]
 8106666:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810666c:	0b1b      	lsrs	r3, r3, #12
 810666e:	b2db      	uxtb	r3, r3
 8106670:	f003 0301 	and.w	r3, r3, #1
 8106674:	b2da      	uxtb	r2, r3
 8106676:	683b      	ldr	r3, [r7, #0]
 8106678:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810667a:	683b      	ldr	r3, [r7, #0]
 810667c:	2200      	movs	r2, #0
 810667e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106684:	2b00      	cmp	r3, #0
 8106686:	d163      	bne.n	8106750 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8106688:	687b      	ldr	r3, [r7, #4]
 810668a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810668c:	009a      	lsls	r2, r3, #2
 810668e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8106692:	4013      	ands	r3, r2
 8106694:	687a      	ldr	r2, [r7, #4]
 8106696:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8106698:	0f92      	lsrs	r2, r2, #30
 810669a:	431a      	orrs	r2, r3
 810669c:	683b      	ldr	r3, [r7, #0]
 810669e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81066a4:	0edb      	lsrs	r3, r3, #27
 81066a6:	b2db      	uxtb	r3, r3
 81066a8:	f003 0307 	and.w	r3, r3, #7
 81066ac:	b2da      	uxtb	r2, r3
 81066ae:	683b      	ldr	r3, [r7, #0]
 81066b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81066b6:	0e1b      	lsrs	r3, r3, #24
 81066b8:	b2db      	uxtb	r3, r3
 81066ba:	f003 0307 	and.w	r3, r3, #7
 81066be:	b2da      	uxtb	r2, r3
 81066c0:	683b      	ldr	r3, [r7, #0]
 81066c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81066c8:	0d5b      	lsrs	r3, r3, #21
 81066ca:	b2db      	uxtb	r3, r3
 81066cc:	f003 0307 	and.w	r3, r3, #7
 81066d0:	b2da      	uxtb	r2, r3
 81066d2:	683b      	ldr	r3, [r7, #0]
 81066d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81066da:	0c9b      	lsrs	r3, r3, #18
 81066dc:	b2db      	uxtb	r3, r3
 81066de:	f003 0307 	and.w	r3, r3, #7
 81066e2:	b2da      	uxtb	r2, r3
 81066e4:	683b      	ldr	r3, [r7, #0]
 81066e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81066ec:	0bdb      	lsrs	r3, r3, #15
 81066ee:	b2db      	uxtb	r3, r3
 81066f0:	f003 0307 	and.w	r3, r3, #7
 81066f4:	b2da      	uxtb	r2, r3
 81066f6:	683b      	ldr	r3, [r7, #0]
 81066f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 81066fa:	683b      	ldr	r3, [r7, #0]
 81066fc:	691b      	ldr	r3, [r3, #16]
 81066fe:	1c5a      	adds	r2, r3, #1
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8106704:	683b      	ldr	r3, [r7, #0]
 8106706:	7e1b      	ldrb	r3, [r3, #24]
 8106708:	b2db      	uxtb	r3, r3
 810670a:	f003 0307 	and.w	r3, r3, #7
 810670e:	3302      	adds	r3, #2
 8106710:	2201      	movs	r2, #1
 8106712:	fa02 f303 	lsl.w	r3, r2, r3
 8106716:	687a      	ldr	r2, [r7, #4]
 8106718:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 810671a:	fb02 f203 	mul.w	r2, r2, r3
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8106722:	683b      	ldr	r3, [r7, #0]
 8106724:	7a1b      	ldrb	r3, [r3, #8]
 8106726:	b2db      	uxtb	r3, r3
 8106728:	f003 030f 	and.w	r3, r3, #15
 810672c:	2201      	movs	r2, #1
 810672e:	409a      	lsls	r2, r3
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106738:	687a      	ldr	r2, [r7, #4]
 810673a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 810673c:	0a52      	lsrs	r2, r2, #9
 810673e:	fb02 f203 	mul.w	r2, r2, r3
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8106746:	687b      	ldr	r3, [r7, #4]
 8106748:	f44f 7200 	mov.w	r2, #512	; 0x200
 810674c:	659a      	str	r2, [r3, #88]	; 0x58
 810674e:	e031      	b.n	81067b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106754:	2b01      	cmp	r3, #1
 8106756:	d11d      	bne.n	8106794 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810675c:	041b      	lsls	r3, r3, #16
 810675e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106766:	0c1b      	lsrs	r3, r3, #16
 8106768:	431a      	orrs	r2, r3
 810676a:	683b      	ldr	r3, [r7, #0]
 810676c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 810676e:	683b      	ldr	r3, [r7, #0]
 8106770:	691b      	ldr	r3, [r3, #16]
 8106772:	3301      	adds	r3, #1
 8106774:	029a      	lsls	r2, r3, #10
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106788:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	659a      	str	r2, [r3, #88]	; 0x58
 8106792:	e00f      	b.n	81067b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	681b      	ldr	r3, [r3, #0]
 8106798:	4a58      	ldr	r2, [pc, #352]	; (81068fc <HAL_SD_GetCardCSD+0x344>)
 810679a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810679c:	687b      	ldr	r3, [r7, #4]
 810679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81067a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 81067a8:	687b      	ldr	r3, [r7, #4]
 81067aa:	2201      	movs	r2, #1
 81067ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81067b0:	2301      	movs	r3, #1
 81067b2:	e09d      	b.n	81068f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 81067b4:	687b      	ldr	r3, [r7, #4]
 81067b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81067b8:	0b9b      	lsrs	r3, r3, #14
 81067ba:	b2db      	uxtb	r3, r3
 81067bc:	f003 0301 	and.w	r3, r3, #1
 81067c0:	b2da      	uxtb	r2, r3
 81067c2:	683b      	ldr	r3, [r7, #0]
 81067c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81067ca:	09db      	lsrs	r3, r3, #7
 81067cc:	b2db      	uxtb	r3, r3
 81067ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81067d2:	b2da      	uxtb	r2, r3
 81067d4:	683b      	ldr	r3, [r7, #0]
 81067d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81067dc:	b2db      	uxtb	r3, r3
 81067de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81067e2:	b2da      	uxtb	r2, r3
 81067e4:	683b      	ldr	r3, [r7, #0]
 81067e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81067ec:	0fdb      	lsrs	r3, r3, #31
 81067ee:	b2da      	uxtb	r2, r3
 81067f0:	683b      	ldr	r3, [r7, #0]
 81067f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81067f8:	0f5b      	lsrs	r3, r3, #29
 81067fa:	b2db      	uxtb	r3, r3
 81067fc:	f003 0303 	and.w	r3, r3, #3
 8106800:	b2da      	uxtb	r2, r3
 8106802:	683b      	ldr	r3, [r7, #0]
 8106804:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810680a:	0e9b      	lsrs	r3, r3, #26
 810680c:	b2db      	uxtb	r3, r3
 810680e:	f003 0307 	and.w	r3, r3, #7
 8106812:	b2da      	uxtb	r2, r3
 8106814:	683b      	ldr	r3, [r7, #0]
 8106816:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810681c:	0d9b      	lsrs	r3, r3, #22
 810681e:	b2db      	uxtb	r3, r3
 8106820:	f003 030f 	and.w	r3, r3, #15
 8106824:	b2da      	uxtb	r2, r3
 8106826:	683b      	ldr	r3, [r7, #0]
 8106828:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 810682a:	687b      	ldr	r3, [r7, #4]
 810682c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810682e:	0d5b      	lsrs	r3, r3, #21
 8106830:	b2db      	uxtb	r3, r3
 8106832:	f003 0301 	and.w	r3, r3, #1
 8106836:	b2da      	uxtb	r2, r3
 8106838:	683b      	ldr	r3, [r7, #0]
 810683a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 810683e:	683b      	ldr	r3, [r7, #0]
 8106840:	2200      	movs	r2, #0
 8106842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810684a:	0c1b      	lsrs	r3, r3, #16
 810684c:	b2db      	uxtb	r3, r3
 810684e:	f003 0301 	and.w	r3, r3, #1
 8106852:	b2da      	uxtb	r2, r3
 8106854:	683b      	ldr	r3, [r7, #0]
 8106856:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810685e:	0bdb      	lsrs	r3, r3, #15
 8106860:	b2db      	uxtb	r3, r3
 8106862:	f003 0301 	and.w	r3, r3, #1
 8106866:	b2da      	uxtb	r2, r3
 8106868:	683b      	ldr	r3, [r7, #0]
 810686a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106872:	0b9b      	lsrs	r3, r3, #14
 8106874:	b2db      	uxtb	r3, r3
 8106876:	f003 0301 	and.w	r3, r3, #1
 810687a:	b2da      	uxtb	r2, r3
 810687c:	683b      	ldr	r3, [r7, #0]
 810687e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106886:	0b5b      	lsrs	r3, r3, #13
 8106888:	b2db      	uxtb	r3, r3
 810688a:	f003 0301 	and.w	r3, r3, #1
 810688e:	b2da      	uxtb	r2, r3
 8106890:	683b      	ldr	r3, [r7, #0]
 8106892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810689a:	0b1b      	lsrs	r3, r3, #12
 810689c:	b2db      	uxtb	r3, r3
 810689e:	f003 0301 	and.w	r3, r3, #1
 81068a2:	b2da      	uxtb	r2, r3
 81068a4:	683b      	ldr	r3, [r7, #0]
 81068a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81068ae:	0a9b      	lsrs	r3, r3, #10
 81068b0:	b2db      	uxtb	r3, r3
 81068b2:	f003 0303 	and.w	r3, r3, #3
 81068b6:	b2da      	uxtb	r2, r3
 81068b8:	683b      	ldr	r3, [r7, #0]
 81068ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 81068be:	687b      	ldr	r3, [r7, #4]
 81068c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81068c2:	0a1b      	lsrs	r3, r3, #8
 81068c4:	b2db      	uxtb	r3, r3
 81068c6:	f003 0303 	and.w	r3, r3, #3
 81068ca:	b2da      	uxtb	r2, r3
 81068cc:	683b      	ldr	r3, [r7, #0]
 81068ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 81068d2:	687b      	ldr	r3, [r7, #4]
 81068d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81068d6:	085b      	lsrs	r3, r3, #1
 81068d8:	b2db      	uxtb	r3, r3
 81068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81068de:	b2da      	uxtb	r2, r3
 81068e0:	683b      	ldr	r3, [r7, #0]
 81068e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 81068e6:	683b      	ldr	r3, [r7, #0]
 81068e8:	2201      	movs	r2, #1
 81068ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 81068ee:	2300      	movs	r3, #0
}
 81068f0:	4618      	mov	r0, r3
 81068f2:	370c      	adds	r7, #12
 81068f4:	46bd      	mov	sp, r7
 81068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068fa:	4770      	bx	lr
 81068fc:	1fe00fff 	.word	0x1fe00fff

08106900 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8106900:	b580      	push	{r7, lr}
 8106902:	b094      	sub	sp, #80	; 0x50
 8106904:	af00      	add	r7, sp, #0
 8106906:	6078      	str	r0, [r7, #4]
 8106908:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 810690a:	2300      	movs	r3, #0
 810690c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8106910:	f107 0308 	add.w	r3, r7, #8
 8106914:	4619      	mov	r1, r3
 8106916:	6878      	ldr	r0, [r7, #4]
 8106918:	f000 fb38 	bl	8106f8c <SD_SendSDStatus>
 810691c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 810691e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106920:	2b00      	cmp	r3, #0
 8106922:	d011      	beq.n	8106948 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	681b      	ldr	r3, [r3, #0]
 8106928:	4a4f      	ldr	r2, [pc, #316]	; (8106a68 <HAL_SD_GetCardStatus+0x168>)
 810692a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810692c:	687b      	ldr	r3, [r7, #4]
 810692e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106932:	431a      	orrs	r2, r3
 8106934:	687b      	ldr	r3, [r7, #4]
 8106936:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	2201      	movs	r2, #1
 810693c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8106940:	2301      	movs	r3, #1
 8106942:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8106946:	e070      	b.n	8106a2a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8106948:	68bb      	ldr	r3, [r7, #8]
 810694a:	099b      	lsrs	r3, r3, #6
 810694c:	b2db      	uxtb	r3, r3
 810694e:	f003 0303 	and.w	r3, r3, #3
 8106952:	b2da      	uxtb	r2, r3
 8106954:	683b      	ldr	r3, [r7, #0]
 8106956:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8106958:	68bb      	ldr	r3, [r7, #8]
 810695a:	095b      	lsrs	r3, r3, #5
 810695c:	b2db      	uxtb	r3, r3
 810695e:	f003 0301 	and.w	r3, r3, #1
 8106962:	b2da      	uxtb	r2, r3
 8106964:	683b      	ldr	r3, [r7, #0]
 8106966:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8106968:	68bb      	ldr	r3, [r7, #8]
 810696a:	0a1b      	lsrs	r3, r3, #8
 810696c:	b29b      	uxth	r3, r3
 810696e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8106972:	b29a      	uxth	r2, r3
 8106974:	68bb      	ldr	r3, [r7, #8]
 8106976:	0e1b      	lsrs	r3, r3, #24
 8106978:	b29b      	uxth	r3, r3
 810697a:	4313      	orrs	r3, r2
 810697c:	b29a      	uxth	r2, r3
 810697e:	683b      	ldr	r3, [r7, #0]
 8106980:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8106982:	68fb      	ldr	r3, [r7, #12]
 8106984:	061a      	lsls	r2, r3, #24
 8106986:	68fb      	ldr	r3, [r7, #12]
 8106988:	021b      	lsls	r3, r3, #8
 810698a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810698e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8106990:	68fb      	ldr	r3, [r7, #12]
 8106992:	0a1b      	lsrs	r3, r3, #8
 8106994:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8106998:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810699a:	68fb      	ldr	r3, [r7, #12]
 810699c:	0e1b      	lsrs	r3, r3, #24
 810699e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 81069a0:	683b      	ldr	r3, [r7, #0]
 81069a2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 81069a4:	693b      	ldr	r3, [r7, #16]
 81069a6:	b2da      	uxtb	r2, r3
 81069a8:	683b      	ldr	r3, [r7, #0]
 81069aa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 81069ac:	693b      	ldr	r3, [r7, #16]
 81069ae:	0a1b      	lsrs	r3, r3, #8
 81069b0:	b2da      	uxtb	r2, r3
 81069b2:	683b      	ldr	r3, [r7, #0]
 81069b4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 81069b6:	693b      	ldr	r3, [r7, #16]
 81069b8:	0d1b      	lsrs	r3, r3, #20
 81069ba:	b2db      	uxtb	r3, r3
 81069bc:	f003 030f 	and.w	r3, r3, #15
 81069c0:	b2da      	uxtb	r2, r3
 81069c2:	683b      	ldr	r3, [r7, #0]
 81069c4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 81069c6:	693b      	ldr	r3, [r7, #16]
 81069c8:	0c1b      	lsrs	r3, r3, #16
 81069ca:	b29b      	uxth	r3, r3
 81069cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 81069d0:	b29a      	uxth	r2, r3
 81069d2:	697b      	ldr	r3, [r7, #20]
 81069d4:	b29b      	uxth	r3, r3
 81069d6:	b2db      	uxtb	r3, r3
 81069d8:	b29b      	uxth	r3, r3
 81069da:	4313      	orrs	r3, r2
 81069dc:	b29a      	uxth	r2, r3
 81069de:	683b      	ldr	r3, [r7, #0]
 81069e0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 81069e2:	697b      	ldr	r3, [r7, #20]
 81069e4:	0a9b      	lsrs	r3, r3, #10
 81069e6:	b2db      	uxtb	r3, r3
 81069e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81069ec:	b2da      	uxtb	r2, r3
 81069ee:	683b      	ldr	r3, [r7, #0]
 81069f0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 81069f2:	697b      	ldr	r3, [r7, #20]
 81069f4:	0a1b      	lsrs	r3, r3, #8
 81069f6:	b2db      	uxtb	r3, r3
 81069f8:	f003 0303 	and.w	r3, r3, #3
 81069fc:	b2da      	uxtb	r2, r3
 81069fe:	683b      	ldr	r3, [r7, #0]
 8106a00:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8106a02:	697b      	ldr	r3, [r7, #20]
 8106a04:	091b      	lsrs	r3, r3, #4
 8106a06:	b2db      	uxtb	r3, r3
 8106a08:	f003 030f 	and.w	r3, r3, #15
 8106a0c:	b2da      	uxtb	r2, r3
 8106a0e:	683b      	ldr	r3, [r7, #0]
 8106a10:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8106a12:	697b      	ldr	r3, [r7, #20]
 8106a14:	b2db      	uxtb	r3, r3
 8106a16:	f003 030f 	and.w	r3, r3, #15
 8106a1a:	b2da      	uxtb	r2, r3
 8106a1c:	683b      	ldr	r3, [r7, #0]
 8106a1e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8106a20:	69bb      	ldr	r3, [r7, #24]
 8106a22:	0e1b      	lsrs	r3, r3, #24
 8106a24:	b2da      	uxtb	r2, r3
 8106a26:	683b      	ldr	r3, [r7, #0]
 8106a28:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8106a2a:	687b      	ldr	r3, [r7, #4]
 8106a2c:	681b      	ldr	r3, [r3, #0]
 8106a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8106a32:	4618      	mov	r0, r3
 8106a34:	f004 fbec 	bl	810b210 <SDMMC_CmdBlockLength>
 8106a38:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8106a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106a3c:	2b00      	cmp	r3, #0
 8106a3e:	d00d      	beq.n	8106a5c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	4a08      	ldr	r2, [pc, #32]	; (8106a68 <HAL_SD_GetCardStatus+0x168>)
 8106a46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106a4c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	2201      	movs	r2, #1
 8106a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8106a56:	2301      	movs	r3, #1
 8106a58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8106a5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8106a60:	4618      	mov	r0, r3
 8106a62:	3750      	adds	r7, #80	; 0x50
 8106a64:	46bd      	mov	sp, r7
 8106a66:	bd80      	pop	{r7, pc}
 8106a68:	1fe00fff 	.word	0x1fe00fff

08106a6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8106a6c:	b5b0      	push	{r4, r5, r7, lr}
 8106a6e:	b08e      	sub	sp, #56	; 0x38
 8106a70:	af04      	add	r7, sp, #16
 8106a72:	6078      	str	r0, [r7, #4]
 8106a74:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8106a76:	2300      	movs	r3, #0
 8106a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	2203      	movs	r2, #3
 8106a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106a88:	2b03      	cmp	r3, #3
 8106a8a:	d02e      	beq.n	8106aea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8106a8c:	683b      	ldr	r3, [r7, #0]
 8106a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106a92:	d106      	bne.n	8106aa2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106a98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	639a      	str	r2, [r3, #56]	; 0x38
 8106aa0:	e029      	b.n	8106af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8106aa2:	683b      	ldr	r3, [r7, #0]
 8106aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106aa8:	d10a      	bne.n	8106ac0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8106aaa:	6878      	ldr	r0, [r7, #4]
 8106aac:	f000 fb66 	bl	810717c <SD_WideBus_Enable>
 8106ab0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8106ab2:	687b      	ldr	r3, [r7, #4]
 8106ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106ab6:	6a3b      	ldr	r3, [r7, #32]
 8106ab8:	431a      	orrs	r2, r3
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	639a      	str	r2, [r3, #56]	; 0x38
 8106abe:	e01a      	b.n	8106af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8106ac0:	683b      	ldr	r3, [r7, #0]
 8106ac2:	2b00      	cmp	r3, #0
 8106ac4:	d10a      	bne.n	8106adc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8106ac6:	6878      	ldr	r0, [r7, #4]
 8106ac8:	f000 fba3 	bl	8107212 <SD_WideBus_Disable>
 8106acc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8106ace:	687b      	ldr	r3, [r7, #4]
 8106ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106ad2:	6a3b      	ldr	r3, [r7, #32]
 8106ad4:	431a      	orrs	r2, r3
 8106ad6:	687b      	ldr	r3, [r7, #4]
 8106ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8106ada:	e00c      	b.n	8106af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8106adc:	687b      	ldr	r3, [r7, #4]
 8106ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ae0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8106ae8:	e005      	b.n	8106af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106aee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8106af6:	687b      	ldr	r3, [r7, #4]
 8106af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106afa:	2b00      	cmp	r3, #0
 8106afc:	d007      	beq.n	8106b0e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	681b      	ldr	r3, [r3, #0]
 8106b02:	4a2e      	ldr	r2, [pc, #184]	; (8106bbc <HAL_SD_ConfigWideBusOperation+0x150>)
 8106b04:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8106b06:	2301      	movs	r3, #1
 8106b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8106b0c:	e034      	b.n	8106b78 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8106b0e:	687b      	ldr	r3, [r7, #4]
 8106b10:	685b      	ldr	r3, [r3, #4]
 8106b12:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	689b      	ldr	r3, [r3, #8]
 8106b18:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8106b1a:	683b      	ldr	r3, [r7, #0]
 8106b1c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8106b1e:	687b      	ldr	r3, [r7, #4]
 8106b20:	691b      	ldr	r3, [r3, #16]
 8106b22:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8106b24:	687b      	ldr	r3, [r7, #4]
 8106b26:	695b      	ldr	r3, [r3, #20]
 8106b28:	2b03      	cmp	r3, #3
 8106b2a:	d903      	bls.n	8106b34 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	695b      	ldr	r3, [r3, #20]
 8106b30:	61bb      	str	r3, [r7, #24]
 8106b32:	e012      	b.n	8106b5a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b3c:	d103      	bne.n	8106b46 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	695b      	ldr	r3, [r3, #20]
 8106b42:	61bb      	str	r3, [r7, #24]
 8106b44:	e009      	b.n	8106b5a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b4e:	d102      	bne.n	8106b56 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8106b50:	2302      	movs	r3, #2
 8106b52:	61bb      	str	r3, [r7, #24]
 8106b54:	e001      	b.n	8106b5a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8106b56:	2304      	movs	r3, #4
 8106b58:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8106b5a:	687b      	ldr	r3, [r7, #4]
 8106b5c:	681d      	ldr	r5, [r3, #0]
 8106b5e:	466c      	mov	r4, sp
 8106b60:	f107 0314 	add.w	r3, r7, #20
 8106b64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8106b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8106b6c:	f107 0308 	add.w	r3, r7, #8
 8106b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8106b72:	4628      	mov	r0, r5
 8106b74:	f004 fa80 	bl	810b078 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	681b      	ldr	r3, [r3, #0]
 8106b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8106b80:	4618      	mov	r0, r3
 8106b82:	f004 fb45 	bl	810b210 <SDMMC_CmdBlockLength>
 8106b86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8106b88:	6a3b      	ldr	r3, [r7, #32]
 8106b8a:	2b00      	cmp	r3, #0
 8106b8c:	d00c      	beq.n	8106ba8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106b8e:	687b      	ldr	r3, [r7, #4]
 8106b90:	681b      	ldr	r3, [r3, #0]
 8106b92:	4a0a      	ldr	r2, [pc, #40]	; (8106bbc <HAL_SD_ConfigWideBusOperation+0x150>)
 8106b94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106b9a:	6a3b      	ldr	r3, [r7, #32]
 8106b9c:	431a      	orrs	r2, r3
 8106b9e:	687b      	ldr	r3, [r7, #4]
 8106ba0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8106ba2:	2301      	movs	r3, #1
 8106ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	2201      	movs	r2, #1
 8106bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8106bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8106bb4:	4618      	mov	r0, r3
 8106bb6:	3728      	adds	r7, #40	; 0x28
 8106bb8:	46bd      	mov	sp, r7
 8106bba:	bdb0      	pop	{r4, r5, r7, pc}
 8106bbc:	1fe00fff 	.word	0x1fe00fff

08106bc0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8106bc0:	b580      	push	{r7, lr}
 8106bc2:	b086      	sub	sp, #24
 8106bc4:	af00      	add	r7, sp, #0
 8106bc6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8106bc8:	2300      	movs	r3, #0
 8106bca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8106bcc:	f107 030c 	add.w	r3, r7, #12
 8106bd0:	4619      	mov	r1, r3
 8106bd2:	6878      	ldr	r0, [r7, #4]
 8106bd4:	f000 faaa 	bl	810712c <SD_SendStatus>
 8106bd8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8106bda:	697b      	ldr	r3, [r7, #20]
 8106bdc:	2b00      	cmp	r3, #0
 8106bde:	d005      	beq.n	8106bec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8106be0:	687b      	ldr	r3, [r7, #4]
 8106be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106be4:	697b      	ldr	r3, [r7, #20]
 8106be6:	431a      	orrs	r2, r3
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8106bec:	68fb      	ldr	r3, [r7, #12]
 8106bee:	0a5b      	lsrs	r3, r3, #9
 8106bf0:	f003 030f 	and.w	r3, r3, #15
 8106bf4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8106bf6:	693b      	ldr	r3, [r7, #16]
}
 8106bf8:	4618      	mov	r0, r3
 8106bfa:	3718      	adds	r7, #24
 8106bfc:	46bd      	mov	sp, r7
 8106bfe:	bd80      	pop	{r7, pc}

08106c00 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8106c00:	b590      	push	{r4, r7, lr}
 8106c02:	b091      	sub	sp, #68	; 0x44
 8106c04:	af00      	add	r7, sp, #0
 8106c06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8106c08:	2301      	movs	r3, #1
 8106c0a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	681b      	ldr	r3, [r3, #0]
 8106c10:	4618      	mov	r0, r3
 8106c12:	f004 fa79 	bl	810b108 <SDMMC_GetPowerState>
 8106c16:	4603      	mov	r3, r0
 8106c18:	2b00      	cmp	r3, #0
 8106c1a:	d102      	bne.n	8106c22 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8106c1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8106c20:	e0a8      	b.n	8106d74 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106c26:	2b03      	cmp	r3, #3
 8106c28:	d02e      	beq.n	8106c88 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	681b      	ldr	r3, [r3, #0]
 8106c2e:	4618      	mov	r0, r3
 8106c30:	f004 fbfb 	bl	810b42a <SDMMC_CmdSendCID>
 8106c34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8106c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106c38:	2b00      	cmp	r3, #0
 8106c3a:	d001      	beq.n	8106c40 <SD_InitCard+0x40>
    {
      return errorstate;
 8106c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106c3e:	e099      	b.n	8106d74 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	681b      	ldr	r3, [r3, #0]
 8106c44:	2100      	movs	r1, #0
 8106c46:	4618      	mov	r0, r3
 8106c48:	f004 faa3 	bl	810b192 <SDMMC_GetResponse>
 8106c4c:	4602      	mov	r2, r0
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	2104      	movs	r1, #4
 8106c58:	4618      	mov	r0, r3
 8106c5a:	f004 fa9a 	bl	810b192 <SDMMC_GetResponse>
 8106c5e:	4602      	mov	r2, r0
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8106c64:	687b      	ldr	r3, [r7, #4]
 8106c66:	681b      	ldr	r3, [r3, #0]
 8106c68:	2108      	movs	r1, #8
 8106c6a:	4618      	mov	r0, r3
 8106c6c:	f004 fa91 	bl	810b192 <SDMMC_GetResponse>
 8106c70:	4602      	mov	r2, r0
 8106c72:	687b      	ldr	r3, [r7, #4]
 8106c74:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	681b      	ldr	r3, [r3, #0]
 8106c7a:	210c      	movs	r1, #12
 8106c7c:	4618      	mov	r0, r3
 8106c7e:	f004 fa88 	bl	810b192 <SDMMC_GetResponse>
 8106c82:	4602      	mov	r2, r0
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106c8c:	2b03      	cmp	r3, #3
 8106c8e:	d00d      	beq.n	8106cac <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	681b      	ldr	r3, [r3, #0]
 8106c94:	f107 020e 	add.w	r2, r7, #14
 8106c98:	4611      	mov	r1, r2
 8106c9a:	4618      	mov	r0, r3
 8106c9c:	f004 fc04 	bl	810b4a8 <SDMMC_CmdSetRelAdd>
 8106ca0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8106ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106ca4:	2b00      	cmp	r3, #0
 8106ca6:	d001      	beq.n	8106cac <SD_InitCard+0xac>
    {
      return errorstate;
 8106ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106caa:	e063      	b.n	8106d74 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106cb0:	2b03      	cmp	r3, #3
 8106cb2:	d036      	beq.n	8106d22 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8106cb4:	89fb      	ldrh	r3, [r7, #14]
 8106cb6:	461a      	mov	r2, r3
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	681a      	ldr	r2, [r3, #0]
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106cc4:	041b      	lsls	r3, r3, #16
 8106cc6:	4619      	mov	r1, r3
 8106cc8:	4610      	mov	r0, r2
 8106cca:	f004 fbcd 	bl	810b468 <SDMMC_CmdSendCSD>
 8106cce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8106cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106cd2:	2b00      	cmp	r3, #0
 8106cd4:	d001      	beq.n	8106cda <SD_InitCard+0xda>
    {
      return errorstate;
 8106cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106cd8:	e04c      	b.n	8106d74 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	681b      	ldr	r3, [r3, #0]
 8106cde:	2100      	movs	r1, #0
 8106ce0:	4618      	mov	r0, r3
 8106ce2:	f004 fa56 	bl	810b192 <SDMMC_GetResponse>
 8106ce6:	4602      	mov	r2, r0
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	681b      	ldr	r3, [r3, #0]
 8106cf0:	2104      	movs	r1, #4
 8106cf2:	4618      	mov	r0, r3
 8106cf4:	f004 fa4d 	bl	810b192 <SDMMC_GetResponse>
 8106cf8:	4602      	mov	r2, r0
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	681b      	ldr	r3, [r3, #0]
 8106d02:	2108      	movs	r1, #8
 8106d04:	4618      	mov	r0, r3
 8106d06:	f004 fa44 	bl	810b192 <SDMMC_GetResponse>
 8106d0a:	4602      	mov	r2, r0
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	681b      	ldr	r3, [r3, #0]
 8106d14:	210c      	movs	r1, #12
 8106d16:	4618      	mov	r0, r3
 8106d18:	f004 fa3b 	bl	810b192 <SDMMC_GetResponse>
 8106d1c:	4602      	mov	r2, r0
 8106d1e:	687b      	ldr	r3, [r7, #4]
 8106d20:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8106d22:	687b      	ldr	r3, [r7, #4]
 8106d24:	681b      	ldr	r3, [r3, #0]
 8106d26:	2104      	movs	r1, #4
 8106d28:	4618      	mov	r0, r3
 8106d2a:	f004 fa32 	bl	810b192 <SDMMC_GetResponse>
 8106d2e:	4603      	mov	r3, r0
 8106d30:	0d1a      	lsrs	r2, r3, #20
 8106d32:	687b      	ldr	r3, [r7, #4]
 8106d34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8106d36:	f107 0310 	add.w	r3, r7, #16
 8106d3a:	4619      	mov	r1, r3
 8106d3c:	6878      	ldr	r0, [r7, #4]
 8106d3e:	f7ff fc3b 	bl	81065b8 <HAL_SD_GetCardCSD>
 8106d42:	4603      	mov	r3, r0
 8106d44:	2b00      	cmp	r3, #0
 8106d46:	d002      	beq.n	8106d4e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8106d4c:	e012      	b.n	8106d74 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	6819      	ldr	r1, [r3, #0]
 8106d52:	687b      	ldr	r3, [r7, #4]
 8106d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106d56:	041b      	lsls	r3, r3, #16
 8106d58:	f04f 0400 	mov.w	r4, #0
 8106d5c:	461a      	mov	r2, r3
 8106d5e:	4623      	mov	r3, r4
 8106d60:	4608      	mov	r0, r1
 8106d62:	f004 fa78 	bl	810b256 <SDMMC_CmdSelDesel>
 8106d66:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8106d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106d6a:	2b00      	cmp	r3, #0
 8106d6c:	d001      	beq.n	8106d72 <SD_InitCard+0x172>
  {
    return errorstate;
 8106d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106d70:	e000      	b.n	8106d74 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8106d72:	2300      	movs	r3, #0
}
 8106d74:	4618      	mov	r0, r3
 8106d76:	3744      	adds	r7, #68	; 0x44
 8106d78:	46bd      	mov	sp, r7
 8106d7a:	bd90      	pop	{r4, r7, pc}

08106d7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8106d7c:	b580      	push	{r7, lr}
 8106d7e:	b088      	sub	sp, #32
 8106d80:	af00      	add	r7, sp, #0
 8106d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8106d84:	2300      	movs	r3, #0
 8106d86:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8106d88:	2300      	movs	r3, #0
 8106d8a:	61fb      	str	r3, [r7, #28]
 8106d8c:	2300      	movs	r3, #0
 8106d8e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8106d90:	f7fb fab0 	bl	81022f4 <HAL_GetTick>
 8106d94:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8106d96:	687b      	ldr	r3, [r7, #4]
 8106d98:	681b      	ldr	r3, [r3, #0]
 8106d9a:	4618      	mov	r0, r3
 8106d9c:	f004 fa7f 	bl	810b29e <SDMMC_CmdGoIdleState>
 8106da0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8106da2:	693b      	ldr	r3, [r7, #16]
 8106da4:	2b00      	cmp	r3, #0
 8106da6:	d001      	beq.n	8106dac <SD_PowerON+0x30>
  {
    return errorstate;
 8106da8:	693b      	ldr	r3, [r7, #16]
 8106daa:	e0e9      	b.n	8106f80 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	681b      	ldr	r3, [r3, #0]
 8106db0:	4618      	mov	r0, r3
 8106db2:	f004 fa92 	bl	810b2da <SDMMC_CmdOperCond>
 8106db6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8106db8:	693b      	ldr	r3, [r7, #16]
 8106dba:	2b00      	cmp	r3, #0
 8106dbc:	d00d      	beq.n	8106dda <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	2200      	movs	r2, #0
 8106dc2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	4618      	mov	r0, r3
 8106dca:	f004 fa68 	bl	810b29e <SDMMC_CmdGoIdleState>
 8106dce:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8106dd0:	693b      	ldr	r3, [r7, #16]
 8106dd2:	2b00      	cmp	r3, #0
 8106dd4:	d004      	beq.n	8106de0 <SD_PowerON+0x64>
    {
      return errorstate;
 8106dd6:	693b      	ldr	r3, [r7, #16]
 8106dd8:	e0d2      	b.n	8106f80 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8106dda:	687b      	ldr	r3, [r7, #4]
 8106ddc:	2201      	movs	r2, #1
 8106dde:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106de4:	2b01      	cmp	r3, #1
 8106de6:	d137      	bne.n	8106e58 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	2100      	movs	r1, #0
 8106dee:	4618      	mov	r0, r3
 8106df0:	f004 fa93 	bl	810b31a <SDMMC_CmdAppCommand>
 8106df4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8106df6:	693b      	ldr	r3, [r7, #16]
 8106df8:	2b00      	cmp	r3, #0
 8106dfa:	d02d      	beq.n	8106e58 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106dfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8106e00:	e0be      	b.n	8106f80 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	681b      	ldr	r3, [r3, #0]
 8106e06:	2100      	movs	r1, #0
 8106e08:	4618      	mov	r0, r3
 8106e0a:	f004 fa86 	bl	810b31a <SDMMC_CmdAppCommand>
 8106e0e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8106e10:	693b      	ldr	r3, [r7, #16]
 8106e12:	2b00      	cmp	r3, #0
 8106e14:	d001      	beq.n	8106e1a <SD_PowerON+0x9e>
    {
      return errorstate;
 8106e16:	693b      	ldr	r3, [r7, #16]
 8106e18:	e0b2      	b.n	8106f80 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8106e1a:	687b      	ldr	r3, [r7, #4]
 8106e1c:	681b      	ldr	r3, [r3, #0]
 8106e1e:	495a      	ldr	r1, [pc, #360]	; (8106f88 <SD_PowerON+0x20c>)
 8106e20:	4618      	mov	r0, r3
 8106e22:	f004 fa9d 	bl	810b360 <SDMMC_CmdAppOperCommand>
 8106e26:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8106e28:	693b      	ldr	r3, [r7, #16]
 8106e2a:	2b00      	cmp	r3, #0
 8106e2c:	d002      	beq.n	8106e34 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106e2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8106e32:	e0a5      	b.n	8106f80 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	681b      	ldr	r3, [r3, #0]
 8106e38:	2100      	movs	r1, #0
 8106e3a:	4618      	mov	r0, r3
 8106e3c:	f004 f9a9 	bl	810b192 <SDMMC_GetResponse>
 8106e40:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8106e42:	69fb      	ldr	r3, [r7, #28]
 8106e44:	0fdb      	lsrs	r3, r3, #31
 8106e46:	2b01      	cmp	r3, #1
 8106e48:	d101      	bne.n	8106e4e <SD_PowerON+0xd2>
 8106e4a:	2301      	movs	r3, #1
 8106e4c:	e000      	b.n	8106e50 <SD_PowerON+0xd4>
 8106e4e:	2300      	movs	r3, #0
 8106e50:	61bb      	str	r3, [r7, #24]

    count++;
 8106e52:	68fb      	ldr	r3, [r7, #12]
 8106e54:	3301      	adds	r3, #1
 8106e56:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8106e58:	68fb      	ldr	r3, [r7, #12]
 8106e5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8106e5e:	4293      	cmp	r3, r2
 8106e60:	d802      	bhi.n	8106e68 <SD_PowerON+0xec>
 8106e62:	69bb      	ldr	r3, [r7, #24]
 8106e64:	2b00      	cmp	r3, #0
 8106e66:	d0cc      	beq.n	8106e02 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8106e68:	68fb      	ldr	r3, [r7, #12]
 8106e6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8106e6e:	4293      	cmp	r3, r2
 8106e70:	d902      	bls.n	8106e78 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8106e72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106e76:	e083      	b.n	8106f80 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8106e78:	69fb      	ldr	r3, [r7, #28]
 8106e7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106e7e:	2b00      	cmp	r3, #0
 8106e80:	d07d      	beq.n	8106f7e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8106e82:	687b      	ldr	r3, [r7, #4]
 8106e84:	2201      	movs	r2, #1
 8106e86:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8106e88:	687b      	ldr	r3, [r7, #4]
 8106e8a:	699b      	ldr	r3, [r3, #24]
 8106e8c:	2b02      	cmp	r3, #2
 8106e8e:	d176      	bne.n	8106f7e <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8106e90:	69fb      	ldr	r3, [r7, #28]
 8106e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106e96:	2b00      	cmp	r3, #0
 8106e98:	d071      	beq.n	8106f7e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106ea0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8106ea2:	687b      	ldr	r3, [r7, #4]
 8106ea4:	681b      	ldr	r3, [r3, #0]
 8106ea6:	681a      	ldr	r2, [r3, #0]
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	681b      	ldr	r3, [r3, #0]
 8106eac:	f042 0208 	orr.w	r2, r2, #8
 8106eb0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8106eb2:	687b      	ldr	r3, [r7, #4]
 8106eb4:	681b      	ldr	r3, [r3, #0]
 8106eb6:	4618      	mov	r0, r3
 8106eb8:	f004 fb5d 	bl	810b576 <SDMMC_CmdVoltageSwitch>
 8106ebc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8106ebe:	693b      	ldr	r3, [r7, #16]
 8106ec0:	2b00      	cmp	r3, #0
 8106ec2:	d00c      	beq.n	8106ede <SD_PowerON+0x162>
        {
          return errorstate;
 8106ec4:	693b      	ldr	r3, [r7, #16]
 8106ec6:	e05b      	b.n	8106f80 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8106ec8:	f7fb fa14 	bl	81022f4 <HAL_GetTick>
 8106ecc:	4602      	mov	r2, r0
 8106ece:	697b      	ldr	r3, [r7, #20]
 8106ed0:	1ad3      	subs	r3, r2, r3
 8106ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106ed6:	d102      	bne.n	8106ede <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8106ed8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8106edc:	e050      	b.n	8106f80 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	681b      	ldr	r3, [r3, #0]
 8106ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8106ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106eec:	d1ec      	bne.n	8106ec8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8106eee:	687b      	ldr	r3, [r7, #4]
 8106ef0:	681b      	ldr	r3, [r3, #0]
 8106ef2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8106ef6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	681b      	ldr	r3, [r3, #0]
 8106efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106f06:	d002      	beq.n	8106f0e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8106f08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8106f0c:	e038      	b.n	8106f80 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8106f0e:	2001      	movs	r0, #1
 8106f10:	f7ff fb46 	bl	81065a0 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	681b      	ldr	r3, [r3, #0]
 8106f18:	681a      	ldr	r2, [r3, #0]
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	681b      	ldr	r3, [r3, #0]
 8106f1e:	f042 0204 	orr.w	r2, r2, #4
 8106f22:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8106f24:	e00a      	b.n	8106f3c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8106f26:	f7fb f9e5 	bl	81022f4 <HAL_GetTick>
 8106f2a:	4602      	mov	r2, r0
 8106f2c:	697b      	ldr	r3, [r7, #20]
 8106f2e:	1ad3      	subs	r3, r2, r3
 8106f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106f34:	d102      	bne.n	8106f3c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8106f36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8106f3a:	e021      	b.n	8106f80 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8106f3c:	687b      	ldr	r3, [r7, #4]
 8106f3e:	681b      	ldr	r3, [r3, #0]
 8106f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106f4a:	d1ec      	bne.n	8106f26 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	681b      	ldr	r3, [r3, #0]
 8106f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8106f54:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8106f56:	687b      	ldr	r3, [r7, #4]
 8106f58:	681b      	ldr	r3, [r3, #0]
 8106f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106f64:	d102      	bne.n	8106f6c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8106f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106f6a:	e009      	b.n	8106f80 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	681b      	ldr	r3, [r3, #0]
 8106f70:	2213      	movs	r2, #19
 8106f72:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	681b      	ldr	r3, [r3, #0]
 8106f78:	f04f 32ff 	mov.w	r2, #4294967295
 8106f7c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8106f7e:	2300      	movs	r3, #0
}
 8106f80:	4618      	mov	r0, r3
 8106f82:	3720      	adds	r7, #32
 8106f84:	46bd      	mov	sp, r7
 8106f86:	bd80      	pop	{r7, pc}
 8106f88:	c1100000 	.word	0xc1100000

08106f8c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8106f8c:	b580      	push	{r7, lr}
 8106f8e:	b08c      	sub	sp, #48	; 0x30
 8106f90:	af00      	add	r7, sp, #0
 8106f92:	6078      	str	r0, [r7, #4]
 8106f94:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8106f96:	f7fb f9ad 	bl	81022f4 <HAL_GetTick>
 8106f9a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8106f9c:	683b      	ldr	r3, [r7, #0]
 8106f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8106fa0:	687b      	ldr	r3, [r7, #4]
 8106fa2:	681b      	ldr	r3, [r3, #0]
 8106fa4:	2100      	movs	r1, #0
 8106fa6:	4618      	mov	r0, r3
 8106fa8:	f004 f8f3 	bl	810b192 <SDMMC_GetResponse>
 8106fac:	4603      	mov	r3, r0
 8106fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106fb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106fb6:	d102      	bne.n	8106fbe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8106fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8106fbc:	e0b0      	b.n	8107120 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	681b      	ldr	r3, [r3, #0]
 8106fc2:	2140      	movs	r1, #64	; 0x40
 8106fc4:	4618      	mov	r0, r3
 8106fc6:	f004 f923 	bl	810b210 <SDMMC_CmdBlockLength>
 8106fca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8106fcc:	6a3b      	ldr	r3, [r7, #32]
 8106fce:	2b00      	cmp	r3, #0
 8106fd0:	d005      	beq.n	8106fde <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8106fda:	6a3b      	ldr	r3, [r7, #32]
 8106fdc:	e0a0      	b.n	8107120 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8106fde:	687b      	ldr	r3, [r7, #4]
 8106fe0:	681a      	ldr	r2, [r3, #0]
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106fe6:	041b      	lsls	r3, r3, #16
 8106fe8:	4619      	mov	r1, r3
 8106fea:	4610      	mov	r0, r2
 8106fec:	f004 f995 	bl	810b31a <SDMMC_CmdAppCommand>
 8106ff0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8106ff2:	6a3b      	ldr	r3, [r7, #32]
 8106ff4:	2b00      	cmp	r3, #0
 8106ff6:	d005      	beq.n	8107004 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8106ff8:	687b      	ldr	r3, [r7, #4]
 8106ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8107000:	6a3b      	ldr	r3, [r7, #32]
 8107002:	e08d      	b.n	8107120 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8107004:	f04f 33ff 	mov.w	r3, #4294967295
 8107008:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 810700a:	2340      	movs	r3, #64	; 0x40
 810700c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 810700e:	2360      	movs	r3, #96	; 0x60
 8107010:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8107012:	2302      	movs	r3, #2
 8107014:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8107016:	2300      	movs	r3, #0
 8107018:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810701a:	2301      	movs	r3, #1
 810701c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810701e:	687b      	ldr	r3, [r7, #4]
 8107020:	681b      	ldr	r3, [r3, #0]
 8107022:	f107 0208 	add.w	r2, r7, #8
 8107026:	4611      	mov	r1, r2
 8107028:	4618      	mov	r0, r3
 810702a:	f004 f8c5 	bl	810b1b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	681b      	ldr	r3, [r3, #0]
 8107032:	4618      	mov	r0, r3
 8107034:	f004 fa7d 	bl	810b532 <SDMMC_CmdStatusRegister>
 8107038:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 810703a:	6a3b      	ldr	r3, [r7, #32]
 810703c:	2b00      	cmp	r3, #0
 810703e:	d02b      	beq.n	8107098 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107044:	687b      	ldr	r3, [r7, #4]
 8107046:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8107048:	6a3b      	ldr	r3, [r7, #32]
 810704a:	e069      	b.n	8107120 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	681b      	ldr	r3, [r3, #0]
 8107050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8107056:	2b00      	cmp	r3, #0
 8107058:	d013      	beq.n	8107082 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 810705a:	2300      	movs	r3, #0
 810705c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810705e:	e00d      	b.n	810707c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8107060:	687b      	ldr	r3, [r7, #4]
 8107062:	681b      	ldr	r3, [r3, #0]
 8107064:	4618      	mov	r0, r3
 8107066:	f004 f831 	bl	810b0cc <SDMMC_ReadFIFO>
 810706a:	4602      	mov	r2, r0
 810706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810706e:	601a      	str	r2, [r3, #0]
        pData++;
 8107070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107072:	3304      	adds	r3, #4
 8107074:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8107076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107078:	3301      	adds	r3, #1
 810707a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810707e:	2b07      	cmp	r3, #7
 8107080:	d9ee      	bls.n	8107060 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8107082:	f7fb f937 	bl	81022f4 <HAL_GetTick>
 8107086:	4602      	mov	r2, r0
 8107088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810708a:	1ad3      	subs	r3, r2, r3
 810708c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107090:	d102      	bne.n	8107098 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8107092:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8107096:	e043      	b.n	8107120 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8107098:	687b      	ldr	r3, [r7, #4]
 810709a:	681b      	ldr	r3, [r3, #0]
 810709c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810709e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 81070a2:	2b00      	cmp	r3, #0
 81070a4:	d0d2      	beq.n	810704c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	681b      	ldr	r3, [r3, #0]
 81070aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81070ac:	f003 0308 	and.w	r3, r3, #8
 81070b0:	2b00      	cmp	r3, #0
 81070b2:	d001      	beq.n	81070b8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 81070b4:	2308      	movs	r3, #8
 81070b6:	e033      	b.n	8107120 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81070b8:	687b      	ldr	r3, [r7, #4]
 81070ba:	681b      	ldr	r3, [r3, #0]
 81070bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81070be:	f003 0302 	and.w	r3, r3, #2
 81070c2:	2b00      	cmp	r3, #0
 81070c4:	d001      	beq.n	81070ca <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81070c6:	2302      	movs	r3, #2
 81070c8:	e02a      	b.n	8107120 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81070ca:	687b      	ldr	r3, [r7, #4]
 81070cc:	681b      	ldr	r3, [r3, #0]
 81070ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81070d0:	f003 0320 	and.w	r3, r3, #32
 81070d4:	2b00      	cmp	r3, #0
 81070d6:	d017      	beq.n	8107108 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 81070d8:	2320      	movs	r3, #32
 81070da:	e021      	b.n	8107120 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	681b      	ldr	r3, [r3, #0]
 81070e0:	4618      	mov	r0, r3
 81070e2:	f003 fff3 	bl	810b0cc <SDMMC_ReadFIFO>
 81070e6:	4602      	mov	r2, r0
 81070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81070ea:	601a      	str	r2, [r3, #0]
    pData++;
 81070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81070ee:	3304      	adds	r3, #4
 81070f0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81070f2:	f7fb f8ff 	bl	81022f4 <HAL_GetTick>
 81070f6:	4602      	mov	r2, r0
 81070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81070fa:	1ad3      	subs	r3, r2, r3
 81070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107100:	d102      	bne.n	8107108 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8107102:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8107106:	e00b      	b.n	8107120 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8107108:	687b      	ldr	r3, [r7, #4]
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810710e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8107112:	2b00      	cmp	r3, #0
 8107114:	d1e2      	bne.n	81070dc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	681b      	ldr	r3, [r3, #0]
 810711a:	4a03      	ldr	r2, [pc, #12]	; (8107128 <SD_SendSDStatus+0x19c>)
 810711c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 810711e:	2300      	movs	r3, #0
}
 8107120:	4618      	mov	r0, r3
 8107122:	3730      	adds	r7, #48	; 0x30
 8107124:	46bd      	mov	sp, r7
 8107126:	bd80      	pop	{r7, pc}
 8107128:	18000f3a 	.word	0x18000f3a

0810712c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810712c:	b580      	push	{r7, lr}
 810712e:	b084      	sub	sp, #16
 8107130:	af00      	add	r7, sp, #0
 8107132:	6078      	str	r0, [r7, #4]
 8107134:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8107136:	683b      	ldr	r3, [r7, #0]
 8107138:	2b00      	cmp	r3, #0
 810713a:	d102      	bne.n	8107142 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810713c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8107140:	e018      	b.n	8107174 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8107142:	687b      	ldr	r3, [r7, #4]
 8107144:	681a      	ldr	r2, [r3, #0]
 8107146:	687b      	ldr	r3, [r7, #4]
 8107148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810714a:	041b      	lsls	r3, r3, #16
 810714c:	4619      	mov	r1, r3
 810714e:	4610      	mov	r0, r2
 8107150:	f004 f9cc 	bl	810b4ec <SDMMC_CmdSendStatus>
 8107154:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8107156:	68fb      	ldr	r3, [r7, #12]
 8107158:	2b00      	cmp	r3, #0
 810715a:	d001      	beq.n	8107160 <SD_SendStatus+0x34>
  {
    return errorstate;
 810715c:	68fb      	ldr	r3, [r7, #12]
 810715e:	e009      	b.n	8107174 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	681b      	ldr	r3, [r3, #0]
 8107164:	2100      	movs	r1, #0
 8107166:	4618      	mov	r0, r3
 8107168:	f004 f813 	bl	810b192 <SDMMC_GetResponse>
 810716c:	4602      	mov	r2, r0
 810716e:	683b      	ldr	r3, [r7, #0]
 8107170:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8107172:	2300      	movs	r3, #0
}
 8107174:	4618      	mov	r0, r3
 8107176:	3710      	adds	r7, #16
 8107178:	46bd      	mov	sp, r7
 810717a:	bd80      	pop	{r7, pc}

0810717c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810717c:	b580      	push	{r7, lr}
 810717e:	b086      	sub	sp, #24
 8107180:	af00      	add	r7, sp, #0
 8107182:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8107184:	2300      	movs	r3, #0
 8107186:	60fb      	str	r3, [r7, #12]
 8107188:	2300      	movs	r3, #0
 810718a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810718c:	687b      	ldr	r3, [r7, #4]
 810718e:	681b      	ldr	r3, [r3, #0]
 8107190:	2100      	movs	r1, #0
 8107192:	4618      	mov	r0, r3
 8107194:	f003 fffd 	bl	810b192 <SDMMC_GetResponse>
 8107198:	4603      	mov	r3, r0
 810719a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810719e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81071a2:	d102      	bne.n	81071aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 81071a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81071a8:	e02f      	b.n	810720a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 81071aa:	f107 030c 	add.w	r3, r7, #12
 81071ae:	4619      	mov	r1, r3
 81071b0:	6878      	ldr	r0, [r7, #4]
 81071b2:	f000 f879 	bl	81072a8 <SD_FindSCR>
 81071b6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 81071b8:	697b      	ldr	r3, [r7, #20]
 81071ba:	2b00      	cmp	r3, #0
 81071bc:	d001      	beq.n	81071c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 81071be:	697b      	ldr	r3, [r7, #20]
 81071c0:	e023      	b.n	810720a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 81071c2:	693b      	ldr	r3, [r7, #16]
 81071c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81071c8:	2b00      	cmp	r3, #0
 81071ca:	d01c      	beq.n	8107206 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81071cc:	687b      	ldr	r3, [r7, #4]
 81071ce:	681a      	ldr	r2, [r3, #0]
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81071d4:	041b      	lsls	r3, r3, #16
 81071d6:	4619      	mov	r1, r3
 81071d8:	4610      	mov	r0, r2
 81071da:	f004 f89e 	bl	810b31a <SDMMC_CmdAppCommand>
 81071de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 81071e0:	697b      	ldr	r3, [r7, #20]
 81071e2:	2b00      	cmp	r3, #0
 81071e4:	d001      	beq.n	81071ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 81071e6:	697b      	ldr	r3, [r7, #20]
 81071e8:	e00f      	b.n	810720a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 81071ea:	687b      	ldr	r3, [r7, #4]
 81071ec:	681b      	ldr	r3, [r3, #0]
 81071ee:	2102      	movs	r1, #2
 81071f0:	4618      	mov	r0, r3
 81071f2:	f004 f8d5 	bl	810b3a0 <SDMMC_CmdBusWidth>
 81071f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 81071f8:	697b      	ldr	r3, [r7, #20]
 81071fa:	2b00      	cmp	r3, #0
 81071fc:	d001      	beq.n	8107202 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 81071fe:	697b      	ldr	r3, [r7, #20]
 8107200:	e003      	b.n	810720a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8107202:	2300      	movs	r3, #0
 8107204:	e001      	b.n	810720a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8107206:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810720a:	4618      	mov	r0, r3
 810720c:	3718      	adds	r7, #24
 810720e:	46bd      	mov	sp, r7
 8107210:	bd80      	pop	{r7, pc}

08107212 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8107212:	b580      	push	{r7, lr}
 8107214:	b086      	sub	sp, #24
 8107216:	af00      	add	r7, sp, #0
 8107218:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810721a:	2300      	movs	r3, #0
 810721c:	60fb      	str	r3, [r7, #12]
 810721e:	2300      	movs	r3, #0
 8107220:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8107222:	687b      	ldr	r3, [r7, #4]
 8107224:	681b      	ldr	r3, [r3, #0]
 8107226:	2100      	movs	r1, #0
 8107228:	4618      	mov	r0, r3
 810722a:	f003 ffb2 	bl	810b192 <SDMMC_GetResponse>
 810722e:	4603      	mov	r3, r0
 8107230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107238:	d102      	bne.n	8107240 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810723a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810723e:	e02f      	b.n	81072a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8107240:	f107 030c 	add.w	r3, r7, #12
 8107244:	4619      	mov	r1, r3
 8107246:	6878      	ldr	r0, [r7, #4]
 8107248:	f000 f82e 	bl	81072a8 <SD_FindSCR>
 810724c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 810724e:	697b      	ldr	r3, [r7, #20]
 8107250:	2b00      	cmp	r3, #0
 8107252:	d001      	beq.n	8107258 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8107254:	697b      	ldr	r3, [r7, #20]
 8107256:	e023      	b.n	81072a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8107258:	693b      	ldr	r3, [r7, #16]
 810725a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810725e:	2b00      	cmp	r3, #0
 8107260:	d01c      	beq.n	810729c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8107262:	687b      	ldr	r3, [r7, #4]
 8107264:	681a      	ldr	r2, [r3, #0]
 8107266:	687b      	ldr	r3, [r7, #4]
 8107268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810726a:	041b      	lsls	r3, r3, #16
 810726c:	4619      	mov	r1, r3
 810726e:	4610      	mov	r0, r2
 8107270:	f004 f853 	bl	810b31a <SDMMC_CmdAppCommand>
 8107274:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8107276:	697b      	ldr	r3, [r7, #20]
 8107278:	2b00      	cmp	r3, #0
 810727a:	d001      	beq.n	8107280 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810727c:	697b      	ldr	r3, [r7, #20]
 810727e:	e00f      	b.n	81072a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8107280:	687b      	ldr	r3, [r7, #4]
 8107282:	681b      	ldr	r3, [r3, #0]
 8107284:	2100      	movs	r1, #0
 8107286:	4618      	mov	r0, r3
 8107288:	f004 f88a 	bl	810b3a0 <SDMMC_CmdBusWidth>
 810728c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 810728e:	697b      	ldr	r3, [r7, #20]
 8107290:	2b00      	cmp	r3, #0
 8107292:	d001      	beq.n	8107298 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8107294:	697b      	ldr	r3, [r7, #20]
 8107296:	e003      	b.n	81072a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8107298:	2300      	movs	r3, #0
 810729a:	e001      	b.n	81072a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810729c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 81072a0:	4618      	mov	r0, r3
 81072a2:	3718      	adds	r7, #24
 81072a4:	46bd      	mov	sp, r7
 81072a6:	bd80      	pop	{r7, pc}

081072a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 81072a8:	b580      	push	{r7, lr}
 81072aa:	b08e      	sub	sp, #56	; 0x38
 81072ac:	af00      	add	r7, sp, #0
 81072ae:	6078      	str	r0, [r7, #4]
 81072b0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81072b2:	f7fb f81f 	bl	81022f4 <HAL_GetTick>
 81072b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 81072b8:	2300      	movs	r3, #0
 81072ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 81072bc:	2300      	movs	r3, #0
 81072be:	60bb      	str	r3, [r7, #8]
 81072c0:	2300      	movs	r3, #0
 81072c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 81072c4:	683b      	ldr	r3, [r7, #0]
 81072c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 81072c8:	687b      	ldr	r3, [r7, #4]
 81072ca:	681b      	ldr	r3, [r3, #0]
 81072cc:	2108      	movs	r1, #8
 81072ce:	4618      	mov	r0, r3
 81072d0:	f003 ff9e 	bl	810b210 <SDMMC_CmdBlockLength>
 81072d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 81072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072d8:	2b00      	cmp	r3, #0
 81072da:	d001      	beq.n	81072e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 81072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072de:	e0ad      	b.n	810743c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	681a      	ldr	r2, [r3, #0]
 81072e4:	687b      	ldr	r3, [r7, #4]
 81072e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81072e8:	041b      	lsls	r3, r3, #16
 81072ea:	4619      	mov	r1, r3
 81072ec:	4610      	mov	r0, r2
 81072ee:	f004 f814 	bl	810b31a <SDMMC_CmdAppCommand>
 81072f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 81072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072f6:	2b00      	cmp	r3, #0
 81072f8:	d001      	beq.n	81072fe <SD_FindSCR+0x56>
  {
    return errorstate;
 81072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072fc:	e09e      	b.n	810743c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81072fe:	f04f 33ff 	mov.w	r3, #4294967295
 8107302:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8107304:	2308      	movs	r3, #8
 8107306:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8107308:	2330      	movs	r3, #48	; 0x30
 810730a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810730c:	2302      	movs	r3, #2
 810730e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8107310:	2300      	movs	r3, #0
 8107312:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8107314:	2301      	movs	r3, #1
 8107316:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	f107 0210 	add.w	r2, r7, #16
 8107320:	4611      	mov	r1, r2
 8107322:	4618      	mov	r0, r3
 8107324:	f003 ff48 	bl	810b1b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	681b      	ldr	r3, [r3, #0]
 810732c:	4618      	mov	r0, r3
 810732e:	f004 f85a 	bl	810b3e6 <SDMMC_CmdSendSCR>
 8107332:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8107334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107336:	2b00      	cmp	r3, #0
 8107338:	d027      	beq.n	810738a <SD_FindSCR+0xe2>
  {
    return errorstate;
 810733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810733c:	e07e      	b.n	810743c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	681b      	ldr	r3, [r3, #0]
 8107342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8107348:	2b00      	cmp	r3, #0
 810734a:	d113      	bne.n	8107374 <SD_FindSCR+0xcc>
 810734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810734e:	2b00      	cmp	r3, #0
 8107350:	d110      	bne.n	8107374 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	681b      	ldr	r3, [r3, #0]
 8107356:	4618      	mov	r0, r3
 8107358:	f003 feb8 	bl	810b0cc <SDMMC_ReadFIFO>
 810735c:	4603      	mov	r3, r0
 810735e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8107360:	687b      	ldr	r3, [r7, #4]
 8107362:	681b      	ldr	r3, [r3, #0]
 8107364:	4618      	mov	r0, r3
 8107366:	f003 feb1 	bl	810b0cc <SDMMC_ReadFIFO>
 810736a:	4603      	mov	r3, r0
 810736c:	60fb      	str	r3, [r7, #12]
      index++;
 810736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107370:	3301      	adds	r3, #1
 8107372:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8107374:	f7fa ffbe 	bl	81022f4 <HAL_GetTick>
 8107378:	4602      	mov	r2, r0
 810737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810737c:	1ad3      	subs	r3, r2, r3
 810737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107382:	d102      	bne.n	810738a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8107384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8107388:	e058      	b.n	810743c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 810738a:	687b      	ldr	r3, [r7, #4]
 810738c:	681b      	ldr	r3, [r3, #0]
 810738e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107390:	f240 532a 	movw	r3, #1322	; 0x52a
 8107394:	4013      	ands	r3, r2
 8107396:	2b00      	cmp	r3, #0
 8107398:	d0d1      	beq.n	810733e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810739a:	687b      	ldr	r3, [r7, #4]
 810739c:	681b      	ldr	r3, [r3, #0]
 810739e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81073a0:	f003 0308 	and.w	r3, r3, #8
 81073a4:	2b00      	cmp	r3, #0
 81073a6:	d005      	beq.n	81073b4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 81073a8:	687b      	ldr	r3, [r7, #4]
 81073aa:	681b      	ldr	r3, [r3, #0]
 81073ac:	2208      	movs	r2, #8
 81073ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 81073b0:	2308      	movs	r3, #8
 81073b2:	e043      	b.n	810743c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81073b4:	687b      	ldr	r3, [r7, #4]
 81073b6:	681b      	ldr	r3, [r3, #0]
 81073b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81073ba:	f003 0302 	and.w	r3, r3, #2
 81073be:	2b00      	cmp	r3, #0
 81073c0:	d005      	beq.n	81073ce <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 81073c2:	687b      	ldr	r3, [r7, #4]
 81073c4:	681b      	ldr	r3, [r3, #0]
 81073c6:	2202      	movs	r2, #2
 81073c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81073ca:	2302      	movs	r3, #2
 81073cc:	e036      	b.n	810743c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81073d4:	f003 0320 	and.w	r3, r3, #32
 81073d8:	2b00      	cmp	r3, #0
 81073da:	d005      	beq.n	81073e8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 81073dc:	687b      	ldr	r3, [r7, #4]
 81073de:	681b      	ldr	r3, [r3, #0]
 81073e0:	2220      	movs	r2, #32
 81073e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 81073e4:	2320      	movs	r3, #32
 81073e6:	e029      	b.n	810743c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	4a15      	ldr	r2, [pc, #84]	; (8107444 <SD_FindSCR+0x19c>)
 81073ee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 81073f0:	68fb      	ldr	r3, [r7, #12]
 81073f2:	061a      	lsls	r2, r3, #24
 81073f4:	68fb      	ldr	r3, [r7, #12]
 81073f6:	021b      	lsls	r3, r3, #8
 81073f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81073fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	0a1b      	lsrs	r3, r3, #8
 8107402:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8107406:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	0e1b      	lsrs	r3, r3, #24
 810740c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 810740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107410:	601a      	str	r2, [r3, #0]
    scr++;
 8107412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107414:	3304      	adds	r3, #4
 8107416:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8107418:	68bb      	ldr	r3, [r7, #8]
 810741a:	061a      	lsls	r2, r3, #24
 810741c:	68bb      	ldr	r3, [r7, #8]
 810741e:	021b      	lsls	r3, r3, #8
 8107420:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8107424:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8107426:	68bb      	ldr	r3, [r7, #8]
 8107428:	0a1b      	lsrs	r3, r3, #8
 810742a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 810742e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8107430:	68bb      	ldr	r3, [r7, #8]
 8107432:	0e1b      	lsrs	r3, r3, #24
 8107434:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8107436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107438:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810743a:	2300      	movs	r3, #0
}
 810743c:	4618      	mov	r0, r3
 810743e:	3738      	adds	r7, #56	; 0x38
 8107440:	46bd      	mov	sp, r7
 8107442:	bd80      	pop	{r7, pc}
 8107444:	18000f3a 	.word	0x18000f3a

08107448 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8107448:	b580      	push	{r7, lr}
 810744a:	b082      	sub	sp, #8
 810744c:	af00      	add	r7, sp, #0
 810744e:	6078      	str	r0, [r7, #4]
 8107450:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	2b00      	cmp	r3, #0
 8107456:	d101      	bne.n	810745c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8107458:	2301      	movs	r3, #1
 810745a:	e02b      	b.n	81074b4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 810745c:	687b      	ldr	r3, [r7, #4]
 810745e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8107462:	b2db      	uxtb	r3, r3
 8107464:	2b00      	cmp	r3, #0
 8107466:	d106      	bne.n	8107476 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	2200      	movs	r2, #0
 810746c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8107470:	6878      	ldr	r0, [r7, #4]
 8107472:	f7fa fdad 	bl	8101fd0 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8107476:	687b      	ldr	r3, [r7, #4]
 8107478:	2202      	movs	r2, #2
 810747a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810747e:	687b      	ldr	r3, [r7, #4]
 8107480:	681a      	ldr	r2, [r3, #0]
 8107482:	687b      	ldr	r3, [r7, #4]
 8107484:	3304      	adds	r3, #4
 8107486:	4619      	mov	r1, r3
 8107488:	4610      	mov	r0, r2
 810748a:	f003 fd2f 	bl	810aeec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	6818      	ldr	r0, [r3, #0]
 8107492:	687b      	ldr	r3, [r7, #4]
 8107494:	685b      	ldr	r3, [r3, #4]
 8107496:	461a      	mov	r2, r3
 8107498:	6839      	ldr	r1, [r7, #0]
 810749a:	f003 fd84 	bl	810afa6 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810749e:	4b07      	ldr	r3, [pc, #28]	; (81074bc <HAL_SDRAM_Init+0x74>)
 81074a0:	681b      	ldr	r3, [r3, #0]
 81074a2:	4a06      	ldr	r2, [pc, #24]	; (81074bc <HAL_SDRAM_Init+0x74>)
 81074a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81074a8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	2201      	movs	r2, #1
 81074ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 81074b2:	2300      	movs	r3, #0
}
 81074b4:	4618      	mov	r0, r3
 81074b6:	3708      	adds	r7, #8
 81074b8:	46bd      	mov	sp, r7
 81074ba:	bd80      	pop	{r7, pc}
 81074bc:	52004000 	.word	0x52004000

081074c0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 81074c0:	b580      	push	{r7, lr}
 81074c2:	b084      	sub	sp, #16
 81074c4:	af00      	add	r7, sp, #0
 81074c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	2b00      	cmp	r3, #0
 81074cc:	d101      	bne.n	81074d2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 81074ce:	2301      	movs	r3, #1
 81074d0:	e05e      	b.n	8107590 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 81074d2:	687b      	ldr	r3, [r7, #4]
 81074d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 81074d8:	b2db      	uxtb	r3, r3
 81074da:	2b00      	cmp	r3, #0
 81074dc:	d106      	bne.n	81074ec <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	2200      	movs	r2, #0
 81074e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 81074e6:	6878      	ldr	r0, [r7, #4]
 81074e8:	f7fa f9e6 	bl	81018b8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	2202      	movs	r2, #2
 81074f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 81074f4:	687b      	ldr	r3, [r7, #4]
 81074f6:	681b      	ldr	r3, [r3, #0]
 81074f8:	681a      	ldr	r2, [r3, #0]
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	f022 0203 	bic.w	r2, r2, #3
 8107502:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8107504:	687b      	ldr	r3, [r7, #4]
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 810750c:	68fa      	ldr	r2, [r7, #12]
 810750e:	4b22      	ldr	r3, [pc, #136]	; (8107598 <HAL_SPDIFRX_Init+0xd8>)
 8107510:	4013      	ands	r3, r2
 8107512:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8107514:	687b      	ldr	r3, [r7, #4]
 8107516:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8107518:	687b      	ldr	r3, [r7, #4]
 810751a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 810751c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8107522:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8107528:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810752e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8107530:	687b      	ldr	r3, [r7, #4]
 8107532:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8107534:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8107536:	687b      	ldr	r3, [r7, #4]
 8107538:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 810753a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 810753c:	687b      	ldr	r3, [r7, #4]
 810753e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8107540:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8107542:	687b      	ldr	r3, [r7, #4]
 8107544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8107546:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 810754c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810754e:	68fa      	ldr	r2, [r7, #12]
 8107550:	4313      	orrs	r3, r2
 8107552:	60fb      	str	r3, [r7, #12]
             );

  if(hspdif->Init.SymbolClockGen == ENABLE)
 8107554:	687b      	ldr	r3, [r7, #4]
 8107556:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810755a:	2b01      	cmp	r3, #1
 810755c:	d103      	bne.n	8107566 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 810755e:	68fb      	ldr	r3, [r7, #12]
 8107560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107564:	60fb      	str	r3, [r7, #12]
  }

  if(hspdif->Init.BackupSymbolClockGen == ENABLE)
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810756c:	2b01      	cmp	r3, #1
 810756e:	d103      	bne.n	8107578 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8107570:	68fb      	ldr	r3, [r7, #12]
 8107572:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107576:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8107578:	687b      	ldr	r3, [r7, #4]
 810757a:	681b      	ldr	r3, [r3, #0]
 810757c:	68fa      	ldr	r2, [r7, #12]
 810757e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8107580:	687b      	ldr	r3, [r7, #4]
 8107582:	2200      	movs	r2, #0
 8107584:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	2201      	movs	r2, #1
 810758a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 810758e:	2300      	movs	r3, #0
}
 8107590:	4618      	mov	r0, r3
 8107592:	3710      	adds	r7, #16
 8107594:	46bd      	mov	sp, r7
 8107596:	bd80      	pop	{r7, pc}
 8107598:	ffc88407 	.word	0xffc88407

0810759c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810759c:	b580      	push	{r7, lr}
 810759e:	b084      	sub	sp, #16
 81075a0:	af00      	add	r7, sp, #0
 81075a2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 81075a4:	2300      	movs	r3, #0
 81075a6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81075a8:	687b      	ldr	r3, [r7, #4]
 81075aa:	2b00      	cmp	r3, #0
 81075ac:	d101      	bne.n	81075b2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 81075ae:	2301      	movs	r3, #1
 81075b0:	e0e2      	b.n	8107778 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81075b2:	687b      	ldr	r3, [r7, #4]
 81075b4:	2200      	movs	r2, #0
 81075b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81075b8:	687b      	ldr	r3, [r7, #4]
 81075ba:	681b      	ldr	r3, [r3, #0]
 81075bc:	4a70      	ldr	r2, [pc, #448]	; (8107780 <HAL_SPI_Init+0x1e4>)
 81075be:	4293      	cmp	r3, r2
 81075c0:	d00f      	beq.n	81075e2 <HAL_SPI_Init+0x46>
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	681b      	ldr	r3, [r3, #0]
 81075c6:	4a6f      	ldr	r2, [pc, #444]	; (8107784 <HAL_SPI_Init+0x1e8>)
 81075c8:	4293      	cmp	r3, r2
 81075ca:	d00a      	beq.n	81075e2 <HAL_SPI_Init+0x46>
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	4a6d      	ldr	r2, [pc, #436]	; (8107788 <HAL_SPI_Init+0x1ec>)
 81075d2:	4293      	cmp	r3, r2
 81075d4:	d005      	beq.n	81075e2 <HAL_SPI_Init+0x46>
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	68db      	ldr	r3, [r3, #12]
 81075da:	2b0f      	cmp	r3, #15
 81075dc:	d901      	bls.n	81075e2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 81075de:	2301      	movs	r3, #1
 81075e0:	e0ca      	b.n	8107778 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81075e2:	6878      	ldr	r0, [r7, #4]
 81075e4:	f000 f8d2 	bl	810778c <SPI_GetPacketSize>
 81075e8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81075ea:	687b      	ldr	r3, [r7, #4]
 81075ec:	681b      	ldr	r3, [r3, #0]
 81075ee:	4a64      	ldr	r2, [pc, #400]	; (8107780 <HAL_SPI_Init+0x1e4>)
 81075f0:	4293      	cmp	r3, r2
 81075f2:	d00c      	beq.n	810760e <HAL_SPI_Init+0x72>
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	681b      	ldr	r3, [r3, #0]
 81075f8:	4a62      	ldr	r2, [pc, #392]	; (8107784 <HAL_SPI_Init+0x1e8>)
 81075fa:	4293      	cmp	r3, r2
 81075fc:	d007      	beq.n	810760e <HAL_SPI_Init+0x72>
 81075fe:	687b      	ldr	r3, [r7, #4]
 8107600:	681b      	ldr	r3, [r3, #0]
 8107602:	4a61      	ldr	r2, [pc, #388]	; (8107788 <HAL_SPI_Init+0x1ec>)
 8107604:	4293      	cmp	r3, r2
 8107606:	d002      	beq.n	810760e <HAL_SPI_Init+0x72>
 8107608:	68bb      	ldr	r3, [r7, #8]
 810760a:	2b08      	cmp	r3, #8
 810760c:	d811      	bhi.n	8107632 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810760e:	687b      	ldr	r3, [r7, #4]
 8107610:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107612:	4a5b      	ldr	r2, [pc, #364]	; (8107780 <HAL_SPI_Init+0x1e4>)
 8107614:	4293      	cmp	r3, r2
 8107616:	d009      	beq.n	810762c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	681b      	ldr	r3, [r3, #0]
 810761c:	4a59      	ldr	r2, [pc, #356]	; (8107784 <HAL_SPI_Init+0x1e8>)
 810761e:	4293      	cmp	r3, r2
 8107620:	d004      	beq.n	810762c <HAL_SPI_Init+0x90>
 8107622:	687b      	ldr	r3, [r7, #4]
 8107624:	681b      	ldr	r3, [r3, #0]
 8107626:	4a58      	ldr	r2, [pc, #352]	; (8107788 <HAL_SPI_Init+0x1ec>)
 8107628:	4293      	cmp	r3, r2
 810762a:	d104      	bne.n	8107636 <HAL_SPI_Init+0x9a>
 810762c:	68bb      	ldr	r3, [r7, #8]
 810762e:	2b10      	cmp	r3, #16
 8107630:	d901      	bls.n	8107636 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8107632:	2301      	movs	r3, #1
 8107634:	e0a0      	b.n	8107778 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810763c:	b2db      	uxtb	r3, r3
 810763e:	2b00      	cmp	r3, #0
 8107640:	d106      	bne.n	8107650 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8107642:	687b      	ldr	r3, [r7, #4]
 8107644:	2200      	movs	r2, #0
 8107646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810764a:	6878      	ldr	r0, [r7, #4]
 810764c:	f7fa f97c 	bl	8101948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8107650:	687b      	ldr	r3, [r7, #4]
 8107652:	2202      	movs	r2, #2
 8107654:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	681a      	ldr	r2, [r3, #0]
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	681b      	ldr	r3, [r3, #0]
 8107662:	f022 0201 	bic.w	r2, r2, #1
 8107666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8107668:	687b      	ldr	r3, [r7, #4]
 810766a:	699b      	ldr	r3, [r3, #24]
 810766c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107670:	d110      	bne.n	8107694 <HAL_SPI_Init+0xf8>
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	685b      	ldr	r3, [r3, #4]
 8107676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810767a:	d10b      	bne.n	8107694 <HAL_SPI_Init+0xf8>
 810767c:	687b      	ldr	r3, [r7, #4]
 810767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107680:	2b00      	cmp	r3, #0
 8107682:	d107      	bne.n	8107694 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	681b      	ldr	r3, [r3, #0]
 8107688:	681a      	ldr	r2, [r3, #0]
 810768a:	687b      	ldr	r3, [r7, #4]
 810768c:	681b      	ldr	r3, [r3, #0]
 810768e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8107692:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	69da      	ldr	r2, [r3, #28]
 8107698:	687b      	ldr	r3, [r7, #4]
 810769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810769c:	431a      	orrs	r2, r3
 810769e:	68fb      	ldr	r3, [r7, #12]
 81076a0:	431a      	orrs	r2, r3
 81076a2:	687b      	ldr	r3, [r7, #4]
 81076a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81076a6:	ea42 0103 	orr.w	r1, r2, r3
 81076aa:	687b      	ldr	r3, [r7, #4]
 81076ac:	68da      	ldr	r2, [r3, #12]
 81076ae:	687b      	ldr	r3, [r7, #4]
 81076b0:	681b      	ldr	r3, [r3, #0]
 81076b2:	430a      	orrs	r2, r1
 81076b4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81076ba:	687b      	ldr	r3, [r7, #4]
 81076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81076be:	431a      	orrs	r2, r3
 81076c0:	687b      	ldr	r3, [r7, #4]
 81076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076c4:	431a      	orrs	r2, r3
 81076c6:	687b      	ldr	r3, [r7, #4]
 81076c8:	699b      	ldr	r3, [r3, #24]
 81076ca:	431a      	orrs	r2, r3
 81076cc:	687b      	ldr	r3, [r7, #4]
 81076ce:	691b      	ldr	r3, [r3, #16]
 81076d0:	431a      	orrs	r2, r3
 81076d2:	687b      	ldr	r3, [r7, #4]
 81076d4:	695b      	ldr	r3, [r3, #20]
 81076d6:	431a      	orrs	r2, r3
 81076d8:	687b      	ldr	r3, [r7, #4]
 81076da:	6a1b      	ldr	r3, [r3, #32]
 81076dc:	431a      	orrs	r2, r3
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	685b      	ldr	r3, [r3, #4]
 81076e2:	431a      	orrs	r2, r3
 81076e4:	687b      	ldr	r3, [r7, #4]
 81076e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81076e8:	431a      	orrs	r2, r3
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	689b      	ldr	r3, [r3, #8]
 81076ee:	431a      	orrs	r2, r3
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81076f4:	ea42 0103 	orr.w	r1, r2, r3
 81076f8:	687b      	ldr	r3, [r7, #4]
 81076fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81076fc:	687b      	ldr	r3, [r7, #4]
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	430a      	orrs	r2, r1
 8107702:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	685b      	ldr	r3, [r3, #4]
 8107708:	2b00      	cmp	r3, #0
 810770a:	d113      	bne.n	8107734 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810770c:	687b      	ldr	r3, [r7, #4]
 810770e:	681b      	ldr	r3, [r3, #0]
 8107710:	689b      	ldr	r3, [r3, #8]
 8107712:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8107716:	687b      	ldr	r3, [r7, #4]
 8107718:	681b      	ldr	r3, [r3, #0]
 810771a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810771e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	689b      	ldr	r3, [r3, #8]
 8107726:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810772a:	687b      	ldr	r3, [r7, #4]
 810772c:	681b      	ldr	r3, [r3, #0]
 810772e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8107732:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	681b      	ldr	r3, [r3, #0]
 8107738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810773a:	687b      	ldr	r3, [r7, #4]
 810773c:	681b      	ldr	r3, [r3, #0]
 810773e:	f022 0201 	bic.w	r2, r2, #1
 8107742:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	685b      	ldr	r3, [r3, #4]
 8107748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810774c:	2b00      	cmp	r3, #0
 810774e:	d00a      	beq.n	8107766 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107750:	687b      	ldr	r3, [r7, #4]
 8107752:	681b      	ldr	r3, [r3, #0]
 8107754:	68db      	ldr	r3, [r3, #12]
 8107756:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810775e:	687b      	ldr	r3, [r7, #4]
 8107760:	681b      	ldr	r3, [r3, #0]
 8107762:	430a      	orrs	r2, r1
 8107764:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8107766:	687b      	ldr	r3, [r7, #4]
 8107768:	2200      	movs	r2, #0
 810776a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810776e:	687b      	ldr	r3, [r7, #4]
 8107770:	2201      	movs	r2, #1
 8107772:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8107776:	2300      	movs	r3, #0
}
 8107778:	4618      	mov	r0, r3
 810777a:	3710      	adds	r7, #16
 810777c:	46bd      	mov	sp, r7
 810777e:	bd80      	pop	{r7, pc}
 8107780:	40013000 	.word	0x40013000
 8107784:	40003800 	.word	0x40003800
 8107788:	40003c00 	.word	0x40003c00

0810778c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810778c:	b480      	push	{r7}
 810778e:	b085      	sub	sp, #20
 8107790:	af00      	add	r7, sp, #0
 8107792:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8107794:	687b      	ldr	r3, [r7, #4]
 8107796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107798:	095b      	lsrs	r3, r3, #5
 810779a:	3301      	adds	r3, #1
 810779c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810779e:	687b      	ldr	r3, [r7, #4]
 81077a0:	68db      	ldr	r3, [r3, #12]
 81077a2:	3301      	adds	r3, #1
 81077a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81077a6:	68bb      	ldr	r3, [r7, #8]
 81077a8:	3307      	adds	r3, #7
 81077aa:	08db      	lsrs	r3, r3, #3
 81077ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81077ae:	68bb      	ldr	r3, [r7, #8]
 81077b0:	68fa      	ldr	r2, [r7, #12]
 81077b2:	fb02 f303 	mul.w	r3, r2, r3
}
 81077b6:	4618      	mov	r0, r3
 81077b8:	3714      	adds	r7, #20
 81077ba:	46bd      	mov	sp, r7
 81077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077c0:	4770      	bx	lr

081077c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81077c2:	b580      	push	{r7, lr}
 81077c4:	b082      	sub	sp, #8
 81077c6:	af00      	add	r7, sp, #0
 81077c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	2b00      	cmp	r3, #0
 81077ce:	d101      	bne.n	81077d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81077d0:	2301      	movs	r3, #1
 81077d2:	e01d      	b.n	8107810 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81077d4:	687b      	ldr	r3, [r7, #4]
 81077d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81077da:	b2db      	uxtb	r3, r3
 81077dc:	2b00      	cmp	r3, #0
 81077de:	d106      	bne.n	81077ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	2200      	movs	r2, #0
 81077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81077e8:	6878      	ldr	r0, [r7, #4]
 81077ea:	f7fa f995 	bl	8101b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81077ee:	687b      	ldr	r3, [r7, #4]
 81077f0:	2202      	movs	r2, #2
 81077f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	681a      	ldr	r2, [r3, #0]
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	3304      	adds	r3, #4
 81077fe:	4619      	mov	r1, r3
 8107800:	4610      	mov	r0, r2
 8107802:	f000 f983 	bl	8107b0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107806:	687b      	ldr	r3, [r7, #4]
 8107808:	2201      	movs	r2, #1
 810780a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810780e:	2300      	movs	r3, #0
}
 8107810:	4618      	mov	r0, r3
 8107812:	3708      	adds	r7, #8
 8107814:	46bd      	mov	sp, r7
 8107816:	bd80      	pop	{r7, pc}

08107818 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8107818:	b580      	push	{r7, lr}
 810781a:	b082      	sub	sp, #8
 810781c:	af00      	add	r7, sp, #0
 810781e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	2b00      	cmp	r3, #0
 8107824:	d101      	bne.n	810782a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8107826:	2301      	movs	r3, #1
 8107828:	e01d      	b.n	8107866 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107830:	b2db      	uxtb	r3, r3
 8107832:	2b00      	cmp	r3, #0
 8107834:	d106      	bne.n	8107844 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	2200      	movs	r2, #0
 810783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 810783e:	6878      	ldr	r0, [r7, #4]
 8107840:	f7fa f948 	bl	8101ad4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	2202      	movs	r2, #2
 8107848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 810784c:	687b      	ldr	r3, [r7, #4]
 810784e:	681a      	ldr	r2, [r3, #0]
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	3304      	adds	r3, #4
 8107854:	4619      	mov	r1, r3
 8107856:	4610      	mov	r0, r2
 8107858:	f000 f958 	bl	8107b0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810785c:	687b      	ldr	r3, [r7, #4]
 810785e:	2201      	movs	r2, #1
 8107860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107864:	2300      	movs	r3, #0
}
 8107866:	4618      	mov	r0, r3
 8107868:	3708      	adds	r7, #8
 810786a:	46bd      	mov	sp, r7
 810786c:	bd80      	pop	{r7, pc}

0810786e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810786e:	b580      	push	{r7, lr}
 8107870:	b082      	sub	sp, #8
 8107872:	af00      	add	r7, sp, #0
 8107874:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	2b00      	cmp	r3, #0
 810787a:	d101      	bne.n	8107880 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810787c:	2301      	movs	r3, #1
 810787e:	e01d      	b.n	81078bc <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107880:	687b      	ldr	r3, [r7, #4]
 8107882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107886:	b2db      	uxtb	r3, r3
 8107888:	2b00      	cmp	r3, #0
 810788a:	d106      	bne.n	810789a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810788c:	687b      	ldr	r3, [r7, #4]
 810788e:	2200      	movs	r2, #0
 8107890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8107894:	6878      	ldr	r0, [r7, #4]
 8107896:	f000 f815 	bl	81078c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	2202      	movs	r2, #2
 810789e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81078a2:	687b      	ldr	r3, [r7, #4]
 81078a4:	681a      	ldr	r2, [r3, #0]
 81078a6:	687b      	ldr	r3, [r7, #4]
 81078a8:	3304      	adds	r3, #4
 81078aa:	4619      	mov	r1, r3
 81078ac:	4610      	mov	r0, r2
 81078ae:	f000 f92d 	bl	8107b0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	2201      	movs	r2, #1
 81078b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81078ba:	2300      	movs	r3, #0
}
 81078bc:	4618      	mov	r0, r3
 81078be:	3708      	adds	r7, #8
 81078c0:	46bd      	mov	sp, r7
 81078c2:	bd80      	pop	{r7, pc}

081078c4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 81078c4:	b480      	push	{r7}
 81078c6:	b083      	sub	sp, #12
 81078c8:	af00      	add	r7, sp, #0
 81078ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 81078cc:	bf00      	nop
 81078ce:	370c      	adds	r7, #12
 81078d0:	46bd      	mov	sp, r7
 81078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078d6:	4770      	bx	lr

081078d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 81078d8:	b580      	push	{r7, lr}
 81078da:	b084      	sub	sp, #16
 81078dc:	af00      	add	r7, sp, #0
 81078de:	60f8      	str	r0, [r7, #12]
 81078e0:	60b9      	str	r1, [r7, #8]
 81078e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 81078e4:	68fb      	ldr	r3, [r7, #12]
 81078e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81078ea:	2b01      	cmp	r3, #1
 81078ec:	d101      	bne.n	81078f2 <HAL_TIM_OC_ConfigChannel+0x1a>
 81078ee:	2302      	movs	r3, #2
 81078f0:	e06c      	b.n	81079cc <HAL_TIM_OC_ConfigChannel+0xf4>
 81078f2:	68fb      	ldr	r3, [r7, #12]
 81078f4:	2201      	movs	r2, #1
 81078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81078fa:	68fb      	ldr	r3, [r7, #12]
 81078fc:	2202      	movs	r2, #2
 81078fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	2b14      	cmp	r3, #20
 8107906:	d857      	bhi.n	81079b8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8107908:	a201      	add	r2, pc, #4	; (adr r2, 8107910 <HAL_TIM_OC_ConfigChannel+0x38>)
 810790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810790e:	bf00      	nop
 8107910:	08107965 	.word	0x08107965
 8107914:	081079b9 	.word	0x081079b9
 8107918:	081079b9 	.word	0x081079b9
 810791c:	081079b9 	.word	0x081079b9
 8107920:	08107973 	.word	0x08107973
 8107924:	081079b9 	.word	0x081079b9
 8107928:	081079b9 	.word	0x081079b9
 810792c:	081079b9 	.word	0x081079b9
 8107930:	08107981 	.word	0x08107981
 8107934:	081079b9 	.word	0x081079b9
 8107938:	081079b9 	.word	0x081079b9
 810793c:	081079b9 	.word	0x081079b9
 8107940:	0810798f 	.word	0x0810798f
 8107944:	081079b9 	.word	0x081079b9
 8107948:	081079b9 	.word	0x081079b9
 810794c:	081079b9 	.word	0x081079b9
 8107950:	0810799d 	.word	0x0810799d
 8107954:	081079b9 	.word	0x081079b9
 8107958:	081079b9 	.word	0x081079b9
 810795c:	081079b9 	.word	0x081079b9
 8107960:	081079ab 	.word	0x081079ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107964:	68fb      	ldr	r3, [r7, #12]
 8107966:	681b      	ldr	r3, [r3, #0]
 8107968:	68b9      	ldr	r1, [r7, #8]
 810796a:	4618      	mov	r0, r3
 810796c:	f000 f968 	bl	8107c40 <TIM_OC1_SetConfig>
      break;
 8107970:	e023      	b.n	81079ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107972:	68fb      	ldr	r3, [r7, #12]
 8107974:	681b      	ldr	r3, [r3, #0]
 8107976:	68b9      	ldr	r1, [r7, #8]
 8107978:	4618      	mov	r0, r3
 810797a:	f000 f9f1 	bl	8107d60 <TIM_OC2_SetConfig>
      break;
 810797e:	e01c      	b.n	81079ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8107980:	68fb      	ldr	r3, [r7, #12]
 8107982:	681b      	ldr	r3, [r3, #0]
 8107984:	68b9      	ldr	r1, [r7, #8]
 8107986:	4618      	mov	r0, r3
 8107988:	f000 fa74 	bl	8107e74 <TIM_OC3_SetConfig>
      break;
 810798c:	e015      	b.n	81079ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810798e:	68fb      	ldr	r3, [r7, #12]
 8107990:	681b      	ldr	r3, [r3, #0]
 8107992:	68b9      	ldr	r1, [r7, #8]
 8107994:	4618      	mov	r0, r3
 8107996:	f000 faf3 	bl	8107f80 <TIM_OC4_SetConfig>
      break;
 810799a:	e00e      	b.n	81079ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810799c:	68fb      	ldr	r3, [r7, #12]
 810799e:	681b      	ldr	r3, [r3, #0]
 81079a0:	68b9      	ldr	r1, [r7, #8]
 81079a2:	4618      	mov	r0, r3
 81079a4:	f000 fb54 	bl	8108050 <TIM_OC5_SetConfig>
      break;
 81079a8:	e007      	b.n	81079ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81079aa:	68fb      	ldr	r3, [r7, #12]
 81079ac:	681b      	ldr	r3, [r3, #0]
 81079ae:	68b9      	ldr	r1, [r7, #8]
 81079b0:	4618      	mov	r0, r3
 81079b2:	f000 fbaf 	bl	8108114 <TIM_OC6_SetConfig>
      break;
 81079b6:	e000      	b.n	81079ba <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 81079b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 81079ba:	68fb      	ldr	r3, [r7, #12]
 81079bc:	2201      	movs	r2, #1
 81079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81079c2:	68fb      	ldr	r3, [r7, #12]
 81079c4:	2200      	movs	r2, #0
 81079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81079ca:	2300      	movs	r3, #0
}
 81079cc:	4618      	mov	r0, r3
 81079ce:	3710      	adds	r7, #16
 81079d0:	46bd      	mov	sp, r7
 81079d2:	bd80      	pop	{r7, pc}

081079d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 81079d4:	b580      	push	{r7, lr}
 81079d6:	b084      	sub	sp, #16
 81079d8:	af00      	add	r7, sp, #0
 81079da:	60f8      	str	r0, [r7, #12]
 81079dc:	60b9      	str	r1, [r7, #8]
 81079de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 81079e0:	68fb      	ldr	r3, [r7, #12]
 81079e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81079e6:	2b01      	cmp	r3, #1
 81079e8:	d101      	bne.n	81079ee <HAL_TIM_IC_ConfigChannel+0x1a>
 81079ea:	2302      	movs	r3, #2
 81079ec:	e08a      	b.n	8107b04 <HAL_TIM_IC_ConfigChannel+0x130>
 81079ee:	68fb      	ldr	r3, [r7, #12]
 81079f0:	2201      	movs	r2, #1
 81079f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81079f6:	68fb      	ldr	r3, [r7, #12]
 81079f8:	2202      	movs	r2, #2
 81079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	2b00      	cmp	r3, #0
 8107a02:	d11b      	bne.n	8107a3c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8107a04:	68fb      	ldr	r3, [r7, #12]
 8107a06:	6818      	ldr	r0, [r3, #0]
 8107a08:	68bb      	ldr	r3, [r7, #8]
 8107a0a:	6819      	ldr	r1, [r3, #0]
 8107a0c:	68bb      	ldr	r3, [r7, #8]
 8107a0e:	685a      	ldr	r2, [r3, #4]
 8107a10:	68bb      	ldr	r3, [r7, #8]
 8107a12:	68db      	ldr	r3, [r3, #12]
 8107a14:	f000 fbe2 	bl	81081dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8107a18:	68fb      	ldr	r3, [r7, #12]
 8107a1a:	681b      	ldr	r3, [r3, #0]
 8107a1c:	699a      	ldr	r2, [r3, #24]
 8107a1e:	68fb      	ldr	r3, [r7, #12]
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	f022 020c 	bic.w	r2, r2, #12
 8107a26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8107a28:	68fb      	ldr	r3, [r7, #12]
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	6999      	ldr	r1, [r3, #24]
 8107a2e:	68bb      	ldr	r3, [r7, #8]
 8107a30:	689a      	ldr	r2, [r3, #8]
 8107a32:	68fb      	ldr	r3, [r7, #12]
 8107a34:	681b      	ldr	r3, [r3, #0]
 8107a36:	430a      	orrs	r2, r1
 8107a38:	619a      	str	r2, [r3, #24]
 8107a3a:	e05a      	b.n	8107af2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8107a3c:	687b      	ldr	r3, [r7, #4]
 8107a3e:	2b04      	cmp	r3, #4
 8107a40:	d11c      	bne.n	8107a7c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8107a42:	68fb      	ldr	r3, [r7, #12]
 8107a44:	6818      	ldr	r0, [r3, #0]
 8107a46:	68bb      	ldr	r3, [r7, #8]
 8107a48:	6819      	ldr	r1, [r3, #0]
 8107a4a:	68bb      	ldr	r3, [r7, #8]
 8107a4c:	685a      	ldr	r2, [r3, #4]
 8107a4e:	68bb      	ldr	r3, [r7, #8]
 8107a50:	68db      	ldr	r3, [r3, #12]
 8107a52:	f000 fc37 	bl	81082c4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8107a56:	68fb      	ldr	r3, [r7, #12]
 8107a58:	681b      	ldr	r3, [r3, #0]
 8107a5a:	699a      	ldr	r2, [r3, #24]
 8107a5c:	68fb      	ldr	r3, [r7, #12]
 8107a5e:	681b      	ldr	r3, [r3, #0]
 8107a60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8107a64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8107a66:	68fb      	ldr	r3, [r7, #12]
 8107a68:	681b      	ldr	r3, [r3, #0]
 8107a6a:	6999      	ldr	r1, [r3, #24]
 8107a6c:	68bb      	ldr	r3, [r7, #8]
 8107a6e:	689b      	ldr	r3, [r3, #8]
 8107a70:	021a      	lsls	r2, r3, #8
 8107a72:	68fb      	ldr	r3, [r7, #12]
 8107a74:	681b      	ldr	r3, [r3, #0]
 8107a76:	430a      	orrs	r2, r1
 8107a78:	619a      	str	r2, [r3, #24]
 8107a7a:	e03a      	b.n	8107af2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	2b08      	cmp	r3, #8
 8107a80:	d11b      	bne.n	8107aba <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8107a82:	68fb      	ldr	r3, [r7, #12]
 8107a84:	6818      	ldr	r0, [r3, #0]
 8107a86:	68bb      	ldr	r3, [r7, #8]
 8107a88:	6819      	ldr	r1, [r3, #0]
 8107a8a:	68bb      	ldr	r3, [r7, #8]
 8107a8c:	685a      	ldr	r2, [r3, #4]
 8107a8e:	68bb      	ldr	r3, [r7, #8]
 8107a90:	68db      	ldr	r3, [r3, #12]
 8107a92:	f000 fc54 	bl	810833e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8107a96:	68fb      	ldr	r3, [r7, #12]
 8107a98:	681b      	ldr	r3, [r3, #0]
 8107a9a:	69da      	ldr	r2, [r3, #28]
 8107a9c:	68fb      	ldr	r3, [r7, #12]
 8107a9e:	681b      	ldr	r3, [r3, #0]
 8107aa0:	f022 020c 	bic.w	r2, r2, #12
 8107aa4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8107aa6:	68fb      	ldr	r3, [r7, #12]
 8107aa8:	681b      	ldr	r3, [r3, #0]
 8107aaa:	69d9      	ldr	r1, [r3, #28]
 8107aac:	68bb      	ldr	r3, [r7, #8]
 8107aae:	689a      	ldr	r2, [r3, #8]
 8107ab0:	68fb      	ldr	r3, [r7, #12]
 8107ab2:	681b      	ldr	r3, [r3, #0]
 8107ab4:	430a      	orrs	r2, r1
 8107ab6:	61da      	str	r2, [r3, #28]
 8107ab8:	e01b      	b.n	8107af2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8107aba:	68fb      	ldr	r3, [r7, #12]
 8107abc:	6818      	ldr	r0, [r3, #0]
 8107abe:	68bb      	ldr	r3, [r7, #8]
 8107ac0:	6819      	ldr	r1, [r3, #0]
 8107ac2:	68bb      	ldr	r3, [r7, #8]
 8107ac4:	685a      	ldr	r2, [r3, #4]
 8107ac6:	68bb      	ldr	r3, [r7, #8]
 8107ac8:	68db      	ldr	r3, [r3, #12]
 8107aca:	f000 fc74 	bl	81083b6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8107ace:	68fb      	ldr	r3, [r7, #12]
 8107ad0:	681b      	ldr	r3, [r3, #0]
 8107ad2:	69da      	ldr	r2, [r3, #28]
 8107ad4:	68fb      	ldr	r3, [r7, #12]
 8107ad6:	681b      	ldr	r3, [r3, #0]
 8107ad8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8107adc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8107ade:	68fb      	ldr	r3, [r7, #12]
 8107ae0:	681b      	ldr	r3, [r3, #0]
 8107ae2:	69d9      	ldr	r1, [r3, #28]
 8107ae4:	68bb      	ldr	r3, [r7, #8]
 8107ae6:	689b      	ldr	r3, [r3, #8]
 8107ae8:	021a      	lsls	r2, r3, #8
 8107aea:	68fb      	ldr	r3, [r7, #12]
 8107aec:	681b      	ldr	r3, [r3, #0]
 8107aee:	430a      	orrs	r2, r1
 8107af0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8107af2:	68fb      	ldr	r3, [r7, #12]
 8107af4:	2201      	movs	r2, #1
 8107af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107afa:	68fb      	ldr	r3, [r7, #12]
 8107afc:	2200      	movs	r2, #0
 8107afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107b02:	2300      	movs	r3, #0
}
 8107b04:	4618      	mov	r0, r3
 8107b06:	3710      	adds	r7, #16
 8107b08:	46bd      	mov	sp, r7
 8107b0a:	bd80      	pop	{r7, pc}

08107b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107b0c:	b480      	push	{r7}
 8107b0e:	b085      	sub	sp, #20
 8107b10:	af00      	add	r7, sp, #0
 8107b12:	6078      	str	r0, [r7, #4]
 8107b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107b16:	687b      	ldr	r3, [r7, #4]
 8107b18:	681b      	ldr	r3, [r3, #0]
 8107b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	4a40      	ldr	r2, [pc, #256]	; (8107c20 <TIM_Base_SetConfig+0x114>)
 8107b20:	4293      	cmp	r3, r2
 8107b22:	d013      	beq.n	8107b4c <TIM_Base_SetConfig+0x40>
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b2a:	d00f      	beq.n	8107b4c <TIM_Base_SetConfig+0x40>
 8107b2c:	687b      	ldr	r3, [r7, #4]
 8107b2e:	4a3d      	ldr	r2, [pc, #244]	; (8107c24 <TIM_Base_SetConfig+0x118>)
 8107b30:	4293      	cmp	r3, r2
 8107b32:	d00b      	beq.n	8107b4c <TIM_Base_SetConfig+0x40>
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	4a3c      	ldr	r2, [pc, #240]	; (8107c28 <TIM_Base_SetConfig+0x11c>)
 8107b38:	4293      	cmp	r3, r2
 8107b3a:	d007      	beq.n	8107b4c <TIM_Base_SetConfig+0x40>
 8107b3c:	687b      	ldr	r3, [r7, #4]
 8107b3e:	4a3b      	ldr	r2, [pc, #236]	; (8107c2c <TIM_Base_SetConfig+0x120>)
 8107b40:	4293      	cmp	r3, r2
 8107b42:	d003      	beq.n	8107b4c <TIM_Base_SetConfig+0x40>
 8107b44:	687b      	ldr	r3, [r7, #4]
 8107b46:	4a3a      	ldr	r2, [pc, #232]	; (8107c30 <TIM_Base_SetConfig+0x124>)
 8107b48:	4293      	cmp	r3, r2
 8107b4a:	d108      	bne.n	8107b5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107b4c:	68fb      	ldr	r3, [r7, #12]
 8107b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107b54:	683b      	ldr	r3, [r7, #0]
 8107b56:	685b      	ldr	r3, [r3, #4]
 8107b58:	68fa      	ldr	r2, [r7, #12]
 8107b5a:	4313      	orrs	r3, r2
 8107b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	4a2f      	ldr	r2, [pc, #188]	; (8107c20 <TIM_Base_SetConfig+0x114>)
 8107b62:	4293      	cmp	r3, r2
 8107b64:	d01f      	beq.n	8107ba6 <TIM_Base_SetConfig+0x9a>
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b6c:	d01b      	beq.n	8107ba6 <TIM_Base_SetConfig+0x9a>
 8107b6e:	687b      	ldr	r3, [r7, #4]
 8107b70:	4a2c      	ldr	r2, [pc, #176]	; (8107c24 <TIM_Base_SetConfig+0x118>)
 8107b72:	4293      	cmp	r3, r2
 8107b74:	d017      	beq.n	8107ba6 <TIM_Base_SetConfig+0x9a>
 8107b76:	687b      	ldr	r3, [r7, #4]
 8107b78:	4a2b      	ldr	r2, [pc, #172]	; (8107c28 <TIM_Base_SetConfig+0x11c>)
 8107b7a:	4293      	cmp	r3, r2
 8107b7c:	d013      	beq.n	8107ba6 <TIM_Base_SetConfig+0x9a>
 8107b7e:	687b      	ldr	r3, [r7, #4]
 8107b80:	4a2a      	ldr	r2, [pc, #168]	; (8107c2c <TIM_Base_SetConfig+0x120>)
 8107b82:	4293      	cmp	r3, r2
 8107b84:	d00f      	beq.n	8107ba6 <TIM_Base_SetConfig+0x9a>
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	4a29      	ldr	r2, [pc, #164]	; (8107c30 <TIM_Base_SetConfig+0x124>)
 8107b8a:	4293      	cmp	r3, r2
 8107b8c:	d00b      	beq.n	8107ba6 <TIM_Base_SetConfig+0x9a>
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	4a28      	ldr	r2, [pc, #160]	; (8107c34 <TIM_Base_SetConfig+0x128>)
 8107b92:	4293      	cmp	r3, r2
 8107b94:	d007      	beq.n	8107ba6 <TIM_Base_SetConfig+0x9a>
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	4a27      	ldr	r2, [pc, #156]	; (8107c38 <TIM_Base_SetConfig+0x12c>)
 8107b9a:	4293      	cmp	r3, r2
 8107b9c:	d003      	beq.n	8107ba6 <TIM_Base_SetConfig+0x9a>
 8107b9e:	687b      	ldr	r3, [r7, #4]
 8107ba0:	4a26      	ldr	r2, [pc, #152]	; (8107c3c <TIM_Base_SetConfig+0x130>)
 8107ba2:	4293      	cmp	r3, r2
 8107ba4:	d108      	bne.n	8107bb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107ba6:	68fb      	ldr	r3, [r7, #12]
 8107ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107bae:	683b      	ldr	r3, [r7, #0]
 8107bb0:	68db      	ldr	r3, [r3, #12]
 8107bb2:	68fa      	ldr	r2, [r7, #12]
 8107bb4:	4313      	orrs	r3, r2
 8107bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107bb8:	68fb      	ldr	r3, [r7, #12]
 8107bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107bbe:	683b      	ldr	r3, [r7, #0]
 8107bc0:	695b      	ldr	r3, [r3, #20]
 8107bc2:	4313      	orrs	r3, r2
 8107bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107bc6:	687b      	ldr	r3, [r7, #4]
 8107bc8:	68fa      	ldr	r2, [r7, #12]
 8107bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107bcc:	683b      	ldr	r3, [r7, #0]
 8107bce:	689a      	ldr	r2, [r3, #8]
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107bd4:	683b      	ldr	r3, [r7, #0]
 8107bd6:	681a      	ldr	r2, [r3, #0]
 8107bd8:	687b      	ldr	r3, [r7, #4]
 8107bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	4a10      	ldr	r2, [pc, #64]	; (8107c20 <TIM_Base_SetConfig+0x114>)
 8107be0:	4293      	cmp	r3, r2
 8107be2:	d00f      	beq.n	8107c04 <TIM_Base_SetConfig+0xf8>
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	4a12      	ldr	r2, [pc, #72]	; (8107c30 <TIM_Base_SetConfig+0x124>)
 8107be8:	4293      	cmp	r3, r2
 8107bea:	d00b      	beq.n	8107c04 <TIM_Base_SetConfig+0xf8>
 8107bec:	687b      	ldr	r3, [r7, #4]
 8107bee:	4a11      	ldr	r2, [pc, #68]	; (8107c34 <TIM_Base_SetConfig+0x128>)
 8107bf0:	4293      	cmp	r3, r2
 8107bf2:	d007      	beq.n	8107c04 <TIM_Base_SetConfig+0xf8>
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	4a10      	ldr	r2, [pc, #64]	; (8107c38 <TIM_Base_SetConfig+0x12c>)
 8107bf8:	4293      	cmp	r3, r2
 8107bfa:	d003      	beq.n	8107c04 <TIM_Base_SetConfig+0xf8>
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	4a0f      	ldr	r2, [pc, #60]	; (8107c3c <TIM_Base_SetConfig+0x130>)
 8107c00:	4293      	cmp	r3, r2
 8107c02:	d103      	bne.n	8107c0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107c04:	683b      	ldr	r3, [r7, #0]
 8107c06:	691a      	ldr	r2, [r3, #16]
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	2201      	movs	r2, #1
 8107c10:	615a      	str	r2, [r3, #20]
}
 8107c12:	bf00      	nop
 8107c14:	3714      	adds	r7, #20
 8107c16:	46bd      	mov	sp, r7
 8107c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c1c:	4770      	bx	lr
 8107c1e:	bf00      	nop
 8107c20:	40010000 	.word	0x40010000
 8107c24:	40000400 	.word	0x40000400
 8107c28:	40000800 	.word	0x40000800
 8107c2c:	40000c00 	.word	0x40000c00
 8107c30:	40010400 	.word	0x40010400
 8107c34:	40014000 	.word	0x40014000
 8107c38:	40014400 	.word	0x40014400
 8107c3c:	40014800 	.word	0x40014800

08107c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107c40:	b480      	push	{r7}
 8107c42:	b087      	sub	sp, #28
 8107c44:	af00      	add	r7, sp, #0
 8107c46:	6078      	str	r0, [r7, #4]
 8107c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	6a1b      	ldr	r3, [r3, #32]
 8107c4e:	f023 0201 	bic.w	r2, r3, #1
 8107c52:	687b      	ldr	r3, [r7, #4]
 8107c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107c56:	687b      	ldr	r3, [r7, #4]
 8107c58:	6a1b      	ldr	r3, [r3, #32]
 8107c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	685b      	ldr	r3, [r3, #4]
 8107c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	699b      	ldr	r3, [r3, #24]
 8107c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107c68:	68fb      	ldr	r3, [r7, #12]
 8107c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107c74:	68fb      	ldr	r3, [r7, #12]
 8107c76:	f023 0303 	bic.w	r3, r3, #3
 8107c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107c7c:	683b      	ldr	r3, [r7, #0]
 8107c7e:	681b      	ldr	r3, [r3, #0]
 8107c80:	68fa      	ldr	r2, [r7, #12]
 8107c82:	4313      	orrs	r3, r2
 8107c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107c86:	697b      	ldr	r3, [r7, #20]
 8107c88:	f023 0302 	bic.w	r3, r3, #2
 8107c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107c8e:	683b      	ldr	r3, [r7, #0]
 8107c90:	689b      	ldr	r3, [r3, #8]
 8107c92:	697a      	ldr	r2, [r7, #20]
 8107c94:	4313      	orrs	r3, r2
 8107c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	4a2c      	ldr	r2, [pc, #176]	; (8107d4c <TIM_OC1_SetConfig+0x10c>)
 8107c9c:	4293      	cmp	r3, r2
 8107c9e:	d00f      	beq.n	8107cc0 <TIM_OC1_SetConfig+0x80>
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	4a2b      	ldr	r2, [pc, #172]	; (8107d50 <TIM_OC1_SetConfig+0x110>)
 8107ca4:	4293      	cmp	r3, r2
 8107ca6:	d00b      	beq.n	8107cc0 <TIM_OC1_SetConfig+0x80>
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	4a2a      	ldr	r2, [pc, #168]	; (8107d54 <TIM_OC1_SetConfig+0x114>)
 8107cac:	4293      	cmp	r3, r2
 8107cae:	d007      	beq.n	8107cc0 <TIM_OC1_SetConfig+0x80>
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	4a29      	ldr	r2, [pc, #164]	; (8107d58 <TIM_OC1_SetConfig+0x118>)
 8107cb4:	4293      	cmp	r3, r2
 8107cb6:	d003      	beq.n	8107cc0 <TIM_OC1_SetConfig+0x80>
 8107cb8:	687b      	ldr	r3, [r7, #4]
 8107cba:	4a28      	ldr	r2, [pc, #160]	; (8107d5c <TIM_OC1_SetConfig+0x11c>)
 8107cbc:	4293      	cmp	r3, r2
 8107cbe:	d10c      	bne.n	8107cda <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107cc0:	697b      	ldr	r3, [r7, #20]
 8107cc2:	f023 0308 	bic.w	r3, r3, #8
 8107cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107cc8:	683b      	ldr	r3, [r7, #0]
 8107cca:	68db      	ldr	r3, [r3, #12]
 8107ccc:	697a      	ldr	r2, [r7, #20]
 8107cce:	4313      	orrs	r3, r2
 8107cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107cd2:	697b      	ldr	r3, [r7, #20]
 8107cd4:	f023 0304 	bic.w	r3, r3, #4
 8107cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	4a1b      	ldr	r2, [pc, #108]	; (8107d4c <TIM_OC1_SetConfig+0x10c>)
 8107cde:	4293      	cmp	r3, r2
 8107ce0:	d00f      	beq.n	8107d02 <TIM_OC1_SetConfig+0xc2>
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	4a1a      	ldr	r2, [pc, #104]	; (8107d50 <TIM_OC1_SetConfig+0x110>)
 8107ce6:	4293      	cmp	r3, r2
 8107ce8:	d00b      	beq.n	8107d02 <TIM_OC1_SetConfig+0xc2>
 8107cea:	687b      	ldr	r3, [r7, #4]
 8107cec:	4a19      	ldr	r2, [pc, #100]	; (8107d54 <TIM_OC1_SetConfig+0x114>)
 8107cee:	4293      	cmp	r3, r2
 8107cf0:	d007      	beq.n	8107d02 <TIM_OC1_SetConfig+0xc2>
 8107cf2:	687b      	ldr	r3, [r7, #4]
 8107cf4:	4a18      	ldr	r2, [pc, #96]	; (8107d58 <TIM_OC1_SetConfig+0x118>)
 8107cf6:	4293      	cmp	r3, r2
 8107cf8:	d003      	beq.n	8107d02 <TIM_OC1_SetConfig+0xc2>
 8107cfa:	687b      	ldr	r3, [r7, #4]
 8107cfc:	4a17      	ldr	r2, [pc, #92]	; (8107d5c <TIM_OC1_SetConfig+0x11c>)
 8107cfe:	4293      	cmp	r3, r2
 8107d00:	d111      	bne.n	8107d26 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107d02:	693b      	ldr	r3, [r7, #16]
 8107d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107d0a:	693b      	ldr	r3, [r7, #16]
 8107d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107d12:	683b      	ldr	r3, [r7, #0]
 8107d14:	695b      	ldr	r3, [r3, #20]
 8107d16:	693a      	ldr	r2, [r7, #16]
 8107d18:	4313      	orrs	r3, r2
 8107d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107d1c:	683b      	ldr	r3, [r7, #0]
 8107d1e:	699b      	ldr	r3, [r3, #24]
 8107d20:	693a      	ldr	r2, [r7, #16]
 8107d22:	4313      	orrs	r3, r2
 8107d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	693a      	ldr	r2, [r7, #16]
 8107d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	68fa      	ldr	r2, [r7, #12]
 8107d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107d32:	683b      	ldr	r3, [r7, #0]
 8107d34:	685a      	ldr	r2, [r3, #4]
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	697a      	ldr	r2, [r7, #20]
 8107d3e:	621a      	str	r2, [r3, #32]
}
 8107d40:	bf00      	nop
 8107d42:	371c      	adds	r7, #28
 8107d44:	46bd      	mov	sp, r7
 8107d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d4a:	4770      	bx	lr
 8107d4c:	40010000 	.word	0x40010000
 8107d50:	40010400 	.word	0x40010400
 8107d54:	40014000 	.word	0x40014000
 8107d58:	40014400 	.word	0x40014400
 8107d5c:	40014800 	.word	0x40014800

08107d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107d60:	b480      	push	{r7}
 8107d62:	b087      	sub	sp, #28
 8107d64:	af00      	add	r7, sp, #0
 8107d66:	6078      	str	r0, [r7, #4]
 8107d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	6a1b      	ldr	r3, [r3, #32]
 8107d6e:	f023 0210 	bic.w	r2, r3, #16
 8107d72:	687b      	ldr	r3, [r7, #4]
 8107d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	6a1b      	ldr	r3, [r3, #32]
 8107d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	685b      	ldr	r3, [r3, #4]
 8107d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107d82:	687b      	ldr	r3, [r7, #4]
 8107d84:	699b      	ldr	r3, [r3, #24]
 8107d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107d88:	68fb      	ldr	r3, [r7, #12]
 8107d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107d94:	68fb      	ldr	r3, [r7, #12]
 8107d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107d9c:	683b      	ldr	r3, [r7, #0]
 8107d9e:	681b      	ldr	r3, [r3, #0]
 8107da0:	021b      	lsls	r3, r3, #8
 8107da2:	68fa      	ldr	r2, [r7, #12]
 8107da4:	4313      	orrs	r3, r2
 8107da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107da8:	697b      	ldr	r3, [r7, #20]
 8107daa:	f023 0320 	bic.w	r3, r3, #32
 8107dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107db0:	683b      	ldr	r3, [r7, #0]
 8107db2:	689b      	ldr	r3, [r3, #8]
 8107db4:	011b      	lsls	r3, r3, #4
 8107db6:	697a      	ldr	r2, [r7, #20]
 8107db8:	4313      	orrs	r3, r2
 8107dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107dbc:	687b      	ldr	r3, [r7, #4]
 8107dbe:	4a28      	ldr	r2, [pc, #160]	; (8107e60 <TIM_OC2_SetConfig+0x100>)
 8107dc0:	4293      	cmp	r3, r2
 8107dc2:	d003      	beq.n	8107dcc <TIM_OC2_SetConfig+0x6c>
 8107dc4:	687b      	ldr	r3, [r7, #4]
 8107dc6:	4a27      	ldr	r2, [pc, #156]	; (8107e64 <TIM_OC2_SetConfig+0x104>)
 8107dc8:	4293      	cmp	r3, r2
 8107dca:	d10d      	bne.n	8107de8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107dcc:	697b      	ldr	r3, [r7, #20]
 8107dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107dd4:	683b      	ldr	r3, [r7, #0]
 8107dd6:	68db      	ldr	r3, [r3, #12]
 8107dd8:	011b      	lsls	r3, r3, #4
 8107dda:	697a      	ldr	r2, [r7, #20]
 8107ddc:	4313      	orrs	r3, r2
 8107dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107de0:	697b      	ldr	r3, [r7, #20]
 8107de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107de8:	687b      	ldr	r3, [r7, #4]
 8107dea:	4a1d      	ldr	r2, [pc, #116]	; (8107e60 <TIM_OC2_SetConfig+0x100>)
 8107dec:	4293      	cmp	r3, r2
 8107dee:	d00f      	beq.n	8107e10 <TIM_OC2_SetConfig+0xb0>
 8107df0:	687b      	ldr	r3, [r7, #4]
 8107df2:	4a1c      	ldr	r2, [pc, #112]	; (8107e64 <TIM_OC2_SetConfig+0x104>)
 8107df4:	4293      	cmp	r3, r2
 8107df6:	d00b      	beq.n	8107e10 <TIM_OC2_SetConfig+0xb0>
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	4a1b      	ldr	r2, [pc, #108]	; (8107e68 <TIM_OC2_SetConfig+0x108>)
 8107dfc:	4293      	cmp	r3, r2
 8107dfe:	d007      	beq.n	8107e10 <TIM_OC2_SetConfig+0xb0>
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	4a1a      	ldr	r2, [pc, #104]	; (8107e6c <TIM_OC2_SetConfig+0x10c>)
 8107e04:	4293      	cmp	r3, r2
 8107e06:	d003      	beq.n	8107e10 <TIM_OC2_SetConfig+0xb0>
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	4a19      	ldr	r2, [pc, #100]	; (8107e70 <TIM_OC2_SetConfig+0x110>)
 8107e0c:	4293      	cmp	r3, r2
 8107e0e:	d113      	bne.n	8107e38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107e10:	693b      	ldr	r3, [r7, #16]
 8107e12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107e18:	693b      	ldr	r3, [r7, #16]
 8107e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107e20:	683b      	ldr	r3, [r7, #0]
 8107e22:	695b      	ldr	r3, [r3, #20]
 8107e24:	009b      	lsls	r3, r3, #2
 8107e26:	693a      	ldr	r2, [r7, #16]
 8107e28:	4313      	orrs	r3, r2
 8107e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107e2c:	683b      	ldr	r3, [r7, #0]
 8107e2e:	699b      	ldr	r3, [r3, #24]
 8107e30:	009b      	lsls	r3, r3, #2
 8107e32:	693a      	ldr	r2, [r7, #16]
 8107e34:	4313      	orrs	r3, r2
 8107e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107e38:	687b      	ldr	r3, [r7, #4]
 8107e3a:	693a      	ldr	r2, [r7, #16]
 8107e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	68fa      	ldr	r2, [r7, #12]
 8107e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107e44:	683b      	ldr	r3, [r7, #0]
 8107e46:	685a      	ldr	r2, [r3, #4]
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	697a      	ldr	r2, [r7, #20]
 8107e50:	621a      	str	r2, [r3, #32]
}
 8107e52:	bf00      	nop
 8107e54:	371c      	adds	r7, #28
 8107e56:	46bd      	mov	sp, r7
 8107e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e5c:	4770      	bx	lr
 8107e5e:	bf00      	nop
 8107e60:	40010000 	.word	0x40010000
 8107e64:	40010400 	.word	0x40010400
 8107e68:	40014000 	.word	0x40014000
 8107e6c:	40014400 	.word	0x40014400
 8107e70:	40014800 	.word	0x40014800

08107e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107e74:	b480      	push	{r7}
 8107e76:	b087      	sub	sp, #28
 8107e78:	af00      	add	r7, sp, #0
 8107e7a:	6078      	str	r0, [r7, #4]
 8107e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107e7e:	687b      	ldr	r3, [r7, #4]
 8107e80:	6a1b      	ldr	r3, [r3, #32]
 8107e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107e86:	687b      	ldr	r3, [r7, #4]
 8107e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107e8a:	687b      	ldr	r3, [r7, #4]
 8107e8c:	6a1b      	ldr	r3, [r3, #32]
 8107e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	685b      	ldr	r3, [r3, #4]
 8107e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107e96:	687b      	ldr	r3, [r7, #4]
 8107e98:	69db      	ldr	r3, [r3, #28]
 8107e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107e9c:	68fb      	ldr	r3, [r7, #12]
 8107e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107ea4:	68fb      	ldr	r3, [r7, #12]
 8107ea6:	f023 0303 	bic.w	r3, r3, #3
 8107eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107eac:	683b      	ldr	r3, [r7, #0]
 8107eae:	681b      	ldr	r3, [r3, #0]
 8107eb0:	68fa      	ldr	r2, [r7, #12]
 8107eb2:	4313      	orrs	r3, r2
 8107eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107eb6:	697b      	ldr	r3, [r7, #20]
 8107eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107ebe:	683b      	ldr	r3, [r7, #0]
 8107ec0:	689b      	ldr	r3, [r3, #8]
 8107ec2:	021b      	lsls	r3, r3, #8
 8107ec4:	697a      	ldr	r2, [r7, #20]
 8107ec6:	4313      	orrs	r3, r2
 8107ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107eca:	687b      	ldr	r3, [r7, #4]
 8107ecc:	4a27      	ldr	r2, [pc, #156]	; (8107f6c <TIM_OC3_SetConfig+0xf8>)
 8107ece:	4293      	cmp	r3, r2
 8107ed0:	d003      	beq.n	8107eda <TIM_OC3_SetConfig+0x66>
 8107ed2:	687b      	ldr	r3, [r7, #4]
 8107ed4:	4a26      	ldr	r2, [pc, #152]	; (8107f70 <TIM_OC3_SetConfig+0xfc>)
 8107ed6:	4293      	cmp	r3, r2
 8107ed8:	d10d      	bne.n	8107ef6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107eda:	697b      	ldr	r3, [r7, #20]
 8107edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107ee2:	683b      	ldr	r3, [r7, #0]
 8107ee4:	68db      	ldr	r3, [r3, #12]
 8107ee6:	021b      	lsls	r3, r3, #8
 8107ee8:	697a      	ldr	r2, [r7, #20]
 8107eea:	4313      	orrs	r3, r2
 8107eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107eee:	697b      	ldr	r3, [r7, #20]
 8107ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107ef6:	687b      	ldr	r3, [r7, #4]
 8107ef8:	4a1c      	ldr	r2, [pc, #112]	; (8107f6c <TIM_OC3_SetConfig+0xf8>)
 8107efa:	4293      	cmp	r3, r2
 8107efc:	d00f      	beq.n	8107f1e <TIM_OC3_SetConfig+0xaa>
 8107efe:	687b      	ldr	r3, [r7, #4]
 8107f00:	4a1b      	ldr	r2, [pc, #108]	; (8107f70 <TIM_OC3_SetConfig+0xfc>)
 8107f02:	4293      	cmp	r3, r2
 8107f04:	d00b      	beq.n	8107f1e <TIM_OC3_SetConfig+0xaa>
 8107f06:	687b      	ldr	r3, [r7, #4]
 8107f08:	4a1a      	ldr	r2, [pc, #104]	; (8107f74 <TIM_OC3_SetConfig+0x100>)
 8107f0a:	4293      	cmp	r3, r2
 8107f0c:	d007      	beq.n	8107f1e <TIM_OC3_SetConfig+0xaa>
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	4a19      	ldr	r2, [pc, #100]	; (8107f78 <TIM_OC3_SetConfig+0x104>)
 8107f12:	4293      	cmp	r3, r2
 8107f14:	d003      	beq.n	8107f1e <TIM_OC3_SetConfig+0xaa>
 8107f16:	687b      	ldr	r3, [r7, #4]
 8107f18:	4a18      	ldr	r2, [pc, #96]	; (8107f7c <TIM_OC3_SetConfig+0x108>)
 8107f1a:	4293      	cmp	r3, r2
 8107f1c:	d113      	bne.n	8107f46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107f1e:	693b      	ldr	r3, [r7, #16]
 8107f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107f26:	693b      	ldr	r3, [r7, #16]
 8107f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107f2e:	683b      	ldr	r3, [r7, #0]
 8107f30:	695b      	ldr	r3, [r3, #20]
 8107f32:	011b      	lsls	r3, r3, #4
 8107f34:	693a      	ldr	r2, [r7, #16]
 8107f36:	4313      	orrs	r3, r2
 8107f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107f3a:	683b      	ldr	r3, [r7, #0]
 8107f3c:	699b      	ldr	r3, [r3, #24]
 8107f3e:	011b      	lsls	r3, r3, #4
 8107f40:	693a      	ldr	r2, [r7, #16]
 8107f42:	4313      	orrs	r3, r2
 8107f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	693a      	ldr	r2, [r7, #16]
 8107f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107f4c:	687b      	ldr	r3, [r7, #4]
 8107f4e:	68fa      	ldr	r2, [r7, #12]
 8107f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107f52:	683b      	ldr	r3, [r7, #0]
 8107f54:	685a      	ldr	r2, [r3, #4]
 8107f56:	687b      	ldr	r3, [r7, #4]
 8107f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107f5a:	687b      	ldr	r3, [r7, #4]
 8107f5c:	697a      	ldr	r2, [r7, #20]
 8107f5e:	621a      	str	r2, [r3, #32]
}
 8107f60:	bf00      	nop
 8107f62:	371c      	adds	r7, #28
 8107f64:	46bd      	mov	sp, r7
 8107f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f6a:	4770      	bx	lr
 8107f6c:	40010000 	.word	0x40010000
 8107f70:	40010400 	.word	0x40010400
 8107f74:	40014000 	.word	0x40014000
 8107f78:	40014400 	.word	0x40014400
 8107f7c:	40014800 	.word	0x40014800

08107f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107f80:	b480      	push	{r7}
 8107f82:	b087      	sub	sp, #28
 8107f84:	af00      	add	r7, sp, #0
 8107f86:	6078      	str	r0, [r7, #4]
 8107f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107f8a:	687b      	ldr	r3, [r7, #4]
 8107f8c:	6a1b      	ldr	r3, [r3, #32]
 8107f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107f96:	687b      	ldr	r3, [r7, #4]
 8107f98:	6a1b      	ldr	r3, [r3, #32]
 8107f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107f9c:	687b      	ldr	r3, [r7, #4]
 8107f9e:	685b      	ldr	r3, [r3, #4]
 8107fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	69db      	ldr	r3, [r3, #28]
 8107fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107fa8:	68fb      	ldr	r3, [r7, #12]
 8107faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107fb0:	68fb      	ldr	r3, [r7, #12]
 8107fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107fb8:	683b      	ldr	r3, [r7, #0]
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	021b      	lsls	r3, r3, #8
 8107fbe:	68fa      	ldr	r2, [r7, #12]
 8107fc0:	4313      	orrs	r3, r2
 8107fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107fc4:	693b      	ldr	r3, [r7, #16]
 8107fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107fcc:	683b      	ldr	r3, [r7, #0]
 8107fce:	689b      	ldr	r3, [r3, #8]
 8107fd0:	031b      	lsls	r3, r3, #12
 8107fd2:	693a      	ldr	r2, [r7, #16]
 8107fd4:	4313      	orrs	r3, r2
 8107fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	4a18      	ldr	r2, [pc, #96]	; (810803c <TIM_OC4_SetConfig+0xbc>)
 8107fdc:	4293      	cmp	r3, r2
 8107fde:	d00f      	beq.n	8108000 <TIM_OC4_SetConfig+0x80>
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	4a17      	ldr	r2, [pc, #92]	; (8108040 <TIM_OC4_SetConfig+0xc0>)
 8107fe4:	4293      	cmp	r3, r2
 8107fe6:	d00b      	beq.n	8108000 <TIM_OC4_SetConfig+0x80>
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	4a16      	ldr	r2, [pc, #88]	; (8108044 <TIM_OC4_SetConfig+0xc4>)
 8107fec:	4293      	cmp	r3, r2
 8107fee:	d007      	beq.n	8108000 <TIM_OC4_SetConfig+0x80>
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	4a15      	ldr	r2, [pc, #84]	; (8108048 <TIM_OC4_SetConfig+0xc8>)
 8107ff4:	4293      	cmp	r3, r2
 8107ff6:	d003      	beq.n	8108000 <TIM_OC4_SetConfig+0x80>
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	4a14      	ldr	r2, [pc, #80]	; (810804c <TIM_OC4_SetConfig+0xcc>)
 8107ffc:	4293      	cmp	r3, r2
 8107ffe:	d109      	bne.n	8108014 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8108000:	697b      	ldr	r3, [r7, #20]
 8108002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8108006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8108008:	683b      	ldr	r3, [r7, #0]
 810800a:	695b      	ldr	r3, [r3, #20]
 810800c:	019b      	lsls	r3, r3, #6
 810800e:	697a      	ldr	r2, [r7, #20]
 8108010:	4313      	orrs	r3, r2
 8108012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	697a      	ldr	r2, [r7, #20]
 8108018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	68fa      	ldr	r2, [r7, #12]
 810801e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8108020:	683b      	ldr	r3, [r7, #0]
 8108022:	685a      	ldr	r2, [r3, #4]
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	693a      	ldr	r2, [r7, #16]
 810802c:	621a      	str	r2, [r3, #32]
}
 810802e:	bf00      	nop
 8108030:	371c      	adds	r7, #28
 8108032:	46bd      	mov	sp, r7
 8108034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108038:	4770      	bx	lr
 810803a:	bf00      	nop
 810803c:	40010000 	.word	0x40010000
 8108040:	40010400 	.word	0x40010400
 8108044:	40014000 	.word	0x40014000
 8108048:	40014400 	.word	0x40014400
 810804c:	40014800 	.word	0x40014800

08108050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8108050:	b480      	push	{r7}
 8108052:	b087      	sub	sp, #28
 8108054:	af00      	add	r7, sp, #0
 8108056:	6078      	str	r0, [r7, #4]
 8108058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810805a:	687b      	ldr	r3, [r7, #4]
 810805c:	6a1b      	ldr	r3, [r3, #32]
 810805e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	6a1b      	ldr	r3, [r3, #32]
 810806a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810806c:	687b      	ldr	r3, [r7, #4]
 810806e:	685b      	ldr	r3, [r3, #4]
 8108070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8108078:	68fb      	ldr	r3, [r7, #12]
 810807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810807e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108080:	683b      	ldr	r3, [r7, #0]
 8108082:	681b      	ldr	r3, [r3, #0]
 8108084:	68fa      	ldr	r2, [r7, #12]
 8108086:	4313      	orrs	r3, r2
 8108088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810808a:	693b      	ldr	r3, [r7, #16]
 810808c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8108092:	683b      	ldr	r3, [r7, #0]
 8108094:	689b      	ldr	r3, [r3, #8]
 8108096:	041b      	lsls	r3, r3, #16
 8108098:	693a      	ldr	r2, [r7, #16]
 810809a:	4313      	orrs	r3, r2
 810809c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	4a17      	ldr	r2, [pc, #92]	; (8108100 <TIM_OC5_SetConfig+0xb0>)
 81080a2:	4293      	cmp	r3, r2
 81080a4:	d00f      	beq.n	81080c6 <TIM_OC5_SetConfig+0x76>
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	4a16      	ldr	r2, [pc, #88]	; (8108104 <TIM_OC5_SetConfig+0xb4>)
 81080aa:	4293      	cmp	r3, r2
 81080ac:	d00b      	beq.n	81080c6 <TIM_OC5_SetConfig+0x76>
 81080ae:	687b      	ldr	r3, [r7, #4]
 81080b0:	4a15      	ldr	r2, [pc, #84]	; (8108108 <TIM_OC5_SetConfig+0xb8>)
 81080b2:	4293      	cmp	r3, r2
 81080b4:	d007      	beq.n	81080c6 <TIM_OC5_SetConfig+0x76>
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	4a14      	ldr	r2, [pc, #80]	; (810810c <TIM_OC5_SetConfig+0xbc>)
 81080ba:	4293      	cmp	r3, r2
 81080bc:	d003      	beq.n	81080c6 <TIM_OC5_SetConfig+0x76>
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	4a13      	ldr	r2, [pc, #76]	; (8108110 <TIM_OC5_SetConfig+0xc0>)
 81080c2:	4293      	cmp	r3, r2
 81080c4:	d109      	bne.n	81080da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81080c6:	697b      	ldr	r3, [r7, #20]
 81080c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81080cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81080ce:	683b      	ldr	r3, [r7, #0]
 81080d0:	695b      	ldr	r3, [r3, #20]
 81080d2:	021b      	lsls	r3, r3, #8
 81080d4:	697a      	ldr	r2, [r7, #20]
 81080d6:	4313      	orrs	r3, r2
 81080d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	697a      	ldr	r2, [r7, #20]
 81080de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81080e0:	687b      	ldr	r3, [r7, #4]
 81080e2:	68fa      	ldr	r2, [r7, #12]
 81080e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81080e6:	683b      	ldr	r3, [r7, #0]
 81080e8:	685a      	ldr	r2, [r3, #4]
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81080ee:	687b      	ldr	r3, [r7, #4]
 81080f0:	693a      	ldr	r2, [r7, #16]
 81080f2:	621a      	str	r2, [r3, #32]
}
 81080f4:	bf00      	nop
 81080f6:	371c      	adds	r7, #28
 81080f8:	46bd      	mov	sp, r7
 81080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080fe:	4770      	bx	lr
 8108100:	40010000 	.word	0x40010000
 8108104:	40010400 	.word	0x40010400
 8108108:	40014000 	.word	0x40014000
 810810c:	40014400 	.word	0x40014400
 8108110:	40014800 	.word	0x40014800

08108114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8108114:	b480      	push	{r7}
 8108116:	b087      	sub	sp, #28
 8108118:	af00      	add	r7, sp, #0
 810811a:	6078      	str	r0, [r7, #4]
 810811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810811e:	687b      	ldr	r3, [r7, #4]
 8108120:	6a1b      	ldr	r3, [r3, #32]
 8108122:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810812a:	687b      	ldr	r3, [r7, #4]
 810812c:	6a1b      	ldr	r3, [r3, #32]
 810812e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	685b      	ldr	r3, [r3, #4]
 8108134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810813c:	68fb      	ldr	r3, [r7, #12]
 810813e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108144:	683b      	ldr	r3, [r7, #0]
 8108146:	681b      	ldr	r3, [r3, #0]
 8108148:	021b      	lsls	r3, r3, #8
 810814a:	68fa      	ldr	r2, [r7, #12]
 810814c:	4313      	orrs	r3, r2
 810814e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8108150:	693b      	ldr	r3, [r7, #16]
 8108152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8108158:	683b      	ldr	r3, [r7, #0]
 810815a:	689b      	ldr	r3, [r3, #8]
 810815c:	051b      	lsls	r3, r3, #20
 810815e:	693a      	ldr	r2, [r7, #16]
 8108160:	4313      	orrs	r3, r2
 8108162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108164:	687b      	ldr	r3, [r7, #4]
 8108166:	4a18      	ldr	r2, [pc, #96]	; (81081c8 <TIM_OC6_SetConfig+0xb4>)
 8108168:	4293      	cmp	r3, r2
 810816a:	d00f      	beq.n	810818c <TIM_OC6_SetConfig+0x78>
 810816c:	687b      	ldr	r3, [r7, #4]
 810816e:	4a17      	ldr	r2, [pc, #92]	; (81081cc <TIM_OC6_SetConfig+0xb8>)
 8108170:	4293      	cmp	r3, r2
 8108172:	d00b      	beq.n	810818c <TIM_OC6_SetConfig+0x78>
 8108174:	687b      	ldr	r3, [r7, #4]
 8108176:	4a16      	ldr	r2, [pc, #88]	; (81081d0 <TIM_OC6_SetConfig+0xbc>)
 8108178:	4293      	cmp	r3, r2
 810817a:	d007      	beq.n	810818c <TIM_OC6_SetConfig+0x78>
 810817c:	687b      	ldr	r3, [r7, #4]
 810817e:	4a15      	ldr	r2, [pc, #84]	; (81081d4 <TIM_OC6_SetConfig+0xc0>)
 8108180:	4293      	cmp	r3, r2
 8108182:	d003      	beq.n	810818c <TIM_OC6_SetConfig+0x78>
 8108184:	687b      	ldr	r3, [r7, #4]
 8108186:	4a14      	ldr	r2, [pc, #80]	; (81081d8 <TIM_OC6_SetConfig+0xc4>)
 8108188:	4293      	cmp	r3, r2
 810818a:	d109      	bne.n	81081a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810818c:	697b      	ldr	r3, [r7, #20]
 810818e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8108194:	683b      	ldr	r3, [r7, #0]
 8108196:	695b      	ldr	r3, [r3, #20]
 8108198:	029b      	lsls	r3, r3, #10
 810819a:	697a      	ldr	r2, [r7, #20]
 810819c:	4313      	orrs	r3, r2
 810819e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81081a0:	687b      	ldr	r3, [r7, #4]
 81081a2:	697a      	ldr	r2, [r7, #20]
 81081a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	68fa      	ldr	r2, [r7, #12]
 81081aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81081ac:	683b      	ldr	r3, [r7, #0]
 81081ae:	685a      	ldr	r2, [r3, #4]
 81081b0:	687b      	ldr	r3, [r7, #4]
 81081b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81081b4:	687b      	ldr	r3, [r7, #4]
 81081b6:	693a      	ldr	r2, [r7, #16]
 81081b8:	621a      	str	r2, [r3, #32]
}
 81081ba:	bf00      	nop
 81081bc:	371c      	adds	r7, #28
 81081be:	46bd      	mov	sp, r7
 81081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081c4:	4770      	bx	lr
 81081c6:	bf00      	nop
 81081c8:	40010000 	.word	0x40010000
 81081cc:	40010400 	.word	0x40010400
 81081d0:	40014000 	.word	0x40014000
 81081d4:	40014400 	.word	0x40014400
 81081d8:	40014800 	.word	0x40014800

081081dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 81081dc:	b480      	push	{r7}
 81081de:	b087      	sub	sp, #28
 81081e0:	af00      	add	r7, sp, #0
 81081e2:	60f8      	str	r0, [r7, #12]
 81081e4:	60b9      	str	r1, [r7, #8]
 81081e6:	607a      	str	r2, [r7, #4]
 81081e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81081ea:	68fb      	ldr	r3, [r7, #12]
 81081ec:	6a1b      	ldr	r3, [r3, #32]
 81081ee:	f023 0201 	bic.w	r2, r3, #1
 81081f2:	68fb      	ldr	r3, [r7, #12]
 81081f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81081f6:	68fb      	ldr	r3, [r7, #12]
 81081f8:	699b      	ldr	r3, [r3, #24]
 81081fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81081fc:	68fb      	ldr	r3, [r7, #12]
 81081fe:	6a1b      	ldr	r3, [r3, #32]
 8108200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8108202:	68fb      	ldr	r3, [r7, #12]
 8108204:	4a28      	ldr	r2, [pc, #160]	; (81082a8 <TIM_TI1_SetConfig+0xcc>)
 8108206:	4293      	cmp	r3, r2
 8108208:	d01b      	beq.n	8108242 <TIM_TI1_SetConfig+0x66>
 810820a:	68fb      	ldr	r3, [r7, #12]
 810820c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108210:	d017      	beq.n	8108242 <TIM_TI1_SetConfig+0x66>
 8108212:	68fb      	ldr	r3, [r7, #12]
 8108214:	4a25      	ldr	r2, [pc, #148]	; (81082ac <TIM_TI1_SetConfig+0xd0>)
 8108216:	4293      	cmp	r3, r2
 8108218:	d013      	beq.n	8108242 <TIM_TI1_SetConfig+0x66>
 810821a:	68fb      	ldr	r3, [r7, #12]
 810821c:	4a24      	ldr	r2, [pc, #144]	; (81082b0 <TIM_TI1_SetConfig+0xd4>)
 810821e:	4293      	cmp	r3, r2
 8108220:	d00f      	beq.n	8108242 <TIM_TI1_SetConfig+0x66>
 8108222:	68fb      	ldr	r3, [r7, #12]
 8108224:	4a23      	ldr	r2, [pc, #140]	; (81082b4 <TIM_TI1_SetConfig+0xd8>)
 8108226:	4293      	cmp	r3, r2
 8108228:	d00b      	beq.n	8108242 <TIM_TI1_SetConfig+0x66>
 810822a:	68fb      	ldr	r3, [r7, #12]
 810822c:	4a22      	ldr	r2, [pc, #136]	; (81082b8 <TIM_TI1_SetConfig+0xdc>)
 810822e:	4293      	cmp	r3, r2
 8108230:	d007      	beq.n	8108242 <TIM_TI1_SetConfig+0x66>
 8108232:	68fb      	ldr	r3, [r7, #12]
 8108234:	4a21      	ldr	r2, [pc, #132]	; (81082bc <TIM_TI1_SetConfig+0xe0>)
 8108236:	4293      	cmp	r3, r2
 8108238:	d003      	beq.n	8108242 <TIM_TI1_SetConfig+0x66>
 810823a:	68fb      	ldr	r3, [r7, #12]
 810823c:	4a20      	ldr	r2, [pc, #128]	; (81082c0 <TIM_TI1_SetConfig+0xe4>)
 810823e:	4293      	cmp	r3, r2
 8108240:	d101      	bne.n	8108246 <TIM_TI1_SetConfig+0x6a>
 8108242:	2301      	movs	r3, #1
 8108244:	e000      	b.n	8108248 <TIM_TI1_SetConfig+0x6c>
 8108246:	2300      	movs	r3, #0
 8108248:	2b00      	cmp	r3, #0
 810824a:	d008      	beq.n	810825e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810824c:	697b      	ldr	r3, [r7, #20]
 810824e:	f023 0303 	bic.w	r3, r3, #3
 8108252:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8108254:	697a      	ldr	r2, [r7, #20]
 8108256:	687b      	ldr	r3, [r7, #4]
 8108258:	4313      	orrs	r3, r2
 810825a:	617b      	str	r3, [r7, #20]
 810825c:	e003      	b.n	8108266 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810825e:	697b      	ldr	r3, [r7, #20]
 8108260:	f043 0301 	orr.w	r3, r3, #1
 8108264:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108266:	697b      	ldr	r3, [r7, #20]
 8108268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810826c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810826e:	683b      	ldr	r3, [r7, #0]
 8108270:	011b      	lsls	r3, r3, #4
 8108272:	b2db      	uxtb	r3, r3
 8108274:	697a      	ldr	r2, [r7, #20]
 8108276:	4313      	orrs	r3, r2
 8108278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810827a:	693b      	ldr	r3, [r7, #16]
 810827c:	f023 030a 	bic.w	r3, r3, #10
 8108280:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8108282:	68bb      	ldr	r3, [r7, #8]
 8108284:	f003 030a 	and.w	r3, r3, #10
 8108288:	693a      	ldr	r2, [r7, #16]
 810828a:	4313      	orrs	r3, r2
 810828c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810828e:	68fb      	ldr	r3, [r7, #12]
 8108290:	697a      	ldr	r2, [r7, #20]
 8108292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108294:	68fb      	ldr	r3, [r7, #12]
 8108296:	693a      	ldr	r2, [r7, #16]
 8108298:	621a      	str	r2, [r3, #32]
}
 810829a:	bf00      	nop
 810829c:	371c      	adds	r7, #28
 810829e:	46bd      	mov	sp, r7
 81082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082a4:	4770      	bx	lr
 81082a6:	bf00      	nop
 81082a8:	40010000 	.word	0x40010000
 81082ac:	40000400 	.word	0x40000400
 81082b0:	40000800 	.word	0x40000800
 81082b4:	40000c00 	.word	0x40000c00
 81082b8:	40010400 	.word	0x40010400
 81082bc:	40001800 	.word	0x40001800
 81082c0:	40014000 	.word	0x40014000

081082c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81082c4:	b480      	push	{r7}
 81082c6:	b087      	sub	sp, #28
 81082c8:	af00      	add	r7, sp, #0
 81082ca:	60f8      	str	r0, [r7, #12]
 81082cc:	60b9      	str	r1, [r7, #8]
 81082ce:	607a      	str	r2, [r7, #4]
 81082d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81082d2:	68fb      	ldr	r3, [r7, #12]
 81082d4:	6a1b      	ldr	r3, [r3, #32]
 81082d6:	f023 0210 	bic.w	r2, r3, #16
 81082da:	68fb      	ldr	r3, [r7, #12]
 81082dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81082de:	68fb      	ldr	r3, [r7, #12]
 81082e0:	699b      	ldr	r3, [r3, #24]
 81082e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81082e4:	68fb      	ldr	r3, [r7, #12]
 81082e6:	6a1b      	ldr	r3, [r3, #32]
 81082e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 81082ea:	697b      	ldr	r3, [r7, #20]
 81082ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81082f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 81082f2:	687b      	ldr	r3, [r7, #4]
 81082f4:	021b      	lsls	r3, r3, #8
 81082f6:	697a      	ldr	r2, [r7, #20]
 81082f8:	4313      	orrs	r3, r2
 81082fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81082fc:	697b      	ldr	r3, [r7, #20]
 81082fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108302:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8108304:	683b      	ldr	r3, [r7, #0]
 8108306:	031b      	lsls	r3, r3, #12
 8108308:	b29b      	uxth	r3, r3
 810830a:	697a      	ldr	r2, [r7, #20]
 810830c:	4313      	orrs	r3, r2
 810830e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8108310:	693b      	ldr	r3, [r7, #16]
 8108312:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8108316:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8108318:	68bb      	ldr	r3, [r7, #8]
 810831a:	011b      	lsls	r3, r3, #4
 810831c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8108320:	693a      	ldr	r2, [r7, #16]
 8108322:	4313      	orrs	r3, r2
 8108324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8108326:	68fb      	ldr	r3, [r7, #12]
 8108328:	697a      	ldr	r2, [r7, #20]
 810832a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810832c:	68fb      	ldr	r3, [r7, #12]
 810832e:	693a      	ldr	r2, [r7, #16]
 8108330:	621a      	str	r2, [r3, #32]
}
 8108332:	bf00      	nop
 8108334:	371c      	adds	r7, #28
 8108336:	46bd      	mov	sp, r7
 8108338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810833c:	4770      	bx	lr

0810833e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810833e:	b480      	push	{r7}
 8108340:	b087      	sub	sp, #28
 8108342:	af00      	add	r7, sp, #0
 8108344:	60f8      	str	r0, [r7, #12]
 8108346:	60b9      	str	r1, [r7, #8]
 8108348:	607a      	str	r2, [r7, #4]
 810834a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810834c:	68fb      	ldr	r3, [r7, #12]
 810834e:	6a1b      	ldr	r3, [r3, #32]
 8108350:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8108354:	68fb      	ldr	r3, [r7, #12]
 8108356:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8108358:	68fb      	ldr	r3, [r7, #12]
 810835a:	69db      	ldr	r3, [r3, #28]
 810835c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810835e:	68fb      	ldr	r3, [r7, #12]
 8108360:	6a1b      	ldr	r3, [r3, #32]
 8108362:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8108364:	697b      	ldr	r3, [r7, #20]
 8108366:	f023 0303 	bic.w	r3, r3, #3
 810836a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 810836c:	697a      	ldr	r2, [r7, #20]
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	4313      	orrs	r3, r2
 8108372:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8108374:	697b      	ldr	r3, [r7, #20]
 8108376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810837a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810837c:	683b      	ldr	r3, [r7, #0]
 810837e:	011b      	lsls	r3, r3, #4
 8108380:	b2db      	uxtb	r3, r3
 8108382:	697a      	ldr	r2, [r7, #20]
 8108384:	4313      	orrs	r3, r2
 8108386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8108388:	693b      	ldr	r3, [r7, #16]
 810838a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 810838e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8108390:	68bb      	ldr	r3, [r7, #8]
 8108392:	021b      	lsls	r3, r3, #8
 8108394:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8108398:	693a      	ldr	r2, [r7, #16]
 810839a:	4313      	orrs	r3, r2
 810839c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810839e:	68fb      	ldr	r3, [r7, #12]
 81083a0:	697a      	ldr	r2, [r7, #20]
 81083a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 81083a4:	68fb      	ldr	r3, [r7, #12]
 81083a6:	693a      	ldr	r2, [r7, #16]
 81083a8:	621a      	str	r2, [r3, #32]
}
 81083aa:	bf00      	nop
 81083ac:	371c      	adds	r7, #28
 81083ae:	46bd      	mov	sp, r7
 81083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083b4:	4770      	bx	lr

081083b6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81083b6:	b480      	push	{r7}
 81083b8:	b087      	sub	sp, #28
 81083ba:	af00      	add	r7, sp, #0
 81083bc:	60f8      	str	r0, [r7, #12]
 81083be:	60b9      	str	r1, [r7, #8]
 81083c0:	607a      	str	r2, [r7, #4]
 81083c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81083c4:	68fb      	ldr	r3, [r7, #12]
 81083c6:	6a1b      	ldr	r3, [r3, #32]
 81083c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81083cc:	68fb      	ldr	r3, [r7, #12]
 81083ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81083d0:	68fb      	ldr	r3, [r7, #12]
 81083d2:	69db      	ldr	r3, [r3, #28]
 81083d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81083d6:	68fb      	ldr	r3, [r7, #12]
 81083d8:	6a1b      	ldr	r3, [r3, #32]
 81083da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 81083dc:	697b      	ldr	r3, [r7, #20]
 81083de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81083e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 81083e4:	687b      	ldr	r3, [r7, #4]
 81083e6:	021b      	lsls	r3, r3, #8
 81083e8:	697a      	ldr	r2, [r7, #20]
 81083ea:	4313      	orrs	r3, r2
 81083ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 81083ee:	697b      	ldr	r3, [r7, #20]
 81083f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81083f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 81083f6:	683b      	ldr	r3, [r7, #0]
 81083f8:	031b      	lsls	r3, r3, #12
 81083fa:	b29b      	uxth	r3, r3
 81083fc:	697a      	ldr	r2, [r7, #20]
 81083fe:	4313      	orrs	r3, r2
 8108400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8108402:	693b      	ldr	r3, [r7, #16]
 8108404:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8108408:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810840a:	68bb      	ldr	r3, [r7, #8]
 810840c:	031b      	lsls	r3, r3, #12
 810840e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8108412:	693a      	ldr	r2, [r7, #16]
 8108414:	4313      	orrs	r3, r2
 8108416:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8108418:	68fb      	ldr	r3, [r7, #12]
 810841a:	697a      	ldr	r2, [r7, #20]
 810841c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810841e:	68fb      	ldr	r3, [r7, #12]
 8108420:	693a      	ldr	r2, [r7, #16]
 8108422:	621a      	str	r2, [r3, #32]
}
 8108424:	bf00      	nop
 8108426:	371c      	adds	r7, #28
 8108428:	46bd      	mov	sp, r7
 810842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810842e:	4770      	bx	lr

08108430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108430:	b480      	push	{r7}
 8108432:	b085      	sub	sp, #20
 8108434:	af00      	add	r7, sp, #0
 8108436:	6078      	str	r0, [r7, #4]
 8108438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810843a:	687b      	ldr	r3, [r7, #4]
 810843c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108440:	2b01      	cmp	r3, #1
 8108442:	d101      	bne.n	8108448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108444:	2302      	movs	r3, #2
 8108446:	e068      	b.n	810851a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8108448:	687b      	ldr	r3, [r7, #4]
 810844a:	2201      	movs	r2, #1
 810844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108450:	687b      	ldr	r3, [r7, #4]
 8108452:	2202      	movs	r2, #2
 8108454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8108458:	687b      	ldr	r3, [r7, #4]
 810845a:	681b      	ldr	r3, [r3, #0]
 810845c:	685b      	ldr	r3, [r3, #4]
 810845e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	681b      	ldr	r3, [r3, #0]
 8108464:	689b      	ldr	r3, [r3, #8]
 8108466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	681b      	ldr	r3, [r3, #0]
 810846c:	4a2e      	ldr	r2, [pc, #184]	; (8108528 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810846e:	4293      	cmp	r3, r2
 8108470:	d004      	beq.n	810847c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108472:	687b      	ldr	r3, [r7, #4]
 8108474:	681b      	ldr	r3, [r3, #0]
 8108476:	4a2d      	ldr	r2, [pc, #180]	; (810852c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8108478:	4293      	cmp	r3, r2
 810847a:	d108      	bne.n	810848e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810847c:	68fb      	ldr	r3, [r7, #12]
 810847e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8108482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108484:	683b      	ldr	r3, [r7, #0]
 8108486:	685b      	ldr	r3, [r3, #4]
 8108488:	68fa      	ldr	r2, [r7, #12]
 810848a:	4313      	orrs	r3, r2
 810848c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810848e:	68fb      	ldr	r3, [r7, #12]
 8108490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8108496:	683b      	ldr	r3, [r7, #0]
 8108498:	681b      	ldr	r3, [r3, #0]
 810849a:	68fa      	ldr	r2, [r7, #12]
 810849c:	4313      	orrs	r3, r2
 810849e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81084a0:	687b      	ldr	r3, [r7, #4]
 81084a2:	681b      	ldr	r3, [r3, #0]
 81084a4:	68fa      	ldr	r2, [r7, #12]
 81084a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81084a8:	687b      	ldr	r3, [r7, #4]
 81084aa:	681b      	ldr	r3, [r3, #0]
 81084ac:	4a1e      	ldr	r2, [pc, #120]	; (8108528 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 81084ae:	4293      	cmp	r3, r2
 81084b0:	d01d      	beq.n	81084ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81084b2:	687b      	ldr	r3, [r7, #4]
 81084b4:	681b      	ldr	r3, [r3, #0]
 81084b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81084ba:	d018      	beq.n	81084ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	4a1b      	ldr	r2, [pc, #108]	; (8108530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81084c2:	4293      	cmp	r3, r2
 81084c4:	d013      	beq.n	81084ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81084c6:	687b      	ldr	r3, [r7, #4]
 81084c8:	681b      	ldr	r3, [r3, #0]
 81084ca:	4a1a      	ldr	r2, [pc, #104]	; (8108534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81084cc:	4293      	cmp	r3, r2
 81084ce:	d00e      	beq.n	81084ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81084d0:	687b      	ldr	r3, [r7, #4]
 81084d2:	681b      	ldr	r3, [r3, #0]
 81084d4:	4a18      	ldr	r2, [pc, #96]	; (8108538 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81084d6:	4293      	cmp	r3, r2
 81084d8:	d009      	beq.n	81084ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81084da:	687b      	ldr	r3, [r7, #4]
 81084dc:	681b      	ldr	r3, [r3, #0]
 81084de:	4a13      	ldr	r2, [pc, #76]	; (810852c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 81084e0:	4293      	cmp	r3, r2
 81084e2:	d004      	beq.n	81084ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81084e4:	687b      	ldr	r3, [r7, #4]
 81084e6:	681b      	ldr	r3, [r3, #0]
 81084e8:	4a14      	ldr	r2, [pc, #80]	; (810853c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81084ea:	4293      	cmp	r3, r2
 81084ec:	d10c      	bne.n	8108508 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81084ee:	68bb      	ldr	r3, [r7, #8]
 81084f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81084f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81084f6:	683b      	ldr	r3, [r7, #0]
 81084f8:	689b      	ldr	r3, [r3, #8]
 81084fa:	68ba      	ldr	r2, [r7, #8]
 81084fc:	4313      	orrs	r3, r2
 81084fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8108500:	687b      	ldr	r3, [r7, #4]
 8108502:	681b      	ldr	r3, [r3, #0]
 8108504:	68ba      	ldr	r2, [r7, #8]
 8108506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8108508:	687b      	ldr	r3, [r7, #4]
 810850a:	2201      	movs	r2, #1
 810850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8108510:	687b      	ldr	r3, [r7, #4]
 8108512:	2200      	movs	r2, #0
 8108514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8108518:	2300      	movs	r3, #0
}
 810851a:	4618      	mov	r0, r3
 810851c:	3714      	adds	r7, #20
 810851e:	46bd      	mov	sp, r7
 8108520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108524:	4770      	bx	lr
 8108526:	bf00      	nop
 8108528:	40010000 	.word	0x40010000
 810852c:	40010400 	.word	0x40010400
 8108530:	40000400 	.word	0x40000400
 8108534:	40000800 	.word	0x40000800
 8108538:	40000c00 	.word	0x40000c00
 810853c:	40001800 	.word	0x40001800

08108540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8108540:	b480      	push	{r7}
 8108542:	b085      	sub	sp, #20
 8108544:	af00      	add	r7, sp, #0
 8108546:	6078      	str	r0, [r7, #4]
 8108548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810854a:	2300      	movs	r3, #0
 810854c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810854e:	687b      	ldr	r3, [r7, #4]
 8108550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108554:	2b01      	cmp	r3, #1
 8108556:	d101      	bne.n	810855c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8108558:	2302      	movs	r3, #2
 810855a:	e065      	b.n	8108628 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810855c:	687b      	ldr	r3, [r7, #4]
 810855e:	2201      	movs	r2, #1
 8108560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8108564:	68fb      	ldr	r3, [r7, #12]
 8108566:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810856a:	683b      	ldr	r3, [r7, #0]
 810856c:	68db      	ldr	r3, [r3, #12]
 810856e:	4313      	orrs	r3, r2
 8108570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8108572:	68fb      	ldr	r3, [r7, #12]
 8108574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8108578:	683b      	ldr	r3, [r7, #0]
 810857a:	689b      	ldr	r3, [r3, #8]
 810857c:	4313      	orrs	r3, r2
 810857e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8108580:	68fb      	ldr	r3, [r7, #12]
 8108582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8108586:	683b      	ldr	r3, [r7, #0]
 8108588:	685b      	ldr	r3, [r3, #4]
 810858a:	4313      	orrs	r3, r2
 810858c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810858e:	68fb      	ldr	r3, [r7, #12]
 8108590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8108594:	683b      	ldr	r3, [r7, #0]
 8108596:	681b      	ldr	r3, [r3, #0]
 8108598:	4313      	orrs	r3, r2
 810859a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810859c:	68fb      	ldr	r3, [r7, #12]
 810859e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81085a2:	683b      	ldr	r3, [r7, #0]
 81085a4:	691b      	ldr	r3, [r3, #16]
 81085a6:	4313      	orrs	r3, r2
 81085a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 81085aa:	68fb      	ldr	r3, [r7, #12]
 81085ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 81085b0:	683b      	ldr	r3, [r7, #0]
 81085b2:	695b      	ldr	r3, [r3, #20]
 81085b4:	4313      	orrs	r3, r2
 81085b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81085b8:	68fb      	ldr	r3, [r7, #12]
 81085ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81085be:	683b      	ldr	r3, [r7, #0]
 81085c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81085c2:	4313      	orrs	r3, r2
 81085c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81085c6:	68fb      	ldr	r3, [r7, #12]
 81085c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 81085cc:	683b      	ldr	r3, [r7, #0]
 81085ce:	699b      	ldr	r3, [r3, #24]
 81085d0:	041b      	lsls	r3, r3, #16
 81085d2:	4313      	orrs	r3, r2
 81085d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 81085d6:	687b      	ldr	r3, [r7, #4]
 81085d8:	681b      	ldr	r3, [r3, #0]
 81085da:	4a16      	ldr	r2, [pc, #88]	; (8108634 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 81085dc:	4293      	cmp	r3, r2
 81085de:	d004      	beq.n	81085ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 81085e0:	687b      	ldr	r3, [r7, #4]
 81085e2:	681b      	ldr	r3, [r3, #0]
 81085e4:	4a14      	ldr	r2, [pc, #80]	; (8108638 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 81085e6:	4293      	cmp	r3, r2
 81085e8:	d115      	bne.n	8108616 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 81085ea:	68fb      	ldr	r3, [r7, #12]
 81085ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 81085f0:	683b      	ldr	r3, [r7, #0]
 81085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81085f4:	051b      	lsls	r3, r3, #20
 81085f6:	4313      	orrs	r3, r2
 81085f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 81085fa:	68fb      	ldr	r3, [r7, #12]
 81085fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8108600:	683b      	ldr	r3, [r7, #0]
 8108602:	69db      	ldr	r3, [r3, #28]
 8108604:	4313      	orrs	r3, r2
 8108606:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8108608:	68fb      	ldr	r3, [r7, #12]
 810860a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810860e:	683b      	ldr	r3, [r7, #0]
 8108610:	6a1b      	ldr	r3, [r3, #32]
 8108612:	4313      	orrs	r3, r2
 8108614:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8108616:	687b      	ldr	r3, [r7, #4]
 8108618:	681b      	ldr	r3, [r3, #0]
 810861a:	68fa      	ldr	r2, [r7, #12]
 810861c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810861e:	687b      	ldr	r3, [r7, #4]
 8108620:	2200      	movs	r2, #0
 8108622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8108626:	2300      	movs	r3, #0
}
 8108628:	4618      	mov	r0, r3
 810862a:	3714      	adds	r7, #20
 810862c:	46bd      	mov	sp, r7
 810862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108632:	4770      	bx	lr
 8108634:	40010000 	.word	0x40010000
 8108638:	40010400 	.word	0x40010400

0810863c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810863c:	b580      	push	{r7, lr}
 810863e:	b082      	sub	sp, #8
 8108640:	af00      	add	r7, sp, #0
 8108642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	2b00      	cmp	r3, #0
 8108648:	d101      	bne.n	810864e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810864a:	2301      	movs	r3, #1
 810864c:	e042      	b.n	81086d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810864e:	687b      	ldr	r3, [r7, #4]
 8108650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108654:	2b00      	cmp	r3, #0
 8108656:	d106      	bne.n	8108666 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	2200      	movs	r2, #0
 810865c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108660:	6878      	ldr	r0, [r7, #4]
 8108662:	f7f9 fadd 	bl	8101c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	2224      	movs	r2, #36	; 0x24
 810866a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 810866e:	687b      	ldr	r3, [r7, #4]
 8108670:	681b      	ldr	r3, [r3, #0]
 8108672:	681a      	ldr	r2, [r3, #0]
 8108674:	687b      	ldr	r3, [r7, #4]
 8108676:	681b      	ldr	r3, [r3, #0]
 8108678:	f022 0201 	bic.w	r2, r2, #1
 810867c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810867e:	6878      	ldr	r0, [r7, #4]
 8108680:	f000 f82e 	bl	81086e0 <UART_SetConfig>
 8108684:	4603      	mov	r3, r0
 8108686:	2b01      	cmp	r3, #1
 8108688:	d101      	bne.n	810868e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810868a:	2301      	movs	r3, #1
 810868c:	e022      	b.n	81086d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810868e:	687b      	ldr	r3, [r7, #4]
 8108690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108692:	2b00      	cmp	r3, #0
 8108694:	d002      	beq.n	810869c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8108696:	6878      	ldr	r0, [r7, #4]
 8108698:	f002 f9a0 	bl	810a9dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810869c:	687b      	ldr	r3, [r7, #4]
 810869e:	681b      	ldr	r3, [r3, #0]
 81086a0:	685a      	ldr	r2, [r3, #4]
 81086a2:	687b      	ldr	r3, [r7, #4]
 81086a4:	681b      	ldr	r3, [r3, #0]
 81086a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81086aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81086ac:	687b      	ldr	r3, [r7, #4]
 81086ae:	681b      	ldr	r3, [r3, #0]
 81086b0:	689a      	ldr	r2, [r3, #8]
 81086b2:	687b      	ldr	r3, [r7, #4]
 81086b4:	681b      	ldr	r3, [r3, #0]
 81086b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81086ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81086bc:	687b      	ldr	r3, [r7, #4]
 81086be:	681b      	ldr	r3, [r3, #0]
 81086c0:	681a      	ldr	r2, [r3, #0]
 81086c2:	687b      	ldr	r3, [r7, #4]
 81086c4:	681b      	ldr	r3, [r3, #0]
 81086c6:	f042 0201 	orr.w	r2, r2, #1
 81086ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81086cc:	6878      	ldr	r0, [r7, #4]
 81086ce:	f002 fa27 	bl	810ab20 <UART_CheckIdleState>
 81086d2:	4603      	mov	r3, r0
}
 81086d4:	4618      	mov	r0, r3
 81086d6:	3708      	adds	r7, #8
 81086d8:	46bd      	mov	sp, r7
 81086da:	bd80      	pop	{r7, pc}
 81086dc:	0000      	movs	r0, r0
	...

081086e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81086e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 81086e4:	b090      	sub	sp, #64	; 0x40
 81086e6:	af00      	add	r7, sp, #0
 81086e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 81086ea:	2300      	movs	r3, #0
 81086ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 81086ee:	2300      	movs	r3, #0
 81086f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 81086f4:	2300      	movs	r3, #0
 81086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81086f8:	687b      	ldr	r3, [r7, #4]
 81086fa:	689a      	ldr	r2, [r3, #8]
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	691b      	ldr	r3, [r3, #16]
 8108700:	431a      	orrs	r2, r3
 8108702:	687b      	ldr	r3, [r7, #4]
 8108704:	695b      	ldr	r3, [r3, #20]
 8108706:	431a      	orrs	r2, r3
 8108708:	687b      	ldr	r3, [r7, #4]
 810870a:	69db      	ldr	r3, [r3, #28]
 810870c:	4313      	orrs	r3, r2
 810870e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8108710:	687b      	ldr	r3, [r7, #4]
 8108712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8108716:	4313      	orrs	r3, r2
 8108718:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810871a:	687b      	ldr	r3, [r7, #4]
 810871c:	681b      	ldr	r3, [r3, #0]
 810871e:	681a      	ldr	r2, [r3, #0]
 8108720:	4bc0      	ldr	r3, [pc, #768]	; (8108a24 <UART_SetConfig+0x344>)
 8108722:	4013      	ands	r3, r2
 8108724:	687a      	ldr	r2, [r7, #4]
 8108726:	6812      	ldr	r2, [r2, #0]
 8108728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810872a:	430b      	orrs	r3, r1
 810872c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	681b      	ldr	r3, [r3, #0]
 8108732:	685b      	ldr	r3, [r3, #4]
 8108734:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	68da      	ldr	r2, [r3, #12]
 810873c:	687b      	ldr	r3, [r7, #4]
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	430a      	orrs	r2, r1
 8108742:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108744:	687b      	ldr	r3, [r7, #4]
 8108746:	699b      	ldr	r3, [r3, #24]
 8108748:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810874a:	687b      	ldr	r3, [r7, #4]
 810874c:	681b      	ldr	r3, [r3, #0]
 810874e:	4ab6      	ldr	r2, [pc, #728]	; (8108a28 <UART_SetConfig+0x348>)
 8108750:	4293      	cmp	r3, r2
 8108752:	d004      	beq.n	810875e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108754:	687b      	ldr	r3, [r7, #4]
 8108756:	6a1b      	ldr	r3, [r3, #32]
 8108758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 810875a:	4313      	orrs	r3, r2
 810875c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810875e:	687b      	ldr	r3, [r7, #4]
 8108760:	681b      	ldr	r3, [r3, #0]
 8108762:	689b      	ldr	r3, [r3, #8]
 8108764:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8108768:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810876c:	687a      	ldr	r2, [r7, #4]
 810876e:	6812      	ldr	r2, [r2, #0]
 8108770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8108772:	430b      	orrs	r3, r1
 8108774:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108776:	687b      	ldr	r3, [r7, #4]
 8108778:	681b      	ldr	r3, [r3, #0]
 810877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810877c:	f023 010f 	bic.w	r1, r3, #15
 8108780:	687b      	ldr	r3, [r7, #4]
 8108782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	681b      	ldr	r3, [r3, #0]
 8108788:	430a      	orrs	r2, r1
 810878a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810878c:	687b      	ldr	r3, [r7, #4]
 810878e:	681b      	ldr	r3, [r3, #0]
 8108790:	4aa6      	ldr	r2, [pc, #664]	; (8108a2c <UART_SetConfig+0x34c>)
 8108792:	4293      	cmp	r3, r2
 8108794:	d177      	bne.n	8108886 <UART_SetConfig+0x1a6>
 8108796:	4ba6      	ldr	r3, [pc, #664]	; (8108a30 <UART_SetConfig+0x350>)
 8108798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810879a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810879e:	2b28      	cmp	r3, #40	; 0x28
 81087a0:	d86c      	bhi.n	810887c <UART_SetConfig+0x19c>
 81087a2:	a201      	add	r2, pc, #4	; (adr r2, 81087a8 <UART_SetConfig+0xc8>)
 81087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087a8:	0810884d 	.word	0x0810884d
 81087ac:	0810887d 	.word	0x0810887d
 81087b0:	0810887d 	.word	0x0810887d
 81087b4:	0810887d 	.word	0x0810887d
 81087b8:	0810887d 	.word	0x0810887d
 81087bc:	0810887d 	.word	0x0810887d
 81087c0:	0810887d 	.word	0x0810887d
 81087c4:	0810887d 	.word	0x0810887d
 81087c8:	08108855 	.word	0x08108855
 81087cc:	0810887d 	.word	0x0810887d
 81087d0:	0810887d 	.word	0x0810887d
 81087d4:	0810887d 	.word	0x0810887d
 81087d8:	0810887d 	.word	0x0810887d
 81087dc:	0810887d 	.word	0x0810887d
 81087e0:	0810887d 	.word	0x0810887d
 81087e4:	0810887d 	.word	0x0810887d
 81087e8:	0810885d 	.word	0x0810885d
 81087ec:	0810887d 	.word	0x0810887d
 81087f0:	0810887d 	.word	0x0810887d
 81087f4:	0810887d 	.word	0x0810887d
 81087f8:	0810887d 	.word	0x0810887d
 81087fc:	0810887d 	.word	0x0810887d
 8108800:	0810887d 	.word	0x0810887d
 8108804:	0810887d 	.word	0x0810887d
 8108808:	08108865 	.word	0x08108865
 810880c:	0810887d 	.word	0x0810887d
 8108810:	0810887d 	.word	0x0810887d
 8108814:	0810887d 	.word	0x0810887d
 8108818:	0810887d 	.word	0x0810887d
 810881c:	0810887d 	.word	0x0810887d
 8108820:	0810887d 	.word	0x0810887d
 8108824:	0810887d 	.word	0x0810887d
 8108828:	0810886d 	.word	0x0810886d
 810882c:	0810887d 	.word	0x0810887d
 8108830:	0810887d 	.word	0x0810887d
 8108834:	0810887d 	.word	0x0810887d
 8108838:	0810887d 	.word	0x0810887d
 810883c:	0810887d 	.word	0x0810887d
 8108840:	0810887d 	.word	0x0810887d
 8108844:	0810887d 	.word	0x0810887d
 8108848:	08108875 	.word	0x08108875
 810884c:	2301      	movs	r3, #1
 810884e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108852:	e231      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108854:	2304      	movs	r3, #4
 8108856:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810885a:	e22d      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 810885c:	2308      	movs	r3, #8
 810885e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108862:	e229      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108864:	2310      	movs	r3, #16
 8108866:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810886a:	e225      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 810886c:	2320      	movs	r3, #32
 810886e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108872:	e221      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108874:	2340      	movs	r3, #64	; 0x40
 8108876:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810887a:	e21d      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 810887c:	2380      	movs	r3, #128	; 0x80
 810887e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108882:	bf00      	nop
 8108884:	e218      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108886:	687b      	ldr	r3, [r7, #4]
 8108888:	681b      	ldr	r3, [r3, #0]
 810888a:	4a6a      	ldr	r2, [pc, #424]	; (8108a34 <UART_SetConfig+0x354>)
 810888c:	4293      	cmp	r3, r2
 810888e:	d132      	bne.n	81088f6 <UART_SetConfig+0x216>
 8108890:	4b67      	ldr	r3, [pc, #412]	; (8108a30 <UART_SetConfig+0x350>)
 8108892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108894:	f003 0307 	and.w	r3, r3, #7
 8108898:	2b05      	cmp	r3, #5
 810889a:	d827      	bhi.n	81088ec <UART_SetConfig+0x20c>
 810889c:	a201      	add	r2, pc, #4	; (adr r2, 81088a4 <UART_SetConfig+0x1c4>)
 810889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088a2:	bf00      	nop
 81088a4:	081088bd 	.word	0x081088bd
 81088a8:	081088c5 	.word	0x081088c5
 81088ac:	081088cd 	.word	0x081088cd
 81088b0:	081088d5 	.word	0x081088d5
 81088b4:	081088dd 	.word	0x081088dd
 81088b8:	081088e5 	.word	0x081088e5
 81088bc:	2300      	movs	r3, #0
 81088be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81088c2:	e1f9      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81088c4:	2304      	movs	r3, #4
 81088c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81088ca:	e1f5      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81088cc:	2308      	movs	r3, #8
 81088ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81088d2:	e1f1      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81088d4:	2310      	movs	r3, #16
 81088d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81088da:	e1ed      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81088dc:	2320      	movs	r3, #32
 81088de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81088e2:	e1e9      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81088e4:	2340      	movs	r3, #64	; 0x40
 81088e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81088ea:	e1e5      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81088ec:	2380      	movs	r3, #128	; 0x80
 81088ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81088f2:	bf00      	nop
 81088f4:	e1e0      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81088f6:	687b      	ldr	r3, [r7, #4]
 81088f8:	681b      	ldr	r3, [r3, #0]
 81088fa:	4a4f      	ldr	r2, [pc, #316]	; (8108a38 <UART_SetConfig+0x358>)
 81088fc:	4293      	cmp	r3, r2
 81088fe:	d132      	bne.n	8108966 <UART_SetConfig+0x286>
 8108900:	4b4b      	ldr	r3, [pc, #300]	; (8108a30 <UART_SetConfig+0x350>)
 8108902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108904:	f003 0307 	and.w	r3, r3, #7
 8108908:	2b05      	cmp	r3, #5
 810890a:	d827      	bhi.n	810895c <UART_SetConfig+0x27c>
 810890c:	a201      	add	r2, pc, #4	; (adr r2, 8108914 <UART_SetConfig+0x234>)
 810890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108912:	bf00      	nop
 8108914:	0810892d 	.word	0x0810892d
 8108918:	08108935 	.word	0x08108935
 810891c:	0810893d 	.word	0x0810893d
 8108920:	08108945 	.word	0x08108945
 8108924:	0810894d 	.word	0x0810894d
 8108928:	08108955 	.word	0x08108955
 810892c:	2300      	movs	r3, #0
 810892e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108932:	e1c1      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108934:	2304      	movs	r3, #4
 8108936:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810893a:	e1bd      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 810893c:	2308      	movs	r3, #8
 810893e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108942:	e1b9      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108944:	2310      	movs	r3, #16
 8108946:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810894a:	e1b5      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 810894c:	2320      	movs	r3, #32
 810894e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108952:	e1b1      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108954:	2340      	movs	r3, #64	; 0x40
 8108956:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810895a:	e1ad      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 810895c:	2380      	movs	r3, #128	; 0x80
 810895e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108962:	bf00      	nop
 8108964:	e1a8      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108966:	687b      	ldr	r3, [r7, #4]
 8108968:	681b      	ldr	r3, [r3, #0]
 810896a:	4a34      	ldr	r2, [pc, #208]	; (8108a3c <UART_SetConfig+0x35c>)
 810896c:	4293      	cmp	r3, r2
 810896e:	d132      	bne.n	81089d6 <UART_SetConfig+0x2f6>
 8108970:	4b2f      	ldr	r3, [pc, #188]	; (8108a30 <UART_SetConfig+0x350>)
 8108972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108974:	f003 0307 	and.w	r3, r3, #7
 8108978:	2b05      	cmp	r3, #5
 810897a:	d827      	bhi.n	81089cc <UART_SetConfig+0x2ec>
 810897c:	a201      	add	r2, pc, #4	; (adr r2, 8108984 <UART_SetConfig+0x2a4>)
 810897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108982:	bf00      	nop
 8108984:	0810899d 	.word	0x0810899d
 8108988:	081089a5 	.word	0x081089a5
 810898c:	081089ad 	.word	0x081089ad
 8108990:	081089b5 	.word	0x081089b5
 8108994:	081089bd 	.word	0x081089bd
 8108998:	081089c5 	.word	0x081089c5
 810899c:	2300      	movs	r3, #0
 810899e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81089a2:	e189      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81089a4:	2304      	movs	r3, #4
 81089a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81089aa:	e185      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81089ac:	2308      	movs	r3, #8
 81089ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81089b2:	e181      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81089b4:	2310      	movs	r3, #16
 81089b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81089ba:	e17d      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81089bc:	2320      	movs	r3, #32
 81089be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81089c2:	e179      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81089c4:	2340      	movs	r3, #64	; 0x40
 81089c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81089ca:	e175      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81089cc:	2380      	movs	r3, #128	; 0x80
 81089ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81089d2:	bf00      	nop
 81089d4:	e170      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	681b      	ldr	r3, [r3, #0]
 81089da:	4a19      	ldr	r2, [pc, #100]	; (8108a40 <UART_SetConfig+0x360>)
 81089dc:	4293      	cmp	r3, r2
 81089de:	d142      	bne.n	8108a66 <UART_SetConfig+0x386>
 81089e0:	4b13      	ldr	r3, [pc, #76]	; (8108a30 <UART_SetConfig+0x350>)
 81089e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81089e4:	f003 0307 	and.w	r3, r3, #7
 81089e8:	2b05      	cmp	r3, #5
 81089ea:	d837      	bhi.n	8108a5c <UART_SetConfig+0x37c>
 81089ec:	a201      	add	r2, pc, #4	; (adr r2, 81089f4 <UART_SetConfig+0x314>)
 81089ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81089f2:	bf00      	nop
 81089f4:	08108a0d 	.word	0x08108a0d
 81089f8:	08108a15 	.word	0x08108a15
 81089fc:	08108a1d 	.word	0x08108a1d
 8108a00:	08108a45 	.word	0x08108a45
 8108a04:	08108a4d 	.word	0x08108a4d
 8108a08:	08108a55 	.word	0x08108a55
 8108a0c:	2300      	movs	r3, #0
 8108a0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108a12:	e151      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108a14:	2304      	movs	r3, #4
 8108a16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108a1a:	e14d      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108a1c:	2308      	movs	r3, #8
 8108a1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108a22:	e149      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108a24:	cfff69f3 	.word	0xcfff69f3
 8108a28:	58000c00 	.word	0x58000c00
 8108a2c:	40011000 	.word	0x40011000
 8108a30:	58024400 	.word	0x58024400
 8108a34:	40004400 	.word	0x40004400
 8108a38:	40004800 	.word	0x40004800
 8108a3c:	40004c00 	.word	0x40004c00
 8108a40:	40005000 	.word	0x40005000
 8108a44:	2310      	movs	r3, #16
 8108a46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108a4a:	e135      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108a4c:	2320      	movs	r3, #32
 8108a4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108a52:	e131      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108a54:	2340      	movs	r3, #64	; 0x40
 8108a56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108a5a:	e12d      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108a5c:	2380      	movs	r3, #128	; 0x80
 8108a5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108a62:	bf00      	nop
 8108a64:	e128      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108a66:	687b      	ldr	r3, [r7, #4]
 8108a68:	681b      	ldr	r3, [r3, #0]
 8108a6a:	4ac3      	ldr	r2, [pc, #780]	; (8108d78 <UART_SetConfig+0x698>)
 8108a6c:	4293      	cmp	r3, r2
 8108a6e:	d178      	bne.n	8108b62 <UART_SetConfig+0x482>
 8108a70:	4bc2      	ldr	r3, [pc, #776]	; (8108d7c <UART_SetConfig+0x69c>)
 8108a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108a74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108a78:	2b28      	cmp	r3, #40	; 0x28
 8108a7a:	d86d      	bhi.n	8108b58 <UART_SetConfig+0x478>
 8108a7c:	a201      	add	r2, pc, #4	; (adr r2, 8108a84 <UART_SetConfig+0x3a4>)
 8108a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a82:	bf00      	nop
 8108a84:	08108b29 	.word	0x08108b29
 8108a88:	08108b59 	.word	0x08108b59
 8108a8c:	08108b59 	.word	0x08108b59
 8108a90:	08108b59 	.word	0x08108b59
 8108a94:	08108b59 	.word	0x08108b59
 8108a98:	08108b59 	.word	0x08108b59
 8108a9c:	08108b59 	.word	0x08108b59
 8108aa0:	08108b59 	.word	0x08108b59
 8108aa4:	08108b31 	.word	0x08108b31
 8108aa8:	08108b59 	.word	0x08108b59
 8108aac:	08108b59 	.word	0x08108b59
 8108ab0:	08108b59 	.word	0x08108b59
 8108ab4:	08108b59 	.word	0x08108b59
 8108ab8:	08108b59 	.word	0x08108b59
 8108abc:	08108b59 	.word	0x08108b59
 8108ac0:	08108b59 	.word	0x08108b59
 8108ac4:	08108b39 	.word	0x08108b39
 8108ac8:	08108b59 	.word	0x08108b59
 8108acc:	08108b59 	.word	0x08108b59
 8108ad0:	08108b59 	.word	0x08108b59
 8108ad4:	08108b59 	.word	0x08108b59
 8108ad8:	08108b59 	.word	0x08108b59
 8108adc:	08108b59 	.word	0x08108b59
 8108ae0:	08108b59 	.word	0x08108b59
 8108ae4:	08108b41 	.word	0x08108b41
 8108ae8:	08108b59 	.word	0x08108b59
 8108aec:	08108b59 	.word	0x08108b59
 8108af0:	08108b59 	.word	0x08108b59
 8108af4:	08108b59 	.word	0x08108b59
 8108af8:	08108b59 	.word	0x08108b59
 8108afc:	08108b59 	.word	0x08108b59
 8108b00:	08108b59 	.word	0x08108b59
 8108b04:	08108b49 	.word	0x08108b49
 8108b08:	08108b59 	.word	0x08108b59
 8108b0c:	08108b59 	.word	0x08108b59
 8108b10:	08108b59 	.word	0x08108b59
 8108b14:	08108b59 	.word	0x08108b59
 8108b18:	08108b59 	.word	0x08108b59
 8108b1c:	08108b59 	.word	0x08108b59
 8108b20:	08108b59 	.word	0x08108b59
 8108b24:	08108b51 	.word	0x08108b51
 8108b28:	2301      	movs	r3, #1
 8108b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108b2e:	e0c3      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108b30:	2304      	movs	r3, #4
 8108b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108b36:	e0bf      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108b38:	2308      	movs	r3, #8
 8108b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108b3e:	e0bb      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108b40:	2310      	movs	r3, #16
 8108b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108b46:	e0b7      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108b48:	2320      	movs	r3, #32
 8108b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108b4e:	e0b3      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108b50:	2340      	movs	r3, #64	; 0x40
 8108b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108b56:	e0af      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108b58:	2380      	movs	r3, #128	; 0x80
 8108b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108b5e:	bf00      	nop
 8108b60:	e0aa      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108b62:	687b      	ldr	r3, [r7, #4]
 8108b64:	681b      	ldr	r3, [r3, #0]
 8108b66:	4a86      	ldr	r2, [pc, #536]	; (8108d80 <UART_SetConfig+0x6a0>)
 8108b68:	4293      	cmp	r3, r2
 8108b6a:	d132      	bne.n	8108bd2 <UART_SetConfig+0x4f2>
 8108b6c:	4b83      	ldr	r3, [pc, #524]	; (8108d7c <UART_SetConfig+0x69c>)
 8108b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108b70:	f003 0307 	and.w	r3, r3, #7
 8108b74:	2b05      	cmp	r3, #5
 8108b76:	d827      	bhi.n	8108bc8 <UART_SetConfig+0x4e8>
 8108b78:	a201      	add	r2, pc, #4	; (adr r2, 8108b80 <UART_SetConfig+0x4a0>)
 8108b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b7e:	bf00      	nop
 8108b80:	08108b99 	.word	0x08108b99
 8108b84:	08108ba1 	.word	0x08108ba1
 8108b88:	08108ba9 	.word	0x08108ba9
 8108b8c:	08108bb1 	.word	0x08108bb1
 8108b90:	08108bb9 	.word	0x08108bb9
 8108b94:	08108bc1 	.word	0x08108bc1
 8108b98:	2300      	movs	r3, #0
 8108b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108b9e:	e08b      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108ba0:	2304      	movs	r3, #4
 8108ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108ba6:	e087      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108ba8:	2308      	movs	r3, #8
 8108baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108bae:	e083      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108bb0:	2310      	movs	r3, #16
 8108bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108bb6:	e07f      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108bb8:	2320      	movs	r3, #32
 8108bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108bbe:	e07b      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108bc0:	2340      	movs	r3, #64	; 0x40
 8108bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108bc6:	e077      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108bc8:	2380      	movs	r3, #128	; 0x80
 8108bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108bce:	bf00      	nop
 8108bd0:	e072      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108bd2:	687b      	ldr	r3, [r7, #4]
 8108bd4:	681b      	ldr	r3, [r3, #0]
 8108bd6:	4a6b      	ldr	r2, [pc, #428]	; (8108d84 <UART_SetConfig+0x6a4>)
 8108bd8:	4293      	cmp	r3, r2
 8108bda:	d132      	bne.n	8108c42 <UART_SetConfig+0x562>
 8108bdc:	4b67      	ldr	r3, [pc, #412]	; (8108d7c <UART_SetConfig+0x69c>)
 8108bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108be0:	f003 0307 	and.w	r3, r3, #7
 8108be4:	2b05      	cmp	r3, #5
 8108be6:	d827      	bhi.n	8108c38 <UART_SetConfig+0x558>
 8108be8:	a201      	add	r2, pc, #4	; (adr r2, 8108bf0 <UART_SetConfig+0x510>)
 8108bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108bee:	bf00      	nop
 8108bf0:	08108c09 	.word	0x08108c09
 8108bf4:	08108c11 	.word	0x08108c11
 8108bf8:	08108c19 	.word	0x08108c19
 8108bfc:	08108c21 	.word	0x08108c21
 8108c00:	08108c29 	.word	0x08108c29
 8108c04:	08108c31 	.word	0x08108c31
 8108c08:	2300      	movs	r3, #0
 8108c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c0e:	e053      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c10:	2304      	movs	r3, #4
 8108c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c16:	e04f      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c18:	2308      	movs	r3, #8
 8108c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c1e:	e04b      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c20:	2310      	movs	r3, #16
 8108c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c26:	e047      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c28:	2320      	movs	r3, #32
 8108c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c2e:	e043      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c30:	2340      	movs	r3, #64	; 0x40
 8108c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c36:	e03f      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c38:	2380      	movs	r3, #128	; 0x80
 8108c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c3e:	bf00      	nop
 8108c40:	e03a      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c42:	687b      	ldr	r3, [r7, #4]
 8108c44:	681b      	ldr	r3, [r3, #0]
 8108c46:	4a50      	ldr	r2, [pc, #320]	; (8108d88 <UART_SetConfig+0x6a8>)
 8108c48:	4293      	cmp	r3, r2
 8108c4a:	d132      	bne.n	8108cb2 <UART_SetConfig+0x5d2>
 8108c4c:	4b4b      	ldr	r3, [pc, #300]	; (8108d7c <UART_SetConfig+0x69c>)
 8108c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108c50:	f003 0307 	and.w	r3, r3, #7
 8108c54:	2b05      	cmp	r3, #5
 8108c56:	d827      	bhi.n	8108ca8 <UART_SetConfig+0x5c8>
 8108c58:	a201      	add	r2, pc, #4	; (adr r2, 8108c60 <UART_SetConfig+0x580>)
 8108c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c5e:	bf00      	nop
 8108c60:	08108c79 	.word	0x08108c79
 8108c64:	08108c81 	.word	0x08108c81
 8108c68:	08108c89 	.word	0x08108c89
 8108c6c:	08108c91 	.word	0x08108c91
 8108c70:	08108c99 	.word	0x08108c99
 8108c74:	08108ca1 	.word	0x08108ca1
 8108c78:	2302      	movs	r3, #2
 8108c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c7e:	e01b      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c80:	2304      	movs	r3, #4
 8108c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c86:	e017      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c88:	2308      	movs	r3, #8
 8108c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c8e:	e013      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c90:	2310      	movs	r3, #16
 8108c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c96:	e00f      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108c98:	2320      	movs	r3, #32
 8108c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108c9e:	e00b      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108ca0:	2340      	movs	r3, #64	; 0x40
 8108ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108ca6:	e007      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108ca8:	2380      	movs	r3, #128	; 0x80
 8108caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8108cae:	bf00      	nop
 8108cb0:	e002      	b.n	8108cb8 <UART_SetConfig+0x5d8>
 8108cb2:	2380      	movs	r3, #128	; 0x80
 8108cb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108cb8:	687b      	ldr	r3, [r7, #4]
 8108cba:	681b      	ldr	r3, [r3, #0]
 8108cbc:	4a32      	ldr	r2, [pc, #200]	; (8108d88 <UART_SetConfig+0x6a8>)
 8108cbe:	4293      	cmp	r3, r2
 8108cc0:	f040 86f7 	bne.w	8109ab2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108cc4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8108cc8:	2b08      	cmp	r3, #8
 8108cca:	f000 80c0 	beq.w	8108e4e <UART_SetConfig+0x76e>
 8108cce:	2b08      	cmp	r3, #8
 8108cd0:	dc04      	bgt.n	8108cdc <UART_SetConfig+0x5fc>
 8108cd2:	2b02      	cmp	r3, #2
 8108cd4:	d00c      	beq.n	8108cf0 <UART_SetConfig+0x610>
 8108cd6:	2b04      	cmp	r3, #4
 8108cd8:	d065      	beq.n	8108da6 <UART_SetConfig+0x6c6>
 8108cda:	e27a      	b.n	81091d2 <UART_SetConfig+0xaf2>
 8108cdc:	2b20      	cmp	r3, #32
 8108cde:	f000 81b0 	beq.w	8109042 <UART_SetConfig+0x962>
 8108ce2:	2b40      	cmp	r3, #64	; 0x40
 8108ce4:	f000 821e 	beq.w	8109124 <UART_SetConfig+0xa44>
 8108ce8:	2b10      	cmp	r3, #16
 8108cea:	f000 8104 	beq.w	8108ef6 <UART_SetConfig+0x816>
 8108cee:	e270      	b.n	81091d2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8108cf0:	f7fc fabc 	bl	810526c <HAL_RCCEx_GetD3PCLK1Freq>
 8108cf4:	4602      	mov	r2, r0
 8108cf6:	687b      	ldr	r3, [r7, #4]
 8108cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108cfa:	2b00      	cmp	r3, #0
 8108cfc:	d04e      	beq.n	8108d9c <UART_SetConfig+0x6bc>
 8108cfe:	687b      	ldr	r3, [r7, #4]
 8108d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d02:	2b01      	cmp	r3, #1
 8108d04:	d048      	beq.n	8108d98 <UART_SetConfig+0x6b8>
 8108d06:	687b      	ldr	r3, [r7, #4]
 8108d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d0a:	2b02      	cmp	r3, #2
 8108d0c:	d042      	beq.n	8108d94 <UART_SetConfig+0x6b4>
 8108d0e:	687b      	ldr	r3, [r7, #4]
 8108d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d12:	2b03      	cmp	r3, #3
 8108d14:	d03c      	beq.n	8108d90 <UART_SetConfig+0x6b0>
 8108d16:	687b      	ldr	r3, [r7, #4]
 8108d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d1a:	2b04      	cmp	r3, #4
 8108d1c:	d036      	beq.n	8108d8c <UART_SetConfig+0x6ac>
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d22:	2b05      	cmp	r3, #5
 8108d24:	d026      	beq.n	8108d74 <UART_SetConfig+0x694>
 8108d26:	687b      	ldr	r3, [r7, #4]
 8108d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d2a:	2b06      	cmp	r3, #6
 8108d2c:	d020      	beq.n	8108d70 <UART_SetConfig+0x690>
 8108d2e:	687b      	ldr	r3, [r7, #4]
 8108d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d32:	2b07      	cmp	r3, #7
 8108d34:	d01a      	beq.n	8108d6c <UART_SetConfig+0x68c>
 8108d36:	687b      	ldr	r3, [r7, #4]
 8108d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d3a:	2b08      	cmp	r3, #8
 8108d3c:	d014      	beq.n	8108d68 <UART_SetConfig+0x688>
 8108d3e:	687b      	ldr	r3, [r7, #4]
 8108d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d42:	2b09      	cmp	r3, #9
 8108d44:	d00e      	beq.n	8108d64 <UART_SetConfig+0x684>
 8108d46:	687b      	ldr	r3, [r7, #4]
 8108d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d4a:	2b0a      	cmp	r3, #10
 8108d4c:	d008      	beq.n	8108d60 <UART_SetConfig+0x680>
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d52:	2b0b      	cmp	r3, #11
 8108d54:	d102      	bne.n	8108d5c <UART_SetConfig+0x67c>
 8108d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108d5a:	e020      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d5c:	2301      	movs	r3, #1
 8108d5e:	e01e      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d60:	2380      	movs	r3, #128	; 0x80
 8108d62:	e01c      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d64:	2340      	movs	r3, #64	; 0x40
 8108d66:	e01a      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d68:	2320      	movs	r3, #32
 8108d6a:	e018      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d6c:	2310      	movs	r3, #16
 8108d6e:	e016      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d70:	230c      	movs	r3, #12
 8108d72:	e014      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d74:	230a      	movs	r3, #10
 8108d76:	e012      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d78:	40011400 	.word	0x40011400
 8108d7c:	58024400 	.word	0x58024400
 8108d80:	40007800 	.word	0x40007800
 8108d84:	40007c00 	.word	0x40007c00
 8108d88:	58000c00 	.word	0x58000c00
 8108d8c:	2308      	movs	r3, #8
 8108d8e:	e006      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d90:	2306      	movs	r3, #6
 8108d92:	e004      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d94:	2304      	movs	r3, #4
 8108d96:	e002      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d98:	2302      	movs	r3, #2
 8108d9a:	e000      	b.n	8108d9e <UART_SetConfig+0x6be>
 8108d9c:	2301      	movs	r3, #1
 8108d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108da4:	e219      	b.n	81091da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108da6:	f107 0318 	add.w	r3, r7, #24
 8108daa:	4618      	mov	r0, r3
 8108dac:	f7fc fa74 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8108db0:	69fa      	ldr	r2, [r7, #28]
 8108db2:	687b      	ldr	r3, [r7, #4]
 8108db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108db6:	2b00      	cmp	r3, #0
 8108db8:	d044      	beq.n	8108e44 <UART_SetConfig+0x764>
 8108dba:	687b      	ldr	r3, [r7, #4]
 8108dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dbe:	2b01      	cmp	r3, #1
 8108dc0:	d03e      	beq.n	8108e40 <UART_SetConfig+0x760>
 8108dc2:	687b      	ldr	r3, [r7, #4]
 8108dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dc6:	2b02      	cmp	r3, #2
 8108dc8:	d038      	beq.n	8108e3c <UART_SetConfig+0x75c>
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dce:	2b03      	cmp	r3, #3
 8108dd0:	d032      	beq.n	8108e38 <UART_SetConfig+0x758>
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dd6:	2b04      	cmp	r3, #4
 8108dd8:	d02c      	beq.n	8108e34 <UART_SetConfig+0x754>
 8108dda:	687b      	ldr	r3, [r7, #4]
 8108ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dde:	2b05      	cmp	r3, #5
 8108de0:	d026      	beq.n	8108e30 <UART_SetConfig+0x750>
 8108de2:	687b      	ldr	r3, [r7, #4]
 8108de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108de6:	2b06      	cmp	r3, #6
 8108de8:	d020      	beq.n	8108e2c <UART_SetConfig+0x74c>
 8108dea:	687b      	ldr	r3, [r7, #4]
 8108dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dee:	2b07      	cmp	r3, #7
 8108df0:	d01a      	beq.n	8108e28 <UART_SetConfig+0x748>
 8108df2:	687b      	ldr	r3, [r7, #4]
 8108df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108df6:	2b08      	cmp	r3, #8
 8108df8:	d014      	beq.n	8108e24 <UART_SetConfig+0x744>
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dfe:	2b09      	cmp	r3, #9
 8108e00:	d00e      	beq.n	8108e20 <UART_SetConfig+0x740>
 8108e02:	687b      	ldr	r3, [r7, #4]
 8108e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e06:	2b0a      	cmp	r3, #10
 8108e08:	d008      	beq.n	8108e1c <UART_SetConfig+0x73c>
 8108e0a:	687b      	ldr	r3, [r7, #4]
 8108e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e0e:	2b0b      	cmp	r3, #11
 8108e10:	d102      	bne.n	8108e18 <UART_SetConfig+0x738>
 8108e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108e16:	e016      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e18:	2301      	movs	r3, #1
 8108e1a:	e014      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e1c:	2380      	movs	r3, #128	; 0x80
 8108e1e:	e012      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e20:	2340      	movs	r3, #64	; 0x40
 8108e22:	e010      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e24:	2320      	movs	r3, #32
 8108e26:	e00e      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e28:	2310      	movs	r3, #16
 8108e2a:	e00c      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e2c:	230c      	movs	r3, #12
 8108e2e:	e00a      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e30:	230a      	movs	r3, #10
 8108e32:	e008      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e34:	2308      	movs	r3, #8
 8108e36:	e006      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e38:	2306      	movs	r3, #6
 8108e3a:	e004      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e3c:	2304      	movs	r3, #4
 8108e3e:	e002      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e40:	2302      	movs	r3, #2
 8108e42:	e000      	b.n	8108e46 <UART_SetConfig+0x766>
 8108e44:	2301      	movs	r3, #1
 8108e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8108e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108e4c:	e1c5      	b.n	81091da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108e4e:	f107 030c 	add.w	r3, r7, #12
 8108e52:	4618      	mov	r0, r3
 8108e54:	f7fc fb6c 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8108e58:	693a      	ldr	r2, [r7, #16]
 8108e5a:	687b      	ldr	r3, [r7, #4]
 8108e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e5e:	2b00      	cmp	r3, #0
 8108e60:	d044      	beq.n	8108eec <UART_SetConfig+0x80c>
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e66:	2b01      	cmp	r3, #1
 8108e68:	d03e      	beq.n	8108ee8 <UART_SetConfig+0x808>
 8108e6a:	687b      	ldr	r3, [r7, #4]
 8108e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e6e:	2b02      	cmp	r3, #2
 8108e70:	d038      	beq.n	8108ee4 <UART_SetConfig+0x804>
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e76:	2b03      	cmp	r3, #3
 8108e78:	d032      	beq.n	8108ee0 <UART_SetConfig+0x800>
 8108e7a:	687b      	ldr	r3, [r7, #4]
 8108e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e7e:	2b04      	cmp	r3, #4
 8108e80:	d02c      	beq.n	8108edc <UART_SetConfig+0x7fc>
 8108e82:	687b      	ldr	r3, [r7, #4]
 8108e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e86:	2b05      	cmp	r3, #5
 8108e88:	d026      	beq.n	8108ed8 <UART_SetConfig+0x7f8>
 8108e8a:	687b      	ldr	r3, [r7, #4]
 8108e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e8e:	2b06      	cmp	r3, #6
 8108e90:	d020      	beq.n	8108ed4 <UART_SetConfig+0x7f4>
 8108e92:	687b      	ldr	r3, [r7, #4]
 8108e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e96:	2b07      	cmp	r3, #7
 8108e98:	d01a      	beq.n	8108ed0 <UART_SetConfig+0x7f0>
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e9e:	2b08      	cmp	r3, #8
 8108ea0:	d014      	beq.n	8108ecc <UART_SetConfig+0x7ec>
 8108ea2:	687b      	ldr	r3, [r7, #4]
 8108ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ea6:	2b09      	cmp	r3, #9
 8108ea8:	d00e      	beq.n	8108ec8 <UART_SetConfig+0x7e8>
 8108eaa:	687b      	ldr	r3, [r7, #4]
 8108eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108eae:	2b0a      	cmp	r3, #10
 8108eb0:	d008      	beq.n	8108ec4 <UART_SetConfig+0x7e4>
 8108eb2:	687b      	ldr	r3, [r7, #4]
 8108eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108eb6:	2b0b      	cmp	r3, #11
 8108eb8:	d102      	bne.n	8108ec0 <UART_SetConfig+0x7e0>
 8108eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108ebe:	e016      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ec0:	2301      	movs	r3, #1
 8108ec2:	e014      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ec4:	2380      	movs	r3, #128	; 0x80
 8108ec6:	e012      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ec8:	2340      	movs	r3, #64	; 0x40
 8108eca:	e010      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ecc:	2320      	movs	r3, #32
 8108ece:	e00e      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ed0:	2310      	movs	r3, #16
 8108ed2:	e00c      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ed4:	230c      	movs	r3, #12
 8108ed6:	e00a      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ed8:	230a      	movs	r3, #10
 8108eda:	e008      	b.n	8108eee <UART_SetConfig+0x80e>
 8108edc:	2308      	movs	r3, #8
 8108ede:	e006      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ee0:	2306      	movs	r3, #6
 8108ee2:	e004      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ee4:	2304      	movs	r3, #4
 8108ee6:	e002      	b.n	8108eee <UART_SetConfig+0x80e>
 8108ee8:	2302      	movs	r3, #2
 8108eea:	e000      	b.n	8108eee <UART_SetConfig+0x80e>
 8108eec:	2301      	movs	r3, #1
 8108eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8108ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108ef4:	e171      	b.n	81091da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108ef6:	4b7a      	ldr	r3, [pc, #488]	; (81090e0 <UART_SetConfig+0xa00>)
 8108ef8:	681b      	ldr	r3, [r3, #0]
 8108efa:	f003 0320 	and.w	r3, r3, #32
 8108efe:	2b00      	cmp	r3, #0
 8108f00:	d054      	beq.n	8108fac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8108f02:	4b77      	ldr	r3, [pc, #476]	; (81090e0 <UART_SetConfig+0xa00>)
 8108f04:	681b      	ldr	r3, [r3, #0]
 8108f06:	08db      	lsrs	r3, r3, #3
 8108f08:	f003 0303 	and.w	r3, r3, #3
 8108f0c:	4a75      	ldr	r2, [pc, #468]	; (81090e4 <UART_SetConfig+0xa04>)
 8108f0e:	40da      	lsrs	r2, r3
 8108f10:	687b      	ldr	r3, [r7, #4]
 8108f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f14:	2b00      	cmp	r3, #0
 8108f16:	d044      	beq.n	8108fa2 <UART_SetConfig+0x8c2>
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f1c:	2b01      	cmp	r3, #1
 8108f1e:	d03e      	beq.n	8108f9e <UART_SetConfig+0x8be>
 8108f20:	687b      	ldr	r3, [r7, #4]
 8108f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f24:	2b02      	cmp	r3, #2
 8108f26:	d038      	beq.n	8108f9a <UART_SetConfig+0x8ba>
 8108f28:	687b      	ldr	r3, [r7, #4]
 8108f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f2c:	2b03      	cmp	r3, #3
 8108f2e:	d032      	beq.n	8108f96 <UART_SetConfig+0x8b6>
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f34:	2b04      	cmp	r3, #4
 8108f36:	d02c      	beq.n	8108f92 <UART_SetConfig+0x8b2>
 8108f38:	687b      	ldr	r3, [r7, #4]
 8108f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f3c:	2b05      	cmp	r3, #5
 8108f3e:	d026      	beq.n	8108f8e <UART_SetConfig+0x8ae>
 8108f40:	687b      	ldr	r3, [r7, #4]
 8108f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f44:	2b06      	cmp	r3, #6
 8108f46:	d020      	beq.n	8108f8a <UART_SetConfig+0x8aa>
 8108f48:	687b      	ldr	r3, [r7, #4]
 8108f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f4c:	2b07      	cmp	r3, #7
 8108f4e:	d01a      	beq.n	8108f86 <UART_SetConfig+0x8a6>
 8108f50:	687b      	ldr	r3, [r7, #4]
 8108f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f54:	2b08      	cmp	r3, #8
 8108f56:	d014      	beq.n	8108f82 <UART_SetConfig+0x8a2>
 8108f58:	687b      	ldr	r3, [r7, #4]
 8108f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f5c:	2b09      	cmp	r3, #9
 8108f5e:	d00e      	beq.n	8108f7e <UART_SetConfig+0x89e>
 8108f60:	687b      	ldr	r3, [r7, #4]
 8108f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f64:	2b0a      	cmp	r3, #10
 8108f66:	d008      	beq.n	8108f7a <UART_SetConfig+0x89a>
 8108f68:	687b      	ldr	r3, [r7, #4]
 8108f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108f6c:	2b0b      	cmp	r3, #11
 8108f6e:	d102      	bne.n	8108f76 <UART_SetConfig+0x896>
 8108f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108f74:	e016      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f76:	2301      	movs	r3, #1
 8108f78:	e014      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f7a:	2380      	movs	r3, #128	; 0x80
 8108f7c:	e012      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f7e:	2340      	movs	r3, #64	; 0x40
 8108f80:	e010      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f82:	2320      	movs	r3, #32
 8108f84:	e00e      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f86:	2310      	movs	r3, #16
 8108f88:	e00c      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f8a:	230c      	movs	r3, #12
 8108f8c:	e00a      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f8e:	230a      	movs	r3, #10
 8108f90:	e008      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f92:	2308      	movs	r3, #8
 8108f94:	e006      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f96:	2306      	movs	r3, #6
 8108f98:	e004      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f9a:	2304      	movs	r3, #4
 8108f9c:	e002      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108f9e:	2302      	movs	r3, #2
 8108fa0:	e000      	b.n	8108fa4 <UART_SetConfig+0x8c4>
 8108fa2:	2301      	movs	r3, #1
 8108fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8108fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8108faa:	e116      	b.n	81091da <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8108fac:	687b      	ldr	r3, [r7, #4]
 8108fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108fb0:	2b00      	cmp	r3, #0
 8108fb2:	d043      	beq.n	810903c <UART_SetConfig+0x95c>
 8108fb4:	687b      	ldr	r3, [r7, #4]
 8108fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108fb8:	2b01      	cmp	r3, #1
 8108fba:	d03d      	beq.n	8109038 <UART_SetConfig+0x958>
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108fc0:	2b02      	cmp	r3, #2
 8108fc2:	d037      	beq.n	8109034 <UART_SetConfig+0x954>
 8108fc4:	687b      	ldr	r3, [r7, #4]
 8108fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108fc8:	2b03      	cmp	r3, #3
 8108fca:	d031      	beq.n	8109030 <UART_SetConfig+0x950>
 8108fcc:	687b      	ldr	r3, [r7, #4]
 8108fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108fd0:	2b04      	cmp	r3, #4
 8108fd2:	d02b      	beq.n	810902c <UART_SetConfig+0x94c>
 8108fd4:	687b      	ldr	r3, [r7, #4]
 8108fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108fd8:	2b05      	cmp	r3, #5
 8108fda:	d025      	beq.n	8109028 <UART_SetConfig+0x948>
 8108fdc:	687b      	ldr	r3, [r7, #4]
 8108fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108fe0:	2b06      	cmp	r3, #6
 8108fe2:	d01f      	beq.n	8109024 <UART_SetConfig+0x944>
 8108fe4:	687b      	ldr	r3, [r7, #4]
 8108fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108fe8:	2b07      	cmp	r3, #7
 8108fea:	d019      	beq.n	8109020 <UART_SetConfig+0x940>
 8108fec:	687b      	ldr	r3, [r7, #4]
 8108fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ff0:	2b08      	cmp	r3, #8
 8108ff2:	d013      	beq.n	810901c <UART_SetConfig+0x93c>
 8108ff4:	687b      	ldr	r3, [r7, #4]
 8108ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ff8:	2b09      	cmp	r3, #9
 8108ffa:	d00d      	beq.n	8109018 <UART_SetConfig+0x938>
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109000:	2b0a      	cmp	r3, #10
 8109002:	d007      	beq.n	8109014 <UART_SetConfig+0x934>
 8109004:	687b      	ldr	r3, [r7, #4]
 8109006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109008:	2b0b      	cmp	r3, #11
 810900a:	d101      	bne.n	8109010 <UART_SetConfig+0x930>
 810900c:	4b36      	ldr	r3, [pc, #216]	; (81090e8 <UART_SetConfig+0xa08>)
 810900e:	e016      	b.n	810903e <UART_SetConfig+0x95e>
 8109010:	4b34      	ldr	r3, [pc, #208]	; (81090e4 <UART_SetConfig+0xa04>)
 8109012:	e014      	b.n	810903e <UART_SetConfig+0x95e>
 8109014:	4b35      	ldr	r3, [pc, #212]	; (81090ec <UART_SetConfig+0xa0c>)
 8109016:	e012      	b.n	810903e <UART_SetConfig+0x95e>
 8109018:	4b35      	ldr	r3, [pc, #212]	; (81090f0 <UART_SetConfig+0xa10>)
 810901a:	e010      	b.n	810903e <UART_SetConfig+0x95e>
 810901c:	4b35      	ldr	r3, [pc, #212]	; (81090f4 <UART_SetConfig+0xa14>)
 810901e:	e00e      	b.n	810903e <UART_SetConfig+0x95e>
 8109020:	4b35      	ldr	r3, [pc, #212]	; (81090f8 <UART_SetConfig+0xa18>)
 8109022:	e00c      	b.n	810903e <UART_SetConfig+0x95e>
 8109024:	4b35      	ldr	r3, [pc, #212]	; (81090fc <UART_SetConfig+0xa1c>)
 8109026:	e00a      	b.n	810903e <UART_SetConfig+0x95e>
 8109028:	4b35      	ldr	r3, [pc, #212]	; (8109100 <UART_SetConfig+0xa20>)
 810902a:	e008      	b.n	810903e <UART_SetConfig+0x95e>
 810902c:	4b35      	ldr	r3, [pc, #212]	; (8109104 <UART_SetConfig+0xa24>)
 810902e:	e006      	b.n	810903e <UART_SetConfig+0x95e>
 8109030:	4b35      	ldr	r3, [pc, #212]	; (8109108 <UART_SetConfig+0xa28>)
 8109032:	e004      	b.n	810903e <UART_SetConfig+0x95e>
 8109034:	4b35      	ldr	r3, [pc, #212]	; (810910c <UART_SetConfig+0xa2c>)
 8109036:	e002      	b.n	810903e <UART_SetConfig+0x95e>
 8109038:	4b35      	ldr	r3, [pc, #212]	; (8109110 <UART_SetConfig+0xa30>)
 810903a:	e000      	b.n	810903e <UART_SetConfig+0x95e>
 810903c:	4b29      	ldr	r3, [pc, #164]	; (81090e4 <UART_SetConfig+0xa04>)
 810903e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109040:	e0cb      	b.n	81091da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8109042:	687b      	ldr	r3, [r7, #4]
 8109044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109046:	2b00      	cmp	r3, #0
 8109048:	d046      	beq.n	81090d8 <UART_SetConfig+0x9f8>
 810904a:	687b      	ldr	r3, [r7, #4]
 810904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810904e:	2b01      	cmp	r3, #1
 8109050:	d040      	beq.n	81090d4 <UART_SetConfig+0x9f4>
 8109052:	687b      	ldr	r3, [r7, #4]
 8109054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109056:	2b02      	cmp	r3, #2
 8109058:	d03a      	beq.n	81090d0 <UART_SetConfig+0x9f0>
 810905a:	687b      	ldr	r3, [r7, #4]
 810905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810905e:	2b03      	cmp	r3, #3
 8109060:	d034      	beq.n	81090cc <UART_SetConfig+0x9ec>
 8109062:	687b      	ldr	r3, [r7, #4]
 8109064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109066:	2b04      	cmp	r3, #4
 8109068:	d02e      	beq.n	81090c8 <UART_SetConfig+0x9e8>
 810906a:	687b      	ldr	r3, [r7, #4]
 810906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810906e:	2b05      	cmp	r3, #5
 8109070:	d028      	beq.n	81090c4 <UART_SetConfig+0x9e4>
 8109072:	687b      	ldr	r3, [r7, #4]
 8109074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109076:	2b06      	cmp	r3, #6
 8109078:	d022      	beq.n	81090c0 <UART_SetConfig+0x9e0>
 810907a:	687b      	ldr	r3, [r7, #4]
 810907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810907e:	2b07      	cmp	r3, #7
 8109080:	d01c      	beq.n	81090bc <UART_SetConfig+0x9dc>
 8109082:	687b      	ldr	r3, [r7, #4]
 8109084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109086:	2b08      	cmp	r3, #8
 8109088:	d016      	beq.n	81090b8 <UART_SetConfig+0x9d8>
 810908a:	687b      	ldr	r3, [r7, #4]
 810908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810908e:	2b09      	cmp	r3, #9
 8109090:	d00f      	beq.n	81090b2 <UART_SetConfig+0x9d2>
 8109092:	687b      	ldr	r3, [r7, #4]
 8109094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109096:	2b0a      	cmp	r3, #10
 8109098:	d008      	beq.n	81090ac <UART_SetConfig+0x9cc>
 810909a:	687b      	ldr	r3, [r7, #4]
 810909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810909e:	2b0b      	cmp	r3, #11
 81090a0:	d102      	bne.n	81090a8 <UART_SetConfig+0x9c8>
 81090a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 81090a6:	e018      	b.n	81090da <UART_SetConfig+0x9fa>
 81090a8:	4b13      	ldr	r3, [pc, #76]	; (81090f8 <UART_SetConfig+0xa18>)
 81090aa:	e016      	b.n	81090da <UART_SetConfig+0x9fa>
 81090ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 81090b0:	e013      	b.n	81090da <UART_SetConfig+0x9fa>
 81090b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 81090b6:	e010      	b.n	81090da <UART_SetConfig+0x9fa>
 81090b8:	4b16      	ldr	r3, [pc, #88]	; (8109114 <UART_SetConfig+0xa34>)
 81090ba:	e00e      	b.n	81090da <UART_SetConfig+0x9fa>
 81090bc:	4b0a      	ldr	r3, [pc, #40]	; (81090e8 <UART_SetConfig+0xa08>)
 81090be:	e00c      	b.n	81090da <UART_SetConfig+0x9fa>
 81090c0:	4b15      	ldr	r3, [pc, #84]	; (8109118 <UART_SetConfig+0xa38>)
 81090c2:	e00a      	b.n	81090da <UART_SetConfig+0x9fa>
 81090c4:	4b15      	ldr	r3, [pc, #84]	; (810911c <UART_SetConfig+0xa3c>)
 81090c6:	e008      	b.n	81090da <UART_SetConfig+0x9fa>
 81090c8:	4b08      	ldr	r3, [pc, #32]	; (81090ec <UART_SetConfig+0xa0c>)
 81090ca:	e006      	b.n	81090da <UART_SetConfig+0x9fa>
 81090cc:	4b14      	ldr	r3, [pc, #80]	; (8109120 <UART_SetConfig+0xa40>)
 81090ce:	e004      	b.n	81090da <UART_SetConfig+0x9fa>
 81090d0:	4b07      	ldr	r3, [pc, #28]	; (81090f0 <UART_SetConfig+0xa10>)
 81090d2:	e002      	b.n	81090da <UART_SetConfig+0x9fa>
 81090d4:	4b07      	ldr	r3, [pc, #28]	; (81090f4 <UART_SetConfig+0xa14>)
 81090d6:	e000      	b.n	81090da <UART_SetConfig+0x9fa>
 81090d8:	4b07      	ldr	r3, [pc, #28]	; (81090f8 <UART_SetConfig+0xa18>)
 81090da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81090dc:	e07d      	b.n	81091da <UART_SetConfig+0xafa>
 81090de:	bf00      	nop
 81090e0:	58024400 	.word	0x58024400
 81090e4:	03d09000 	.word	0x03d09000
 81090e8:	0003d090 	.word	0x0003d090
 81090ec:	0007a120 	.word	0x0007a120
 81090f0:	000f4240 	.word	0x000f4240
 81090f4:	001e8480 	.word	0x001e8480
 81090f8:	003d0900 	.word	0x003d0900
 81090fc:	00516155 	.word	0x00516155
 8109100:	0061a800 	.word	0x0061a800
 8109104:	007a1200 	.word	0x007a1200
 8109108:	00a2c2aa 	.word	0x00a2c2aa
 810910c:	00f42400 	.word	0x00f42400
 8109110:	01e84800 	.word	0x01e84800
 8109114:	0001e848 	.word	0x0001e848
 8109118:	00051615 	.word	0x00051615
 810911c:	00061a80 	.word	0x00061a80
 8109120:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109128:	2b00      	cmp	r3, #0
 810912a:	d04e      	beq.n	81091ca <UART_SetConfig+0xaea>
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109130:	2b01      	cmp	r3, #1
 8109132:	d047      	beq.n	81091c4 <UART_SetConfig+0xae4>
 8109134:	687b      	ldr	r3, [r7, #4]
 8109136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109138:	2b02      	cmp	r3, #2
 810913a:	d040      	beq.n	81091be <UART_SetConfig+0xade>
 810913c:	687b      	ldr	r3, [r7, #4]
 810913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109140:	2b03      	cmp	r3, #3
 8109142:	d039      	beq.n	81091b8 <UART_SetConfig+0xad8>
 8109144:	687b      	ldr	r3, [r7, #4]
 8109146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109148:	2b04      	cmp	r3, #4
 810914a:	d032      	beq.n	81091b2 <UART_SetConfig+0xad2>
 810914c:	687b      	ldr	r3, [r7, #4]
 810914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109150:	2b05      	cmp	r3, #5
 8109152:	d02b      	beq.n	81091ac <UART_SetConfig+0xacc>
 8109154:	687b      	ldr	r3, [r7, #4]
 8109156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109158:	2b06      	cmp	r3, #6
 810915a:	d024      	beq.n	81091a6 <UART_SetConfig+0xac6>
 810915c:	687b      	ldr	r3, [r7, #4]
 810915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109160:	2b07      	cmp	r3, #7
 8109162:	d01d      	beq.n	81091a0 <UART_SetConfig+0xac0>
 8109164:	687b      	ldr	r3, [r7, #4]
 8109166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109168:	2b08      	cmp	r3, #8
 810916a:	d016      	beq.n	810919a <UART_SetConfig+0xaba>
 810916c:	687b      	ldr	r3, [r7, #4]
 810916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109170:	2b09      	cmp	r3, #9
 8109172:	d00f      	beq.n	8109194 <UART_SetConfig+0xab4>
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109178:	2b0a      	cmp	r3, #10
 810917a:	d008      	beq.n	810918e <UART_SetConfig+0xaae>
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109180:	2b0b      	cmp	r3, #11
 8109182:	d101      	bne.n	8109188 <UART_SetConfig+0xaa8>
 8109184:	2380      	movs	r3, #128	; 0x80
 8109186:	e022      	b.n	81091ce <UART_SetConfig+0xaee>
 8109188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810918c:	e01f      	b.n	81091ce <UART_SetConfig+0xaee>
 810918e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109192:	e01c      	b.n	81091ce <UART_SetConfig+0xaee>
 8109194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8109198:	e019      	b.n	81091ce <UART_SetConfig+0xaee>
 810919a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810919e:	e016      	b.n	81091ce <UART_SetConfig+0xaee>
 81091a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81091a4:	e013      	b.n	81091ce <UART_SetConfig+0xaee>
 81091a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 81091aa:	e010      	b.n	81091ce <UART_SetConfig+0xaee>
 81091ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 81091b0:	e00d      	b.n	81091ce <UART_SetConfig+0xaee>
 81091b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81091b6:	e00a      	b.n	81091ce <UART_SetConfig+0xaee>
 81091b8:	f241 5355 	movw	r3, #5461	; 0x1555
 81091bc:	e007      	b.n	81091ce <UART_SetConfig+0xaee>
 81091be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81091c2:	e004      	b.n	81091ce <UART_SetConfig+0xaee>
 81091c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81091c8:	e001      	b.n	81091ce <UART_SetConfig+0xaee>
 81091ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81091d0:	e003      	b.n	81091da <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 81091d2:	2301      	movs	r3, #1
 81091d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 81091d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 81091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81091dc:	2b00      	cmp	r3, #0
 81091de:	f001 83e8 	beq.w	810a9b2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81091e2:	687b      	ldr	r3, [r7, #4]
 81091e4:	685a      	ldr	r2, [r3, #4]
 81091e6:	4613      	mov	r3, r2
 81091e8:	005b      	lsls	r3, r3, #1
 81091ea:	4413      	add	r3, r2
 81091ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81091ee:	429a      	cmp	r2, r3
 81091f0:	d305      	bcc.n	81091fe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81091f2:	687b      	ldr	r3, [r7, #4]
 81091f4:	685b      	ldr	r3, [r3, #4]
 81091f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81091f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81091fa:	429a      	cmp	r2, r3
 81091fc:	d904      	bls.n	8109208 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 81091fe:	2301      	movs	r3, #1
 8109200:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109204:	f001 bbd5 	b.w	810a9b2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8109208:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 810920c:	2b08      	cmp	r3, #8
 810920e:	f000 8154 	beq.w	81094ba <UART_SetConfig+0xdda>
 8109212:	2b08      	cmp	r3, #8
 8109214:	dc06      	bgt.n	8109224 <UART_SetConfig+0xb44>
 8109216:	2b02      	cmp	r3, #2
 8109218:	d00f      	beq.n	810923a <UART_SetConfig+0xb5a>
 810921a:	2b04      	cmp	r3, #4
 810921c:	f000 80ac 	beq.w	8109378 <UART_SetConfig+0xc98>
 8109220:	f000 bc30 	b.w	8109a84 <UART_SetConfig+0x13a4>
 8109224:	2b20      	cmp	r3, #32
 8109226:	f000 832d 	beq.w	8109884 <UART_SetConfig+0x11a4>
 810922a:	2b40      	cmp	r3, #64	; 0x40
 810922c:	f000 83a5 	beq.w	810997a <UART_SetConfig+0x129a>
 8109230:	2b10      	cmp	r3, #16
 8109232:	f000 81e3 	beq.w	81095fc <UART_SetConfig+0xf1c>
 8109236:	f000 bc25 	b.w	8109a84 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810923a:	f7fc f817 	bl	810526c <HAL_RCCEx_GetD3PCLK1Freq>
 810923e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109242:	4618      	mov	r0, r3
 8109244:	f04f 0100 	mov.w	r1, #0
 8109248:	687b      	ldr	r3, [r7, #4]
 810924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810924c:	2b00      	cmp	r3, #0
 810924e:	d067      	beq.n	8109320 <UART_SetConfig+0xc40>
 8109250:	687b      	ldr	r3, [r7, #4]
 8109252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109254:	2b01      	cmp	r3, #1
 8109256:	d05e      	beq.n	8109316 <UART_SetConfig+0xc36>
 8109258:	687b      	ldr	r3, [r7, #4]
 810925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810925c:	2b02      	cmp	r3, #2
 810925e:	d055      	beq.n	810930c <UART_SetConfig+0xc2c>
 8109260:	687b      	ldr	r3, [r7, #4]
 8109262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109264:	2b03      	cmp	r3, #3
 8109266:	d04c      	beq.n	8109302 <UART_SetConfig+0xc22>
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810926c:	2b04      	cmp	r3, #4
 810926e:	d043      	beq.n	81092f8 <UART_SetConfig+0xc18>
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109274:	2b05      	cmp	r3, #5
 8109276:	d03a      	beq.n	81092ee <UART_SetConfig+0xc0e>
 8109278:	687b      	ldr	r3, [r7, #4]
 810927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810927c:	2b06      	cmp	r3, #6
 810927e:	d031      	beq.n	81092e4 <UART_SetConfig+0xc04>
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109284:	2b07      	cmp	r3, #7
 8109286:	d028      	beq.n	81092da <UART_SetConfig+0xbfa>
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810928c:	2b08      	cmp	r3, #8
 810928e:	d01f      	beq.n	81092d0 <UART_SetConfig+0xbf0>
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109294:	2b09      	cmp	r3, #9
 8109296:	d016      	beq.n	81092c6 <UART_SetConfig+0xbe6>
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810929c:	2b0a      	cmp	r3, #10
 810929e:	d00d      	beq.n	81092bc <UART_SetConfig+0xbdc>
 81092a0:	687b      	ldr	r3, [r7, #4]
 81092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81092a4:	2b0b      	cmp	r3, #11
 81092a6:	d104      	bne.n	81092b2 <UART_SetConfig+0xbd2>
 81092a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 81092ac:	f04f 0400 	mov.w	r4, #0
 81092b0:	e03a      	b.n	8109328 <UART_SetConfig+0xc48>
 81092b2:	f04f 0301 	mov.w	r3, #1
 81092b6:	f04f 0400 	mov.w	r4, #0
 81092ba:	e035      	b.n	8109328 <UART_SetConfig+0xc48>
 81092bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 81092c0:	f04f 0400 	mov.w	r4, #0
 81092c4:	e030      	b.n	8109328 <UART_SetConfig+0xc48>
 81092c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 81092ca:	f04f 0400 	mov.w	r4, #0
 81092ce:	e02b      	b.n	8109328 <UART_SetConfig+0xc48>
 81092d0:	f04f 0320 	mov.w	r3, #32
 81092d4:	f04f 0400 	mov.w	r4, #0
 81092d8:	e026      	b.n	8109328 <UART_SetConfig+0xc48>
 81092da:	f04f 0310 	mov.w	r3, #16
 81092de:	f04f 0400 	mov.w	r4, #0
 81092e2:	e021      	b.n	8109328 <UART_SetConfig+0xc48>
 81092e4:	f04f 030c 	mov.w	r3, #12
 81092e8:	f04f 0400 	mov.w	r4, #0
 81092ec:	e01c      	b.n	8109328 <UART_SetConfig+0xc48>
 81092ee:	f04f 030a 	mov.w	r3, #10
 81092f2:	f04f 0400 	mov.w	r4, #0
 81092f6:	e017      	b.n	8109328 <UART_SetConfig+0xc48>
 81092f8:	f04f 0308 	mov.w	r3, #8
 81092fc:	f04f 0400 	mov.w	r4, #0
 8109300:	e012      	b.n	8109328 <UART_SetConfig+0xc48>
 8109302:	f04f 0306 	mov.w	r3, #6
 8109306:	f04f 0400 	mov.w	r4, #0
 810930a:	e00d      	b.n	8109328 <UART_SetConfig+0xc48>
 810930c:	f04f 0304 	mov.w	r3, #4
 8109310:	f04f 0400 	mov.w	r4, #0
 8109314:	e008      	b.n	8109328 <UART_SetConfig+0xc48>
 8109316:	f04f 0302 	mov.w	r3, #2
 810931a:	f04f 0400 	mov.w	r4, #0
 810931e:	e003      	b.n	8109328 <UART_SetConfig+0xc48>
 8109320:	f04f 0301 	mov.w	r3, #1
 8109324:	f04f 0400 	mov.w	r4, #0
 8109328:	461a      	mov	r2, r3
 810932a:	4623      	mov	r3, r4
 810932c:	f7f6 ffd4 	bl	81002d8 <__aeabi_uldivmod>
 8109330:	4603      	mov	r3, r0
 8109332:	460c      	mov	r4, r1
 8109334:	4619      	mov	r1, r3
 8109336:	4622      	mov	r2, r4
 8109338:	f04f 0300 	mov.w	r3, #0
 810933c:	f04f 0400 	mov.w	r4, #0
 8109340:	0214      	lsls	r4, r2, #8
 8109342:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8109346:	020b      	lsls	r3, r1, #8
 8109348:	687a      	ldr	r2, [r7, #4]
 810934a:	6852      	ldr	r2, [r2, #4]
 810934c:	0852      	lsrs	r2, r2, #1
 810934e:	4611      	mov	r1, r2
 8109350:	f04f 0200 	mov.w	r2, #0
 8109354:	eb13 0b01 	adds.w	fp, r3, r1
 8109358:	eb44 0c02 	adc.w	ip, r4, r2
 810935c:	4658      	mov	r0, fp
 810935e:	4661      	mov	r1, ip
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	685b      	ldr	r3, [r3, #4]
 8109364:	f04f 0400 	mov.w	r4, #0
 8109368:	461a      	mov	r2, r3
 810936a:	4623      	mov	r3, r4
 810936c:	f7f6 ffb4 	bl	81002d8 <__aeabi_uldivmod>
 8109370:	4603      	mov	r3, r0
 8109372:	460c      	mov	r4, r1
 8109374:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8109376:	e389      	b.n	8109a8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109378:	f107 0318 	add.w	r3, r7, #24
 810937c:	4618      	mov	r0, r3
 810937e:	f7fb ff8b 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109382:	69fb      	ldr	r3, [r7, #28]
 8109384:	4618      	mov	r0, r3
 8109386:	f04f 0100 	mov.w	r1, #0
 810938a:	687b      	ldr	r3, [r7, #4]
 810938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810938e:	2b00      	cmp	r3, #0
 8109390:	d067      	beq.n	8109462 <UART_SetConfig+0xd82>
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109396:	2b01      	cmp	r3, #1
 8109398:	d05e      	beq.n	8109458 <UART_SetConfig+0xd78>
 810939a:	687b      	ldr	r3, [r7, #4]
 810939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810939e:	2b02      	cmp	r3, #2
 81093a0:	d055      	beq.n	810944e <UART_SetConfig+0xd6e>
 81093a2:	687b      	ldr	r3, [r7, #4]
 81093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093a6:	2b03      	cmp	r3, #3
 81093a8:	d04c      	beq.n	8109444 <UART_SetConfig+0xd64>
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093ae:	2b04      	cmp	r3, #4
 81093b0:	d043      	beq.n	810943a <UART_SetConfig+0xd5a>
 81093b2:	687b      	ldr	r3, [r7, #4]
 81093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093b6:	2b05      	cmp	r3, #5
 81093b8:	d03a      	beq.n	8109430 <UART_SetConfig+0xd50>
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093be:	2b06      	cmp	r3, #6
 81093c0:	d031      	beq.n	8109426 <UART_SetConfig+0xd46>
 81093c2:	687b      	ldr	r3, [r7, #4]
 81093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093c6:	2b07      	cmp	r3, #7
 81093c8:	d028      	beq.n	810941c <UART_SetConfig+0xd3c>
 81093ca:	687b      	ldr	r3, [r7, #4]
 81093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093ce:	2b08      	cmp	r3, #8
 81093d0:	d01f      	beq.n	8109412 <UART_SetConfig+0xd32>
 81093d2:	687b      	ldr	r3, [r7, #4]
 81093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093d6:	2b09      	cmp	r3, #9
 81093d8:	d016      	beq.n	8109408 <UART_SetConfig+0xd28>
 81093da:	687b      	ldr	r3, [r7, #4]
 81093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093de:	2b0a      	cmp	r3, #10
 81093e0:	d00d      	beq.n	81093fe <UART_SetConfig+0xd1e>
 81093e2:	687b      	ldr	r3, [r7, #4]
 81093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093e6:	2b0b      	cmp	r3, #11
 81093e8:	d104      	bne.n	81093f4 <UART_SetConfig+0xd14>
 81093ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 81093ee:	f04f 0400 	mov.w	r4, #0
 81093f2:	e03a      	b.n	810946a <UART_SetConfig+0xd8a>
 81093f4:	f04f 0301 	mov.w	r3, #1
 81093f8:	f04f 0400 	mov.w	r4, #0
 81093fc:	e035      	b.n	810946a <UART_SetConfig+0xd8a>
 81093fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8109402:	f04f 0400 	mov.w	r4, #0
 8109406:	e030      	b.n	810946a <UART_SetConfig+0xd8a>
 8109408:	f04f 0340 	mov.w	r3, #64	; 0x40
 810940c:	f04f 0400 	mov.w	r4, #0
 8109410:	e02b      	b.n	810946a <UART_SetConfig+0xd8a>
 8109412:	f04f 0320 	mov.w	r3, #32
 8109416:	f04f 0400 	mov.w	r4, #0
 810941a:	e026      	b.n	810946a <UART_SetConfig+0xd8a>
 810941c:	f04f 0310 	mov.w	r3, #16
 8109420:	f04f 0400 	mov.w	r4, #0
 8109424:	e021      	b.n	810946a <UART_SetConfig+0xd8a>
 8109426:	f04f 030c 	mov.w	r3, #12
 810942a:	f04f 0400 	mov.w	r4, #0
 810942e:	e01c      	b.n	810946a <UART_SetConfig+0xd8a>
 8109430:	f04f 030a 	mov.w	r3, #10
 8109434:	f04f 0400 	mov.w	r4, #0
 8109438:	e017      	b.n	810946a <UART_SetConfig+0xd8a>
 810943a:	f04f 0308 	mov.w	r3, #8
 810943e:	f04f 0400 	mov.w	r4, #0
 8109442:	e012      	b.n	810946a <UART_SetConfig+0xd8a>
 8109444:	f04f 0306 	mov.w	r3, #6
 8109448:	f04f 0400 	mov.w	r4, #0
 810944c:	e00d      	b.n	810946a <UART_SetConfig+0xd8a>
 810944e:	f04f 0304 	mov.w	r3, #4
 8109452:	f04f 0400 	mov.w	r4, #0
 8109456:	e008      	b.n	810946a <UART_SetConfig+0xd8a>
 8109458:	f04f 0302 	mov.w	r3, #2
 810945c:	f04f 0400 	mov.w	r4, #0
 8109460:	e003      	b.n	810946a <UART_SetConfig+0xd8a>
 8109462:	f04f 0301 	mov.w	r3, #1
 8109466:	f04f 0400 	mov.w	r4, #0
 810946a:	461a      	mov	r2, r3
 810946c:	4623      	mov	r3, r4
 810946e:	f7f6 ff33 	bl	81002d8 <__aeabi_uldivmod>
 8109472:	4603      	mov	r3, r0
 8109474:	460c      	mov	r4, r1
 8109476:	4619      	mov	r1, r3
 8109478:	4622      	mov	r2, r4
 810947a:	f04f 0300 	mov.w	r3, #0
 810947e:	f04f 0400 	mov.w	r4, #0
 8109482:	0214      	lsls	r4, r2, #8
 8109484:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8109488:	020b      	lsls	r3, r1, #8
 810948a:	687a      	ldr	r2, [r7, #4]
 810948c:	6852      	ldr	r2, [r2, #4]
 810948e:	0852      	lsrs	r2, r2, #1
 8109490:	4611      	mov	r1, r2
 8109492:	f04f 0200 	mov.w	r2, #0
 8109496:	eb13 0b01 	adds.w	fp, r3, r1
 810949a:	eb44 0c02 	adc.w	ip, r4, r2
 810949e:	4658      	mov	r0, fp
 81094a0:	4661      	mov	r1, ip
 81094a2:	687b      	ldr	r3, [r7, #4]
 81094a4:	685b      	ldr	r3, [r3, #4]
 81094a6:	f04f 0400 	mov.w	r4, #0
 81094aa:	461a      	mov	r2, r3
 81094ac:	4623      	mov	r3, r4
 81094ae:	f7f6 ff13 	bl	81002d8 <__aeabi_uldivmod>
 81094b2:	4603      	mov	r3, r0
 81094b4:	460c      	mov	r4, r1
 81094b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81094b8:	e2e8      	b.n	8109a8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81094ba:	f107 030c 	add.w	r3, r7, #12
 81094be:	4618      	mov	r0, r3
 81094c0:	f7fc f836 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81094c4:	693b      	ldr	r3, [r7, #16]
 81094c6:	4618      	mov	r0, r3
 81094c8:	f04f 0100 	mov.w	r1, #0
 81094cc:	687b      	ldr	r3, [r7, #4]
 81094ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094d0:	2b00      	cmp	r3, #0
 81094d2:	d067      	beq.n	81095a4 <UART_SetConfig+0xec4>
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094d8:	2b01      	cmp	r3, #1
 81094da:	d05e      	beq.n	810959a <UART_SetConfig+0xeba>
 81094dc:	687b      	ldr	r3, [r7, #4]
 81094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094e0:	2b02      	cmp	r3, #2
 81094e2:	d055      	beq.n	8109590 <UART_SetConfig+0xeb0>
 81094e4:	687b      	ldr	r3, [r7, #4]
 81094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094e8:	2b03      	cmp	r3, #3
 81094ea:	d04c      	beq.n	8109586 <UART_SetConfig+0xea6>
 81094ec:	687b      	ldr	r3, [r7, #4]
 81094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094f0:	2b04      	cmp	r3, #4
 81094f2:	d043      	beq.n	810957c <UART_SetConfig+0xe9c>
 81094f4:	687b      	ldr	r3, [r7, #4]
 81094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094f8:	2b05      	cmp	r3, #5
 81094fa:	d03a      	beq.n	8109572 <UART_SetConfig+0xe92>
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109500:	2b06      	cmp	r3, #6
 8109502:	d031      	beq.n	8109568 <UART_SetConfig+0xe88>
 8109504:	687b      	ldr	r3, [r7, #4]
 8109506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109508:	2b07      	cmp	r3, #7
 810950a:	d028      	beq.n	810955e <UART_SetConfig+0xe7e>
 810950c:	687b      	ldr	r3, [r7, #4]
 810950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109510:	2b08      	cmp	r3, #8
 8109512:	d01f      	beq.n	8109554 <UART_SetConfig+0xe74>
 8109514:	687b      	ldr	r3, [r7, #4]
 8109516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109518:	2b09      	cmp	r3, #9
 810951a:	d016      	beq.n	810954a <UART_SetConfig+0xe6a>
 810951c:	687b      	ldr	r3, [r7, #4]
 810951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109520:	2b0a      	cmp	r3, #10
 8109522:	d00d      	beq.n	8109540 <UART_SetConfig+0xe60>
 8109524:	687b      	ldr	r3, [r7, #4]
 8109526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109528:	2b0b      	cmp	r3, #11
 810952a:	d104      	bne.n	8109536 <UART_SetConfig+0xe56>
 810952c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109530:	f04f 0400 	mov.w	r4, #0
 8109534:	e03a      	b.n	81095ac <UART_SetConfig+0xecc>
 8109536:	f04f 0301 	mov.w	r3, #1
 810953a:	f04f 0400 	mov.w	r4, #0
 810953e:	e035      	b.n	81095ac <UART_SetConfig+0xecc>
 8109540:	f04f 0380 	mov.w	r3, #128	; 0x80
 8109544:	f04f 0400 	mov.w	r4, #0
 8109548:	e030      	b.n	81095ac <UART_SetConfig+0xecc>
 810954a:	f04f 0340 	mov.w	r3, #64	; 0x40
 810954e:	f04f 0400 	mov.w	r4, #0
 8109552:	e02b      	b.n	81095ac <UART_SetConfig+0xecc>
 8109554:	f04f 0320 	mov.w	r3, #32
 8109558:	f04f 0400 	mov.w	r4, #0
 810955c:	e026      	b.n	81095ac <UART_SetConfig+0xecc>
 810955e:	f04f 0310 	mov.w	r3, #16
 8109562:	f04f 0400 	mov.w	r4, #0
 8109566:	e021      	b.n	81095ac <UART_SetConfig+0xecc>
 8109568:	f04f 030c 	mov.w	r3, #12
 810956c:	f04f 0400 	mov.w	r4, #0
 8109570:	e01c      	b.n	81095ac <UART_SetConfig+0xecc>
 8109572:	f04f 030a 	mov.w	r3, #10
 8109576:	f04f 0400 	mov.w	r4, #0
 810957a:	e017      	b.n	81095ac <UART_SetConfig+0xecc>
 810957c:	f04f 0308 	mov.w	r3, #8
 8109580:	f04f 0400 	mov.w	r4, #0
 8109584:	e012      	b.n	81095ac <UART_SetConfig+0xecc>
 8109586:	f04f 0306 	mov.w	r3, #6
 810958a:	f04f 0400 	mov.w	r4, #0
 810958e:	e00d      	b.n	81095ac <UART_SetConfig+0xecc>
 8109590:	f04f 0304 	mov.w	r3, #4
 8109594:	f04f 0400 	mov.w	r4, #0
 8109598:	e008      	b.n	81095ac <UART_SetConfig+0xecc>
 810959a:	f04f 0302 	mov.w	r3, #2
 810959e:	f04f 0400 	mov.w	r4, #0
 81095a2:	e003      	b.n	81095ac <UART_SetConfig+0xecc>
 81095a4:	f04f 0301 	mov.w	r3, #1
 81095a8:	f04f 0400 	mov.w	r4, #0
 81095ac:	461a      	mov	r2, r3
 81095ae:	4623      	mov	r3, r4
 81095b0:	f7f6 fe92 	bl	81002d8 <__aeabi_uldivmod>
 81095b4:	4603      	mov	r3, r0
 81095b6:	460c      	mov	r4, r1
 81095b8:	4619      	mov	r1, r3
 81095ba:	4622      	mov	r2, r4
 81095bc:	f04f 0300 	mov.w	r3, #0
 81095c0:	f04f 0400 	mov.w	r4, #0
 81095c4:	0214      	lsls	r4, r2, #8
 81095c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 81095ca:	020b      	lsls	r3, r1, #8
 81095cc:	687a      	ldr	r2, [r7, #4]
 81095ce:	6852      	ldr	r2, [r2, #4]
 81095d0:	0852      	lsrs	r2, r2, #1
 81095d2:	4611      	mov	r1, r2
 81095d4:	f04f 0200 	mov.w	r2, #0
 81095d8:	eb13 0b01 	adds.w	fp, r3, r1
 81095dc:	eb44 0c02 	adc.w	ip, r4, r2
 81095e0:	4658      	mov	r0, fp
 81095e2:	4661      	mov	r1, ip
 81095e4:	687b      	ldr	r3, [r7, #4]
 81095e6:	685b      	ldr	r3, [r3, #4]
 81095e8:	f04f 0400 	mov.w	r4, #0
 81095ec:	461a      	mov	r2, r3
 81095ee:	4623      	mov	r3, r4
 81095f0:	f7f6 fe72 	bl	81002d8 <__aeabi_uldivmod>
 81095f4:	4603      	mov	r3, r0
 81095f6:	460c      	mov	r4, r1
 81095f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81095fa:	e247      	b.n	8109a8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81095fc:	4b96      	ldr	r3, [pc, #600]	; (8109858 <UART_SetConfig+0x1178>)
 81095fe:	681b      	ldr	r3, [r3, #0]
 8109600:	f003 0320 	and.w	r3, r3, #32
 8109604:	2b00      	cmp	r3, #0
 8109606:	f000 80a3 	beq.w	8109750 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810960a:	4b93      	ldr	r3, [pc, #588]	; (8109858 <UART_SetConfig+0x1178>)
 810960c:	681b      	ldr	r3, [r3, #0]
 810960e:	08db      	lsrs	r3, r3, #3
 8109610:	f003 0303 	and.w	r3, r3, #3
 8109614:	4a91      	ldr	r2, [pc, #580]	; (810985c <UART_SetConfig+0x117c>)
 8109616:	fa22 f303 	lsr.w	r3, r2, r3
 810961a:	4618      	mov	r0, r3
 810961c:	f04f 0100 	mov.w	r1, #0
 8109620:	687b      	ldr	r3, [r7, #4]
 8109622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109624:	2b00      	cmp	r3, #0
 8109626:	d067      	beq.n	81096f8 <UART_SetConfig+0x1018>
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810962c:	2b01      	cmp	r3, #1
 810962e:	d05e      	beq.n	81096ee <UART_SetConfig+0x100e>
 8109630:	687b      	ldr	r3, [r7, #4]
 8109632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109634:	2b02      	cmp	r3, #2
 8109636:	d055      	beq.n	81096e4 <UART_SetConfig+0x1004>
 8109638:	687b      	ldr	r3, [r7, #4]
 810963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810963c:	2b03      	cmp	r3, #3
 810963e:	d04c      	beq.n	81096da <UART_SetConfig+0xffa>
 8109640:	687b      	ldr	r3, [r7, #4]
 8109642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109644:	2b04      	cmp	r3, #4
 8109646:	d043      	beq.n	81096d0 <UART_SetConfig+0xff0>
 8109648:	687b      	ldr	r3, [r7, #4]
 810964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810964c:	2b05      	cmp	r3, #5
 810964e:	d03a      	beq.n	81096c6 <UART_SetConfig+0xfe6>
 8109650:	687b      	ldr	r3, [r7, #4]
 8109652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109654:	2b06      	cmp	r3, #6
 8109656:	d031      	beq.n	81096bc <UART_SetConfig+0xfdc>
 8109658:	687b      	ldr	r3, [r7, #4]
 810965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810965c:	2b07      	cmp	r3, #7
 810965e:	d028      	beq.n	81096b2 <UART_SetConfig+0xfd2>
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109664:	2b08      	cmp	r3, #8
 8109666:	d01f      	beq.n	81096a8 <UART_SetConfig+0xfc8>
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810966c:	2b09      	cmp	r3, #9
 810966e:	d016      	beq.n	810969e <UART_SetConfig+0xfbe>
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109674:	2b0a      	cmp	r3, #10
 8109676:	d00d      	beq.n	8109694 <UART_SetConfig+0xfb4>
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810967c:	2b0b      	cmp	r3, #11
 810967e:	d104      	bne.n	810968a <UART_SetConfig+0xfaa>
 8109680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109684:	f04f 0400 	mov.w	r4, #0
 8109688:	e03a      	b.n	8109700 <UART_SetConfig+0x1020>
 810968a:	f04f 0301 	mov.w	r3, #1
 810968e:	f04f 0400 	mov.w	r4, #0
 8109692:	e035      	b.n	8109700 <UART_SetConfig+0x1020>
 8109694:	f04f 0380 	mov.w	r3, #128	; 0x80
 8109698:	f04f 0400 	mov.w	r4, #0
 810969c:	e030      	b.n	8109700 <UART_SetConfig+0x1020>
 810969e:	f04f 0340 	mov.w	r3, #64	; 0x40
 81096a2:	f04f 0400 	mov.w	r4, #0
 81096a6:	e02b      	b.n	8109700 <UART_SetConfig+0x1020>
 81096a8:	f04f 0320 	mov.w	r3, #32
 81096ac:	f04f 0400 	mov.w	r4, #0
 81096b0:	e026      	b.n	8109700 <UART_SetConfig+0x1020>
 81096b2:	f04f 0310 	mov.w	r3, #16
 81096b6:	f04f 0400 	mov.w	r4, #0
 81096ba:	e021      	b.n	8109700 <UART_SetConfig+0x1020>
 81096bc:	f04f 030c 	mov.w	r3, #12
 81096c0:	f04f 0400 	mov.w	r4, #0
 81096c4:	e01c      	b.n	8109700 <UART_SetConfig+0x1020>
 81096c6:	f04f 030a 	mov.w	r3, #10
 81096ca:	f04f 0400 	mov.w	r4, #0
 81096ce:	e017      	b.n	8109700 <UART_SetConfig+0x1020>
 81096d0:	f04f 0308 	mov.w	r3, #8
 81096d4:	f04f 0400 	mov.w	r4, #0
 81096d8:	e012      	b.n	8109700 <UART_SetConfig+0x1020>
 81096da:	f04f 0306 	mov.w	r3, #6
 81096de:	f04f 0400 	mov.w	r4, #0
 81096e2:	e00d      	b.n	8109700 <UART_SetConfig+0x1020>
 81096e4:	f04f 0304 	mov.w	r3, #4
 81096e8:	f04f 0400 	mov.w	r4, #0
 81096ec:	e008      	b.n	8109700 <UART_SetConfig+0x1020>
 81096ee:	f04f 0302 	mov.w	r3, #2
 81096f2:	f04f 0400 	mov.w	r4, #0
 81096f6:	e003      	b.n	8109700 <UART_SetConfig+0x1020>
 81096f8:	f04f 0301 	mov.w	r3, #1
 81096fc:	f04f 0400 	mov.w	r4, #0
 8109700:	461a      	mov	r2, r3
 8109702:	4623      	mov	r3, r4
 8109704:	f7f6 fde8 	bl	81002d8 <__aeabi_uldivmod>
 8109708:	4603      	mov	r3, r0
 810970a:	460c      	mov	r4, r1
 810970c:	4619      	mov	r1, r3
 810970e:	4622      	mov	r2, r4
 8109710:	f04f 0300 	mov.w	r3, #0
 8109714:	f04f 0400 	mov.w	r4, #0
 8109718:	0214      	lsls	r4, r2, #8
 810971a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 810971e:	020b      	lsls	r3, r1, #8
 8109720:	687a      	ldr	r2, [r7, #4]
 8109722:	6852      	ldr	r2, [r2, #4]
 8109724:	0852      	lsrs	r2, r2, #1
 8109726:	4611      	mov	r1, r2
 8109728:	f04f 0200 	mov.w	r2, #0
 810972c:	eb13 0b01 	adds.w	fp, r3, r1
 8109730:	eb44 0c02 	adc.w	ip, r4, r2
 8109734:	4658      	mov	r0, fp
 8109736:	4661      	mov	r1, ip
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	685b      	ldr	r3, [r3, #4]
 810973c:	f04f 0400 	mov.w	r4, #0
 8109740:	461a      	mov	r2, r3
 8109742:	4623      	mov	r3, r4
 8109744:	f7f6 fdc8 	bl	81002d8 <__aeabi_uldivmod>
 8109748:	4603      	mov	r3, r0
 810974a:	460c      	mov	r4, r1
 810974c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 810974e:	e19d      	b.n	8109a8c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109750:	687b      	ldr	r3, [r7, #4]
 8109752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109754:	2b00      	cmp	r3, #0
 8109756:	d05b      	beq.n	8109810 <UART_SetConfig+0x1130>
 8109758:	687b      	ldr	r3, [r7, #4]
 810975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810975c:	2b01      	cmp	r3, #1
 810975e:	d053      	beq.n	8109808 <UART_SetConfig+0x1128>
 8109760:	687b      	ldr	r3, [r7, #4]
 8109762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109764:	2b02      	cmp	r3, #2
 8109766:	d04b      	beq.n	8109800 <UART_SetConfig+0x1120>
 8109768:	687b      	ldr	r3, [r7, #4]
 810976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810976c:	2b03      	cmp	r3, #3
 810976e:	d043      	beq.n	81097f8 <UART_SetConfig+0x1118>
 8109770:	687b      	ldr	r3, [r7, #4]
 8109772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109774:	2b04      	cmp	r3, #4
 8109776:	d03b      	beq.n	81097f0 <UART_SetConfig+0x1110>
 8109778:	687b      	ldr	r3, [r7, #4]
 810977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810977c:	2b05      	cmp	r3, #5
 810977e:	d033      	beq.n	81097e8 <UART_SetConfig+0x1108>
 8109780:	687b      	ldr	r3, [r7, #4]
 8109782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109784:	2b06      	cmp	r3, #6
 8109786:	d02b      	beq.n	81097e0 <UART_SetConfig+0x1100>
 8109788:	687b      	ldr	r3, [r7, #4]
 810978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810978c:	2b07      	cmp	r3, #7
 810978e:	d023      	beq.n	81097d8 <UART_SetConfig+0x10f8>
 8109790:	687b      	ldr	r3, [r7, #4]
 8109792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109794:	2b08      	cmp	r3, #8
 8109796:	d01b      	beq.n	81097d0 <UART_SetConfig+0x10f0>
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810979c:	2b09      	cmp	r3, #9
 810979e:	d013      	beq.n	81097c8 <UART_SetConfig+0x10e8>
 81097a0:	687b      	ldr	r3, [r7, #4]
 81097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81097a4:	2b0a      	cmp	r3, #10
 81097a6:	d00b      	beq.n	81097c0 <UART_SetConfig+0x10e0>
 81097a8:	687b      	ldr	r3, [r7, #4]
 81097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81097ac:	2b0b      	cmp	r3, #11
 81097ae:	d103      	bne.n	81097b8 <UART_SetConfig+0x10d8>
 81097b0:	4b2a      	ldr	r3, [pc, #168]	; (810985c <UART_SetConfig+0x117c>)
 81097b2:	f04f 0400 	mov.w	r4, #0
 81097b6:	e02e      	b.n	8109816 <UART_SetConfig+0x1136>
 81097b8:	4b29      	ldr	r3, [pc, #164]	; (8109860 <UART_SetConfig+0x1180>)
 81097ba:	f04f 0403 	mov.w	r4, #3
 81097be:	e02a      	b.n	8109816 <UART_SetConfig+0x1136>
 81097c0:	4b28      	ldr	r3, [pc, #160]	; (8109864 <UART_SetConfig+0x1184>)
 81097c2:	f04f 0400 	mov.w	r4, #0
 81097c6:	e026      	b.n	8109816 <UART_SetConfig+0x1136>
 81097c8:	4b27      	ldr	r3, [pc, #156]	; (8109868 <UART_SetConfig+0x1188>)
 81097ca:	f04f 0400 	mov.w	r4, #0
 81097ce:	e022      	b.n	8109816 <UART_SetConfig+0x1136>
 81097d0:	4b26      	ldr	r3, [pc, #152]	; (810986c <UART_SetConfig+0x118c>)
 81097d2:	f04f 0400 	mov.w	r4, #0
 81097d6:	e01e      	b.n	8109816 <UART_SetConfig+0x1136>
 81097d8:	4b25      	ldr	r3, [pc, #148]	; (8109870 <UART_SetConfig+0x1190>)
 81097da:	f04f 0400 	mov.w	r4, #0
 81097de:	e01a      	b.n	8109816 <UART_SetConfig+0x1136>
 81097e0:	a419      	add	r4, pc, #100	; (adr r4, 8109848 <UART_SetConfig+0x1168>)
 81097e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 81097e6:	e016      	b.n	8109816 <UART_SetConfig+0x1136>
 81097e8:	4b22      	ldr	r3, [pc, #136]	; (8109874 <UART_SetConfig+0x1194>)
 81097ea:	f04f 0400 	mov.w	r4, #0
 81097ee:	e012      	b.n	8109816 <UART_SetConfig+0x1136>
 81097f0:	4b21      	ldr	r3, [pc, #132]	; (8109878 <UART_SetConfig+0x1198>)
 81097f2:	f04f 0400 	mov.w	r4, #0
 81097f6:	e00e      	b.n	8109816 <UART_SetConfig+0x1136>
 81097f8:	a415      	add	r4, pc, #84	; (adr r4, 8109850 <UART_SetConfig+0x1170>)
 81097fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 81097fe:	e00a      	b.n	8109816 <UART_SetConfig+0x1136>
 8109800:	4b1e      	ldr	r3, [pc, #120]	; (810987c <UART_SetConfig+0x119c>)
 8109802:	f04f 0400 	mov.w	r4, #0
 8109806:	e006      	b.n	8109816 <UART_SetConfig+0x1136>
 8109808:	4b1d      	ldr	r3, [pc, #116]	; (8109880 <UART_SetConfig+0x11a0>)
 810980a:	f04f 0401 	mov.w	r4, #1
 810980e:	e002      	b.n	8109816 <UART_SetConfig+0x1136>
 8109810:	4b13      	ldr	r3, [pc, #76]	; (8109860 <UART_SetConfig+0x1180>)
 8109812:	f04f 0403 	mov.w	r4, #3
 8109816:	687a      	ldr	r2, [r7, #4]
 8109818:	6852      	ldr	r2, [r2, #4]
 810981a:	0852      	lsrs	r2, r2, #1
 810981c:	4611      	mov	r1, r2
 810981e:	f04f 0200 	mov.w	r2, #0
 8109822:	eb13 0b01 	adds.w	fp, r3, r1
 8109826:	eb44 0c02 	adc.w	ip, r4, r2
 810982a:	4658      	mov	r0, fp
 810982c:	4661      	mov	r1, ip
 810982e:	687b      	ldr	r3, [r7, #4]
 8109830:	685b      	ldr	r3, [r3, #4]
 8109832:	f04f 0400 	mov.w	r4, #0
 8109836:	461a      	mov	r2, r3
 8109838:	4623      	mov	r3, r4
 810983a:	f7f6 fd4d 	bl	81002d8 <__aeabi_uldivmod>
 810983e:	4603      	mov	r3, r0
 8109840:	460c      	mov	r4, r1
 8109842:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8109844:	e122      	b.n	8109a8c <UART_SetConfig+0x13ac>
 8109846:	bf00      	nop
 8109848:	51615500 	.word	0x51615500
 810984c:	00000000 	.word	0x00000000
 8109850:	a2c2aa00 	.word	0xa2c2aa00
 8109854:	00000000 	.word	0x00000000
 8109858:	58024400 	.word	0x58024400
 810985c:	03d09000 	.word	0x03d09000
 8109860:	d0900000 	.word	0xd0900000
 8109864:	07a12000 	.word	0x07a12000
 8109868:	0f424000 	.word	0x0f424000
 810986c:	1e848000 	.word	0x1e848000
 8109870:	3d090000 	.word	0x3d090000
 8109874:	61a80000 	.word	0x61a80000
 8109878:	7a120000 	.word	0x7a120000
 810987c:	f4240000 	.word	0xf4240000
 8109880:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109884:	687b      	ldr	r3, [r7, #4]
 8109886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109888:	2b00      	cmp	r3, #0
 810988a:	d05b      	beq.n	8109944 <UART_SetConfig+0x1264>
 810988c:	687b      	ldr	r3, [r7, #4]
 810988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109890:	2b01      	cmp	r3, #1
 8109892:	d053      	beq.n	810993c <UART_SetConfig+0x125c>
 8109894:	687b      	ldr	r3, [r7, #4]
 8109896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109898:	2b02      	cmp	r3, #2
 810989a:	d04b      	beq.n	8109934 <UART_SetConfig+0x1254>
 810989c:	687b      	ldr	r3, [r7, #4]
 810989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098a0:	2b03      	cmp	r3, #3
 81098a2:	d043      	beq.n	810992c <UART_SetConfig+0x124c>
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098a8:	2b04      	cmp	r3, #4
 81098aa:	d03b      	beq.n	8109924 <UART_SetConfig+0x1244>
 81098ac:	687b      	ldr	r3, [r7, #4]
 81098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098b0:	2b05      	cmp	r3, #5
 81098b2:	d033      	beq.n	810991c <UART_SetConfig+0x123c>
 81098b4:	687b      	ldr	r3, [r7, #4]
 81098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098b8:	2b06      	cmp	r3, #6
 81098ba:	d02b      	beq.n	8109914 <UART_SetConfig+0x1234>
 81098bc:	687b      	ldr	r3, [r7, #4]
 81098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098c0:	2b07      	cmp	r3, #7
 81098c2:	d023      	beq.n	810990c <UART_SetConfig+0x122c>
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098c8:	2b08      	cmp	r3, #8
 81098ca:	d01b      	beq.n	8109904 <UART_SetConfig+0x1224>
 81098cc:	687b      	ldr	r3, [r7, #4]
 81098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098d0:	2b09      	cmp	r3, #9
 81098d2:	d013      	beq.n	81098fc <UART_SetConfig+0x121c>
 81098d4:	687b      	ldr	r3, [r7, #4]
 81098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098d8:	2b0a      	cmp	r3, #10
 81098da:	d00b      	beq.n	81098f4 <UART_SetConfig+0x1214>
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81098e0:	2b0b      	cmp	r3, #11
 81098e2:	d103      	bne.n	81098ec <UART_SetConfig+0x120c>
 81098e4:	4bc0      	ldr	r3, [pc, #768]	; (8109be8 <UART_SetConfig+0x1508>)
 81098e6:	f04f 0400 	mov.w	r4, #0
 81098ea:	e02e      	b.n	810994a <UART_SetConfig+0x126a>
 81098ec:	4bbf      	ldr	r3, [pc, #764]	; (8109bec <UART_SetConfig+0x150c>)
 81098ee:	f04f 0400 	mov.w	r4, #0
 81098f2:	e02a      	b.n	810994a <UART_SetConfig+0x126a>
 81098f4:	4bbe      	ldr	r3, [pc, #760]	; (8109bf0 <UART_SetConfig+0x1510>)
 81098f6:	f04f 0400 	mov.w	r4, #0
 81098fa:	e026      	b.n	810994a <UART_SetConfig+0x126a>
 81098fc:	4bbd      	ldr	r3, [pc, #756]	; (8109bf4 <UART_SetConfig+0x1514>)
 81098fe:	f04f 0400 	mov.w	r4, #0
 8109902:	e022      	b.n	810994a <UART_SetConfig+0x126a>
 8109904:	4bbc      	ldr	r3, [pc, #752]	; (8109bf8 <UART_SetConfig+0x1518>)
 8109906:	f04f 0400 	mov.w	r4, #0
 810990a:	e01e      	b.n	810994a <UART_SetConfig+0x126a>
 810990c:	4bbb      	ldr	r3, [pc, #748]	; (8109bfc <UART_SetConfig+0x151c>)
 810990e:	f04f 0400 	mov.w	r4, #0
 8109912:	e01a      	b.n	810994a <UART_SetConfig+0x126a>
 8109914:	a4b0      	add	r4, pc, #704	; (adr r4, 8109bd8 <UART_SetConfig+0x14f8>)
 8109916:	e9d4 3400 	ldrd	r3, r4, [r4]
 810991a:	e016      	b.n	810994a <UART_SetConfig+0x126a>
 810991c:	4bb8      	ldr	r3, [pc, #736]	; (8109c00 <UART_SetConfig+0x1520>)
 810991e:	f04f 0400 	mov.w	r4, #0
 8109922:	e012      	b.n	810994a <UART_SetConfig+0x126a>
 8109924:	4bb7      	ldr	r3, [pc, #732]	; (8109c04 <UART_SetConfig+0x1524>)
 8109926:	f04f 0400 	mov.w	r4, #0
 810992a:	e00e      	b.n	810994a <UART_SetConfig+0x126a>
 810992c:	a4ac      	add	r4, pc, #688	; (adr r4, 8109be0 <UART_SetConfig+0x1500>)
 810992e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8109932:	e00a      	b.n	810994a <UART_SetConfig+0x126a>
 8109934:	4bb4      	ldr	r3, [pc, #720]	; (8109c08 <UART_SetConfig+0x1528>)
 8109936:	f04f 0400 	mov.w	r4, #0
 810993a:	e006      	b.n	810994a <UART_SetConfig+0x126a>
 810993c:	4bb3      	ldr	r3, [pc, #716]	; (8109c0c <UART_SetConfig+0x152c>)
 810993e:	f04f 0400 	mov.w	r4, #0
 8109942:	e002      	b.n	810994a <UART_SetConfig+0x126a>
 8109944:	4ba9      	ldr	r3, [pc, #676]	; (8109bec <UART_SetConfig+0x150c>)
 8109946:	f04f 0400 	mov.w	r4, #0
 810994a:	687a      	ldr	r2, [r7, #4]
 810994c:	6852      	ldr	r2, [r2, #4]
 810994e:	0852      	lsrs	r2, r2, #1
 8109950:	4611      	mov	r1, r2
 8109952:	f04f 0200 	mov.w	r2, #0
 8109956:	eb13 0b01 	adds.w	fp, r3, r1
 810995a:	eb44 0c02 	adc.w	ip, r4, r2
 810995e:	4658      	mov	r0, fp
 8109960:	4661      	mov	r1, ip
 8109962:	687b      	ldr	r3, [r7, #4]
 8109964:	685b      	ldr	r3, [r3, #4]
 8109966:	f04f 0400 	mov.w	r4, #0
 810996a:	461a      	mov	r2, r3
 810996c:	4623      	mov	r3, r4
 810996e:	f7f6 fcb3 	bl	81002d8 <__aeabi_uldivmod>
 8109972:	4603      	mov	r3, r0
 8109974:	460c      	mov	r4, r1
 8109976:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8109978:	e088      	b.n	8109a8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810997a:	687b      	ldr	r3, [r7, #4]
 810997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810997e:	2b00      	cmp	r3, #0
 8109980:	d064      	beq.n	8109a4c <UART_SetConfig+0x136c>
 8109982:	687b      	ldr	r3, [r7, #4]
 8109984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109986:	2b01      	cmp	r3, #1
 8109988:	d05b      	beq.n	8109a42 <UART_SetConfig+0x1362>
 810998a:	687b      	ldr	r3, [r7, #4]
 810998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810998e:	2b02      	cmp	r3, #2
 8109990:	d052      	beq.n	8109a38 <UART_SetConfig+0x1358>
 8109992:	687b      	ldr	r3, [r7, #4]
 8109994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109996:	2b03      	cmp	r3, #3
 8109998:	d04a      	beq.n	8109a30 <UART_SetConfig+0x1350>
 810999a:	687b      	ldr	r3, [r7, #4]
 810999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810999e:	2b04      	cmp	r3, #4
 81099a0:	d041      	beq.n	8109a26 <UART_SetConfig+0x1346>
 81099a2:	687b      	ldr	r3, [r7, #4]
 81099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099a6:	2b05      	cmp	r3, #5
 81099a8:	d039      	beq.n	8109a1e <UART_SetConfig+0x133e>
 81099aa:	687b      	ldr	r3, [r7, #4]
 81099ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099ae:	2b06      	cmp	r3, #6
 81099b0:	d031      	beq.n	8109a16 <UART_SetConfig+0x1336>
 81099b2:	687b      	ldr	r3, [r7, #4]
 81099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099b6:	2b07      	cmp	r3, #7
 81099b8:	d028      	beq.n	8109a0c <UART_SetConfig+0x132c>
 81099ba:	687b      	ldr	r3, [r7, #4]
 81099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099be:	2b08      	cmp	r3, #8
 81099c0:	d01f      	beq.n	8109a02 <UART_SetConfig+0x1322>
 81099c2:	687b      	ldr	r3, [r7, #4]
 81099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099c6:	2b09      	cmp	r3, #9
 81099c8:	d016      	beq.n	81099f8 <UART_SetConfig+0x1318>
 81099ca:	687b      	ldr	r3, [r7, #4]
 81099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099ce:	2b0a      	cmp	r3, #10
 81099d0:	d00d      	beq.n	81099ee <UART_SetConfig+0x130e>
 81099d2:	687b      	ldr	r3, [r7, #4]
 81099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099d6:	2b0b      	cmp	r3, #11
 81099d8:	d104      	bne.n	81099e4 <UART_SetConfig+0x1304>
 81099da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81099de:	f04f 0400 	mov.w	r4, #0
 81099e2:	e037      	b.n	8109a54 <UART_SetConfig+0x1374>
 81099e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 81099e8:	f04f 0400 	mov.w	r4, #0
 81099ec:	e032      	b.n	8109a54 <UART_SetConfig+0x1374>
 81099ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 81099f2:	f04f 0400 	mov.w	r4, #0
 81099f6:	e02d      	b.n	8109a54 <UART_SetConfig+0x1374>
 81099f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81099fc:	f04f 0400 	mov.w	r4, #0
 8109a00:	e028      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8109a06:	f04f 0400 	mov.w	r4, #0
 8109a0a:	e023      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8109a10:	f04f 0400 	mov.w	r4, #0
 8109a14:	e01e      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a16:	4b7e      	ldr	r3, [pc, #504]	; (8109c10 <UART_SetConfig+0x1530>)
 8109a18:	f04f 0400 	mov.w	r4, #0
 8109a1c:	e01a      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a1e:	4b7d      	ldr	r3, [pc, #500]	; (8109c14 <UART_SetConfig+0x1534>)
 8109a20:	f04f 0400 	mov.w	r4, #0
 8109a24:	e016      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8109a2a:	f04f 0400 	mov.w	r4, #0
 8109a2e:	e011      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a30:	4b79      	ldr	r3, [pc, #484]	; (8109c18 <UART_SetConfig+0x1538>)
 8109a32:	f04f 0400 	mov.w	r4, #0
 8109a36:	e00d      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8109a3c:	f04f 0400 	mov.w	r4, #0
 8109a40:	e008      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8109a46:	f04f 0400 	mov.w	r4, #0
 8109a4a:	e003      	b.n	8109a54 <UART_SetConfig+0x1374>
 8109a4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8109a50:	f04f 0400 	mov.w	r4, #0
 8109a54:	687a      	ldr	r2, [r7, #4]
 8109a56:	6852      	ldr	r2, [r2, #4]
 8109a58:	0852      	lsrs	r2, r2, #1
 8109a5a:	4611      	mov	r1, r2
 8109a5c:	f04f 0200 	mov.w	r2, #0
 8109a60:	eb13 0b01 	adds.w	fp, r3, r1
 8109a64:	eb44 0c02 	adc.w	ip, r4, r2
 8109a68:	4658      	mov	r0, fp
 8109a6a:	4661      	mov	r1, ip
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	685b      	ldr	r3, [r3, #4]
 8109a70:	f04f 0400 	mov.w	r4, #0
 8109a74:	461a      	mov	r2, r3
 8109a76:	4623      	mov	r3, r4
 8109a78:	f7f6 fc2e 	bl	81002d8 <__aeabi_uldivmod>
 8109a7c:	4603      	mov	r3, r0
 8109a7e:	460c      	mov	r4, r1
 8109a80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8109a82:	e003      	b.n	8109a8c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8109a84:	2301      	movs	r3, #1
 8109a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8109a8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109a92:	d309      	bcc.n	8109aa8 <UART_SetConfig+0x13c8>
 8109a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109a9a:	d205      	bcs.n	8109aa8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8109a9c:	687b      	ldr	r3, [r7, #4]
 8109a9e:	681b      	ldr	r3, [r3, #0]
 8109aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109aa2:	60da      	str	r2, [r3, #12]
 8109aa4:	f000 bf85 	b.w	810a9b2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8109aa8:	2301      	movs	r3, #1
 8109aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109aae:	f000 bf80 	b.w	810a9b2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8109ab2:	687b      	ldr	r3, [r7, #4]
 8109ab4:	69db      	ldr	r3, [r3, #28]
 8109ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109aba:	f040 83da 	bne.w	810a272 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8109abe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8109ac2:	2b40      	cmp	r3, #64	; 0x40
 8109ac4:	f200 83b3 	bhi.w	810a22e <UART_SetConfig+0x1b4e>
 8109ac8:	a201      	add	r2, pc, #4	; (adr r2, 8109ad0 <UART_SetConfig+0x13f0>)
 8109aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ace:	bf00      	nop
 8109ad0:	08109c1d 	.word	0x08109c1d
 8109ad4:	08109cd5 	.word	0x08109cd5
 8109ad8:	0810a22f 	.word	0x0810a22f
 8109adc:	0810a22f 	.word	0x0810a22f
 8109ae0:	08109d8d 	.word	0x08109d8d
 8109ae4:	0810a22f 	.word	0x0810a22f
 8109ae8:	0810a22f 	.word	0x0810a22f
 8109aec:	0810a22f 	.word	0x0810a22f
 8109af0:	08109e49 	.word	0x08109e49
 8109af4:	0810a22f 	.word	0x0810a22f
 8109af8:	0810a22f 	.word	0x0810a22f
 8109afc:	0810a22f 	.word	0x0810a22f
 8109b00:	0810a22f 	.word	0x0810a22f
 8109b04:	0810a22f 	.word	0x0810a22f
 8109b08:	0810a22f 	.word	0x0810a22f
 8109b0c:	0810a22f 	.word	0x0810a22f
 8109b10:	08109f05 	.word	0x08109f05
 8109b14:	0810a22f 	.word	0x0810a22f
 8109b18:	0810a22f 	.word	0x0810a22f
 8109b1c:	0810a22f 	.word	0x0810a22f
 8109b20:	0810a22f 	.word	0x0810a22f
 8109b24:	0810a22f 	.word	0x0810a22f
 8109b28:	0810a22f 	.word	0x0810a22f
 8109b2c:	0810a22f 	.word	0x0810a22f
 8109b30:	0810a22f 	.word	0x0810a22f
 8109b34:	0810a22f 	.word	0x0810a22f
 8109b38:	0810a22f 	.word	0x0810a22f
 8109b3c:	0810a22f 	.word	0x0810a22f
 8109b40:	0810a22f 	.word	0x0810a22f
 8109b44:	0810a22f 	.word	0x0810a22f
 8109b48:	0810a22f 	.word	0x0810a22f
 8109b4c:	0810a22f 	.word	0x0810a22f
 8109b50:	0810a077 	.word	0x0810a077
 8109b54:	0810a22f 	.word	0x0810a22f
 8109b58:	0810a22f 	.word	0x0810a22f
 8109b5c:	0810a22f 	.word	0x0810a22f
 8109b60:	0810a22f 	.word	0x0810a22f
 8109b64:	0810a22f 	.word	0x0810a22f
 8109b68:	0810a22f 	.word	0x0810a22f
 8109b6c:	0810a22f 	.word	0x0810a22f
 8109b70:	0810a22f 	.word	0x0810a22f
 8109b74:	0810a22f 	.word	0x0810a22f
 8109b78:	0810a22f 	.word	0x0810a22f
 8109b7c:	0810a22f 	.word	0x0810a22f
 8109b80:	0810a22f 	.word	0x0810a22f
 8109b84:	0810a22f 	.word	0x0810a22f
 8109b88:	0810a22f 	.word	0x0810a22f
 8109b8c:	0810a22f 	.word	0x0810a22f
 8109b90:	0810a22f 	.word	0x0810a22f
 8109b94:	0810a22f 	.word	0x0810a22f
 8109b98:	0810a22f 	.word	0x0810a22f
 8109b9c:	0810a22f 	.word	0x0810a22f
 8109ba0:	0810a22f 	.word	0x0810a22f
 8109ba4:	0810a22f 	.word	0x0810a22f
 8109ba8:	0810a22f 	.word	0x0810a22f
 8109bac:	0810a22f 	.word	0x0810a22f
 8109bb0:	0810a22f 	.word	0x0810a22f
 8109bb4:	0810a22f 	.word	0x0810a22f
 8109bb8:	0810a22f 	.word	0x0810a22f
 8109bbc:	0810a22f 	.word	0x0810a22f
 8109bc0:	0810a22f 	.word	0x0810a22f
 8109bc4:	0810a22f 	.word	0x0810a22f
 8109bc8:	0810a22f 	.word	0x0810a22f
 8109bcc:	0810a22f 	.word	0x0810a22f
 8109bd0:	0810a16d 	.word	0x0810a16d
 8109bd4:	f3af 8000 	nop.w
 8109bd8:	05161500 	.word	0x05161500
 8109bdc:	00000000 	.word	0x00000000
 8109be0:	0a2c2a00 	.word	0x0a2c2a00
 8109be4:	00000000 	.word	0x00000000
 8109be8:	003d0900 	.word	0x003d0900
 8109bec:	3d090000 	.word	0x3d090000
 8109bf0:	007a1200 	.word	0x007a1200
 8109bf4:	00f42400 	.word	0x00f42400
 8109bf8:	01e84800 	.word	0x01e84800
 8109bfc:	03d09000 	.word	0x03d09000
 8109c00:	061a8000 	.word	0x061a8000
 8109c04:	07a12000 	.word	0x07a12000
 8109c08:	0f424000 	.word	0x0f424000
 8109c0c:	1e848000 	.word	0x1e848000
 8109c10:	000aaa00 	.word	0x000aaa00
 8109c14:	000ccc00 	.word	0x000ccc00
 8109c18:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109c1c:	f7fb f882 	bl	8104d24 <HAL_RCC_GetPCLK1Freq>
 8109c20:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c26:	2b00      	cmp	r3, #0
 8109c28:	d044      	beq.n	8109cb4 <UART_SetConfig+0x15d4>
 8109c2a:	687b      	ldr	r3, [r7, #4]
 8109c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c2e:	2b01      	cmp	r3, #1
 8109c30:	d03e      	beq.n	8109cb0 <UART_SetConfig+0x15d0>
 8109c32:	687b      	ldr	r3, [r7, #4]
 8109c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c36:	2b02      	cmp	r3, #2
 8109c38:	d038      	beq.n	8109cac <UART_SetConfig+0x15cc>
 8109c3a:	687b      	ldr	r3, [r7, #4]
 8109c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c3e:	2b03      	cmp	r3, #3
 8109c40:	d032      	beq.n	8109ca8 <UART_SetConfig+0x15c8>
 8109c42:	687b      	ldr	r3, [r7, #4]
 8109c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c46:	2b04      	cmp	r3, #4
 8109c48:	d02c      	beq.n	8109ca4 <UART_SetConfig+0x15c4>
 8109c4a:	687b      	ldr	r3, [r7, #4]
 8109c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c4e:	2b05      	cmp	r3, #5
 8109c50:	d026      	beq.n	8109ca0 <UART_SetConfig+0x15c0>
 8109c52:	687b      	ldr	r3, [r7, #4]
 8109c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c56:	2b06      	cmp	r3, #6
 8109c58:	d020      	beq.n	8109c9c <UART_SetConfig+0x15bc>
 8109c5a:	687b      	ldr	r3, [r7, #4]
 8109c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c5e:	2b07      	cmp	r3, #7
 8109c60:	d01a      	beq.n	8109c98 <UART_SetConfig+0x15b8>
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c66:	2b08      	cmp	r3, #8
 8109c68:	d014      	beq.n	8109c94 <UART_SetConfig+0x15b4>
 8109c6a:	687b      	ldr	r3, [r7, #4]
 8109c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c6e:	2b09      	cmp	r3, #9
 8109c70:	d00e      	beq.n	8109c90 <UART_SetConfig+0x15b0>
 8109c72:	687b      	ldr	r3, [r7, #4]
 8109c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c76:	2b0a      	cmp	r3, #10
 8109c78:	d008      	beq.n	8109c8c <UART_SetConfig+0x15ac>
 8109c7a:	687b      	ldr	r3, [r7, #4]
 8109c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c7e:	2b0b      	cmp	r3, #11
 8109c80:	d102      	bne.n	8109c88 <UART_SetConfig+0x15a8>
 8109c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109c86:	e016      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109c88:	2301      	movs	r3, #1
 8109c8a:	e014      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109c8c:	2380      	movs	r3, #128	; 0x80
 8109c8e:	e012      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109c90:	2340      	movs	r3, #64	; 0x40
 8109c92:	e010      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109c94:	2320      	movs	r3, #32
 8109c96:	e00e      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109c98:	2310      	movs	r3, #16
 8109c9a:	e00c      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109c9c:	230c      	movs	r3, #12
 8109c9e:	e00a      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109ca0:	230a      	movs	r3, #10
 8109ca2:	e008      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109ca4:	2308      	movs	r3, #8
 8109ca6:	e006      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109ca8:	2306      	movs	r3, #6
 8109caa:	e004      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109cac:	2304      	movs	r3, #4
 8109cae:	e002      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109cb0:	2302      	movs	r3, #2
 8109cb2:	e000      	b.n	8109cb6 <UART_SetConfig+0x15d6>
 8109cb4:	2301      	movs	r3, #1
 8109cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8109cbc:	005a      	lsls	r2, r3, #1
 8109cbe:	687b      	ldr	r3, [r7, #4]
 8109cc0:	685b      	ldr	r3, [r3, #4]
 8109cc2:	085b      	lsrs	r3, r3, #1
 8109cc4:	441a      	add	r2, r3
 8109cc6:	687b      	ldr	r3, [r7, #4]
 8109cc8:	685b      	ldr	r3, [r3, #4]
 8109cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8109cce:	b29b      	uxth	r3, r3
 8109cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8109cd2:	e2b0      	b.n	810a236 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109cd4:	f7fb f83c 	bl	8104d50 <HAL_RCC_GetPCLK2Freq>
 8109cd8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109cda:	687b      	ldr	r3, [r7, #4]
 8109cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109cde:	2b00      	cmp	r3, #0
 8109ce0:	d044      	beq.n	8109d6c <UART_SetConfig+0x168c>
 8109ce2:	687b      	ldr	r3, [r7, #4]
 8109ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109ce6:	2b01      	cmp	r3, #1
 8109ce8:	d03e      	beq.n	8109d68 <UART_SetConfig+0x1688>
 8109cea:	687b      	ldr	r3, [r7, #4]
 8109cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109cee:	2b02      	cmp	r3, #2
 8109cf0:	d038      	beq.n	8109d64 <UART_SetConfig+0x1684>
 8109cf2:	687b      	ldr	r3, [r7, #4]
 8109cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109cf6:	2b03      	cmp	r3, #3
 8109cf8:	d032      	beq.n	8109d60 <UART_SetConfig+0x1680>
 8109cfa:	687b      	ldr	r3, [r7, #4]
 8109cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109cfe:	2b04      	cmp	r3, #4
 8109d00:	d02c      	beq.n	8109d5c <UART_SetConfig+0x167c>
 8109d02:	687b      	ldr	r3, [r7, #4]
 8109d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d06:	2b05      	cmp	r3, #5
 8109d08:	d026      	beq.n	8109d58 <UART_SetConfig+0x1678>
 8109d0a:	687b      	ldr	r3, [r7, #4]
 8109d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d0e:	2b06      	cmp	r3, #6
 8109d10:	d020      	beq.n	8109d54 <UART_SetConfig+0x1674>
 8109d12:	687b      	ldr	r3, [r7, #4]
 8109d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d16:	2b07      	cmp	r3, #7
 8109d18:	d01a      	beq.n	8109d50 <UART_SetConfig+0x1670>
 8109d1a:	687b      	ldr	r3, [r7, #4]
 8109d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d1e:	2b08      	cmp	r3, #8
 8109d20:	d014      	beq.n	8109d4c <UART_SetConfig+0x166c>
 8109d22:	687b      	ldr	r3, [r7, #4]
 8109d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d26:	2b09      	cmp	r3, #9
 8109d28:	d00e      	beq.n	8109d48 <UART_SetConfig+0x1668>
 8109d2a:	687b      	ldr	r3, [r7, #4]
 8109d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d2e:	2b0a      	cmp	r3, #10
 8109d30:	d008      	beq.n	8109d44 <UART_SetConfig+0x1664>
 8109d32:	687b      	ldr	r3, [r7, #4]
 8109d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d36:	2b0b      	cmp	r3, #11
 8109d38:	d102      	bne.n	8109d40 <UART_SetConfig+0x1660>
 8109d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109d3e:	e016      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d40:	2301      	movs	r3, #1
 8109d42:	e014      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d44:	2380      	movs	r3, #128	; 0x80
 8109d46:	e012      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d48:	2340      	movs	r3, #64	; 0x40
 8109d4a:	e010      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d4c:	2320      	movs	r3, #32
 8109d4e:	e00e      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d50:	2310      	movs	r3, #16
 8109d52:	e00c      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d54:	230c      	movs	r3, #12
 8109d56:	e00a      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d58:	230a      	movs	r3, #10
 8109d5a:	e008      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d5c:	2308      	movs	r3, #8
 8109d5e:	e006      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d60:	2306      	movs	r3, #6
 8109d62:	e004      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d64:	2304      	movs	r3, #4
 8109d66:	e002      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d68:	2302      	movs	r3, #2
 8109d6a:	e000      	b.n	8109d6e <UART_SetConfig+0x168e>
 8109d6c:	2301      	movs	r3, #1
 8109d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8109d74:	005a      	lsls	r2, r3, #1
 8109d76:	687b      	ldr	r3, [r7, #4]
 8109d78:	685b      	ldr	r3, [r3, #4]
 8109d7a:	085b      	lsrs	r3, r3, #1
 8109d7c:	441a      	add	r2, r3
 8109d7e:	687b      	ldr	r3, [r7, #4]
 8109d80:	685b      	ldr	r3, [r3, #4]
 8109d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8109d86:	b29b      	uxth	r3, r3
 8109d88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8109d8a:	e254      	b.n	810a236 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109d8c:	f107 0318 	add.w	r3, r7, #24
 8109d90:	4618      	mov	r0, r3
 8109d92:	f7fb fa81 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109d96:	69fa      	ldr	r2, [r7, #28]
 8109d98:	687b      	ldr	r3, [r7, #4]
 8109d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d9c:	2b00      	cmp	r3, #0
 8109d9e:	d044      	beq.n	8109e2a <UART_SetConfig+0x174a>
 8109da0:	687b      	ldr	r3, [r7, #4]
 8109da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109da4:	2b01      	cmp	r3, #1
 8109da6:	d03e      	beq.n	8109e26 <UART_SetConfig+0x1746>
 8109da8:	687b      	ldr	r3, [r7, #4]
 8109daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109dac:	2b02      	cmp	r3, #2
 8109dae:	d038      	beq.n	8109e22 <UART_SetConfig+0x1742>
 8109db0:	687b      	ldr	r3, [r7, #4]
 8109db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109db4:	2b03      	cmp	r3, #3
 8109db6:	d032      	beq.n	8109e1e <UART_SetConfig+0x173e>
 8109db8:	687b      	ldr	r3, [r7, #4]
 8109dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109dbc:	2b04      	cmp	r3, #4
 8109dbe:	d02c      	beq.n	8109e1a <UART_SetConfig+0x173a>
 8109dc0:	687b      	ldr	r3, [r7, #4]
 8109dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109dc4:	2b05      	cmp	r3, #5
 8109dc6:	d026      	beq.n	8109e16 <UART_SetConfig+0x1736>
 8109dc8:	687b      	ldr	r3, [r7, #4]
 8109dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109dcc:	2b06      	cmp	r3, #6
 8109dce:	d020      	beq.n	8109e12 <UART_SetConfig+0x1732>
 8109dd0:	687b      	ldr	r3, [r7, #4]
 8109dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109dd4:	2b07      	cmp	r3, #7
 8109dd6:	d01a      	beq.n	8109e0e <UART_SetConfig+0x172e>
 8109dd8:	687b      	ldr	r3, [r7, #4]
 8109dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109ddc:	2b08      	cmp	r3, #8
 8109dde:	d014      	beq.n	8109e0a <UART_SetConfig+0x172a>
 8109de0:	687b      	ldr	r3, [r7, #4]
 8109de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109de4:	2b09      	cmp	r3, #9
 8109de6:	d00e      	beq.n	8109e06 <UART_SetConfig+0x1726>
 8109de8:	687b      	ldr	r3, [r7, #4]
 8109dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109dec:	2b0a      	cmp	r3, #10
 8109dee:	d008      	beq.n	8109e02 <UART_SetConfig+0x1722>
 8109df0:	687b      	ldr	r3, [r7, #4]
 8109df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109df4:	2b0b      	cmp	r3, #11
 8109df6:	d102      	bne.n	8109dfe <UART_SetConfig+0x171e>
 8109df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109dfc:	e016      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109dfe:	2301      	movs	r3, #1
 8109e00:	e014      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e02:	2380      	movs	r3, #128	; 0x80
 8109e04:	e012      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e06:	2340      	movs	r3, #64	; 0x40
 8109e08:	e010      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e0a:	2320      	movs	r3, #32
 8109e0c:	e00e      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e0e:	2310      	movs	r3, #16
 8109e10:	e00c      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e12:	230c      	movs	r3, #12
 8109e14:	e00a      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e16:	230a      	movs	r3, #10
 8109e18:	e008      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e1a:	2308      	movs	r3, #8
 8109e1c:	e006      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e1e:	2306      	movs	r3, #6
 8109e20:	e004      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e22:	2304      	movs	r3, #4
 8109e24:	e002      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e26:	2302      	movs	r3, #2
 8109e28:	e000      	b.n	8109e2c <UART_SetConfig+0x174c>
 8109e2a:	2301      	movs	r3, #1
 8109e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8109e30:	005a      	lsls	r2, r3, #1
 8109e32:	687b      	ldr	r3, [r7, #4]
 8109e34:	685b      	ldr	r3, [r3, #4]
 8109e36:	085b      	lsrs	r3, r3, #1
 8109e38:	441a      	add	r2, r3
 8109e3a:	687b      	ldr	r3, [r7, #4]
 8109e3c:	685b      	ldr	r3, [r3, #4]
 8109e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109e42:	b29b      	uxth	r3, r3
 8109e44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8109e46:	e1f6      	b.n	810a236 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109e48:	f107 030c 	add.w	r3, r7, #12
 8109e4c:	4618      	mov	r0, r3
 8109e4e:	f7fb fb6f 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109e52:	693a      	ldr	r2, [r7, #16]
 8109e54:	687b      	ldr	r3, [r7, #4]
 8109e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e58:	2b00      	cmp	r3, #0
 8109e5a:	d044      	beq.n	8109ee6 <UART_SetConfig+0x1806>
 8109e5c:	687b      	ldr	r3, [r7, #4]
 8109e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e60:	2b01      	cmp	r3, #1
 8109e62:	d03e      	beq.n	8109ee2 <UART_SetConfig+0x1802>
 8109e64:	687b      	ldr	r3, [r7, #4]
 8109e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e68:	2b02      	cmp	r3, #2
 8109e6a:	d038      	beq.n	8109ede <UART_SetConfig+0x17fe>
 8109e6c:	687b      	ldr	r3, [r7, #4]
 8109e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e70:	2b03      	cmp	r3, #3
 8109e72:	d032      	beq.n	8109eda <UART_SetConfig+0x17fa>
 8109e74:	687b      	ldr	r3, [r7, #4]
 8109e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e78:	2b04      	cmp	r3, #4
 8109e7a:	d02c      	beq.n	8109ed6 <UART_SetConfig+0x17f6>
 8109e7c:	687b      	ldr	r3, [r7, #4]
 8109e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e80:	2b05      	cmp	r3, #5
 8109e82:	d026      	beq.n	8109ed2 <UART_SetConfig+0x17f2>
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e88:	2b06      	cmp	r3, #6
 8109e8a:	d020      	beq.n	8109ece <UART_SetConfig+0x17ee>
 8109e8c:	687b      	ldr	r3, [r7, #4]
 8109e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e90:	2b07      	cmp	r3, #7
 8109e92:	d01a      	beq.n	8109eca <UART_SetConfig+0x17ea>
 8109e94:	687b      	ldr	r3, [r7, #4]
 8109e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e98:	2b08      	cmp	r3, #8
 8109e9a:	d014      	beq.n	8109ec6 <UART_SetConfig+0x17e6>
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109ea0:	2b09      	cmp	r3, #9
 8109ea2:	d00e      	beq.n	8109ec2 <UART_SetConfig+0x17e2>
 8109ea4:	687b      	ldr	r3, [r7, #4]
 8109ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109ea8:	2b0a      	cmp	r3, #10
 8109eaa:	d008      	beq.n	8109ebe <UART_SetConfig+0x17de>
 8109eac:	687b      	ldr	r3, [r7, #4]
 8109eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109eb0:	2b0b      	cmp	r3, #11
 8109eb2:	d102      	bne.n	8109eba <UART_SetConfig+0x17da>
 8109eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109eb8:	e016      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109eba:	2301      	movs	r3, #1
 8109ebc:	e014      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ebe:	2380      	movs	r3, #128	; 0x80
 8109ec0:	e012      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ec2:	2340      	movs	r3, #64	; 0x40
 8109ec4:	e010      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ec6:	2320      	movs	r3, #32
 8109ec8:	e00e      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109eca:	2310      	movs	r3, #16
 8109ecc:	e00c      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ece:	230c      	movs	r3, #12
 8109ed0:	e00a      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ed2:	230a      	movs	r3, #10
 8109ed4:	e008      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ed6:	2308      	movs	r3, #8
 8109ed8:	e006      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109eda:	2306      	movs	r3, #6
 8109edc:	e004      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ede:	2304      	movs	r3, #4
 8109ee0:	e002      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ee2:	2302      	movs	r3, #2
 8109ee4:	e000      	b.n	8109ee8 <UART_SetConfig+0x1808>
 8109ee6:	2301      	movs	r3, #1
 8109ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8109eec:	005a      	lsls	r2, r3, #1
 8109eee:	687b      	ldr	r3, [r7, #4]
 8109ef0:	685b      	ldr	r3, [r3, #4]
 8109ef2:	085b      	lsrs	r3, r3, #1
 8109ef4:	441a      	add	r2, r3
 8109ef6:	687b      	ldr	r3, [r7, #4]
 8109ef8:	685b      	ldr	r3, [r3, #4]
 8109efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8109efe:	b29b      	uxth	r3, r3
 8109f00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8109f02:	e198      	b.n	810a236 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109f04:	4b87      	ldr	r3, [pc, #540]	; (810a124 <UART_SetConfig+0x1a44>)
 8109f06:	681b      	ldr	r3, [r3, #0]
 8109f08:	f003 0320 	and.w	r3, r3, #32
 8109f0c:	2b00      	cmp	r3, #0
 8109f0e:	d05e      	beq.n	8109fce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109f10:	4b84      	ldr	r3, [pc, #528]	; (810a124 <UART_SetConfig+0x1a44>)
 8109f12:	681b      	ldr	r3, [r3, #0]
 8109f14:	08db      	lsrs	r3, r3, #3
 8109f16:	f003 0303 	and.w	r3, r3, #3
 8109f1a:	4a83      	ldr	r2, [pc, #524]	; (810a128 <UART_SetConfig+0x1a48>)
 8109f1c:	40da      	lsrs	r2, r3
 8109f1e:	687b      	ldr	r3, [r7, #4]
 8109f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f22:	2b00      	cmp	r3, #0
 8109f24:	d044      	beq.n	8109fb0 <UART_SetConfig+0x18d0>
 8109f26:	687b      	ldr	r3, [r7, #4]
 8109f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f2a:	2b01      	cmp	r3, #1
 8109f2c:	d03e      	beq.n	8109fac <UART_SetConfig+0x18cc>
 8109f2e:	687b      	ldr	r3, [r7, #4]
 8109f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f32:	2b02      	cmp	r3, #2
 8109f34:	d038      	beq.n	8109fa8 <UART_SetConfig+0x18c8>
 8109f36:	687b      	ldr	r3, [r7, #4]
 8109f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f3a:	2b03      	cmp	r3, #3
 8109f3c:	d032      	beq.n	8109fa4 <UART_SetConfig+0x18c4>
 8109f3e:	687b      	ldr	r3, [r7, #4]
 8109f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f42:	2b04      	cmp	r3, #4
 8109f44:	d02c      	beq.n	8109fa0 <UART_SetConfig+0x18c0>
 8109f46:	687b      	ldr	r3, [r7, #4]
 8109f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f4a:	2b05      	cmp	r3, #5
 8109f4c:	d026      	beq.n	8109f9c <UART_SetConfig+0x18bc>
 8109f4e:	687b      	ldr	r3, [r7, #4]
 8109f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f52:	2b06      	cmp	r3, #6
 8109f54:	d020      	beq.n	8109f98 <UART_SetConfig+0x18b8>
 8109f56:	687b      	ldr	r3, [r7, #4]
 8109f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f5a:	2b07      	cmp	r3, #7
 8109f5c:	d01a      	beq.n	8109f94 <UART_SetConfig+0x18b4>
 8109f5e:	687b      	ldr	r3, [r7, #4]
 8109f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f62:	2b08      	cmp	r3, #8
 8109f64:	d014      	beq.n	8109f90 <UART_SetConfig+0x18b0>
 8109f66:	687b      	ldr	r3, [r7, #4]
 8109f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f6a:	2b09      	cmp	r3, #9
 8109f6c:	d00e      	beq.n	8109f8c <UART_SetConfig+0x18ac>
 8109f6e:	687b      	ldr	r3, [r7, #4]
 8109f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f72:	2b0a      	cmp	r3, #10
 8109f74:	d008      	beq.n	8109f88 <UART_SetConfig+0x18a8>
 8109f76:	687b      	ldr	r3, [r7, #4]
 8109f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f7a:	2b0b      	cmp	r3, #11
 8109f7c:	d102      	bne.n	8109f84 <UART_SetConfig+0x18a4>
 8109f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109f82:	e016      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109f84:	2301      	movs	r3, #1
 8109f86:	e014      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109f88:	2380      	movs	r3, #128	; 0x80
 8109f8a:	e012      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109f8c:	2340      	movs	r3, #64	; 0x40
 8109f8e:	e010      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109f90:	2320      	movs	r3, #32
 8109f92:	e00e      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109f94:	2310      	movs	r3, #16
 8109f96:	e00c      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109f98:	230c      	movs	r3, #12
 8109f9a:	e00a      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109f9c:	230a      	movs	r3, #10
 8109f9e:	e008      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109fa0:	2308      	movs	r3, #8
 8109fa2:	e006      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109fa4:	2306      	movs	r3, #6
 8109fa6:	e004      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109fa8:	2304      	movs	r3, #4
 8109faa:	e002      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109fac:	2302      	movs	r3, #2
 8109fae:	e000      	b.n	8109fb2 <UART_SetConfig+0x18d2>
 8109fb0:	2301      	movs	r3, #1
 8109fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8109fb6:	005a      	lsls	r2, r3, #1
 8109fb8:	687b      	ldr	r3, [r7, #4]
 8109fba:	685b      	ldr	r3, [r3, #4]
 8109fbc:	085b      	lsrs	r3, r3, #1
 8109fbe:	441a      	add	r2, r3
 8109fc0:	687b      	ldr	r3, [r7, #4]
 8109fc2:	685b      	ldr	r3, [r3, #4]
 8109fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8109fc8:	b29b      	uxth	r3, r3
 8109fca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8109fcc:	e133      	b.n	810a236 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109fce:	687b      	ldr	r3, [r7, #4]
 8109fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109fd2:	2b00      	cmp	r3, #0
 8109fd4:	d043      	beq.n	810a05e <UART_SetConfig+0x197e>
 8109fd6:	687b      	ldr	r3, [r7, #4]
 8109fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109fda:	2b01      	cmp	r3, #1
 8109fdc:	d03d      	beq.n	810a05a <UART_SetConfig+0x197a>
 8109fde:	687b      	ldr	r3, [r7, #4]
 8109fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109fe2:	2b02      	cmp	r3, #2
 8109fe4:	d037      	beq.n	810a056 <UART_SetConfig+0x1976>
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109fea:	2b03      	cmp	r3, #3
 8109fec:	d031      	beq.n	810a052 <UART_SetConfig+0x1972>
 8109fee:	687b      	ldr	r3, [r7, #4]
 8109ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109ff2:	2b04      	cmp	r3, #4
 8109ff4:	d02b      	beq.n	810a04e <UART_SetConfig+0x196e>
 8109ff6:	687b      	ldr	r3, [r7, #4]
 8109ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109ffa:	2b05      	cmp	r3, #5
 8109ffc:	d025      	beq.n	810a04a <UART_SetConfig+0x196a>
 8109ffe:	687b      	ldr	r3, [r7, #4]
 810a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a002:	2b06      	cmp	r3, #6
 810a004:	d01f      	beq.n	810a046 <UART_SetConfig+0x1966>
 810a006:	687b      	ldr	r3, [r7, #4]
 810a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a00a:	2b07      	cmp	r3, #7
 810a00c:	d019      	beq.n	810a042 <UART_SetConfig+0x1962>
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a012:	2b08      	cmp	r3, #8
 810a014:	d013      	beq.n	810a03e <UART_SetConfig+0x195e>
 810a016:	687b      	ldr	r3, [r7, #4]
 810a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a01a:	2b09      	cmp	r3, #9
 810a01c:	d00d      	beq.n	810a03a <UART_SetConfig+0x195a>
 810a01e:	687b      	ldr	r3, [r7, #4]
 810a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a022:	2b0a      	cmp	r3, #10
 810a024:	d007      	beq.n	810a036 <UART_SetConfig+0x1956>
 810a026:	687b      	ldr	r3, [r7, #4]
 810a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a02a:	2b0b      	cmp	r3, #11
 810a02c:	d101      	bne.n	810a032 <UART_SetConfig+0x1952>
 810a02e:	4b3f      	ldr	r3, [pc, #252]	; (810a12c <UART_SetConfig+0x1a4c>)
 810a030:	e016      	b.n	810a060 <UART_SetConfig+0x1980>
 810a032:	4b3f      	ldr	r3, [pc, #252]	; (810a130 <UART_SetConfig+0x1a50>)
 810a034:	e014      	b.n	810a060 <UART_SetConfig+0x1980>
 810a036:	4b3f      	ldr	r3, [pc, #252]	; (810a134 <UART_SetConfig+0x1a54>)
 810a038:	e012      	b.n	810a060 <UART_SetConfig+0x1980>
 810a03a:	4b3f      	ldr	r3, [pc, #252]	; (810a138 <UART_SetConfig+0x1a58>)
 810a03c:	e010      	b.n	810a060 <UART_SetConfig+0x1980>
 810a03e:	4b3f      	ldr	r3, [pc, #252]	; (810a13c <UART_SetConfig+0x1a5c>)
 810a040:	e00e      	b.n	810a060 <UART_SetConfig+0x1980>
 810a042:	4b3f      	ldr	r3, [pc, #252]	; (810a140 <UART_SetConfig+0x1a60>)
 810a044:	e00c      	b.n	810a060 <UART_SetConfig+0x1980>
 810a046:	4b3f      	ldr	r3, [pc, #252]	; (810a144 <UART_SetConfig+0x1a64>)
 810a048:	e00a      	b.n	810a060 <UART_SetConfig+0x1980>
 810a04a:	4b3f      	ldr	r3, [pc, #252]	; (810a148 <UART_SetConfig+0x1a68>)
 810a04c:	e008      	b.n	810a060 <UART_SetConfig+0x1980>
 810a04e:	4b3f      	ldr	r3, [pc, #252]	; (810a14c <UART_SetConfig+0x1a6c>)
 810a050:	e006      	b.n	810a060 <UART_SetConfig+0x1980>
 810a052:	4b3f      	ldr	r3, [pc, #252]	; (810a150 <UART_SetConfig+0x1a70>)
 810a054:	e004      	b.n	810a060 <UART_SetConfig+0x1980>
 810a056:	4b3f      	ldr	r3, [pc, #252]	; (810a154 <UART_SetConfig+0x1a74>)
 810a058:	e002      	b.n	810a060 <UART_SetConfig+0x1980>
 810a05a:	4b33      	ldr	r3, [pc, #204]	; (810a128 <UART_SetConfig+0x1a48>)
 810a05c:	e000      	b.n	810a060 <UART_SetConfig+0x1980>
 810a05e:	4b34      	ldr	r3, [pc, #208]	; (810a130 <UART_SetConfig+0x1a50>)
 810a060:	687a      	ldr	r2, [r7, #4]
 810a062:	6852      	ldr	r2, [r2, #4]
 810a064:	0852      	lsrs	r2, r2, #1
 810a066:	441a      	add	r2, r3
 810a068:	687b      	ldr	r3, [r7, #4]
 810a06a:	685b      	ldr	r3, [r3, #4]
 810a06c:	fbb2 f3f3 	udiv	r3, r2, r3
 810a070:	b29b      	uxth	r3, r3
 810a072:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a074:	e0df      	b.n	810a236 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a076:	687b      	ldr	r3, [r7, #4]
 810a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a07a:	2b00      	cmp	r3, #0
 810a07c:	d045      	beq.n	810a10a <UART_SetConfig+0x1a2a>
 810a07e:	687b      	ldr	r3, [r7, #4]
 810a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a082:	2b01      	cmp	r3, #1
 810a084:	d03f      	beq.n	810a106 <UART_SetConfig+0x1a26>
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a08a:	2b02      	cmp	r3, #2
 810a08c:	d039      	beq.n	810a102 <UART_SetConfig+0x1a22>
 810a08e:	687b      	ldr	r3, [r7, #4]
 810a090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a092:	2b03      	cmp	r3, #3
 810a094:	d033      	beq.n	810a0fe <UART_SetConfig+0x1a1e>
 810a096:	687b      	ldr	r3, [r7, #4]
 810a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a09a:	2b04      	cmp	r3, #4
 810a09c:	d02d      	beq.n	810a0fa <UART_SetConfig+0x1a1a>
 810a09e:	687b      	ldr	r3, [r7, #4]
 810a0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a0a2:	2b05      	cmp	r3, #5
 810a0a4:	d027      	beq.n	810a0f6 <UART_SetConfig+0x1a16>
 810a0a6:	687b      	ldr	r3, [r7, #4]
 810a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a0aa:	2b06      	cmp	r3, #6
 810a0ac:	d021      	beq.n	810a0f2 <UART_SetConfig+0x1a12>
 810a0ae:	687b      	ldr	r3, [r7, #4]
 810a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a0b2:	2b07      	cmp	r3, #7
 810a0b4:	d01b      	beq.n	810a0ee <UART_SetConfig+0x1a0e>
 810a0b6:	687b      	ldr	r3, [r7, #4]
 810a0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a0ba:	2b08      	cmp	r3, #8
 810a0bc:	d015      	beq.n	810a0ea <UART_SetConfig+0x1a0a>
 810a0be:	687b      	ldr	r3, [r7, #4]
 810a0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a0c2:	2b09      	cmp	r3, #9
 810a0c4:	d00f      	beq.n	810a0e6 <UART_SetConfig+0x1a06>
 810a0c6:	687b      	ldr	r3, [r7, #4]
 810a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a0ca:	2b0a      	cmp	r3, #10
 810a0cc:	d008      	beq.n	810a0e0 <UART_SetConfig+0x1a00>
 810a0ce:	687b      	ldr	r3, [r7, #4]
 810a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a0d2:	2b0b      	cmp	r3, #11
 810a0d4:	d102      	bne.n	810a0dc <UART_SetConfig+0x19fc>
 810a0d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 810a0da:	e017      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0dc:	4b18      	ldr	r3, [pc, #96]	; (810a140 <UART_SetConfig+0x1a60>)
 810a0de:	e015      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 810a0e4:	e012      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0e6:	4b1c      	ldr	r3, [pc, #112]	; (810a158 <UART_SetConfig+0x1a78>)
 810a0e8:	e010      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0ea:	4b1c      	ldr	r3, [pc, #112]	; (810a15c <UART_SetConfig+0x1a7c>)
 810a0ec:	e00e      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0ee:	4b0f      	ldr	r3, [pc, #60]	; (810a12c <UART_SetConfig+0x1a4c>)
 810a0f0:	e00c      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0f2:	4b1b      	ldr	r3, [pc, #108]	; (810a160 <UART_SetConfig+0x1a80>)
 810a0f4:	e00a      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0f6:	4b1b      	ldr	r3, [pc, #108]	; (810a164 <UART_SetConfig+0x1a84>)
 810a0f8:	e008      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0fa:	4b0e      	ldr	r3, [pc, #56]	; (810a134 <UART_SetConfig+0x1a54>)
 810a0fc:	e006      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a0fe:	4b1a      	ldr	r3, [pc, #104]	; (810a168 <UART_SetConfig+0x1a88>)
 810a100:	e004      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a102:	4b0d      	ldr	r3, [pc, #52]	; (810a138 <UART_SetConfig+0x1a58>)
 810a104:	e002      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a106:	4b0d      	ldr	r3, [pc, #52]	; (810a13c <UART_SetConfig+0x1a5c>)
 810a108:	e000      	b.n	810a10c <UART_SetConfig+0x1a2c>
 810a10a:	4b0d      	ldr	r3, [pc, #52]	; (810a140 <UART_SetConfig+0x1a60>)
 810a10c:	687a      	ldr	r2, [r7, #4]
 810a10e:	6852      	ldr	r2, [r2, #4]
 810a110:	0852      	lsrs	r2, r2, #1
 810a112:	441a      	add	r2, r3
 810a114:	687b      	ldr	r3, [r7, #4]
 810a116:	685b      	ldr	r3, [r3, #4]
 810a118:	fbb2 f3f3 	udiv	r3, r2, r3
 810a11c:	b29b      	uxth	r3, r3
 810a11e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a120:	e089      	b.n	810a236 <UART_SetConfig+0x1b56>
 810a122:	bf00      	nop
 810a124:	58024400 	.word	0x58024400
 810a128:	03d09000 	.word	0x03d09000
 810a12c:	0007a120 	.word	0x0007a120
 810a130:	07a12000 	.word	0x07a12000
 810a134:	000f4240 	.word	0x000f4240
 810a138:	001e8480 	.word	0x001e8480
 810a13c:	003d0900 	.word	0x003d0900
 810a140:	007a1200 	.word	0x007a1200
 810a144:	00a2c2aa 	.word	0x00a2c2aa
 810a148:	00c35000 	.word	0x00c35000
 810a14c:	00f42400 	.word	0x00f42400
 810a150:	01458554 	.word	0x01458554
 810a154:	01e84800 	.word	0x01e84800
 810a158:	0001e848 	.word	0x0001e848
 810a15c:	0003d090 	.word	0x0003d090
 810a160:	000a2c2a 	.word	0x000a2c2a
 810a164:	000c3500 	.word	0x000c3500
 810a168:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a16c:	687b      	ldr	r3, [r7, #4]
 810a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a170:	2b00      	cmp	r3, #0
 810a172:	d04f      	beq.n	810a214 <UART_SetConfig+0x1b34>
 810a174:	687b      	ldr	r3, [r7, #4]
 810a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a178:	2b01      	cmp	r3, #1
 810a17a:	d048      	beq.n	810a20e <UART_SetConfig+0x1b2e>
 810a17c:	687b      	ldr	r3, [r7, #4]
 810a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a180:	2b02      	cmp	r3, #2
 810a182:	d041      	beq.n	810a208 <UART_SetConfig+0x1b28>
 810a184:	687b      	ldr	r3, [r7, #4]
 810a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a188:	2b03      	cmp	r3, #3
 810a18a:	d03a      	beq.n	810a202 <UART_SetConfig+0x1b22>
 810a18c:	687b      	ldr	r3, [r7, #4]
 810a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a190:	2b04      	cmp	r3, #4
 810a192:	d033      	beq.n	810a1fc <UART_SetConfig+0x1b1c>
 810a194:	687b      	ldr	r3, [r7, #4]
 810a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a198:	2b05      	cmp	r3, #5
 810a19a:	d02c      	beq.n	810a1f6 <UART_SetConfig+0x1b16>
 810a19c:	687b      	ldr	r3, [r7, #4]
 810a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a1a0:	2b06      	cmp	r3, #6
 810a1a2:	d025      	beq.n	810a1f0 <UART_SetConfig+0x1b10>
 810a1a4:	687b      	ldr	r3, [r7, #4]
 810a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a1a8:	2b07      	cmp	r3, #7
 810a1aa:	d01e      	beq.n	810a1ea <UART_SetConfig+0x1b0a>
 810a1ac:	687b      	ldr	r3, [r7, #4]
 810a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a1b0:	2b08      	cmp	r3, #8
 810a1b2:	d017      	beq.n	810a1e4 <UART_SetConfig+0x1b04>
 810a1b4:	687b      	ldr	r3, [r7, #4]
 810a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a1b8:	2b09      	cmp	r3, #9
 810a1ba:	d010      	beq.n	810a1de <UART_SetConfig+0x1afe>
 810a1bc:	687b      	ldr	r3, [r7, #4]
 810a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a1c0:	2b0a      	cmp	r3, #10
 810a1c2:	d009      	beq.n	810a1d8 <UART_SetConfig+0x1af8>
 810a1c4:	687b      	ldr	r3, [r7, #4]
 810a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a1c8:	2b0b      	cmp	r3, #11
 810a1ca:	d102      	bne.n	810a1d2 <UART_SetConfig+0x1af2>
 810a1cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a1d0:	e022      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a1d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 810a1d6:	e01f      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a1d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 810a1dc:	e01c      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a1e2:	e019      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a1e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810a1e8:	e016      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a1ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a1ee:	e013      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a1f0:	f241 5354 	movw	r3, #5460	; 0x1554
 810a1f4:	e010      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a1f6:	f641 1398 	movw	r3, #6552	; 0x1998
 810a1fa:	e00d      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a1fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810a200:	e00a      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a202:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 810a206:	e007      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a208:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810a20c:	e004      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a20e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a212:	e001      	b.n	810a218 <UART_SetConfig+0x1b38>
 810a214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 810a218:	687a      	ldr	r2, [r7, #4]
 810a21a:	6852      	ldr	r2, [r2, #4]
 810a21c:	0852      	lsrs	r2, r2, #1
 810a21e:	441a      	add	r2, r3
 810a220:	687b      	ldr	r3, [r7, #4]
 810a222:	685b      	ldr	r3, [r3, #4]
 810a224:	fbb2 f3f3 	udiv	r3, r2, r3
 810a228:	b29b      	uxth	r3, r3
 810a22a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a22c:	e003      	b.n	810a236 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 810a22e:	2301      	movs	r3, #1
 810a230:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 810a234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a238:	2b0f      	cmp	r3, #15
 810a23a:	d916      	bls.n	810a26a <UART_SetConfig+0x1b8a>
 810a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a242:	d212      	bcs.n	810a26a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a246:	b29b      	uxth	r3, r3
 810a248:	f023 030f 	bic.w	r3, r3, #15
 810a24c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a250:	085b      	lsrs	r3, r3, #1
 810a252:	b29b      	uxth	r3, r3
 810a254:	f003 0307 	and.w	r3, r3, #7
 810a258:	b29a      	uxth	r2, r3
 810a25a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810a25c:	4313      	orrs	r3, r2
 810a25e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 810a260:	687b      	ldr	r3, [r7, #4]
 810a262:	681b      	ldr	r3, [r3, #0]
 810a264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810a266:	60da      	str	r2, [r3, #12]
 810a268:	e3a3      	b.n	810a9b2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 810a26a:	2301      	movs	r3, #1
 810a26c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810a270:	e39f      	b.n	810a9b2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 810a272:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 810a276:	2b40      	cmp	r3, #64	; 0x40
 810a278:	f200 8388 	bhi.w	810a98c <UART_SetConfig+0x22ac>
 810a27c:	a201      	add	r2, pc, #4	; (adr r2, 810a284 <UART_SetConfig+0x1ba4>)
 810a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a282:	bf00      	nop
 810a284:	0810a389 	.word	0x0810a389
 810a288:	0810a43f 	.word	0x0810a43f
 810a28c:	0810a98d 	.word	0x0810a98d
 810a290:	0810a98d 	.word	0x0810a98d
 810a294:	0810a4f5 	.word	0x0810a4f5
 810a298:	0810a98d 	.word	0x0810a98d
 810a29c:	0810a98d 	.word	0x0810a98d
 810a2a0:	0810a98d 	.word	0x0810a98d
 810a2a4:	0810a5af 	.word	0x0810a5af
 810a2a8:	0810a98d 	.word	0x0810a98d
 810a2ac:	0810a98d 	.word	0x0810a98d
 810a2b0:	0810a98d 	.word	0x0810a98d
 810a2b4:	0810a98d 	.word	0x0810a98d
 810a2b8:	0810a98d 	.word	0x0810a98d
 810a2bc:	0810a98d 	.word	0x0810a98d
 810a2c0:	0810a98d 	.word	0x0810a98d
 810a2c4:	0810a669 	.word	0x0810a669
 810a2c8:	0810a98d 	.word	0x0810a98d
 810a2cc:	0810a98d 	.word	0x0810a98d
 810a2d0:	0810a98d 	.word	0x0810a98d
 810a2d4:	0810a98d 	.word	0x0810a98d
 810a2d8:	0810a98d 	.word	0x0810a98d
 810a2dc:	0810a98d 	.word	0x0810a98d
 810a2e0:	0810a98d 	.word	0x0810a98d
 810a2e4:	0810a98d 	.word	0x0810a98d
 810a2e8:	0810a98d 	.word	0x0810a98d
 810a2ec:	0810a98d 	.word	0x0810a98d
 810a2f0:	0810a98d 	.word	0x0810a98d
 810a2f4:	0810a98d 	.word	0x0810a98d
 810a2f8:	0810a98d 	.word	0x0810a98d
 810a2fc:	0810a98d 	.word	0x0810a98d
 810a300:	0810a98d 	.word	0x0810a98d
 810a304:	0810a7d9 	.word	0x0810a7d9
 810a308:	0810a98d 	.word	0x0810a98d
 810a30c:	0810a98d 	.word	0x0810a98d
 810a310:	0810a98d 	.word	0x0810a98d
 810a314:	0810a98d 	.word	0x0810a98d
 810a318:	0810a98d 	.word	0x0810a98d
 810a31c:	0810a98d 	.word	0x0810a98d
 810a320:	0810a98d 	.word	0x0810a98d
 810a324:	0810a98d 	.word	0x0810a98d
 810a328:	0810a98d 	.word	0x0810a98d
 810a32c:	0810a98d 	.word	0x0810a98d
 810a330:	0810a98d 	.word	0x0810a98d
 810a334:	0810a98d 	.word	0x0810a98d
 810a338:	0810a98d 	.word	0x0810a98d
 810a33c:	0810a98d 	.word	0x0810a98d
 810a340:	0810a98d 	.word	0x0810a98d
 810a344:	0810a98d 	.word	0x0810a98d
 810a348:	0810a98d 	.word	0x0810a98d
 810a34c:	0810a98d 	.word	0x0810a98d
 810a350:	0810a98d 	.word	0x0810a98d
 810a354:	0810a98d 	.word	0x0810a98d
 810a358:	0810a98d 	.word	0x0810a98d
 810a35c:	0810a98d 	.word	0x0810a98d
 810a360:	0810a98d 	.word	0x0810a98d
 810a364:	0810a98d 	.word	0x0810a98d
 810a368:	0810a98d 	.word	0x0810a98d
 810a36c:	0810a98d 	.word	0x0810a98d
 810a370:	0810a98d 	.word	0x0810a98d
 810a374:	0810a98d 	.word	0x0810a98d
 810a378:	0810a98d 	.word	0x0810a98d
 810a37c:	0810a98d 	.word	0x0810a98d
 810a380:	0810a98d 	.word	0x0810a98d
 810a384:	0810a8cd 	.word	0x0810a8cd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a388:	f7fa fccc 	bl	8104d24 <HAL_RCC_GetPCLK1Freq>
 810a38c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a38e:	687b      	ldr	r3, [r7, #4]
 810a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a392:	2b00      	cmp	r3, #0
 810a394:	d044      	beq.n	810a420 <UART_SetConfig+0x1d40>
 810a396:	687b      	ldr	r3, [r7, #4]
 810a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a39a:	2b01      	cmp	r3, #1
 810a39c:	d03e      	beq.n	810a41c <UART_SetConfig+0x1d3c>
 810a39e:	687b      	ldr	r3, [r7, #4]
 810a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3a2:	2b02      	cmp	r3, #2
 810a3a4:	d038      	beq.n	810a418 <UART_SetConfig+0x1d38>
 810a3a6:	687b      	ldr	r3, [r7, #4]
 810a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3aa:	2b03      	cmp	r3, #3
 810a3ac:	d032      	beq.n	810a414 <UART_SetConfig+0x1d34>
 810a3ae:	687b      	ldr	r3, [r7, #4]
 810a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3b2:	2b04      	cmp	r3, #4
 810a3b4:	d02c      	beq.n	810a410 <UART_SetConfig+0x1d30>
 810a3b6:	687b      	ldr	r3, [r7, #4]
 810a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3ba:	2b05      	cmp	r3, #5
 810a3bc:	d026      	beq.n	810a40c <UART_SetConfig+0x1d2c>
 810a3be:	687b      	ldr	r3, [r7, #4]
 810a3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3c2:	2b06      	cmp	r3, #6
 810a3c4:	d020      	beq.n	810a408 <UART_SetConfig+0x1d28>
 810a3c6:	687b      	ldr	r3, [r7, #4]
 810a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3ca:	2b07      	cmp	r3, #7
 810a3cc:	d01a      	beq.n	810a404 <UART_SetConfig+0x1d24>
 810a3ce:	687b      	ldr	r3, [r7, #4]
 810a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3d2:	2b08      	cmp	r3, #8
 810a3d4:	d014      	beq.n	810a400 <UART_SetConfig+0x1d20>
 810a3d6:	687b      	ldr	r3, [r7, #4]
 810a3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3da:	2b09      	cmp	r3, #9
 810a3dc:	d00e      	beq.n	810a3fc <UART_SetConfig+0x1d1c>
 810a3de:	687b      	ldr	r3, [r7, #4]
 810a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3e2:	2b0a      	cmp	r3, #10
 810a3e4:	d008      	beq.n	810a3f8 <UART_SetConfig+0x1d18>
 810a3e6:	687b      	ldr	r3, [r7, #4]
 810a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a3ea:	2b0b      	cmp	r3, #11
 810a3ec:	d102      	bne.n	810a3f4 <UART_SetConfig+0x1d14>
 810a3ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a3f2:	e016      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a3f4:	2301      	movs	r3, #1
 810a3f6:	e014      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a3f8:	2380      	movs	r3, #128	; 0x80
 810a3fa:	e012      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a3fc:	2340      	movs	r3, #64	; 0x40
 810a3fe:	e010      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a400:	2320      	movs	r3, #32
 810a402:	e00e      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a404:	2310      	movs	r3, #16
 810a406:	e00c      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a408:	230c      	movs	r3, #12
 810a40a:	e00a      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a40c:	230a      	movs	r3, #10
 810a40e:	e008      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a410:	2308      	movs	r3, #8
 810a412:	e006      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a414:	2306      	movs	r3, #6
 810a416:	e004      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a418:	2304      	movs	r3, #4
 810a41a:	e002      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a41c:	2302      	movs	r3, #2
 810a41e:	e000      	b.n	810a422 <UART_SetConfig+0x1d42>
 810a420:	2301      	movs	r3, #1
 810a422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a424:	fbb2 f2f3 	udiv	r2, r2, r3
 810a428:	687b      	ldr	r3, [r7, #4]
 810a42a:	685b      	ldr	r3, [r3, #4]
 810a42c:	085b      	lsrs	r3, r3, #1
 810a42e:	441a      	add	r2, r3
 810a430:	687b      	ldr	r3, [r7, #4]
 810a432:	685b      	ldr	r3, [r3, #4]
 810a434:	fbb2 f3f3 	udiv	r3, r2, r3
 810a438:	b29b      	uxth	r3, r3
 810a43a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a43c:	e2aa      	b.n	810a994 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a43e:	f7fa fc87 	bl	8104d50 <HAL_RCC_GetPCLK2Freq>
 810a442:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a444:	687b      	ldr	r3, [r7, #4]
 810a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a448:	2b00      	cmp	r3, #0
 810a44a:	d044      	beq.n	810a4d6 <UART_SetConfig+0x1df6>
 810a44c:	687b      	ldr	r3, [r7, #4]
 810a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a450:	2b01      	cmp	r3, #1
 810a452:	d03e      	beq.n	810a4d2 <UART_SetConfig+0x1df2>
 810a454:	687b      	ldr	r3, [r7, #4]
 810a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a458:	2b02      	cmp	r3, #2
 810a45a:	d038      	beq.n	810a4ce <UART_SetConfig+0x1dee>
 810a45c:	687b      	ldr	r3, [r7, #4]
 810a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a460:	2b03      	cmp	r3, #3
 810a462:	d032      	beq.n	810a4ca <UART_SetConfig+0x1dea>
 810a464:	687b      	ldr	r3, [r7, #4]
 810a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a468:	2b04      	cmp	r3, #4
 810a46a:	d02c      	beq.n	810a4c6 <UART_SetConfig+0x1de6>
 810a46c:	687b      	ldr	r3, [r7, #4]
 810a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a470:	2b05      	cmp	r3, #5
 810a472:	d026      	beq.n	810a4c2 <UART_SetConfig+0x1de2>
 810a474:	687b      	ldr	r3, [r7, #4]
 810a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a478:	2b06      	cmp	r3, #6
 810a47a:	d020      	beq.n	810a4be <UART_SetConfig+0x1dde>
 810a47c:	687b      	ldr	r3, [r7, #4]
 810a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a480:	2b07      	cmp	r3, #7
 810a482:	d01a      	beq.n	810a4ba <UART_SetConfig+0x1dda>
 810a484:	687b      	ldr	r3, [r7, #4]
 810a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a488:	2b08      	cmp	r3, #8
 810a48a:	d014      	beq.n	810a4b6 <UART_SetConfig+0x1dd6>
 810a48c:	687b      	ldr	r3, [r7, #4]
 810a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a490:	2b09      	cmp	r3, #9
 810a492:	d00e      	beq.n	810a4b2 <UART_SetConfig+0x1dd2>
 810a494:	687b      	ldr	r3, [r7, #4]
 810a496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a498:	2b0a      	cmp	r3, #10
 810a49a:	d008      	beq.n	810a4ae <UART_SetConfig+0x1dce>
 810a49c:	687b      	ldr	r3, [r7, #4]
 810a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a4a0:	2b0b      	cmp	r3, #11
 810a4a2:	d102      	bne.n	810a4aa <UART_SetConfig+0x1dca>
 810a4a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a4a8:	e016      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4aa:	2301      	movs	r3, #1
 810a4ac:	e014      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4ae:	2380      	movs	r3, #128	; 0x80
 810a4b0:	e012      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4b2:	2340      	movs	r3, #64	; 0x40
 810a4b4:	e010      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4b6:	2320      	movs	r3, #32
 810a4b8:	e00e      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4ba:	2310      	movs	r3, #16
 810a4bc:	e00c      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4be:	230c      	movs	r3, #12
 810a4c0:	e00a      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4c2:	230a      	movs	r3, #10
 810a4c4:	e008      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4c6:	2308      	movs	r3, #8
 810a4c8:	e006      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4ca:	2306      	movs	r3, #6
 810a4cc:	e004      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4ce:	2304      	movs	r3, #4
 810a4d0:	e002      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4d2:	2302      	movs	r3, #2
 810a4d4:	e000      	b.n	810a4d8 <UART_SetConfig+0x1df8>
 810a4d6:	2301      	movs	r3, #1
 810a4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810a4da:	fbb2 f2f3 	udiv	r2, r2, r3
 810a4de:	687b      	ldr	r3, [r7, #4]
 810a4e0:	685b      	ldr	r3, [r3, #4]
 810a4e2:	085b      	lsrs	r3, r3, #1
 810a4e4:	441a      	add	r2, r3
 810a4e6:	687b      	ldr	r3, [r7, #4]
 810a4e8:	685b      	ldr	r3, [r3, #4]
 810a4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 810a4ee:	b29b      	uxth	r3, r3
 810a4f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a4f2:	e24f      	b.n	810a994 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a4f4:	f107 0318 	add.w	r3, r7, #24
 810a4f8:	4618      	mov	r0, r3
 810a4fa:	f7fa fecd 	bl	8105298 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a4fe:	69fa      	ldr	r2, [r7, #28]
 810a500:	687b      	ldr	r3, [r7, #4]
 810a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a504:	2b00      	cmp	r3, #0
 810a506:	d044      	beq.n	810a592 <UART_SetConfig+0x1eb2>
 810a508:	687b      	ldr	r3, [r7, #4]
 810a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a50c:	2b01      	cmp	r3, #1
 810a50e:	d03e      	beq.n	810a58e <UART_SetConfig+0x1eae>
 810a510:	687b      	ldr	r3, [r7, #4]
 810a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a514:	2b02      	cmp	r3, #2
 810a516:	d038      	beq.n	810a58a <UART_SetConfig+0x1eaa>
 810a518:	687b      	ldr	r3, [r7, #4]
 810a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a51c:	2b03      	cmp	r3, #3
 810a51e:	d032      	beq.n	810a586 <UART_SetConfig+0x1ea6>
 810a520:	687b      	ldr	r3, [r7, #4]
 810a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a524:	2b04      	cmp	r3, #4
 810a526:	d02c      	beq.n	810a582 <UART_SetConfig+0x1ea2>
 810a528:	687b      	ldr	r3, [r7, #4]
 810a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a52c:	2b05      	cmp	r3, #5
 810a52e:	d026      	beq.n	810a57e <UART_SetConfig+0x1e9e>
 810a530:	687b      	ldr	r3, [r7, #4]
 810a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a534:	2b06      	cmp	r3, #6
 810a536:	d020      	beq.n	810a57a <UART_SetConfig+0x1e9a>
 810a538:	687b      	ldr	r3, [r7, #4]
 810a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a53c:	2b07      	cmp	r3, #7
 810a53e:	d01a      	beq.n	810a576 <UART_SetConfig+0x1e96>
 810a540:	687b      	ldr	r3, [r7, #4]
 810a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a544:	2b08      	cmp	r3, #8
 810a546:	d014      	beq.n	810a572 <UART_SetConfig+0x1e92>
 810a548:	687b      	ldr	r3, [r7, #4]
 810a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a54c:	2b09      	cmp	r3, #9
 810a54e:	d00e      	beq.n	810a56e <UART_SetConfig+0x1e8e>
 810a550:	687b      	ldr	r3, [r7, #4]
 810a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a554:	2b0a      	cmp	r3, #10
 810a556:	d008      	beq.n	810a56a <UART_SetConfig+0x1e8a>
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a55c:	2b0b      	cmp	r3, #11
 810a55e:	d102      	bne.n	810a566 <UART_SetConfig+0x1e86>
 810a560:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a564:	e016      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a566:	2301      	movs	r3, #1
 810a568:	e014      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a56a:	2380      	movs	r3, #128	; 0x80
 810a56c:	e012      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a56e:	2340      	movs	r3, #64	; 0x40
 810a570:	e010      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a572:	2320      	movs	r3, #32
 810a574:	e00e      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a576:	2310      	movs	r3, #16
 810a578:	e00c      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a57a:	230c      	movs	r3, #12
 810a57c:	e00a      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a57e:	230a      	movs	r3, #10
 810a580:	e008      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a582:	2308      	movs	r3, #8
 810a584:	e006      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a586:	2306      	movs	r3, #6
 810a588:	e004      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a58a:	2304      	movs	r3, #4
 810a58c:	e002      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a58e:	2302      	movs	r3, #2
 810a590:	e000      	b.n	810a594 <UART_SetConfig+0x1eb4>
 810a592:	2301      	movs	r3, #1
 810a594:	fbb2 f2f3 	udiv	r2, r2, r3
 810a598:	687b      	ldr	r3, [r7, #4]
 810a59a:	685b      	ldr	r3, [r3, #4]
 810a59c:	085b      	lsrs	r3, r3, #1
 810a59e:	441a      	add	r2, r3
 810a5a0:	687b      	ldr	r3, [r7, #4]
 810a5a2:	685b      	ldr	r3, [r3, #4]
 810a5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 810a5a8:	b29b      	uxth	r3, r3
 810a5aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a5ac:	e1f2      	b.n	810a994 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a5ae:	f107 030c 	add.w	r3, r7, #12
 810a5b2:	4618      	mov	r0, r3
 810a5b4:	f7fa ffbc 	bl	8105530 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a5b8:	693a      	ldr	r2, [r7, #16]
 810a5ba:	687b      	ldr	r3, [r7, #4]
 810a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5be:	2b00      	cmp	r3, #0
 810a5c0:	d044      	beq.n	810a64c <UART_SetConfig+0x1f6c>
 810a5c2:	687b      	ldr	r3, [r7, #4]
 810a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5c6:	2b01      	cmp	r3, #1
 810a5c8:	d03e      	beq.n	810a648 <UART_SetConfig+0x1f68>
 810a5ca:	687b      	ldr	r3, [r7, #4]
 810a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5ce:	2b02      	cmp	r3, #2
 810a5d0:	d038      	beq.n	810a644 <UART_SetConfig+0x1f64>
 810a5d2:	687b      	ldr	r3, [r7, #4]
 810a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5d6:	2b03      	cmp	r3, #3
 810a5d8:	d032      	beq.n	810a640 <UART_SetConfig+0x1f60>
 810a5da:	687b      	ldr	r3, [r7, #4]
 810a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5de:	2b04      	cmp	r3, #4
 810a5e0:	d02c      	beq.n	810a63c <UART_SetConfig+0x1f5c>
 810a5e2:	687b      	ldr	r3, [r7, #4]
 810a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5e6:	2b05      	cmp	r3, #5
 810a5e8:	d026      	beq.n	810a638 <UART_SetConfig+0x1f58>
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5ee:	2b06      	cmp	r3, #6
 810a5f0:	d020      	beq.n	810a634 <UART_SetConfig+0x1f54>
 810a5f2:	687b      	ldr	r3, [r7, #4]
 810a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5f6:	2b07      	cmp	r3, #7
 810a5f8:	d01a      	beq.n	810a630 <UART_SetConfig+0x1f50>
 810a5fa:	687b      	ldr	r3, [r7, #4]
 810a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5fe:	2b08      	cmp	r3, #8
 810a600:	d014      	beq.n	810a62c <UART_SetConfig+0x1f4c>
 810a602:	687b      	ldr	r3, [r7, #4]
 810a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a606:	2b09      	cmp	r3, #9
 810a608:	d00e      	beq.n	810a628 <UART_SetConfig+0x1f48>
 810a60a:	687b      	ldr	r3, [r7, #4]
 810a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a60e:	2b0a      	cmp	r3, #10
 810a610:	d008      	beq.n	810a624 <UART_SetConfig+0x1f44>
 810a612:	687b      	ldr	r3, [r7, #4]
 810a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a616:	2b0b      	cmp	r3, #11
 810a618:	d102      	bne.n	810a620 <UART_SetConfig+0x1f40>
 810a61a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a61e:	e016      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a620:	2301      	movs	r3, #1
 810a622:	e014      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a624:	2380      	movs	r3, #128	; 0x80
 810a626:	e012      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a628:	2340      	movs	r3, #64	; 0x40
 810a62a:	e010      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a62c:	2320      	movs	r3, #32
 810a62e:	e00e      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a630:	2310      	movs	r3, #16
 810a632:	e00c      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a634:	230c      	movs	r3, #12
 810a636:	e00a      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a638:	230a      	movs	r3, #10
 810a63a:	e008      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a63c:	2308      	movs	r3, #8
 810a63e:	e006      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a640:	2306      	movs	r3, #6
 810a642:	e004      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a644:	2304      	movs	r3, #4
 810a646:	e002      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a648:	2302      	movs	r3, #2
 810a64a:	e000      	b.n	810a64e <UART_SetConfig+0x1f6e>
 810a64c:	2301      	movs	r3, #1
 810a64e:	fbb2 f2f3 	udiv	r2, r2, r3
 810a652:	687b      	ldr	r3, [r7, #4]
 810a654:	685b      	ldr	r3, [r3, #4]
 810a656:	085b      	lsrs	r3, r3, #1
 810a658:	441a      	add	r2, r3
 810a65a:	687b      	ldr	r3, [r7, #4]
 810a65c:	685b      	ldr	r3, [r3, #4]
 810a65e:	fbb2 f3f3 	udiv	r3, r2, r3
 810a662:	b29b      	uxth	r3, r3
 810a664:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a666:	e195      	b.n	810a994 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a668:	4b87      	ldr	r3, [pc, #540]	; (810a888 <UART_SetConfig+0x21a8>)
 810a66a:	681b      	ldr	r3, [r3, #0]
 810a66c:	f003 0320 	and.w	r3, r3, #32
 810a670:	2b00      	cmp	r3, #0
 810a672:	d05d      	beq.n	810a730 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a674:	4b84      	ldr	r3, [pc, #528]	; (810a888 <UART_SetConfig+0x21a8>)
 810a676:	681b      	ldr	r3, [r3, #0]
 810a678:	08db      	lsrs	r3, r3, #3
 810a67a:	f003 0303 	and.w	r3, r3, #3
 810a67e:	4a83      	ldr	r2, [pc, #524]	; (810a88c <UART_SetConfig+0x21ac>)
 810a680:	40da      	lsrs	r2, r3
 810a682:	687b      	ldr	r3, [r7, #4]
 810a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a686:	2b00      	cmp	r3, #0
 810a688:	d044      	beq.n	810a714 <UART_SetConfig+0x2034>
 810a68a:	687b      	ldr	r3, [r7, #4]
 810a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a68e:	2b01      	cmp	r3, #1
 810a690:	d03e      	beq.n	810a710 <UART_SetConfig+0x2030>
 810a692:	687b      	ldr	r3, [r7, #4]
 810a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a696:	2b02      	cmp	r3, #2
 810a698:	d038      	beq.n	810a70c <UART_SetConfig+0x202c>
 810a69a:	687b      	ldr	r3, [r7, #4]
 810a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a69e:	2b03      	cmp	r3, #3
 810a6a0:	d032      	beq.n	810a708 <UART_SetConfig+0x2028>
 810a6a2:	687b      	ldr	r3, [r7, #4]
 810a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6a6:	2b04      	cmp	r3, #4
 810a6a8:	d02c      	beq.n	810a704 <UART_SetConfig+0x2024>
 810a6aa:	687b      	ldr	r3, [r7, #4]
 810a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6ae:	2b05      	cmp	r3, #5
 810a6b0:	d026      	beq.n	810a700 <UART_SetConfig+0x2020>
 810a6b2:	687b      	ldr	r3, [r7, #4]
 810a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6b6:	2b06      	cmp	r3, #6
 810a6b8:	d020      	beq.n	810a6fc <UART_SetConfig+0x201c>
 810a6ba:	687b      	ldr	r3, [r7, #4]
 810a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6be:	2b07      	cmp	r3, #7
 810a6c0:	d01a      	beq.n	810a6f8 <UART_SetConfig+0x2018>
 810a6c2:	687b      	ldr	r3, [r7, #4]
 810a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6c6:	2b08      	cmp	r3, #8
 810a6c8:	d014      	beq.n	810a6f4 <UART_SetConfig+0x2014>
 810a6ca:	687b      	ldr	r3, [r7, #4]
 810a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6ce:	2b09      	cmp	r3, #9
 810a6d0:	d00e      	beq.n	810a6f0 <UART_SetConfig+0x2010>
 810a6d2:	687b      	ldr	r3, [r7, #4]
 810a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6d6:	2b0a      	cmp	r3, #10
 810a6d8:	d008      	beq.n	810a6ec <UART_SetConfig+0x200c>
 810a6da:	687b      	ldr	r3, [r7, #4]
 810a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a6de:	2b0b      	cmp	r3, #11
 810a6e0:	d102      	bne.n	810a6e8 <UART_SetConfig+0x2008>
 810a6e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a6e6:	e016      	b.n	810a716 <UART_SetConfig+0x2036>
 810a6e8:	2301      	movs	r3, #1
 810a6ea:	e014      	b.n	810a716 <UART_SetConfig+0x2036>
 810a6ec:	2380      	movs	r3, #128	; 0x80
 810a6ee:	e012      	b.n	810a716 <UART_SetConfig+0x2036>
 810a6f0:	2340      	movs	r3, #64	; 0x40
 810a6f2:	e010      	b.n	810a716 <UART_SetConfig+0x2036>
 810a6f4:	2320      	movs	r3, #32
 810a6f6:	e00e      	b.n	810a716 <UART_SetConfig+0x2036>
 810a6f8:	2310      	movs	r3, #16
 810a6fa:	e00c      	b.n	810a716 <UART_SetConfig+0x2036>
 810a6fc:	230c      	movs	r3, #12
 810a6fe:	e00a      	b.n	810a716 <UART_SetConfig+0x2036>
 810a700:	230a      	movs	r3, #10
 810a702:	e008      	b.n	810a716 <UART_SetConfig+0x2036>
 810a704:	2308      	movs	r3, #8
 810a706:	e006      	b.n	810a716 <UART_SetConfig+0x2036>
 810a708:	2306      	movs	r3, #6
 810a70a:	e004      	b.n	810a716 <UART_SetConfig+0x2036>
 810a70c:	2304      	movs	r3, #4
 810a70e:	e002      	b.n	810a716 <UART_SetConfig+0x2036>
 810a710:	2302      	movs	r3, #2
 810a712:	e000      	b.n	810a716 <UART_SetConfig+0x2036>
 810a714:	2301      	movs	r3, #1
 810a716:	fbb2 f2f3 	udiv	r2, r2, r3
 810a71a:	687b      	ldr	r3, [r7, #4]
 810a71c:	685b      	ldr	r3, [r3, #4]
 810a71e:	085b      	lsrs	r3, r3, #1
 810a720:	441a      	add	r2, r3
 810a722:	687b      	ldr	r3, [r7, #4]
 810a724:	685b      	ldr	r3, [r3, #4]
 810a726:	fbb2 f3f3 	udiv	r3, r2, r3
 810a72a:	b29b      	uxth	r3, r3
 810a72c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 810a72e:	e131      	b.n	810a994 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a730:	687b      	ldr	r3, [r7, #4]
 810a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a734:	2b00      	cmp	r3, #0
 810a736:	d043      	beq.n	810a7c0 <UART_SetConfig+0x20e0>
 810a738:	687b      	ldr	r3, [r7, #4]
 810a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a73c:	2b01      	cmp	r3, #1
 810a73e:	d03d      	beq.n	810a7bc <UART_SetConfig+0x20dc>
 810a740:	687b      	ldr	r3, [r7, #4]
 810a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a744:	2b02      	cmp	r3, #2
 810a746:	d037      	beq.n	810a7b8 <UART_SetConfig+0x20d8>
 810a748:	687b      	ldr	r3, [r7, #4]
 810a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a74c:	2b03      	cmp	r3, #3
 810a74e:	d031      	beq.n	810a7b4 <UART_SetConfig+0x20d4>
 810a750:	687b      	ldr	r3, [r7, #4]
 810a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a754:	2b04      	cmp	r3, #4
 810a756:	d02b      	beq.n	810a7b0 <UART_SetConfig+0x20d0>
 810a758:	687b      	ldr	r3, [r7, #4]
 810a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a75c:	2b05      	cmp	r3, #5
 810a75e:	d025      	beq.n	810a7ac <UART_SetConfig+0x20cc>
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a764:	2b06      	cmp	r3, #6
 810a766:	d01f      	beq.n	810a7a8 <UART_SetConfig+0x20c8>
 810a768:	687b      	ldr	r3, [r7, #4]
 810a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a76c:	2b07      	cmp	r3, #7
 810a76e:	d019      	beq.n	810a7a4 <UART_SetConfig+0x20c4>
 810a770:	687b      	ldr	r3, [r7, #4]
 810a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a774:	2b08      	cmp	r3, #8
 810a776:	d013      	beq.n	810a7a0 <UART_SetConfig+0x20c0>
 810a778:	687b      	ldr	r3, [r7, #4]
 810a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a77c:	2b09      	cmp	r3, #9
 810a77e:	d00d      	beq.n	810a79c <UART_SetConfig+0x20bc>
 810a780:	687b      	ldr	r3, [r7, #4]
 810a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a784:	2b0a      	cmp	r3, #10
 810a786:	d007      	beq.n	810a798 <UART_SetConfig+0x20b8>
 810a788:	687b      	ldr	r3, [r7, #4]
 810a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a78c:	2b0b      	cmp	r3, #11
 810a78e:	d101      	bne.n	810a794 <UART_SetConfig+0x20b4>
 810a790:	4b3f      	ldr	r3, [pc, #252]	; (810a890 <UART_SetConfig+0x21b0>)
 810a792:	e016      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a794:	4b3d      	ldr	r3, [pc, #244]	; (810a88c <UART_SetConfig+0x21ac>)
 810a796:	e014      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a798:	4b3e      	ldr	r3, [pc, #248]	; (810a894 <UART_SetConfig+0x21b4>)
 810a79a:	e012      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a79c:	4b3e      	ldr	r3, [pc, #248]	; (810a898 <UART_SetConfig+0x21b8>)
 810a79e:	e010      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7a0:	4b3e      	ldr	r3, [pc, #248]	; (810a89c <UART_SetConfig+0x21bc>)
 810a7a2:	e00e      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7a4:	4b3e      	ldr	r3, [pc, #248]	; (810a8a0 <UART_SetConfig+0x21c0>)
 810a7a6:	e00c      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7a8:	4b3e      	ldr	r3, [pc, #248]	; (810a8a4 <UART_SetConfig+0x21c4>)
 810a7aa:	e00a      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7ac:	4b3e      	ldr	r3, [pc, #248]	; (810a8a8 <UART_SetConfig+0x21c8>)
 810a7ae:	e008      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7b0:	4b3e      	ldr	r3, [pc, #248]	; (810a8ac <UART_SetConfig+0x21cc>)
 810a7b2:	e006      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7b4:	4b3e      	ldr	r3, [pc, #248]	; (810a8b0 <UART_SetConfig+0x21d0>)
 810a7b6:	e004      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7b8:	4b3e      	ldr	r3, [pc, #248]	; (810a8b4 <UART_SetConfig+0x21d4>)
 810a7ba:	e002      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7bc:	4b3e      	ldr	r3, [pc, #248]	; (810a8b8 <UART_SetConfig+0x21d8>)
 810a7be:	e000      	b.n	810a7c2 <UART_SetConfig+0x20e2>
 810a7c0:	4b32      	ldr	r3, [pc, #200]	; (810a88c <UART_SetConfig+0x21ac>)
 810a7c2:	687a      	ldr	r2, [r7, #4]
 810a7c4:	6852      	ldr	r2, [r2, #4]
 810a7c6:	0852      	lsrs	r2, r2, #1
 810a7c8:	441a      	add	r2, r3
 810a7ca:	687b      	ldr	r3, [r7, #4]
 810a7cc:	685b      	ldr	r3, [r3, #4]
 810a7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 810a7d2:	b29b      	uxth	r3, r3
 810a7d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a7d6:	e0dd      	b.n	810a994 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a7d8:	687b      	ldr	r3, [r7, #4]
 810a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a7dc:	2b00      	cmp	r3, #0
 810a7de:	d046      	beq.n	810a86e <UART_SetConfig+0x218e>
 810a7e0:	687b      	ldr	r3, [r7, #4]
 810a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a7e4:	2b01      	cmp	r3, #1
 810a7e6:	d040      	beq.n	810a86a <UART_SetConfig+0x218a>
 810a7e8:	687b      	ldr	r3, [r7, #4]
 810a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a7ec:	2b02      	cmp	r3, #2
 810a7ee:	d03a      	beq.n	810a866 <UART_SetConfig+0x2186>
 810a7f0:	687b      	ldr	r3, [r7, #4]
 810a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a7f4:	2b03      	cmp	r3, #3
 810a7f6:	d034      	beq.n	810a862 <UART_SetConfig+0x2182>
 810a7f8:	687b      	ldr	r3, [r7, #4]
 810a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a7fc:	2b04      	cmp	r3, #4
 810a7fe:	d02e      	beq.n	810a85e <UART_SetConfig+0x217e>
 810a800:	687b      	ldr	r3, [r7, #4]
 810a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a804:	2b05      	cmp	r3, #5
 810a806:	d028      	beq.n	810a85a <UART_SetConfig+0x217a>
 810a808:	687b      	ldr	r3, [r7, #4]
 810a80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a80c:	2b06      	cmp	r3, #6
 810a80e:	d022      	beq.n	810a856 <UART_SetConfig+0x2176>
 810a810:	687b      	ldr	r3, [r7, #4]
 810a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a814:	2b07      	cmp	r3, #7
 810a816:	d01c      	beq.n	810a852 <UART_SetConfig+0x2172>
 810a818:	687b      	ldr	r3, [r7, #4]
 810a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a81c:	2b08      	cmp	r3, #8
 810a81e:	d016      	beq.n	810a84e <UART_SetConfig+0x216e>
 810a820:	687b      	ldr	r3, [r7, #4]
 810a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a824:	2b09      	cmp	r3, #9
 810a826:	d00f      	beq.n	810a848 <UART_SetConfig+0x2168>
 810a828:	687b      	ldr	r3, [r7, #4]
 810a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a82c:	2b0a      	cmp	r3, #10
 810a82e:	d008      	beq.n	810a842 <UART_SetConfig+0x2162>
 810a830:	687b      	ldr	r3, [r7, #4]
 810a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a834:	2b0b      	cmp	r3, #11
 810a836:	d102      	bne.n	810a83e <UART_SetConfig+0x215e>
 810a838:	f643 5309 	movw	r3, #15625	; 0x3d09
 810a83c:	e018      	b.n	810a870 <UART_SetConfig+0x2190>
 810a83e:	4b18      	ldr	r3, [pc, #96]	; (810a8a0 <UART_SetConfig+0x21c0>)
 810a840:	e016      	b.n	810a870 <UART_SetConfig+0x2190>
 810a842:	f647 2312 	movw	r3, #31250	; 0x7a12
 810a846:	e013      	b.n	810a870 <UART_SetConfig+0x2190>
 810a848:	f24f 4324 	movw	r3, #62500	; 0xf424
 810a84c:	e010      	b.n	810a870 <UART_SetConfig+0x2190>
 810a84e:	4b1b      	ldr	r3, [pc, #108]	; (810a8bc <UART_SetConfig+0x21dc>)
 810a850:	e00e      	b.n	810a870 <UART_SetConfig+0x2190>
 810a852:	4b0f      	ldr	r3, [pc, #60]	; (810a890 <UART_SetConfig+0x21b0>)
 810a854:	e00c      	b.n	810a870 <UART_SetConfig+0x2190>
 810a856:	4b1a      	ldr	r3, [pc, #104]	; (810a8c0 <UART_SetConfig+0x21e0>)
 810a858:	e00a      	b.n	810a870 <UART_SetConfig+0x2190>
 810a85a:	4b1a      	ldr	r3, [pc, #104]	; (810a8c4 <UART_SetConfig+0x21e4>)
 810a85c:	e008      	b.n	810a870 <UART_SetConfig+0x2190>
 810a85e:	4b0d      	ldr	r3, [pc, #52]	; (810a894 <UART_SetConfig+0x21b4>)
 810a860:	e006      	b.n	810a870 <UART_SetConfig+0x2190>
 810a862:	4b19      	ldr	r3, [pc, #100]	; (810a8c8 <UART_SetConfig+0x21e8>)
 810a864:	e004      	b.n	810a870 <UART_SetConfig+0x2190>
 810a866:	4b0c      	ldr	r3, [pc, #48]	; (810a898 <UART_SetConfig+0x21b8>)
 810a868:	e002      	b.n	810a870 <UART_SetConfig+0x2190>
 810a86a:	4b0c      	ldr	r3, [pc, #48]	; (810a89c <UART_SetConfig+0x21bc>)
 810a86c:	e000      	b.n	810a870 <UART_SetConfig+0x2190>
 810a86e:	4b0c      	ldr	r3, [pc, #48]	; (810a8a0 <UART_SetConfig+0x21c0>)
 810a870:	687a      	ldr	r2, [r7, #4]
 810a872:	6852      	ldr	r2, [r2, #4]
 810a874:	0852      	lsrs	r2, r2, #1
 810a876:	441a      	add	r2, r3
 810a878:	687b      	ldr	r3, [r7, #4]
 810a87a:	685b      	ldr	r3, [r3, #4]
 810a87c:	fbb2 f3f3 	udiv	r3, r2, r3
 810a880:	b29b      	uxth	r3, r3
 810a882:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a884:	e086      	b.n	810a994 <UART_SetConfig+0x22b4>
 810a886:	bf00      	nop
 810a888:	58024400 	.word	0x58024400
 810a88c:	03d09000 	.word	0x03d09000
 810a890:	0003d090 	.word	0x0003d090
 810a894:	0007a120 	.word	0x0007a120
 810a898:	000f4240 	.word	0x000f4240
 810a89c:	001e8480 	.word	0x001e8480
 810a8a0:	003d0900 	.word	0x003d0900
 810a8a4:	00516155 	.word	0x00516155
 810a8a8:	0061a800 	.word	0x0061a800
 810a8ac:	007a1200 	.word	0x007a1200
 810a8b0:	00a2c2aa 	.word	0x00a2c2aa
 810a8b4:	00f42400 	.word	0x00f42400
 810a8b8:	01e84800 	.word	0x01e84800
 810a8bc:	0001e848 	.word	0x0001e848
 810a8c0:	00051615 	.word	0x00051615
 810a8c4:	00061a80 	.word	0x00061a80
 810a8c8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a8cc:	687b      	ldr	r3, [r7, #4]
 810a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a8d0:	2b00      	cmp	r3, #0
 810a8d2:	d04e      	beq.n	810a972 <UART_SetConfig+0x2292>
 810a8d4:	687b      	ldr	r3, [r7, #4]
 810a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a8d8:	2b01      	cmp	r3, #1
 810a8da:	d047      	beq.n	810a96c <UART_SetConfig+0x228c>
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a8e0:	2b02      	cmp	r3, #2
 810a8e2:	d040      	beq.n	810a966 <UART_SetConfig+0x2286>
 810a8e4:	687b      	ldr	r3, [r7, #4]
 810a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a8e8:	2b03      	cmp	r3, #3
 810a8ea:	d039      	beq.n	810a960 <UART_SetConfig+0x2280>
 810a8ec:	687b      	ldr	r3, [r7, #4]
 810a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a8f0:	2b04      	cmp	r3, #4
 810a8f2:	d032      	beq.n	810a95a <UART_SetConfig+0x227a>
 810a8f4:	687b      	ldr	r3, [r7, #4]
 810a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a8f8:	2b05      	cmp	r3, #5
 810a8fa:	d02b      	beq.n	810a954 <UART_SetConfig+0x2274>
 810a8fc:	687b      	ldr	r3, [r7, #4]
 810a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a900:	2b06      	cmp	r3, #6
 810a902:	d024      	beq.n	810a94e <UART_SetConfig+0x226e>
 810a904:	687b      	ldr	r3, [r7, #4]
 810a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a908:	2b07      	cmp	r3, #7
 810a90a:	d01d      	beq.n	810a948 <UART_SetConfig+0x2268>
 810a90c:	687b      	ldr	r3, [r7, #4]
 810a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a910:	2b08      	cmp	r3, #8
 810a912:	d016      	beq.n	810a942 <UART_SetConfig+0x2262>
 810a914:	687b      	ldr	r3, [r7, #4]
 810a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a918:	2b09      	cmp	r3, #9
 810a91a:	d00f      	beq.n	810a93c <UART_SetConfig+0x225c>
 810a91c:	687b      	ldr	r3, [r7, #4]
 810a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a920:	2b0a      	cmp	r3, #10
 810a922:	d008      	beq.n	810a936 <UART_SetConfig+0x2256>
 810a924:	687b      	ldr	r3, [r7, #4]
 810a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a928:	2b0b      	cmp	r3, #11
 810a92a:	d101      	bne.n	810a930 <UART_SetConfig+0x2250>
 810a92c:	2380      	movs	r3, #128	; 0x80
 810a92e:	e022      	b.n	810a976 <UART_SetConfig+0x2296>
 810a930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a934:	e01f      	b.n	810a976 <UART_SetConfig+0x2296>
 810a936:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a93a:	e01c      	b.n	810a976 <UART_SetConfig+0x2296>
 810a93c:	f44f 7300 	mov.w	r3, #512	; 0x200
 810a940:	e019      	b.n	810a976 <UART_SetConfig+0x2296>
 810a942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a946:	e016      	b.n	810a976 <UART_SetConfig+0x2296>
 810a948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810a94c:	e013      	b.n	810a976 <UART_SetConfig+0x2296>
 810a94e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 810a952:	e010      	b.n	810a976 <UART_SetConfig+0x2296>
 810a954:	f640 43cc 	movw	r3, #3276	; 0xccc
 810a958:	e00d      	b.n	810a976 <UART_SetConfig+0x2296>
 810a95a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a95e:	e00a      	b.n	810a976 <UART_SetConfig+0x2296>
 810a960:	f241 5355 	movw	r3, #5461	; 0x1555
 810a964:	e007      	b.n	810a976 <UART_SetConfig+0x2296>
 810a966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810a96a:	e004      	b.n	810a976 <UART_SetConfig+0x2296>
 810a96c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810a970:	e001      	b.n	810a976 <UART_SetConfig+0x2296>
 810a972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a976:	687a      	ldr	r2, [r7, #4]
 810a978:	6852      	ldr	r2, [r2, #4]
 810a97a:	0852      	lsrs	r2, r2, #1
 810a97c:	441a      	add	r2, r3
 810a97e:	687b      	ldr	r3, [r7, #4]
 810a980:	685b      	ldr	r3, [r3, #4]
 810a982:	fbb2 f3f3 	udiv	r3, r2, r3
 810a986:	b29b      	uxth	r3, r3
 810a988:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810a98a:	e003      	b.n	810a994 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 810a98c:	2301      	movs	r3, #1
 810a98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 810a992:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a996:	2b0f      	cmp	r3, #15
 810a998:	d908      	bls.n	810a9ac <UART_SetConfig+0x22cc>
 810a99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a9a0:	d204      	bcs.n	810a9ac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	681b      	ldr	r3, [r3, #0]
 810a9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a9a8:	60da      	str	r2, [r3, #12]
 810a9aa:	e002      	b.n	810a9b2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 810a9ac:	2301      	movs	r3, #1
 810a9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a9b2:	687b      	ldr	r3, [r7, #4]
 810a9b4:	2201      	movs	r2, #1
 810a9b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810a9ba:	687b      	ldr	r3, [r7, #4]
 810a9bc:	2201      	movs	r2, #1
 810a9be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a9c2:	687b      	ldr	r3, [r7, #4]
 810a9c4:	2200      	movs	r2, #0
 810a9c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 810a9c8:	687b      	ldr	r3, [r7, #4]
 810a9ca:	2200      	movs	r2, #0
 810a9cc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 810a9ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 810a9d2:	4618      	mov	r0, r3
 810a9d4:	3740      	adds	r7, #64	; 0x40
 810a9d6:	46bd      	mov	sp, r7
 810a9d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0810a9dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a9dc:	b480      	push	{r7}
 810a9de:	b083      	sub	sp, #12
 810a9e0:	af00      	add	r7, sp, #0
 810a9e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a9e4:	687b      	ldr	r3, [r7, #4]
 810a9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a9e8:	f003 0301 	and.w	r3, r3, #1
 810a9ec:	2b00      	cmp	r3, #0
 810a9ee:	d00a      	beq.n	810aa06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	681b      	ldr	r3, [r3, #0]
 810a9f4:	685b      	ldr	r3, [r3, #4]
 810a9f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810a9fa:	687b      	ldr	r3, [r7, #4]
 810a9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a9fe:	687b      	ldr	r3, [r7, #4]
 810aa00:	681b      	ldr	r3, [r3, #0]
 810aa02:	430a      	orrs	r2, r1
 810aa04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810aa06:	687b      	ldr	r3, [r7, #4]
 810aa08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa0a:	f003 0302 	and.w	r3, r3, #2
 810aa0e:	2b00      	cmp	r3, #0
 810aa10:	d00a      	beq.n	810aa28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810aa12:	687b      	ldr	r3, [r7, #4]
 810aa14:	681b      	ldr	r3, [r3, #0]
 810aa16:	685b      	ldr	r3, [r3, #4]
 810aa18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810aa20:	687b      	ldr	r3, [r7, #4]
 810aa22:	681b      	ldr	r3, [r3, #0]
 810aa24:	430a      	orrs	r2, r1
 810aa26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810aa28:	687b      	ldr	r3, [r7, #4]
 810aa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa2c:	f003 0304 	and.w	r3, r3, #4
 810aa30:	2b00      	cmp	r3, #0
 810aa32:	d00a      	beq.n	810aa4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810aa34:	687b      	ldr	r3, [r7, #4]
 810aa36:	681b      	ldr	r3, [r3, #0]
 810aa38:	685b      	ldr	r3, [r3, #4]
 810aa3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810aa3e:	687b      	ldr	r3, [r7, #4]
 810aa40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810aa42:	687b      	ldr	r3, [r7, #4]
 810aa44:	681b      	ldr	r3, [r3, #0]
 810aa46:	430a      	orrs	r2, r1
 810aa48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa4e:	f003 0308 	and.w	r3, r3, #8
 810aa52:	2b00      	cmp	r3, #0
 810aa54:	d00a      	beq.n	810aa6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810aa56:	687b      	ldr	r3, [r7, #4]
 810aa58:	681b      	ldr	r3, [r3, #0]
 810aa5a:	685b      	ldr	r3, [r3, #4]
 810aa5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810aa60:	687b      	ldr	r3, [r7, #4]
 810aa62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810aa64:	687b      	ldr	r3, [r7, #4]
 810aa66:	681b      	ldr	r3, [r3, #0]
 810aa68:	430a      	orrs	r2, r1
 810aa6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa70:	f003 0310 	and.w	r3, r3, #16
 810aa74:	2b00      	cmp	r3, #0
 810aa76:	d00a      	beq.n	810aa8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810aa78:	687b      	ldr	r3, [r7, #4]
 810aa7a:	681b      	ldr	r3, [r3, #0]
 810aa7c:	689b      	ldr	r3, [r3, #8]
 810aa7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810aa82:	687b      	ldr	r3, [r7, #4]
 810aa84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810aa86:	687b      	ldr	r3, [r7, #4]
 810aa88:	681b      	ldr	r3, [r3, #0]
 810aa8a:	430a      	orrs	r2, r1
 810aa8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810aa8e:	687b      	ldr	r3, [r7, #4]
 810aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa92:	f003 0320 	and.w	r3, r3, #32
 810aa96:	2b00      	cmp	r3, #0
 810aa98:	d00a      	beq.n	810aab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810aa9a:	687b      	ldr	r3, [r7, #4]
 810aa9c:	681b      	ldr	r3, [r3, #0]
 810aa9e:	689b      	ldr	r3, [r3, #8]
 810aaa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810aaa4:	687b      	ldr	r3, [r7, #4]
 810aaa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810aaa8:	687b      	ldr	r3, [r7, #4]
 810aaaa:	681b      	ldr	r3, [r3, #0]
 810aaac:	430a      	orrs	r2, r1
 810aaae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810aab0:	687b      	ldr	r3, [r7, #4]
 810aab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aab8:	2b00      	cmp	r3, #0
 810aaba:	d01a      	beq.n	810aaf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810aabc:	687b      	ldr	r3, [r7, #4]
 810aabe:	681b      	ldr	r3, [r3, #0]
 810aac0:	685b      	ldr	r3, [r3, #4]
 810aac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810aac6:	687b      	ldr	r3, [r7, #4]
 810aac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810aaca:	687b      	ldr	r3, [r7, #4]
 810aacc:	681b      	ldr	r3, [r3, #0]
 810aace:	430a      	orrs	r2, r1
 810aad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810aad2:	687b      	ldr	r3, [r7, #4]
 810aad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810aad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810aada:	d10a      	bne.n	810aaf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810aadc:	687b      	ldr	r3, [r7, #4]
 810aade:	681b      	ldr	r3, [r3, #0]
 810aae0:	685b      	ldr	r3, [r3, #4]
 810aae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810aae6:	687b      	ldr	r3, [r7, #4]
 810aae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810aaea:	687b      	ldr	r3, [r7, #4]
 810aaec:	681b      	ldr	r3, [r3, #0]
 810aaee:	430a      	orrs	r2, r1
 810aaf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810aaf2:	687b      	ldr	r3, [r7, #4]
 810aaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aaf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810aafa:	2b00      	cmp	r3, #0
 810aafc:	d00a      	beq.n	810ab14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810aafe:	687b      	ldr	r3, [r7, #4]
 810ab00:	681b      	ldr	r3, [r3, #0]
 810ab02:	685b      	ldr	r3, [r3, #4]
 810ab04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810ab08:	687b      	ldr	r3, [r7, #4]
 810ab0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810ab0c:	687b      	ldr	r3, [r7, #4]
 810ab0e:	681b      	ldr	r3, [r3, #0]
 810ab10:	430a      	orrs	r2, r1
 810ab12:	605a      	str	r2, [r3, #4]
  }
}
 810ab14:	bf00      	nop
 810ab16:	370c      	adds	r7, #12
 810ab18:	46bd      	mov	sp, r7
 810ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab1e:	4770      	bx	lr

0810ab20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810ab20:	b580      	push	{r7, lr}
 810ab22:	b086      	sub	sp, #24
 810ab24:	af02      	add	r7, sp, #8
 810ab26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ab28:	687b      	ldr	r3, [r7, #4]
 810ab2a:	2200      	movs	r2, #0
 810ab2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 810ab30:	f7f7 fbe0 	bl	81022f4 <HAL_GetTick>
 810ab34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810ab36:	687b      	ldr	r3, [r7, #4]
 810ab38:	681b      	ldr	r3, [r3, #0]
 810ab3a:	681b      	ldr	r3, [r3, #0]
 810ab3c:	f003 0308 	and.w	r3, r3, #8
 810ab40:	2b08      	cmp	r3, #8
 810ab42:	d10e      	bne.n	810ab62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ab44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810ab48:	9300      	str	r3, [sp, #0]
 810ab4a:	68fb      	ldr	r3, [r7, #12]
 810ab4c:	2200      	movs	r2, #0
 810ab4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810ab52:	6878      	ldr	r0, [r7, #4]
 810ab54:	f000 f82c 	bl	810abb0 <UART_WaitOnFlagUntilTimeout>
 810ab58:	4603      	mov	r3, r0
 810ab5a:	2b00      	cmp	r3, #0
 810ab5c:	d001      	beq.n	810ab62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810ab5e:	2303      	movs	r3, #3
 810ab60:	e022      	b.n	810aba8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810ab62:	687b      	ldr	r3, [r7, #4]
 810ab64:	681b      	ldr	r3, [r3, #0]
 810ab66:	681b      	ldr	r3, [r3, #0]
 810ab68:	f003 0304 	and.w	r3, r3, #4
 810ab6c:	2b04      	cmp	r3, #4
 810ab6e:	d10e      	bne.n	810ab8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ab70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810ab74:	9300      	str	r3, [sp, #0]
 810ab76:	68fb      	ldr	r3, [r7, #12]
 810ab78:	2200      	movs	r2, #0
 810ab7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810ab7e:	6878      	ldr	r0, [r7, #4]
 810ab80:	f000 f816 	bl	810abb0 <UART_WaitOnFlagUntilTimeout>
 810ab84:	4603      	mov	r3, r0
 810ab86:	2b00      	cmp	r3, #0
 810ab88:	d001      	beq.n	810ab8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810ab8a:	2303      	movs	r3, #3
 810ab8c:	e00c      	b.n	810aba8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810ab8e:	687b      	ldr	r3, [r7, #4]
 810ab90:	2220      	movs	r2, #32
 810ab92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 810ab96:	687b      	ldr	r3, [r7, #4]
 810ab98:	2220      	movs	r2, #32
 810ab9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 810ab9e:	687b      	ldr	r3, [r7, #4]
 810aba0:	2200      	movs	r2, #0
 810aba2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810aba6:	2300      	movs	r3, #0
}
 810aba8:	4618      	mov	r0, r3
 810abaa:	3710      	adds	r7, #16
 810abac:	46bd      	mov	sp, r7
 810abae:	bd80      	pop	{r7, pc}

0810abb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810abb0:	b580      	push	{r7, lr}
 810abb2:	b084      	sub	sp, #16
 810abb4:	af00      	add	r7, sp, #0
 810abb6:	60f8      	str	r0, [r7, #12]
 810abb8:	60b9      	str	r1, [r7, #8]
 810abba:	603b      	str	r3, [r7, #0]
 810abbc:	4613      	mov	r3, r2
 810abbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810abc0:	e062      	b.n	810ac88 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810abc2:	69bb      	ldr	r3, [r7, #24]
 810abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810abc8:	d05e      	beq.n	810ac88 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810abca:	f7f7 fb93 	bl	81022f4 <HAL_GetTick>
 810abce:	4602      	mov	r2, r0
 810abd0:	683b      	ldr	r3, [r7, #0]
 810abd2:	1ad3      	subs	r3, r2, r3
 810abd4:	69ba      	ldr	r2, [r7, #24]
 810abd6:	429a      	cmp	r2, r3
 810abd8:	d302      	bcc.n	810abe0 <UART_WaitOnFlagUntilTimeout+0x30>
 810abda:	69bb      	ldr	r3, [r7, #24]
 810abdc:	2b00      	cmp	r3, #0
 810abde:	d11d      	bne.n	810ac1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810abe0:	68fb      	ldr	r3, [r7, #12]
 810abe2:	681b      	ldr	r3, [r3, #0]
 810abe4:	681a      	ldr	r2, [r3, #0]
 810abe6:	68fb      	ldr	r3, [r7, #12]
 810abe8:	681b      	ldr	r3, [r3, #0]
 810abea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810abee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810abf0:	68fb      	ldr	r3, [r7, #12]
 810abf2:	681b      	ldr	r3, [r3, #0]
 810abf4:	689a      	ldr	r2, [r3, #8]
 810abf6:	68fb      	ldr	r3, [r7, #12]
 810abf8:	681b      	ldr	r3, [r3, #0]
 810abfa:	f022 0201 	bic.w	r2, r2, #1
 810abfe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810ac00:	68fb      	ldr	r3, [r7, #12]
 810ac02:	2220      	movs	r2, #32
 810ac04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 810ac08:	68fb      	ldr	r3, [r7, #12]
 810ac0a:	2220      	movs	r2, #32
 810ac0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 810ac10:	68fb      	ldr	r3, [r7, #12]
 810ac12:	2200      	movs	r2, #0
 810ac14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 810ac18:	2303      	movs	r3, #3
 810ac1a:	e045      	b.n	810aca8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810ac1c:	68fb      	ldr	r3, [r7, #12]
 810ac1e:	681b      	ldr	r3, [r3, #0]
 810ac20:	681b      	ldr	r3, [r3, #0]
 810ac22:	f003 0304 	and.w	r3, r3, #4
 810ac26:	2b00      	cmp	r3, #0
 810ac28:	d02e      	beq.n	810ac88 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810ac2a:	68fb      	ldr	r3, [r7, #12]
 810ac2c:	681b      	ldr	r3, [r3, #0]
 810ac2e:	69db      	ldr	r3, [r3, #28]
 810ac30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810ac34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810ac38:	d126      	bne.n	810ac88 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ac3a:	68fb      	ldr	r3, [r7, #12]
 810ac3c:	681b      	ldr	r3, [r3, #0]
 810ac3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810ac42:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810ac44:	68fb      	ldr	r3, [r7, #12]
 810ac46:	681b      	ldr	r3, [r3, #0]
 810ac48:	681a      	ldr	r2, [r3, #0]
 810ac4a:	68fb      	ldr	r3, [r7, #12]
 810ac4c:	681b      	ldr	r3, [r3, #0]
 810ac4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810ac52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ac54:	68fb      	ldr	r3, [r7, #12]
 810ac56:	681b      	ldr	r3, [r3, #0]
 810ac58:	689a      	ldr	r2, [r3, #8]
 810ac5a:	68fb      	ldr	r3, [r7, #12]
 810ac5c:	681b      	ldr	r3, [r3, #0]
 810ac5e:	f022 0201 	bic.w	r2, r2, #1
 810ac62:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810ac64:	68fb      	ldr	r3, [r7, #12]
 810ac66:	2220      	movs	r2, #32
 810ac68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 810ac6c:	68fb      	ldr	r3, [r7, #12]
 810ac6e:	2220      	movs	r2, #32
 810ac70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810ac74:	68fb      	ldr	r3, [r7, #12]
 810ac76:	2220      	movs	r2, #32
 810ac78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810ac7c:	68fb      	ldr	r3, [r7, #12]
 810ac7e:	2200      	movs	r2, #0
 810ac80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 810ac84:	2303      	movs	r3, #3
 810ac86:	e00f      	b.n	810aca8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810ac88:	68fb      	ldr	r3, [r7, #12]
 810ac8a:	681b      	ldr	r3, [r3, #0]
 810ac8c:	69da      	ldr	r2, [r3, #28]
 810ac8e:	68bb      	ldr	r3, [r7, #8]
 810ac90:	4013      	ands	r3, r2
 810ac92:	68ba      	ldr	r2, [r7, #8]
 810ac94:	429a      	cmp	r2, r3
 810ac96:	bf0c      	ite	eq
 810ac98:	2301      	moveq	r3, #1
 810ac9a:	2300      	movne	r3, #0
 810ac9c:	b2db      	uxtb	r3, r3
 810ac9e:	461a      	mov	r2, r3
 810aca0:	79fb      	ldrb	r3, [r7, #7]
 810aca2:	429a      	cmp	r2, r3
 810aca4:	d08d      	beq.n	810abc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810aca6:	2300      	movs	r3, #0
}
 810aca8:	4618      	mov	r0, r3
 810acaa:	3710      	adds	r7, #16
 810acac:	46bd      	mov	sp, r7
 810acae:	bd80      	pop	{r7, pc}

0810acb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810acb0:	b480      	push	{r7}
 810acb2:	b085      	sub	sp, #20
 810acb4:	af00      	add	r7, sp, #0
 810acb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810acbe:	2b01      	cmp	r3, #1
 810acc0:	d101      	bne.n	810acc6 <HAL_UARTEx_DisableFifoMode+0x16>
 810acc2:	2302      	movs	r3, #2
 810acc4:	e027      	b.n	810ad16 <HAL_UARTEx_DisableFifoMode+0x66>
 810acc6:	687b      	ldr	r3, [r7, #4]
 810acc8:	2201      	movs	r2, #1
 810acca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810acce:	687b      	ldr	r3, [r7, #4]
 810acd0:	2224      	movs	r2, #36	; 0x24
 810acd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810acd6:	687b      	ldr	r3, [r7, #4]
 810acd8:	681b      	ldr	r3, [r3, #0]
 810acda:	681b      	ldr	r3, [r3, #0]
 810acdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810acde:	687b      	ldr	r3, [r7, #4]
 810ace0:	681b      	ldr	r3, [r3, #0]
 810ace2:	681a      	ldr	r2, [r3, #0]
 810ace4:	687b      	ldr	r3, [r7, #4]
 810ace6:	681b      	ldr	r3, [r3, #0]
 810ace8:	f022 0201 	bic.w	r2, r2, #1
 810acec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810acee:	68fb      	ldr	r3, [r7, #12]
 810acf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810acf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810acf6:	687b      	ldr	r3, [r7, #4]
 810acf8:	2200      	movs	r2, #0
 810acfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810acfc:	687b      	ldr	r3, [r7, #4]
 810acfe:	681b      	ldr	r3, [r3, #0]
 810ad00:	68fa      	ldr	r2, [r7, #12]
 810ad02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ad04:	687b      	ldr	r3, [r7, #4]
 810ad06:	2220      	movs	r2, #32
 810ad08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ad0c:	687b      	ldr	r3, [r7, #4]
 810ad0e:	2200      	movs	r2, #0
 810ad10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810ad14:	2300      	movs	r3, #0
}
 810ad16:	4618      	mov	r0, r3
 810ad18:	3714      	adds	r7, #20
 810ad1a:	46bd      	mov	sp, r7
 810ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad20:	4770      	bx	lr

0810ad22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ad22:	b580      	push	{r7, lr}
 810ad24:	b084      	sub	sp, #16
 810ad26:	af00      	add	r7, sp, #0
 810ad28:	6078      	str	r0, [r7, #4]
 810ad2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ad2c:	687b      	ldr	r3, [r7, #4]
 810ad2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810ad32:	2b01      	cmp	r3, #1
 810ad34:	d101      	bne.n	810ad3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810ad36:	2302      	movs	r3, #2
 810ad38:	e02d      	b.n	810ad96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810ad3a:	687b      	ldr	r3, [r7, #4]
 810ad3c:	2201      	movs	r2, #1
 810ad3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810ad42:	687b      	ldr	r3, [r7, #4]
 810ad44:	2224      	movs	r2, #36	; 0x24
 810ad46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ad4a:	687b      	ldr	r3, [r7, #4]
 810ad4c:	681b      	ldr	r3, [r3, #0]
 810ad4e:	681b      	ldr	r3, [r3, #0]
 810ad50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ad52:	687b      	ldr	r3, [r7, #4]
 810ad54:	681b      	ldr	r3, [r3, #0]
 810ad56:	681a      	ldr	r2, [r3, #0]
 810ad58:	687b      	ldr	r3, [r7, #4]
 810ad5a:	681b      	ldr	r3, [r3, #0]
 810ad5c:	f022 0201 	bic.w	r2, r2, #1
 810ad60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810ad62:	687b      	ldr	r3, [r7, #4]
 810ad64:	681b      	ldr	r3, [r3, #0]
 810ad66:	689b      	ldr	r3, [r3, #8]
 810ad68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	681b      	ldr	r3, [r3, #0]
 810ad70:	683a      	ldr	r2, [r7, #0]
 810ad72:	430a      	orrs	r2, r1
 810ad74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ad76:	6878      	ldr	r0, [r7, #4]
 810ad78:	f000 f850 	bl	810ae1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ad7c:	687b      	ldr	r3, [r7, #4]
 810ad7e:	681b      	ldr	r3, [r3, #0]
 810ad80:	68fa      	ldr	r2, [r7, #12]
 810ad82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ad84:	687b      	ldr	r3, [r7, #4]
 810ad86:	2220      	movs	r2, #32
 810ad88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ad8c:	687b      	ldr	r3, [r7, #4]
 810ad8e:	2200      	movs	r2, #0
 810ad90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810ad94:	2300      	movs	r3, #0
}
 810ad96:	4618      	mov	r0, r3
 810ad98:	3710      	adds	r7, #16
 810ad9a:	46bd      	mov	sp, r7
 810ad9c:	bd80      	pop	{r7, pc}

0810ad9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ad9e:	b580      	push	{r7, lr}
 810ada0:	b084      	sub	sp, #16
 810ada2:	af00      	add	r7, sp, #0
 810ada4:	6078      	str	r0, [r7, #4]
 810ada6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ada8:	687b      	ldr	r3, [r7, #4]
 810adaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810adae:	2b01      	cmp	r3, #1
 810adb0:	d101      	bne.n	810adb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810adb2:	2302      	movs	r3, #2
 810adb4:	e02d      	b.n	810ae12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810adb6:	687b      	ldr	r3, [r7, #4]
 810adb8:	2201      	movs	r2, #1
 810adba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810adbe:	687b      	ldr	r3, [r7, #4]
 810adc0:	2224      	movs	r2, #36	; 0x24
 810adc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810adc6:	687b      	ldr	r3, [r7, #4]
 810adc8:	681b      	ldr	r3, [r3, #0]
 810adca:	681b      	ldr	r3, [r3, #0]
 810adcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810adce:	687b      	ldr	r3, [r7, #4]
 810add0:	681b      	ldr	r3, [r3, #0]
 810add2:	681a      	ldr	r2, [r3, #0]
 810add4:	687b      	ldr	r3, [r7, #4]
 810add6:	681b      	ldr	r3, [r3, #0]
 810add8:	f022 0201 	bic.w	r2, r2, #1
 810addc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810adde:	687b      	ldr	r3, [r7, #4]
 810ade0:	681b      	ldr	r3, [r3, #0]
 810ade2:	689b      	ldr	r3, [r3, #8]
 810ade4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	681b      	ldr	r3, [r3, #0]
 810adec:	683a      	ldr	r2, [r7, #0]
 810adee:	430a      	orrs	r2, r1
 810adf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810adf2:	6878      	ldr	r0, [r7, #4]
 810adf4:	f000 f812 	bl	810ae1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810adf8:	687b      	ldr	r3, [r7, #4]
 810adfa:	681b      	ldr	r3, [r3, #0]
 810adfc:	68fa      	ldr	r2, [r7, #12]
 810adfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ae00:	687b      	ldr	r3, [r7, #4]
 810ae02:	2220      	movs	r2, #32
 810ae04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ae08:	687b      	ldr	r3, [r7, #4]
 810ae0a:	2200      	movs	r2, #0
 810ae0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810ae10:	2300      	movs	r3, #0
}
 810ae12:	4618      	mov	r0, r3
 810ae14:	3710      	adds	r7, #16
 810ae16:	46bd      	mov	sp, r7
 810ae18:	bd80      	pop	{r7, pc}
	...

0810ae1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ae1c:	b480      	push	{r7}
 810ae1e:	b089      	sub	sp, #36	; 0x24
 810ae20:	af00      	add	r7, sp, #0
 810ae22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 810ae24:	4a2f      	ldr	r2, [pc, #188]	; (810aee4 <UARTEx_SetNbDataToProcess+0xc8>)
 810ae26:	f107 0314 	add.w	r3, r7, #20
 810ae2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 810ae2e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 810ae32:	4a2d      	ldr	r2, [pc, #180]	; (810aee8 <UARTEx_SetNbDataToProcess+0xcc>)
 810ae34:	f107 030c 	add.w	r3, r7, #12
 810ae38:	e892 0003 	ldmia.w	r2, {r0, r1}
 810ae3c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ae40:	687b      	ldr	r3, [r7, #4]
 810ae42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ae44:	2b00      	cmp	r3, #0
 810ae46:	d108      	bne.n	810ae5a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 810ae48:	687b      	ldr	r3, [r7, #4]
 810ae4a:	2201      	movs	r2, #1
 810ae4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810ae50:	687b      	ldr	r3, [r7, #4]
 810ae52:	2201      	movs	r2, #1
 810ae54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ae58:	e03d      	b.n	810aed6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ae5a:	2308      	movs	r3, #8
 810ae5c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ae5e:	2308      	movs	r3, #8
 810ae60:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ae62:	687b      	ldr	r3, [r7, #4]
 810ae64:	681b      	ldr	r3, [r3, #0]
 810ae66:	689b      	ldr	r3, [r3, #8]
 810ae68:	0e5b      	lsrs	r3, r3, #25
 810ae6a:	b2db      	uxtb	r3, r3
 810ae6c:	f003 0307 	and.w	r3, r3, #7
 810ae70:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ae72:	687b      	ldr	r3, [r7, #4]
 810ae74:	681b      	ldr	r3, [r3, #0]
 810ae76:	689b      	ldr	r3, [r3, #8]
 810ae78:	0f5b      	lsrs	r3, r3, #29
 810ae7a:	b2db      	uxtb	r3, r3
 810ae7c:	f003 0307 	and.w	r3, r3, #7
 810ae80:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 810ae82:	7fbb      	ldrb	r3, [r7, #30]
 810ae84:	7f3a      	ldrb	r2, [r7, #28]
 810ae86:	f107 0120 	add.w	r1, r7, #32
 810ae8a:	440a      	add	r2, r1
 810ae8c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810ae90:	fb02 f303 	mul.w	r3, r2, r3
 810ae94:	7f3a      	ldrb	r2, [r7, #28]
 810ae96:	f107 0120 	add.w	r1, r7, #32
 810ae9a:	440a      	add	r2, r1
 810ae9c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810aea0:	fb93 f3f2 	sdiv	r3, r3, r2
 810aea4:	b29a      	uxth	r2, r3
 810aea6:	687b      	ldr	r3, [r7, #4]
 810aea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 810aeac:	7ffb      	ldrb	r3, [r7, #31]
 810aeae:	7f7a      	ldrb	r2, [r7, #29]
 810aeb0:	f107 0120 	add.w	r1, r7, #32
 810aeb4:	440a      	add	r2, r1
 810aeb6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810aeba:	fb02 f303 	mul.w	r3, r2, r3
 810aebe:	7f7a      	ldrb	r2, [r7, #29]
 810aec0:	f107 0120 	add.w	r1, r7, #32
 810aec4:	440a      	add	r2, r1
 810aec6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810aeca:	fb93 f3f2 	sdiv	r3, r3, r2
 810aece:	b29a      	uxth	r2, r3
 810aed0:	687b      	ldr	r3, [r7, #4]
 810aed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810aed6:	bf00      	nop
 810aed8:	3724      	adds	r7, #36	; 0x24
 810aeda:	46bd      	mov	sp, r7
 810aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aee0:	4770      	bx	lr
 810aee2:	bf00      	nop
 810aee4:	0810c03c 	.word	0x0810c03c
 810aee8:	0810c044 	.word	0x0810c044

0810aeec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 810aeec:	b480      	push	{r7}
 810aeee:	b083      	sub	sp, #12
 810aef0:	af00      	add	r7, sp, #0
 810aef2:	6078      	str	r0, [r7, #4]
 810aef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810aef6:	683b      	ldr	r3, [r7, #0]
 810aef8:	681b      	ldr	r3, [r3, #0]
 810aefa:	2b00      	cmp	r3, #0
 810aefc:	d123      	bne.n	810af46 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810aefe:	687b      	ldr	r3, [r7, #4]
 810af00:	681b      	ldr	r3, [r3, #0]
 810af02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810af06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810af0a:	683a      	ldr	r2, [r7, #0]
 810af0c:	6851      	ldr	r1, [r2, #4]
 810af0e:	683a      	ldr	r2, [r7, #0]
 810af10:	6892      	ldr	r2, [r2, #8]
 810af12:	4311      	orrs	r1, r2
 810af14:	683a      	ldr	r2, [r7, #0]
 810af16:	68d2      	ldr	r2, [r2, #12]
 810af18:	4311      	orrs	r1, r2
 810af1a:	683a      	ldr	r2, [r7, #0]
 810af1c:	6912      	ldr	r2, [r2, #16]
 810af1e:	4311      	orrs	r1, r2
 810af20:	683a      	ldr	r2, [r7, #0]
 810af22:	6952      	ldr	r2, [r2, #20]
 810af24:	4311      	orrs	r1, r2
 810af26:	683a      	ldr	r2, [r7, #0]
 810af28:	6992      	ldr	r2, [r2, #24]
 810af2a:	4311      	orrs	r1, r2
 810af2c:	683a      	ldr	r2, [r7, #0]
 810af2e:	69d2      	ldr	r2, [r2, #28]
 810af30:	4311      	orrs	r1, r2
 810af32:	683a      	ldr	r2, [r7, #0]
 810af34:	6a12      	ldr	r2, [r2, #32]
 810af36:	4311      	orrs	r1, r2
 810af38:	683a      	ldr	r2, [r7, #0]
 810af3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 810af3c:	430a      	orrs	r2, r1
 810af3e:	431a      	orrs	r2, r3
 810af40:	687b      	ldr	r3, [r7, #4]
 810af42:	601a      	str	r2, [r3, #0]
 810af44:	e028      	b.n	810af98 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810af46:	687b      	ldr	r3, [r7, #4]
 810af48:	681b      	ldr	r3, [r3, #0]
 810af4a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 810af4e:	683b      	ldr	r3, [r7, #0]
 810af50:	69d9      	ldr	r1, [r3, #28]
 810af52:	683b      	ldr	r3, [r7, #0]
 810af54:	6a1b      	ldr	r3, [r3, #32]
 810af56:	4319      	orrs	r1, r3
 810af58:	683b      	ldr	r3, [r7, #0]
 810af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810af5c:	430b      	orrs	r3, r1
 810af5e:	431a      	orrs	r2, r3
 810af60:	687b      	ldr	r3, [r7, #4]
 810af62:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810af64:	687b      	ldr	r3, [r7, #4]
 810af66:	685b      	ldr	r3, [r3, #4]
 810af68:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810af6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810af70:	683a      	ldr	r2, [r7, #0]
 810af72:	6851      	ldr	r1, [r2, #4]
 810af74:	683a      	ldr	r2, [r7, #0]
 810af76:	6892      	ldr	r2, [r2, #8]
 810af78:	4311      	orrs	r1, r2
 810af7a:	683a      	ldr	r2, [r7, #0]
 810af7c:	68d2      	ldr	r2, [r2, #12]
 810af7e:	4311      	orrs	r1, r2
 810af80:	683a      	ldr	r2, [r7, #0]
 810af82:	6912      	ldr	r2, [r2, #16]
 810af84:	4311      	orrs	r1, r2
 810af86:	683a      	ldr	r2, [r7, #0]
 810af88:	6952      	ldr	r2, [r2, #20]
 810af8a:	4311      	orrs	r1, r2
 810af8c:	683a      	ldr	r2, [r7, #0]
 810af8e:	6992      	ldr	r2, [r2, #24]
 810af90:	430a      	orrs	r2, r1
 810af92:	431a      	orrs	r2, r3
 810af94:	687b      	ldr	r3, [r7, #4]
 810af96:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810af98:	2300      	movs	r3, #0
}
 810af9a:	4618      	mov	r0, r3
 810af9c:	370c      	adds	r7, #12
 810af9e:	46bd      	mov	sp, r7
 810afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afa4:	4770      	bx	lr

0810afa6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810afa6:	b480      	push	{r7}
 810afa8:	b085      	sub	sp, #20
 810afaa:	af00      	add	r7, sp, #0
 810afac:	60f8      	str	r0, [r7, #12]
 810afae:	60b9      	str	r1, [r7, #8]
 810afb0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810afb2:	687b      	ldr	r3, [r7, #4]
 810afb4:	2b00      	cmp	r3, #0
 810afb6:	d128      	bne.n	810b00a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810afb8:	68fb      	ldr	r3, [r7, #12]
 810afba:	689b      	ldr	r3, [r3, #8]
 810afbc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810afc0:	68bb      	ldr	r3, [r7, #8]
 810afc2:	681b      	ldr	r3, [r3, #0]
 810afc4:	1e59      	subs	r1, r3, #1
 810afc6:	68bb      	ldr	r3, [r7, #8]
 810afc8:	685b      	ldr	r3, [r3, #4]
 810afca:	3b01      	subs	r3, #1
 810afcc:	011b      	lsls	r3, r3, #4
 810afce:	4319      	orrs	r1, r3
 810afd0:	68bb      	ldr	r3, [r7, #8]
 810afd2:	689b      	ldr	r3, [r3, #8]
 810afd4:	3b01      	subs	r3, #1
 810afd6:	021b      	lsls	r3, r3, #8
 810afd8:	4319      	orrs	r1, r3
 810afda:	68bb      	ldr	r3, [r7, #8]
 810afdc:	68db      	ldr	r3, [r3, #12]
 810afde:	3b01      	subs	r3, #1
 810afe0:	031b      	lsls	r3, r3, #12
 810afe2:	4319      	orrs	r1, r3
 810afe4:	68bb      	ldr	r3, [r7, #8]
 810afe6:	691b      	ldr	r3, [r3, #16]
 810afe8:	3b01      	subs	r3, #1
 810afea:	041b      	lsls	r3, r3, #16
 810afec:	4319      	orrs	r1, r3
 810afee:	68bb      	ldr	r3, [r7, #8]
 810aff0:	695b      	ldr	r3, [r3, #20]
 810aff2:	3b01      	subs	r3, #1
 810aff4:	051b      	lsls	r3, r3, #20
 810aff6:	4319      	orrs	r1, r3
 810aff8:	68bb      	ldr	r3, [r7, #8]
 810affa:	699b      	ldr	r3, [r3, #24]
 810affc:	3b01      	subs	r3, #1
 810affe:	061b      	lsls	r3, r3, #24
 810b000:	430b      	orrs	r3, r1
 810b002:	431a      	orrs	r2, r3
 810b004:	68fb      	ldr	r3, [r7, #12]
 810b006:	609a      	str	r2, [r3, #8]
 810b008:	e02f      	b.n	810b06a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810b00a:	68fb      	ldr	r3, [r7, #12]
 810b00c:	689b      	ldr	r3, [r3, #8]
 810b00e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810b012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810b016:	68ba      	ldr	r2, [r7, #8]
 810b018:	68d2      	ldr	r2, [r2, #12]
 810b01a:	3a01      	subs	r2, #1
 810b01c:	0311      	lsls	r1, r2, #12
 810b01e:	68ba      	ldr	r2, [r7, #8]
 810b020:	6952      	ldr	r2, [r2, #20]
 810b022:	3a01      	subs	r2, #1
 810b024:	0512      	lsls	r2, r2, #20
 810b026:	430a      	orrs	r2, r1
 810b028:	431a      	orrs	r2, r3
 810b02a:	68fb      	ldr	r3, [r7, #12]
 810b02c:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810b02e:	68fb      	ldr	r3, [r7, #12]
 810b030:	68db      	ldr	r3, [r3, #12]
 810b032:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810b036:	68bb      	ldr	r3, [r7, #8]
 810b038:	681b      	ldr	r3, [r3, #0]
 810b03a:	1e59      	subs	r1, r3, #1
 810b03c:	68bb      	ldr	r3, [r7, #8]
 810b03e:	685b      	ldr	r3, [r3, #4]
 810b040:	3b01      	subs	r3, #1
 810b042:	011b      	lsls	r3, r3, #4
 810b044:	4319      	orrs	r1, r3
 810b046:	68bb      	ldr	r3, [r7, #8]
 810b048:	689b      	ldr	r3, [r3, #8]
 810b04a:	3b01      	subs	r3, #1
 810b04c:	021b      	lsls	r3, r3, #8
 810b04e:	4319      	orrs	r1, r3
 810b050:	68bb      	ldr	r3, [r7, #8]
 810b052:	691b      	ldr	r3, [r3, #16]
 810b054:	3b01      	subs	r3, #1
 810b056:	041b      	lsls	r3, r3, #16
 810b058:	4319      	orrs	r1, r3
 810b05a:	68bb      	ldr	r3, [r7, #8]
 810b05c:	699b      	ldr	r3, [r3, #24]
 810b05e:	3b01      	subs	r3, #1
 810b060:	061b      	lsls	r3, r3, #24
 810b062:	430b      	orrs	r3, r1
 810b064:	431a      	orrs	r2, r3
 810b066:	68fb      	ldr	r3, [r7, #12]
 810b068:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810b06a:	2300      	movs	r3, #0
}
 810b06c:	4618      	mov	r0, r3
 810b06e:	3714      	adds	r7, #20
 810b070:	46bd      	mov	sp, r7
 810b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b076:	4770      	bx	lr

0810b078 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810b078:	b084      	sub	sp, #16
 810b07a:	b480      	push	{r7}
 810b07c:	b085      	sub	sp, #20
 810b07e:	af00      	add	r7, sp, #0
 810b080:	6078      	str	r0, [r7, #4]
 810b082:	f107 001c 	add.w	r0, r7, #28
 810b086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810b08a:	2300      	movs	r3, #0
 810b08c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 810b08e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 810b090:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 810b092:	431a      	orrs	r2, r3
             Init.BusWide             |\
 810b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 810b096:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 810b098:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 810b09a:	431a      	orrs	r2, r3
             Init.ClockDiv
 810b09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 810b09e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 810b0a0:	68fa      	ldr	r2, [r7, #12]
 810b0a2:	4313      	orrs	r3, r2
 810b0a4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810b0a6:	687b      	ldr	r3, [r7, #4]
 810b0a8:	685a      	ldr	r2, [r3, #4]
 810b0aa:	4b07      	ldr	r3, [pc, #28]	; (810b0c8 <SDMMC_Init+0x50>)
 810b0ac:	4013      	ands	r3, r2
 810b0ae:	68fa      	ldr	r2, [r7, #12]
 810b0b0:	431a      	orrs	r2, r3
 810b0b2:	687b      	ldr	r3, [r7, #4]
 810b0b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810b0b6:	2300      	movs	r3, #0
}
 810b0b8:	4618      	mov	r0, r3
 810b0ba:	3714      	adds	r7, #20
 810b0bc:	46bd      	mov	sp, r7
 810b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0c2:	b004      	add	sp, #16
 810b0c4:	4770      	bx	lr
 810b0c6:	bf00      	nop
 810b0c8:	ffc02c00 	.word	0xffc02c00

0810b0cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 810b0cc:	b480      	push	{r7}
 810b0ce:	b083      	sub	sp, #12
 810b0d0:	af00      	add	r7, sp, #0
 810b0d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810b0d4:	687b      	ldr	r3, [r7, #4]
 810b0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 810b0da:	4618      	mov	r0, r3
 810b0dc:	370c      	adds	r7, #12
 810b0de:	46bd      	mov	sp, r7
 810b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0e4:	4770      	bx	lr

0810b0e6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810b0e6:	b480      	push	{r7}
 810b0e8:	b083      	sub	sp, #12
 810b0ea:	af00      	add	r7, sp, #0
 810b0ec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810b0ee:	687b      	ldr	r3, [r7, #4]
 810b0f0:	681b      	ldr	r3, [r3, #0]
 810b0f2:	f043 0203 	orr.w	r2, r3, #3
 810b0f6:	687b      	ldr	r3, [r7, #4]
 810b0f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810b0fa:	2300      	movs	r3, #0
}
 810b0fc:	4618      	mov	r0, r3
 810b0fe:	370c      	adds	r7, #12
 810b100:	46bd      	mov	sp, r7
 810b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b106:	4770      	bx	lr

0810b108 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 810b108:	b480      	push	{r7}
 810b10a:	b083      	sub	sp, #12
 810b10c:	af00      	add	r7, sp, #0
 810b10e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810b110:	687b      	ldr	r3, [r7, #4]
 810b112:	681b      	ldr	r3, [r3, #0]
 810b114:	f003 0303 	and.w	r3, r3, #3
}
 810b118:	4618      	mov	r0, r3
 810b11a:	370c      	adds	r7, #12
 810b11c:	46bd      	mov	sp, r7
 810b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b122:	4770      	bx	lr

0810b124 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 810b124:	b480      	push	{r7}
 810b126:	b085      	sub	sp, #20
 810b128:	af00      	add	r7, sp, #0
 810b12a:	6078      	str	r0, [r7, #4]
 810b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810b12e:	2300      	movs	r3, #0
 810b130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810b132:	683b      	ldr	r3, [r7, #0]
 810b134:	681a      	ldr	r2, [r3, #0]
 810b136:	687b      	ldr	r3, [r7, #4]
 810b138:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 810b13a:	683b      	ldr	r3, [r7, #0]
 810b13c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 810b13e:	683b      	ldr	r3, [r7, #0]
 810b140:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 810b142:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 810b144:	683b      	ldr	r3, [r7, #0]
 810b146:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 810b148:	431a      	orrs	r2, r3
                       Command->CPSM);
 810b14a:	683b      	ldr	r3, [r7, #0]
 810b14c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 810b14e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 810b150:	68fa      	ldr	r2, [r7, #12]
 810b152:	4313      	orrs	r3, r2
 810b154:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810b156:	687b      	ldr	r3, [r7, #4]
 810b158:	68da      	ldr	r2, [r3, #12]
 810b15a:	4b06      	ldr	r3, [pc, #24]	; (810b174 <SDMMC_SendCommand+0x50>)
 810b15c:	4013      	ands	r3, r2
 810b15e:	68fa      	ldr	r2, [r7, #12]
 810b160:	431a      	orrs	r2, r3
 810b162:	687b      	ldr	r3, [r7, #4]
 810b164:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810b166:	2300      	movs	r3, #0
}
 810b168:	4618      	mov	r0, r3
 810b16a:	3714      	adds	r7, #20
 810b16c:	46bd      	mov	sp, r7
 810b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b172:	4770      	bx	lr
 810b174:	fffee0c0 	.word	0xfffee0c0

0810b178 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 810b178:	b480      	push	{r7}
 810b17a:	b083      	sub	sp, #12
 810b17c:	af00      	add	r7, sp, #0
 810b17e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810b180:	687b      	ldr	r3, [r7, #4]
 810b182:	691b      	ldr	r3, [r3, #16]
 810b184:	b2db      	uxtb	r3, r3
}
 810b186:	4618      	mov	r0, r3
 810b188:	370c      	adds	r7, #12
 810b18a:	46bd      	mov	sp, r7
 810b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b190:	4770      	bx	lr

0810b192 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810b192:	b480      	push	{r7}
 810b194:	b085      	sub	sp, #20
 810b196:	af00      	add	r7, sp, #0
 810b198:	6078      	str	r0, [r7, #4]
 810b19a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810b19c:	687b      	ldr	r3, [r7, #4]
 810b19e:	3314      	adds	r3, #20
 810b1a0:	461a      	mov	r2, r3
 810b1a2:	683b      	ldr	r3, [r7, #0]
 810b1a4:	4413      	add	r3, r2
 810b1a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810b1a8:	68fb      	ldr	r3, [r7, #12]
 810b1aa:	681b      	ldr	r3, [r3, #0]
}
 810b1ac:	4618      	mov	r0, r3
 810b1ae:	3714      	adds	r7, #20
 810b1b0:	46bd      	mov	sp, r7
 810b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1b6:	4770      	bx	lr

0810b1b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 810b1b8:	b480      	push	{r7}
 810b1ba:	b085      	sub	sp, #20
 810b1bc:	af00      	add	r7, sp, #0
 810b1be:	6078      	str	r0, [r7, #4]
 810b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810b1c2:	2300      	movs	r3, #0
 810b1c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810b1c6:	683b      	ldr	r3, [r7, #0]
 810b1c8:	681a      	ldr	r2, [r3, #0]
 810b1ca:	687b      	ldr	r3, [r7, #4]
 810b1cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810b1ce:	683b      	ldr	r3, [r7, #0]
 810b1d0:	685a      	ldr	r2, [r3, #4]
 810b1d2:	687b      	ldr	r3, [r7, #4]
 810b1d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 810b1d6:	683b      	ldr	r3, [r7, #0]
 810b1d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 810b1da:	683b      	ldr	r3, [r7, #0]
 810b1dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 810b1de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 810b1e0:	683b      	ldr	r3, [r7, #0]
 810b1e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 810b1e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 810b1e6:	683b      	ldr	r3, [r7, #0]
 810b1e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 810b1ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 810b1ec:	68fa      	ldr	r2, [r7, #12]
 810b1ee:	4313      	orrs	r3, r2
 810b1f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810b1f2:	687b      	ldr	r3, [r7, #4]
 810b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b1f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810b1fa:	68fb      	ldr	r3, [r7, #12]
 810b1fc:	431a      	orrs	r2, r3
 810b1fe:	687b      	ldr	r3, [r7, #4]
 810b200:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810b202:	2300      	movs	r3, #0

}
 810b204:	4618      	mov	r0, r3
 810b206:	3714      	adds	r7, #20
 810b208:	46bd      	mov	sp, r7
 810b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b20e:	4770      	bx	lr

0810b210 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810b210:	b580      	push	{r7, lr}
 810b212:	b088      	sub	sp, #32
 810b214:	af00      	add	r7, sp, #0
 810b216:	6078      	str	r0, [r7, #4]
 810b218:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810b21a:	683b      	ldr	r3, [r7, #0]
 810b21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810b21e:	2310      	movs	r3, #16
 810b220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b222:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b228:	2300      	movs	r3, #0
 810b22a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b22c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b230:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b232:	f107 0308 	add.w	r3, r7, #8
 810b236:	4619      	mov	r1, r3
 810b238:	6878      	ldr	r0, [r7, #4]
 810b23a:	f7ff ff73 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810b23e:	f241 3288 	movw	r2, #5000	; 0x1388
 810b242:	2110      	movs	r1, #16
 810b244:	6878      	ldr	r0, [r7, #4]
 810b246:	f000 f9e3 	bl	810b610 <SDMMC_GetCmdResp1>
 810b24a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b24c:	69fb      	ldr	r3, [r7, #28]
}
 810b24e:	4618      	mov	r0, r3
 810b250:	3720      	adds	r7, #32
 810b252:	46bd      	mov	sp, r7
 810b254:	bd80      	pop	{r7, pc}

0810b256 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 810b256:	b580      	push	{r7, lr}
 810b258:	b08a      	sub	sp, #40	; 0x28
 810b25a:	af00      	add	r7, sp, #0
 810b25c:	60f8      	str	r0, [r7, #12]
 810b25e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810b262:	683b      	ldr	r3, [r7, #0]
 810b264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810b266:	2307      	movs	r3, #7
 810b268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b26a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b26e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b270:	2300      	movs	r3, #0
 810b272:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b278:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b27a:	f107 0310 	add.w	r3, r7, #16
 810b27e:	4619      	mov	r1, r3
 810b280:	68f8      	ldr	r0, [r7, #12]
 810b282:	f7ff ff4f 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810b286:	f241 3288 	movw	r2, #5000	; 0x1388
 810b28a:	2107      	movs	r1, #7
 810b28c:	68f8      	ldr	r0, [r7, #12]
 810b28e:	f000 f9bf 	bl	810b610 <SDMMC_GetCmdResp1>
 810b292:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 810b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810b296:	4618      	mov	r0, r3
 810b298:	3728      	adds	r7, #40	; 0x28
 810b29a:	46bd      	mov	sp, r7
 810b29c:	bd80      	pop	{r7, pc}

0810b29e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810b29e:	b580      	push	{r7, lr}
 810b2a0:	b088      	sub	sp, #32
 810b2a2:	af00      	add	r7, sp, #0
 810b2a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810b2a6:	2300      	movs	r3, #0
 810b2a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810b2aa:	2300      	movs	r3, #0
 810b2ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810b2ae:	2300      	movs	r3, #0
 810b2b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b2b2:	2300      	movs	r3, #0
 810b2b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b2b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b2ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b2bc:	f107 0308 	add.w	r3, r7, #8
 810b2c0:	4619      	mov	r1, r3
 810b2c2:	6878      	ldr	r0, [r7, #4]
 810b2c4:	f7ff ff2e 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810b2c8:	6878      	ldr	r0, [r7, #4]
 810b2ca:	f000 f977 	bl	810b5bc <SDMMC_GetCmdError>
 810b2ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b2d0:	69fb      	ldr	r3, [r7, #28]
}
 810b2d2:	4618      	mov	r0, r3
 810b2d4:	3720      	adds	r7, #32
 810b2d6:	46bd      	mov	sp, r7
 810b2d8:	bd80      	pop	{r7, pc}

0810b2da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810b2da:	b580      	push	{r7, lr}
 810b2dc:	b088      	sub	sp, #32
 810b2de:	af00      	add	r7, sp, #0
 810b2e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810b2e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 810b2e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810b2e8:	2308      	movs	r3, #8
 810b2ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b2ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b2f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b2f2:	2300      	movs	r3, #0
 810b2f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b2f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b2fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b2fc:	f107 0308 	add.w	r3, r7, #8
 810b300:	4619      	mov	r1, r3
 810b302:	6878      	ldr	r0, [r7, #4]
 810b304:	f7ff ff0e 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810b308:	6878      	ldr	r0, [r7, #4]
 810b30a:	f000 fb6b 	bl	810b9e4 <SDMMC_GetCmdResp7>
 810b30e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b310:	69fb      	ldr	r3, [r7, #28]
}
 810b312:	4618      	mov	r0, r3
 810b314:	3720      	adds	r7, #32
 810b316:	46bd      	mov	sp, r7
 810b318:	bd80      	pop	{r7, pc}

0810b31a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810b31a:	b580      	push	{r7, lr}
 810b31c:	b088      	sub	sp, #32
 810b31e:	af00      	add	r7, sp, #0
 810b320:	6078      	str	r0, [r7, #4]
 810b322:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810b324:	683b      	ldr	r3, [r7, #0]
 810b326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810b328:	2337      	movs	r3, #55	; 0x37
 810b32a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b32c:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b332:	2300      	movs	r3, #0
 810b334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b33a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b33c:	f107 0308 	add.w	r3, r7, #8
 810b340:	4619      	mov	r1, r3
 810b342:	6878      	ldr	r0, [r7, #4]
 810b344:	f7ff feee 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810b348:	f241 3288 	movw	r2, #5000	; 0x1388
 810b34c:	2137      	movs	r1, #55	; 0x37
 810b34e:	6878      	ldr	r0, [r7, #4]
 810b350:	f000 f95e 	bl	810b610 <SDMMC_GetCmdResp1>
 810b354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b356:	69fb      	ldr	r3, [r7, #28]
}
 810b358:	4618      	mov	r0, r3
 810b35a:	3720      	adds	r7, #32
 810b35c:	46bd      	mov	sp, r7
 810b35e:	bd80      	pop	{r7, pc}

0810b360 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810b360:	b580      	push	{r7, lr}
 810b362:	b088      	sub	sp, #32
 810b364:	af00      	add	r7, sp, #0
 810b366:	6078      	str	r0, [r7, #4]
 810b368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810b36a:	683b      	ldr	r3, [r7, #0]
 810b36c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810b36e:	2329      	movs	r3, #41	; 0x29
 810b370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b372:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b378:	2300      	movs	r3, #0
 810b37a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b37c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b382:	f107 0308 	add.w	r3, r7, #8
 810b386:	4619      	mov	r1, r3
 810b388:	6878      	ldr	r0, [r7, #4]
 810b38a:	f7ff fecb 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810b38e:	6878      	ldr	r0, [r7, #4]
 810b390:	f000 fa76 	bl	810b880 <SDMMC_GetCmdResp3>
 810b394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b396:	69fb      	ldr	r3, [r7, #28]
}
 810b398:	4618      	mov	r0, r3
 810b39a:	3720      	adds	r7, #32
 810b39c:	46bd      	mov	sp, r7
 810b39e:	bd80      	pop	{r7, pc}

0810b3a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810b3a0:	b580      	push	{r7, lr}
 810b3a2:	b088      	sub	sp, #32
 810b3a4:	af00      	add	r7, sp, #0
 810b3a6:	6078      	str	r0, [r7, #4]
 810b3a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810b3aa:	683b      	ldr	r3, [r7, #0]
 810b3ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810b3ae:	2306      	movs	r3, #6
 810b3b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b3b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b3b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b3b8:	2300      	movs	r3, #0
 810b3ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b3bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b3c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b3c2:	f107 0308 	add.w	r3, r7, #8
 810b3c6:	4619      	mov	r1, r3
 810b3c8:	6878      	ldr	r0, [r7, #4]
 810b3ca:	f7ff feab 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810b3ce:	f241 3288 	movw	r2, #5000	; 0x1388
 810b3d2:	2106      	movs	r1, #6
 810b3d4:	6878      	ldr	r0, [r7, #4]
 810b3d6:	f000 f91b 	bl	810b610 <SDMMC_GetCmdResp1>
 810b3da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b3dc:	69fb      	ldr	r3, [r7, #28]
}
 810b3de:	4618      	mov	r0, r3
 810b3e0:	3720      	adds	r7, #32
 810b3e2:	46bd      	mov	sp, r7
 810b3e4:	bd80      	pop	{r7, pc}

0810b3e6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810b3e6:	b580      	push	{r7, lr}
 810b3e8:	b088      	sub	sp, #32
 810b3ea:	af00      	add	r7, sp, #0
 810b3ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810b3ee:	2300      	movs	r3, #0
 810b3f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810b3f2:	2333      	movs	r3, #51	; 0x33
 810b3f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b3f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b3fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b3fc:	2300      	movs	r3, #0
 810b3fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b406:	f107 0308 	add.w	r3, r7, #8
 810b40a:	4619      	mov	r1, r3
 810b40c:	6878      	ldr	r0, [r7, #4]
 810b40e:	f7ff fe89 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810b412:	f241 3288 	movw	r2, #5000	; 0x1388
 810b416:	2133      	movs	r1, #51	; 0x33
 810b418:	6878      	ldr	r0, [r7, #4]
 810b41a:	f000 f8f9 	bl	810b610 <SDMMC_GetCmdResp1>
 810b41e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b420:	69fb      	ldr	r3, [r7, #28]
}
 810b422:	4618      	mov	r0, r3
 810b424:	3720      	adds	r7, #32
 810b426:	46bd      	mov	sp, r7
 810b428:	bd80      	pop	{r7, pc}

0810b42a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810b42a:	b580      	push	{r7, lr}
 810b42c:	b088      	sub	sp, #32
 810b42e:	af00      	add	r7, sp, #0
 810b430:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810b432:	2300      	movs	r3, #0
 810b434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810b436:	2302      	movs	r3, #2
 810b438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810b43a:	f44f 7340 	mov.w	r3, #768	; 0x300
 810b43e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b440:	2300      	movs	r3, #0
 810b442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b44a:	f107 0308 	add.w	r3, r7, #8
 810b44e:	4619      	mov	r1, r3
 810b450:	6878      	ldr	r0, [r7, #4]
 810b452:	f7ff fe67 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810b456:	6878      	ldr	r0, [r7, #4]
 810b458:	f000 f9ca 	bl	810b7f0 <SDMMC_GetCmdResp2>
 810b45c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b45e:	69fb      	ldr	r3, [r7, #28]
}
 810b460:	4618      	mov	r0, r3
 810b462:	3720      	adds	r7, #32
 810b464:	46bd      	mov	sp, r7
 810b466:	bd80      	pop	{r7, pc}

0810b468 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810b468:	b580      	push	{r7, lr}
 810b46a:	b088      	sub	sp, #32
 810b46c:	af00      	add	r7, sp, #0
 810b46e:	6078      	str	r0, [r7, #4]
 810b470:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810b472:	683b      	ldr	r3, [r7, #0]
 810b474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810b476:	2309      	movs	r3, #9
 810b478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810b47a:	f44f 7340 	mov.w	r3, #768	; 0x300
 810b47e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b480:	2300      	movs	r3, #0
 810b482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b488:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b48a:	f107 0308 	add.w	r3, r7, #8
 810b48e:	4619      	mov	r1, r3
 810b490:	6878      	ldr	r0, [r7, #4]
 810b492:	f7ff fe47 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810b496:	6878      	ldr	r0, [r7, #4]
 810b498:	f000 f9aa 	bl	810b7f0 <SDMMC_GetCmdResp2>
 810b49c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b49e:	69fb      	ldr	r3, [r7, #28]
}
 810b4a0:	4618      	mov	r0, r3
 810b4a2:	3720      	adds	r7, #32
 810b4a4:	46bd      	mov	sp, r7
 810b4a6:	bd80      	pop	{r7, pc}

0810b4a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810b4a8:	b580      	push	{r7, lr}
 810b4aa:	b088      	sub	sp, #32
 810b4ac:	af00      	add	r7, sp, #0
 810b4ae:	6078      	str	r0, [r7, #4]
 810b4b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810b4b2:	2300      	movs	r3, #0
 810b4b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810b4b6:	2303      	movs	r3, #3
 810b4b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b4ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b4be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b4c0:	2300      	movs	r3, #0
 810b4c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b4c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b4c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b4ca:	f107 0308 	add.w	r3, r7, #8
 810b4ce:	4619      	mov	r1, r3
 810b4d0:	6878      	ldr	r0, [r7, #4]
 810b4d2:	f7ff fe27 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810b4d6:	683a      	ldr	r2, [r7, #0]
 810b4d8:	2103      	movs	r1, #3
 810b4da:	6878      	ldr	r0, [r7, #4]
 810b4dc:	f000 fa0c 	bl	810b8f8 <SDMMC_GetCmdResp6>
 810b4e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b4e2:	69fb      	ldr	r3, [r7, #28]
}
 810b4e4:	4618      	mov	r0, r3
 810b4e6:	3720      	adds	r7, #32
 810b4e8:	46bd      	mov	sp, r7
 810b4ea:	bd80      	pop	{r7, pc}

0810b4ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810b4ec:	b580      	push	{r7, lr}
 810b4ee:	b088      	sub	sp, #32
 810b4f0:	af00      	add	r7, sp, #0
 810b4f2:	6078      	str	r0, [r7, #4]
 810b4f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810b4f6:	683b      	ldr	r3, [r7, #0]
 810b4f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810b4fa:	230d      	movs	r3, #13
 810b4fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b4fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b504:	2300      	movs	r3, #0
 810b506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b50c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b50e:	f107 0308 	add.w	r3, r7, #8
 810b512:	4619      	mov	r1, r3
 810b514:	6878      	ldr	r0, [r7, #4]
 810b516:	f7ff fe05 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810b51a:	f241 3288 	movw	r2, #5000	; 0x1388
 810b51e:	210d      	movs	r1, #13
 810b520:	6878      	ldr	r0, [r7, #4]
 810b522:	f000 f875 	bl	810b610 <SDMMC_GetCmdResp1>
 810b526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b528:	69fb      	ldr	r3, [r7, #28]
}
 810b52a:	4618      	mov	r0, r3
 810b52c:	3720      	adds	r7, #32
 810b52e:	46bd      	mov	sp, r7
 810b530:	bd80      	pop	{r7, pc}

0810b532 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810b532:	b580      	push	{r7, lr}
 810b534:	b088      	sub	sp, #32
 810b536:	af00      	add	r7, sp, #0
 810b538:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810b53a:	2300      	movs	r3, #0
 810b53c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810b53e:	230d      	movs	r3, #13
 810b540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b542:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b548:	2300      	movs	r3, #0
 810b54a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b54c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b550:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b552:	f107 0308 	add.w	r3, r7, #8
 810b556:	4619      	mov	r1, r3
 810b558:	6878      	ldr	r0, [r7, #4]
 810b55a:	f7ff fde3 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810b55e:	f241 3288 	movw	r2, #5000	; 0x1388
 810b562:	210d      	movs	r1, #13
 810b564:	6878      	ldr	r0, [r7, #4]
 810b566:	f000 f853 	bl	810b610 <SDMMC_GetCmdResp1>
 810b56a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b56c:	69fb      	ldr	r3, [r7, #28]
}
 810b56e:	4618      	mov	r0, r3
 810b570:	3720      	adds	r7, #32
 810b572:	46bd      	mov	sp, r7
 810b574:	bd80      	pop	{r7, pc}

0810b576 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 810b576:	b580      	push	{r7, lr}
 810b578:	b088      	sub	sp, #32
 810b57a:	af00      	add	r7, sp, #0
 810b57c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 810b57e:	2300      	movs	r3, #0
 810b580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 810b582:	230b      	movs	r3, #11
 810b584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b586:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b58a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b58c:	2300      	movs	r3, #0
 810b58e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b594:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b596:	f107 0308 	add.w	r3, r7, #8
 810b59a:	4619      	mov	r1, r3
 810b59c:	6878      	ldr	r0, [r7, #4]
 810b59e:	f7ff fdc1 	bl	810b124 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 810b5a2:	f241 3288 	movw	r2, #5000	; 0x1388
 810b5a6:	210b      	movs	r1, #11
 810b5a8:	6878      	ldr	r0, [r7, #4]
 810b5aa:	f000 f831 	bl	810b610 <SDMMC_GetCmdResp1>
 810b5ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b5b0:	69fb      	ldr	r3, [r7, #28]
}
 810b5b2:	4618      	mov	r0, r3
 810b5b4:	3720      	adds	r7, #32
 810b5b6:	46bd      	mov	sp, r7
 810b5b8:	bd80      	pop	{r7, pc}
	...

0810b5bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810b5bc:	b490      	push	{r4, r7}
 810b5be:	b082      	sub	sp, #8
 810b5c0:	af00      	add	r7, sp, #0
 810b5c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810b5c4:	4b0f      	ldr	r3, [pc, #60]	; (810b604 <SDMMC_GetCmdError+0x48>)
 810b5c6:	681b      	ldr	r3, [r3, #0]
 810b5c8:	4a0f      	ldr	r2, [pc, #60]	; (810b608 <SDMMC_GetCmdError+0x4c>)
 810b5ca:	fba2 2303 	umull	r2, r3, r2, r3
 810b5ce:	0a5b      	lsrs	r3, r3, #9
 810b5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 810b5d4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 810b5d8:	4623      	mov	r3, r4
 810b5da:	1e5c      	subs	r4, r3, #1
 810b5dc:	2b00      	cmp	r3, #0
 810b5de:	d102      	bne.n	810b5e6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 810b5e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810b5e4:	e009      	b.n	810b5fa <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810b5e6:	687b      	ldr	r3, [r7, #4]
 810b5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b5ee:	2b00      	cmp	r3, #0
 810b5f0:	d0f2      	beq.n	810b5d8 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810b5f2:	687b      	ldr	r3, [r7, #4]
 810b5f4:	4a05      	ldr	r2, [pc, #20]	; (810b60c <SDMMC_GetCmdError+0x50>)
 810b5f6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 810b5f8:	2300      	movs	r3, #0
}
 810b5fa:	4618      	mov	r0, r3
 810b5fc:	3708      	adds	r7, #8
 810b5fe:	46bd      	mov	sp, r7
 810b600:	bc90      	pop	{r4, r7}
 810b602:	4770      	bx	lr
 810b604:	10000000 	.word	0x10000000
 810b608:	10624dd3 	.word	0x10624dd3
 810b60c:	002000c5 	.word	0x002000c5

0810b610 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810b610:	b590      	push	{r4, r7, lr}
 810b612:	b087      	sub	sp, #28
 810b614:	af00      	add	r7, sp, #0
 810b616:	60f8      	str	r0, [r7, #12]
 810b618:	460b      	mov	r3, r1
 810b61a:	607a      	str	r2, [r7, #4]
 810b61c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 810b61e:	4b6f      	ldr	r3, [pc, #444]	; (810b7dc <SDMMC_GetCmdResp1+0x1cc>)
 810b620:	681b      	ldr	r3, [r3, #0]
 810b622:	4a6f      	ldr	r2, [pc, #444]	; (810b7e0 <SDMMC_GetCmdResp1+0x1d0>)
 810b624:	fba2 2303 	umull	r2, r3, r2, r3
 810b628:	0a5b      	lsrs	r3, r3, #9
 810b62a:	687a      	ldr	r2, [r7, #4]
 810b62c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 810b630:	4623      	mov	r3, r4
 810b632:	1e5c      	subs	r4, r3, #1
 810b634:	2b00      	cmp	r3, #0
 810b636:	d102      	bne.n	810b63e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810b638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810b63c:	e0c9      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 810b63e:	68fb      	ldr	r3, [r7, #12]
 810b640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b642:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 810b644:	697a      	ldr	r2, [r7, #20]
 810b646:	4b67      	ldr	r3, [pc, #412]	; (810b7e4 <SDMMC_GetCmdResp1+0x1d4>)
 810b648:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810b64a:	2b00      	cmp	r3, #0
 810b64c:	d0f0      	beq.n	810b630 <SDMMC_GetCmdResp1+0x20>
 810b64e:	697b      	ldr	r3, [r7, #20]
 810b650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 810b654:	2b00      	cmp	r3, #0
 810b656:	d1eb      	bne.n	810b630 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810b658:	68fb      	ldr	r3, [r7, #12]
 810b65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b65c:	f003 0304 	and.w	r3, r3, #4
 810b660:	2b00      	cmp	r3, #0
 810b662:	d004      	beq.n	810b66e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810b664:	68fb      	ldr	r3, [r7, #12]
 810b666:	2204      	movs	r2, #4
 810b668:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810b66a:	2304      	movs	r3, #4
 810b66c:	e0b1      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810b66e:	68fb      	ldr	r3, [r7, #12]
 810b670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b672:	f003 0301 	and.w	r3, r3, #1
 810b676:	2b00      	cmp	r3, #0
 810b678:	d004      	beq.n	810b684 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810b67a:	68fb      	ldr	r3, [r7, #12]
 810b67c:	2201      	movs	r2, #1
 810b67e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810b680:	2301      	movs	r3, #1
 810b682:	e0a6      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810b684:	68fb      	ldr	r3, [r7, #12]
 810b686:	4a58      	ldr	r2, [pc, #352]	; (810b7e8 <SDMMC_GetCmdResp1+0x1d8>)
 810b688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810b68a:	68f8      	ldr	r0, [r7, #12]
 810b68c:	f7ff fd74 	bl	810b178 <SDMMC_GetCommandResponse>
 810b690:	4603      	mov	r3, r0
 810b692:	461a      	mov	r2, r3
 810b694:	7afb      	ldrb	r3, [r7, #11]
 810b696:	4293      	cmp	r3, r2
 810b698:	d001      	beq.n	810b69e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810b69a:	2301      	movs	r3, #1
 810b69c:	e099      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810b69e:	2100      	movs	r1, #0
 810b6a0:	68f8      	ldr	r0, [r7, #12]
 810b6a2:	f7ff fd76 	bl	810b192 <SDMMC_GetResponse>
 810b6a6:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810b6a8:	693a      	ldr	r2, [r7, #16]
 810b6aa:	4b50      	ldr	r3, [pc, #320]	; (810b7ec <SDMMC_GetCmdResp1+0x1dc>)
 810b6ac:	4013      	ands	r3, r2
 810b6ae:	2b00      	cmp	r3, #0
 810b6b0:	d101      	bne.n	810b6b6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 810b6b2:	2300      	movs	r3, #0
 810b6b4:	e08d      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810b6b6:	693b      	ldr	r3, [r7, #16]
 810b6b8:	2b00      	cmp	r3, #0
 810b6ba:	da02      	bge.n	810b6c2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810b6bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810b6c0:	e087      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810b6c2:	693b      	ldr	r3, [r7, #16]
 810b6c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810b6c8:	2b00      	cmp	r3, #0
 810b6ca:	d001      	beq.n	810b6d0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810b6cc:	2340      	movs	r3, #64	; 0x40
 810b6ce:	e080      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810b6d0:	693b      	ldr	r3, [r7, #16]
 810b6d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b6d6:	2b00      	cmp	r3, #0
 810b6d8:	d001      	beq.n	810b6de <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810b6da:	2380      	movs	r3, #128	; 0x80
 810b6dc:	e079      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810b6de:	693b      	ldr	r3, [r7, #16]
 810b6e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810b6e4:	2b00      	cmp	r3, #0
 810b6e6:	d002      	beq.n	810b6ee <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810b6e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b6ec:	e071      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810b6ee:	693b      	ldr	r3, [r7, #16]
 810b6f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b6f4:	2b00      	cmp	r3, #0
 810b6f6:	d002      	beq.n	810b6fe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810b6f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 810b6fc:	e069      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810b6fe:	693b      	ldr	r3, [r7, #16]
 810b700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810b704:	2b00      	cmp	r3, #0
 810b706:	d002      	beq.n	810b70e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810b708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810b70c:	e061      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810b70e:	693b      	ldr	r3, [r7, #16]
 810b710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810b714:	2b00      	cmp	r3, #0
 810b716:	d002      	beq.n	810b71e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810b718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810b71c:	e059      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810b71e:	693b      	ldr	r3, [r7, #16]
 810b720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b724:	2b00      	cmp	r3, #0
 810b726:	d002      	beq.n	810b72e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810b728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b72c:	e051      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810b72e:	693b      	ldr	r3, [r7, #16]
 810b730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810b734:	2b00      	cmp	r3, #0
 810b736:	d002      	beq.n	810b73e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810b738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810b73c:	e049      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810b73e:	693b      	ldr	r3, [r7, #16]
 810b740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810b744:	2b00      	cmp	r3, #0
 810b746:	d002      	beq.n	810b74e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810b748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810b74c:	e041      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810b74e:	693b      	ldr	r3, [r7, #16]
 810b750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810b754:	2b00      	cmp	r3, #0
 810b756:	d002      	beq.n	810b75e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 810b758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b75c:	e039      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810b75e:	693b      	ldr	r3, [r7, #16]
 810b760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810b764:	2b00      	cmp	r3, #0
 810b766:	d002      	beq.n	810b76e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810b768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810b76c:	e031      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810b76e:	693b      	ldr	r3, [r7, #16]
 810b770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b774:	2b00      	cmp	r3, #0
 810b776:	d002      	beq.n	810b77e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810b778:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810b77c:	e029      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810b77e:	693b      	ldr	r3, [r7, #16]
 810b780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810b784:	2b00      	cmp	r3, #0
 810b786:	d002      	beq.n	810b78e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810b788:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810b78c:	e021      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810b78e:	693b      	ldr	r3, [r7, #16]
 810b790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b794:	2b00      	cmp	r3, #0
 810b796:	d002      	beq.n	810b79e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810b798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 810b79c:	e019      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810b79e:	693b      	ldr	r3, [r7, #16]
 810b7a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810b7a4:	2b00      	cmp	r3, #0
 810b7a6:	d002      	beq.n	810b7ae <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810b7a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810b7ac:	e011      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810b7ae:	693b      	ldr	r3, [r7, #16]
 810b7b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810b7b4:	2b00      	cmp	r3, #0
 810b7b6:	d002      	beq.n	810b7be <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810b7b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810b7bc:	e009      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810b7be:	693b      	ldr	r3, [r7, #16]
 810b7c0:	f003 0308 	and.w	r3, r3, #8
 810b7c4:	2b00      	cmp	r3, #0
 810b7c6:	d002      	beq.n	810b7ce <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810b7c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 810b7cc:	e001      	b.n	810b7d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810b7ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810b7d2:	4618      	mov	r0, r3
 810b7d4:	371c      	adds	r7, #28
 810b7d6:	46bd      	mov	sp, r7
 810b7d8:	bd90      	pop	{r4, r7, pc}
 810b7da:	bf00      	nop
 810b7dc:	10000000 	.word	0x10000000
 810b7e0:	10624dd3 	.word	0x10624dd3
 810b7e4:	00200045 	.word	0x00200045
 810b7e8:	002000c5 	.word	0x002000c5
 810b7ec:	fdffe008 	.word	0xfdffe008

0810b7f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810b7f0:	b490      	push	{r4, r7}
 810b7f2:	b084      	sub	sp, #16
 810b7f4:	af00      	add	r7, sp, #0
 810b7f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810b7f8:	4b1e      	ldr	r3, [pc, #120]	; (810b874 <SDMMC_GetCmdResp2+0x84>)
 810b7fa:	681b      	ldr	r3, [r3, #0]
 810b7fc:	4a1e      	ldr	r2, [pc, #120]	; (810b878 <SDMMC_GetCmdResp2+0x88>)
 810b7fe:	fba2 2303 	umull	r2, r3, r2, r3
 810b802:	0a5b      	lsrs	r3, r3, #9
 810b804:	f241 3288 	movw	r2, #5000	; 0x1388
 810b808:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 810b80c:	4623      	mov	r3, r4
 810b80e:	1e5c      	subs	r4, r3, #1
 810b810:	2b00      	cmp	r3, #0
 810b812:	d102      	bne.n	810b81a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 810b814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810b818:	e026      	b.n	810b868 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 810b81a:	687b      	ldr	r3, [r7, #4]
 810b81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b81e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810b820:	68fb      	ldr	r3, [r7, #12]
 810b822:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810b826:	2b00      	cmp	r3, #0
 810b828:	d0f0      	beq.n	810b80c <SDMMC_GetCmdResp2+0x1c>
 810b82a:	68fb      	ldr	r3, [r7, #12]
 810b82c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810b830:	2b00      	cmp	r3, #0
 810b832:	d1eb      	bne.n	810b80c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810b834:	687b      	ldr	r3, [r7, #4]
 810b836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b838:	f003 0304 	and.w	r3, r3, #4
 810b83c:	2b00      	cmp	r3, #0
 810b83e:	d004      	beq.n	810b84a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810b840:	687b      	ldr	r3, [r7, #4]
 810b842:	2204      	movs	r2, #4
 810b844:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810b846:	2304      	movs	r3, #4
 810b848:	e00e      	b.n	810b868 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810b84a:	687b      	ldr	r3, [r7, #4]
 810b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b84e:	f003 0301 	and.w	r3, r3, #1
 810b852:	2b00      	cmp	r3, #0
 810b854:	d004      	beq.n	810b860 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810b856:	687b      	ldr	r3, [r7, #4]
 810b858:	2201      	movs	r2, #1
 810b85a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810b85c:	2301      	movs	r3, #1
 810b85e:	e003      	b.n	810b868 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810b860:	687b      	ldr	r3, [r7, #4]
 810b862:	4a06      	ldr	r2, [pc, #24]	; (810b87c <SDMMC_GetCmdResp2+0x8c>)
 810b864:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810b866:	2300      	movs	r3, #0
}
 810b868:	4618      	mov	r0, r3
 810b86a:	3710      	adds	r7, #16
 810b86c:	46bd      	mov	sp, r7
 810b86e:	bc90      	pop	{r4, r7}
 810b870:	4770      	bx	lr
 810b872:	bf00      	nop
 810b874:	10000000 	.word	0x10000000
 810b878:	10624dd3 	.word	0x10624dd3
 810b87c:	002000c5 	.word	0x002000c5

0810b880 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810b880:	b490      	push	{r4, r7}
 810b882:	b084      	sub	sp, #16
 810b884:	af00      	add	r7, sp, #0
 810b886:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810b888:	4b18      	ldr	r3, [pc, #96]	; (810b8ec <SDMMC_GetCmdResp3+0x6c>)
 810b88a:	681b      	ldr	r3, [r3, #0]
 810b88c:	4a18      	ldr	r2, [pc, #96]	; (810b8f0 <SDMMC_GetCmdResp3+0x70>)
 810b88e:	fba2 2303 	umull	r2, r3, r2, r3
 810b892:	0a5b      	lsrs	r3, r3, #9
 810b894:	f241 3288 	movw	r2, #5000	; 0x1388
 810b898:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 810b89c:	4623      	mov	r3, r4
 810b89e:	1e5c      	subs	r4, r3, #1
 810b8a0:	2b00      	cmp	r3, #0
 810b8a2:	d102      	bne.n	810b8aa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 810b8a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810b8a8:	e01b      	b.n	810b8e2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 810b8aa:	687b      	ldr	r3, [r7, #4]
 810b8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b8ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810b8b0:	68fb      	ldr	r3, [r7, #12]
 810b8b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810b8b6:	2b00      	cmp	r3, #0
 810b8b8:	d0f0      	beq.n	810b89c <SDMMC_GetCmdResp3+0x1c>
 810b8ba:	68fb      	ldr	r3, [r7, #12]
 810b8bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810b8c0:	2b00      	cmp	r3, #0
 810b8c2:	d1eb      	bne.n	810b89c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810b8c4:	687b      	ldr	r3, [r7, #4]
 810b8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b8c8:	f003 0304 	and.w	r3, r3, #4
 810b8cc:	2b00      	cmp	r3, #0
 810b8ce:	d004      	beq.n	810b8da <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810b8d0:	687b      	ldr	r3, [r7, #4]
 810b8d2:	2204      	movs	r2, #4
 810b8d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810b8d6:	2304      	movs	r3, #4
 810b8d8:	e003      	b.n	810b8e2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810b8da:	687b      	ldr	r3, [r7, #4]
 810b8dc:	4a05      	ldr	r2, [pc, #20]	; (810b8f4 <SDMMC_GetCmdResp3+0x74>)
 810b8de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810b8e0:	2300      	movs	r3, #0
}
 810b8e2:	4618      	mov	r0, r3
 810b8e4:	3710      	adds	r7, #16
 810b8e6:	46bd      	mov	sp, r7
 810b8e8:	bc90      	pop	{r4, r7}
 810b8ea:	4770      	bx	lr
 810b8ec:	10000000 	.word	0x10000000
 810b8f0:	10624dd3 	.word	0x10624dd3
 810b8f4:	002000c5 	.word	0x002000c5

0810b8f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810b8f8:	b590      	push	{r4, r7, lr}
 810b8fa:	b087      	sub	sp, #28
 810b8fc:	af00      	add	r7, sp, #0
 810b8fe:	60f8      	str	r0, [r7, #12]
 810b900:	460b      	mov	r3, r1
 810b902:	607a      	str	r2, [r7, #4]
 810b904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810b906:	4b34      	ldr	r3, [pc, #208]	; (810b9d8 <SDMMC_GetCmdResp6+0xe0>)
 810b908:	681b      	ldr	r3, [r3, #0]
 810b90a:	4a34      	ldr	r2, [pc, #208]	; (810b9dc <SDMMC_GetCmdResp6+0xe4>)
 810b90c:	fba2 2303 	umull	r2, r3, r2, r3
 810b910:	0a5b      	lsrs	r3, r3, #9
 810b912:	f241 3288 	movw	r2, #5000	; 0x1388
 810b916:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 810b91a:	4623      	mov	r3, r4
 810b91c:	1e5c      	subs	r4, r3, #1
 810b91e:	2b00      	cmp	r3, #0
 810b920:	d102      	bne.n	810b928 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 810b922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810b926:	e052      	b.n	810b9ce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 810b928:	68fb      	ldr	r3, [r7, #12]
 810b92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b92c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810b92e:	697b      	ldr	r3, [r7, #20]
 810b930:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810b934:	2b00      	cmp	r3, #0
 810b936:	d0f0      	beq.n	810b91a <SDMMC_GetCmdResp6+0x22>
 810b938:	697b      	ldr	r3, [r7, #20]
 810b93a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810b93e:	2b00      	cmp	r3, #0
 810b940:	d1eb      	bne.n	810b91a <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810b942:	68fb      	ldr	r3, [r7, #12]
 810b944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b946:	f003 0304 	and.w	r3, r3, #4
 810b94a:	2b00      	cmp	r3, #0
 810b94c:	d004      	beq.n	810b958 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810b94e:	68fb      	ldr	r3, [r7, #12]
 810b950:	2204      	movs	r2, #4
 810b952:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810b954:	2304      	movs	r3, #4
 810b956:	e03a      	b.n	810b9ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810b958:	68fb      	ldr	r3, [r7, #12]
 810b95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810b95c:	f003 0301 	and.w	r3, r3, #1
 810b960:	2b00      	cmp	r3, #0
 810b962:	d004      	beq.n	810b96e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810b964:	68fb      	ldr	r3, [r7, #12]
 810b966:	2201      	movs	r2, #1
 810b968:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810b96a:	2301      	movs	r3, #1
 810b96c:	e02f      	b.n	810b9ce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810b96e:	68f8      	ldr	r0, [r7, #12]
 810b970:	f7ff fc02 	bl	810b178 <SDMMC_GetCommandResponse>
 810b974:	4603      	mov	r3, r0
 810b976:	461a      	mov	r2, r3
 810b978:	7afb      	ldrb	r3, [r7, #11]
 810b97a:	4293      	cmp	r3, r2
 810b97c:	d001      	beq.n	810b982 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810b97e:	2301      	movs	r3, #1
 810b980:	e025      	b.n	810b9ce <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810b982:	68fb      	ldr	r3, [r7, #12]
 810b984:	4a16      	ldr	r2, [pc, #88]	; (810b9e0 <SDMMC_GetCmdResp6+0xe8>)
 810b986:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810b988:	2100      	movs	r1, #0
 810b98a:	68f8      	ldr	r0, [r7, #12]
 810b98c:	f7ff fc01 	bl	810b192 <SDMMC_GetResponse>
 810b990:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 810b992:	693b      	ldr	r3, [r7, #16]
 810b994:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b998:	2b00      	cmp	r3, #0
 810b99a:	d106      	bne.n	810b9aa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 810b99c:	693b      	ldr	r3, [r7, #16]
 810b99e:	0c1b      	lsrs	r3, r3, #16
 810b9a0:	b29a      	uxth	r2, r3
 810b9a2:	687b      	ldr	r3, [r7, #4]
 810b9a4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810b9a6:	2300      	movs	r3, #0
 810b9a8:	e011      	b.n	810b9ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810b9aa:	693b      	ldr	r3, [r7, #16]
 810b9ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810b9b0:	2b00      	cmp	r3, #0
 810b9b2:	d002      	beq.n	810b9ba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810b9b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810b9b8:	e009      	b.n	810b9ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810b9ba:	693b      	ldr	r3, [r7, #16]
 810b9bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b9c0:	2b00      	cmp	r3, #0
 810b9c2:	d002      	beq.n	810b9ca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810b9c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810b9c8:	e001      	b.n	810b9ce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810b9ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810b9ce:	4618      	mov	r0, r3
 810b9d0:	371c      	adds	r7, #28
 810b9d2:	46bd      	mov	sp, r7
 810b9d4:	bd90      	pop	{r4, r7, pc}
 810b9d6:	bf00      	nop
 810b9d8:	10000000 	.word	0x10000000
 810b9dc:	10624dd3 	.word	0x10624dd3
 810b9e0:	002000c5 	.word	0x002000c5

0810b9e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810b9e4:	b490      	push	{r4, r7}
 810b9e6:	b084      	sub	sp, #16
 810b9e8:	af00      	add	r7, sp, #0
 810b9ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 810b9ec:	4b21      	ldr	r3, [pc, #132]	; (810ba74 <SDMMC_GetCmdResp7+0x90>)
 810b9ee:	681b      	ldr	r3, [r3, #0]
 810b9f0:	4a21      	ldr	r2, [pc, #132]	; (810ba78 <SDMMC_GetCmdResp7+0x94>)
 810b9f2:	fba2 2303 	umull	r2, r3, r2, r3
 810b9f6:	0a5b      	lsrs	r3, r3, #9
 810b9f8:	f241 3288 	movw	r2, #5000	; 0x1388
 810b9fc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 810ba00:	4623      	mov	r3, r4
 810ba02:	1e5c      	subs	r4, r3, #1
 810ba04:	2b00      	cmp	r3, #0
 810ba06:	d102      	bne.n	810ba0e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 810ba08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810ba0c:	e02c      	b.n	810ba68 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 810ba0e:	687b      	ldr	r3, [r7, #4]
 810ba10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ba12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810ba14:	68fb      	ldr	r3, [r7, #12]
 810ba16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 810ba1a:	2b00      	cmp	r3, #0
 810ba1c:	d0f0      	beq.n	810ba00 <SDMMC_GetCmdResp7+0x1c>
 810ba1e:	68fb      	ldr	r3, [r7, #12]
 810ba20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810ba24:	2b00      	cmp	r3, #0
 810ba26:	d1eb      	bne.n	810ba00 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810ba28:	687b      	ldr	r3, [r7, #4]
 810ba2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ba2c:	f003 0304 	and.w	r3, r3, #4
 810ba30:	2b00      	cmp	r3, #0
 810ba32:	d004      	beq.n	810ba3e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810ba34:	687b      	ldr	r3, [r7, #4]
 810ba36:	2204      	movs	r2, #4
 810ba38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810ba3a:	2304      	movs	r3, #4
 810ba3c:	e014      	b.n	810ba68 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810ba3e:	687b      	ldr	r3, [r7, #4]
 810ba40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ba42:	f003 0301 	and.w	r3, r3, #1
 810ba46:	2b00      	cmp	r3, #0
 810ba48:	d004      	beq.n	810ba54 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810ba4a:	687b      	ldr	r3, [r7, #4]
 810ba4c:	2201      	movs	r2, #1
 810ba4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810ba50:	2301      	movs	r3, #1
 810ba52:	e009      	b.n	810ba68 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810ba54:	687b      	ldr	r3, [r7, #4]
 810ba56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810ba58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ba5c:	2b00      	cmp	r3, #0
 810ba5e:	d002      	beq.n	810ba66 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810ba60:	687b      	ldr	r3, [r7, #4]
 810ba62:	2240      	movs	r2, #64	; 0x40
 810ba64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810ba66:	2300      	movs	r3, #0

}
 810ba68:	4618      	mov	r0, r3
 810ba6a:	3710      	adds	r7, #16
 810ba6c:	46bd      	mov	sp, r7
 810ba6e:	bc90      	pop	{r4, r7}
 810ba70:	4770      	bx	lr
 810ba72:	bf00      	nop
 810ba74:	10000000 	.word	0x10000000
 810ba78:	10624dd3 	.word	0x10624dd3

0810ba7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810ba7c:	b084      	sub	sp, #16
 810ba7e:	b580      	push	{r7, lr}
 810ba80:	b084      	sub	sp, #16
 810ba82:	af00      	add	r7, sp, #0
 810ba84:	6078      	str	r0, [r7, #4]
 810ba86:	f107 001c 	add.w	r0, r7, #28
 810ba8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba90:	2b01      	cmp	r3, #1
 810ba92:	d122      	bne.n	810bada <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810ba94:	687b      	ldr	r3, [r7, #4]
 810ba96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ba98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810ba9c:	687b      	ldr	r3, [r7, #4]
 810ba9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810baa0:	687b      	ldr	r3, [r7, #4]
 810baa2:	68db      	ldr	r3, [r3, #12]
 810baa4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 810baa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810baac:	687a      	ldr	r2, [r7, #4]
 810baae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810bab0:	687b      	ldr	r3, [r7, #4]
 810bab2:	68db      	ldr	r3, [r3, #12]
 810bab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810bab8:	687b      	ldr	r3, [r7, #4]
 810baba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810babc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810babe:	2b01      	cmp	r3, #1
 810bac0:	d105      	bne.n	810bace <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810bac2:	687b      	ldr	r3, [r7, #4]
 810bac4:	68db      	ldr	r3, [r3, #12]
 810bac6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810baca:	687b      	ldr	r3, [r7, #4]
 810bacc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 810bace:	6878      	ldr	r0, [r7, #4]
 810bad0:	f000 fa48 	bl	810bf64 <USB_CoreReset>
 810bad4:	4603      	mov	r3, r0
 810bad6:	73fb      	strb	r3, [r7, #15]
 810bad8:	e01a      	b.n	810bb10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810bada:	687b      	ldr	r3, [r7, #4]
 810badc:	68db      	ldr	r3, [r3, #12]
 810bade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810bae2:	687b      	ldr	r3, [r7, #4]
 810bae4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 810bae6:	6878      	ldr	r0, [r7, #4]
 810bae8:	f000 fa3c 	bl	810bf64 <USB_CoreReset>
 810baec:	4603      	mov	r3, r0
 810baee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810baf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810baf2:	2b00      	cmp	r3, #0
 810baf4:	d106      	bne.n	810bb04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810baf6:	687b      	ldr	r3, [r7, #4]
 810baf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bafa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810bafe:	687b      	ldr	r3, [r7, #4]
 810bb00:	639a      	str	r2, [r3, #56]	; 0x38
 810bb02:	e005      	b.n	810bb10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810bb04:	687b      	ldr	r3, [r7, #4]
 810bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bb08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810bb0c:	687b      	ldr	r3, [r7, #4]
 810bb0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bb12:	2b01      	cmp	r3, #1
 810bb14:	d10b      	bne.n	810bb2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810bb16:	687b      	ldr	r3, [r7, #4]
 810bb18:	689b      	ldr	r3, [r3, #8]
 810bb1a:	f043 0206 	orr.w	r2, r3, #6
 810bb1e:	687b      	ldr	r3, [r7, #4]
 810bb20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810bb22:	687b      	ldr	r3, [r7, #4]
 810bb24:	689b      	ldr	r3, [r3, #8]
 810bb26:	f043 0220 	orr.w	r2, r3, #32
 810bb2a:	687b      	ldr	r3, [r7, #4]
 810bb2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810bb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 810bb30:	4618      	mov	r0, r3
 810bb32:	3710      	adds	r7, #16
 810bb34:	46bd      	mov	sp, r7
 810bb36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810bb3a:	b004      	add	sp, #16
 810bb3c:	4770      	bx	lr

0810bb3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810bb3e:	b480      	push	{r7}
 810bb40:	b083      	sub	sp, #12
 810bb42:	af00      	add	r7, sp, #0
 810bb44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810bb46:	687b      	ldr	r3, [r7, #4]
 810bb48:	689b      	ldr	r3, [r3, #8]
 810bb4a:	f023 0201 	bic.w	r2, r3, #1
 810bb4e:	687b      	ldr	r3, [r7, #4]
 810bb50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810bb52:	2300      	movs	r3, #0
}
 810bb54:	4618      	mov	r0, r3
 810bb56:	370c      	adds	r7, #12
 810bb58:	46bd      	mov	sp, r7
 810bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb5e:	4770      	bx	lr

0810bb60 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810bb60:	b580      	push	{r7, lr}
 810bb62:	b082      	sub	sp, #8
 810bb64:	af00      	add	r7, sp, #0
 810bb66:	6078      	str	r0, [r7, #4]
 810bb68:	460b      	mov	r3, r1
 810bb6a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810bb6c:	687b      	ldr	r3, [r7, #4]
 810bb6e:	68db      	ldr	r3, [r3, #12]
 810bb70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 810bb74:	687b      	ldr	r3, [r7, #4]
 810bb76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810bb78:	78fb      	ldrb	r3, [r7, #3]
 810bb7a:	2b01      	cmp	r3, #1
 810bb7c:	d106      	bne.n	810bb8c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810bb7e:	687b      	ldr	r3, [r7, #4]
 810bb80:	68db      	ldr	r3, [r3, #12]
 810bb82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 810bb86:	687b      	ldr	r3, [r7, #4]
 810bb88:	60da      	str	r2, [r3, #12]
 810bb8a:	e00b      	b.n	810bba4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 810bb8c:	78fb      	ldrb	r3, [r7, #3]
 810bb8e:	2b00      	cmp	r3, #0
 810bb90:	d106      	bne.n	810bba0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810bb92:	687b      	ldr	r3, [r7, #4]
 810bb94:	68db      	ldr	r3, [r3, #12]
 810bb96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 810bb9a:	687b      	ldr	r3, [r7, #4]
 810bb9c:	60da      	str	r2, [r3, #12]
 810bb9e:	e001      	b.n	810bba4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 810bba0:	2301      	movs	r3, #1
 810bba2:	e003      	b.n	810bbac <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 810bba4:	2032      	movs	r0, #50	; 0x32
 810bba6:	f7f6 fbb1 	bl	810230c <HAL_Delay>

  return HAL_OK;
 810bbaa:	2300      	movs	r3, #0
}
 810bbac:	4618      	mov	r0, r3
 810bbae:	3708      	adds	r7, #8
 810bbb0:	46bd      	mov	sp, r7
 810bbb2:	bd80      	pop	{r7, pc}

0810bbb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810bbb4:	b084      	sub	sp, #16
 810bbb6:	b580      	push	{r7, lr}
 810bbb8:	b086      	sub	sp, #24
 810bbba:	af00      	add	r7, sp, #0
 810bbbc:	6078      	str	r0, [r7, #4]
 810bbbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 810bbc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810bbc6:	2300      	movs	r3, #0
 810bbc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bbca:	687b      	ldr	r3, [r7, #4]
 810bbcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810bbce:	2300      	movs	r3, #0
 810bbd0:	613b      	str	r3, [r7, #16]
 810bbd2:	e009      	b.n	810bbe8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810bbd4:	687a      	ldr	r2, [r7, #4]
 810bbd6:	693b      	ldr	r3, [r7, #16]
 810bbd8:	3340      	adds	r3, #64	; 0x40
 810bbda:	009b      	lsls	r3, r3, #2
 810bbdc:	4413      	add	r3, r2
 810bbde:	2200      	movs	r2, #0
 810bbe0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810bbe2:	693b      	ldr	r3, [r7, #16]
 810bbe4:	3301      	adds	r3, #1
 810bbe6:	613b      	str	r3, [r7, #16]
 810bbe8:	693b      	ldr	r3, [r7, #16]
 810bbea:	2b0e      	cmp	r3, #14
 810bbec:	d9f2      	bls.n	810bbd4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810bbee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810bbf0:	2b00      	cmp	r3, #0
 810bbf2:	d11c      	bne.n	810bc2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810bbf4:	68fb      	ldr	r3, [r7, #12]
 810bbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bbfa:	685b      	ldr	r3, [r3, #4]
 810bbfc:	68fa      	ldr	r2, [r7, #12]
 810bbfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810bc02:	f043 0302 	orr.w	r3, r3, #2
 810bc06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810bc08:	687b      	ldr	r3, [r7, #4]
 810bc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bc0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 810bc10:	687b      	ldr	r3, [r7, #4]
 810bc12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810bc14:	687b      	ldr	r3, [r7, #4]
 810bc16:	681b      	ldr	r3, [r3, #0]
 810bc18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810bc1c:	687b      	ldr	r3, [r7, #4]
 810bc1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810bc20:	687b      	ldr	r3, [r7, #4]
 810bc22:	681b      	ldr	r3, [r3, #0]
 810bc24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810bc28:	687b      	ldr	r3, [r7, #4]
 810bc2a:	601a      	str	r2, [r3, #0]
 810bc2c:	e005      	b.n	810bc3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810bc2e:	687b      	ldr	r3, [r7, #4]
 810bc30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bc32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 810bc36:	687b      	ldr	r3, [r7, #4]
 810bc38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810bc3a:	68fb      	ldr	r3, [r7, #12]
 810bc3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810bc40:	461a      	mov	r2, r3
 810bc42:	2300      	movs	r3, #0
 810bc44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 810bc46:	68fb      	ldr	r3, [r7, #12]
 810bc48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bc4c:	4619      	mov	r1, r3
 810bc4e:	68fb      	ldr	r3, [r7, #12]
 810bc50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bc54:	461a      	mov	r2, r3
 810bc56:	680b      	ldr	r3, [r1, #0]
 810bc58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810bc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bc5c:	2b01      	cmp	r3, #1
 810bc5e:	d10c      	bne.n	810bc7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bc62:	2b00      	cmp	r3, #0
 810bc64:	d104      	bne.n	810bc70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810bc66:	2100      	movs	r1, #0
 810bc68:	6878      	ldr	r0, [r7, #4]
 810bc6a:	f000 f949 	bl	810bf00 <USB_SetDevSpeed>
 810bc6e:	e008      	b.n	810bc82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810bc70:	2101      	movs	r1, #1
 810bc72:	6878      	ldr	r0, [r7, #4]
 810bc74:	f000 f944 	bl	810bf00 <USB_SetDevSpeed>
 810bc78:	e003      	b.n	810bc82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810bc7a:	2103      	movs	r1, #3
 810bc7c:	6878      	ldr	r0, [r7, #4]
 810bc7e:	f000 f93f 	bl	810bf00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810bc82:	2110      	movs	r1, #16
 810bc84:	6878      	ldr	r0, [r7, #4]
 810bc86:	f000 f8f3 	bl	810be70 <USB_FlushTxFifo>
 810bc8a:	4603      	mov	r3, r0
 810bc8c:	2b00      	cmp	r3, #0
 810bc8e:	d001      	beq.n	810bc94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 810bc90:	2301      	movs	r3, #1
 810bc92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810bc94:	6878      	ldr	r0, [r7, #4]
 810bc96:	f000 f911 	bl	810bebc <USB_FlushRxFifo>
 810bc9a:	4603      	mov	r3, r0
 810bc9c:	2b00      	cmp	r3, #0
 810bc9e:	d001      	beq.n	810bca4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 810bca0:	2301      	movs	r3, #1
 810bca2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810bca4:	68fb      	ldr	r3, [r7, #12]
 810bca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bcaa:	461a      	mov	r2, r3
 810bcac:	2300      	movs	r3, #0
 810bcae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810bcb0:	68fb      	ldr	r3, [r7, #12]
 810bcb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bcb6:	461a      	mov	r2, r3
 810bcb8:	2300      	movs	r3, #0
 810bcba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810bcbc:	68fb      	ldr	r3, [r7, #12]
 810bcbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bcc2:	461a      	mov	r2, r3
 810bcc4:	2300      	movs	r3, #0
 810bcc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810bcc8:	2300      	movs	r3, #0
 810bcca:	613b      	str	r3, [r7, #16]
 810bccc:	e043      	b.n	810bd56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810bcce:	693b      	ldr	r3, [r7, #16]
 810bcd0:	015a      	lsls	r2, r3, #5
 810bcd2:	68fb      	ldr	r3, [r7, #12]
 810bcd4:	4413      	add	r3, r2
 810bcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810bcda:	681b      	ldr	r3, [r3, #0]
 810bcdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810bce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810bce4:	d118      	bne.n	810bd18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 810bce6:	693b      	ldr	r3, [r7, #16]
 810bce8:	2b00      	cmp	r3, #0
 810bcea:	d10a      	bne.n	810bd02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810bcec:	693b      	ldr	r3, [r7, #16]
 810bcee:	015a      	lsls	r2, r3, #5
 810bcf0:	68fb      	ldr	r3, [r7, #12]
 810bcf2:	4413      	add	r3, r2
 810bcf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810bcf8:	461a      	mov	r2, r3
 810bcfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810bcfe:	6013      	str	r3, [r2, #0]
 810bd00:	e013      	b.n	810bd2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810bd02:	693b      	ldr	r3, [r7, #16]
 810bd04:	015a      	lsls	r2, r3, #5
 810bd06:	68fb      	ldr	r3, [r7, #12]
 810bd08:	4413      	add	r3, r2
 810bd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810bd0e:	461a      	mov	r2, r3
 810bd10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810bd14:	6013      	str	r3, [r2, #0]
 810bd16:	e008      	b.n	810bd2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810bd18:	693b      	ldr	r3, [r7, #16]
 810bd1a:	015a      	lsls	r2, r3, #5
 810bd1c:	68fb      	ldr	r3, [r7, #12]
 810bd1e:	4413      	add	r3, r2
 810bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810bd24:	461a      	mov	r2, r3
 810bd26:	2300      	movs	r3, #0
 810bd28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810bd2a:	693b      	ldr	r3, [r7, #16]
 810bd2c:	015a      	lsls	r2, r3, #5
 810bd2e:	68fb      	ldr	r3, [r7, #12]
 810bd30:	4413      	add	r3, r2
 810bd32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810bd36:	461a      	mov	r2, r3
 810bd38:	2300      	movs	r3, #0
 810bd3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810bd3c:	693b      	ldr	r3, [r7, #16]
 810bd3e:	015a      	lsls	r2, r3, #5
 810bd40:	68fb      	ldr	r3, [r7, #12]
 810bd42:	4413      	add	r3, r2
 810bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810bd48:	461a      	mov	r2, r3
 810bd4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810bd4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810bd50:	693b      	ldr	r3, [r7, #16]
 810bd52:	3301      	adds	r3, #1
 810bd54:	613b      	str	r3, [r7, #16]
 810bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bd58:	693a      	ldr	r2, [r7, #16]
 810bd5a:	429a      	cmp	r2, r3
 810bd5c:	d3b7      	bcc.n	810bcce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810bd5e:	2300      	movs	r3, #0
 810bd60:	613b      	str	r3, [r7, #16]
 810bd62:	e043      	b.n	810bdec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810bd64:	693b      	ldr	r3, [r7, #16]
 810bd66:	015a      	lsls	r2, r3, #5
 810bd68:	68fb      	ldr	r3, [r7, #12]
 810bd6a:	4413      	add	r3, r2
 810bd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810bd70:	681b      	ldr	r3, [r3, #0]
 810bd72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810bd76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810bd7a:	d118      	bne.n	810bdae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 810bd7c:	693b      	ldr	r3, [r7, #16]
 810bd7e:	2b00      	cmp	r3, #0
 810bd80:	d10a      	bne.n	810bd98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810bd82:	693b      	ldr	r3, [r7, #16]
 810bd84:	015a      	lsls	r2, r3, #5
 810bd86:	68fb      	ldr	r3, [r7, #12]
 810bd88:	4413      	add	r3, r2
 810bd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810bd8e:	461a      	mov	r2, r3
 810bd90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810bd94:	6013      	str	r3, [r2, #0]
 810bd96:	e013      	b.n	810bdc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810bd98:	693b      	ldr	r3, [r7, #16]
 810bd9a:	015a      	lsls	r2, r3, #5
 810bd9c:	68fb      	ldr	r3, [r7, #12]
 810bd9e:	4413      	add	r3, r2
 810bda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810bda4:	461a      	mov	r2, r3
 810bda6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810bdaa:	6013      	str	r3, [r2, #0]
 810bdac:	e008      	b.n	810bdc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810bdae:	693b      	ldr	r3, [r7, #16]
 810bdb0:	015a      	lsls	r2, r3, #5
 810bdb2:	68fb      	ldr	r3, [r7, #12]
 810bdb4:	4413      	add	r3, r2
 810bdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810bdba:	461a      	mov	r2, r3
 810bdbc:	2300      	movs	r3, #0
 810bdbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810bdc0:	693b      	ldr	r3, [r7, #16]
 810bdc2:	015a      	lsls	r2, r3, #5
 810bdc4:	68fb      	ldr	r3, [r7, #12]
 810bdc6:	4413      	add	r3, r2
 810bdc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810bdcc:	461a      	mov	r2, r3
 810bdce:	2300      	movs	r3, #0
 810bdd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810bdd2:	693b      	ldr	r3, [r7, #16]
 810bdd4:	015a      	lsls	r2, r3, #5
 810bdd6:	68fb      	ldr	r3, [r7, #12]
 810bdd8:	4413      	add	r3, r2
 810bdda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810bdde:	461a      	mov	r2, r3
 810bde0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810bde4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810bde6:	693b      	ldr	r3, [r7, #16]
 810bde8:	3301      	adds	r3, #1
 810bdea:	613b      	str	r3, [r7, #16]
 810bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bdee:	693a      	ldr	r2, [r7, #16]
 810bdf0:	429a      	cmp	r2, r3
 810bdf2:	d3b7      	bcc.n	810bd64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810bdf4:	68fb      	ldr	r3, [r7, #12]
 810bdf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bdfa:	691b      	ldr	r3, [r3, #16]
 810bdfc:	68fa      	ldr	r2, [r7, #12]
 810bdfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810be02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810be06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810be08:	687b      	ldr	r3, [r7, #4]
 810be0a:	2200      	movs	r2, #0
 810be0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810be0e:	687b      	ldr	r3, [r7, #4]
 810be10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 810be14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810be18:	2b00      	cmp	r3, #0
 810be1a:	d105      	bne.n	810be28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810be1c:	687b      	ldr	r3, [r7, #4]
 810be1e:	699b      	ldr	r3, [r3, #24]
 810be20:	f043 0210 	orr.w	r2, r3, #16
 810be24:	687b      	ldr	r3, [r7, #4]
 810be26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810be28:	687b      	ldr	r3, [r7, #4]
 810be2a:	699a      	ldr	r2, [r3, #24]
 810be2c:	4b0f      	ldr	r3, [pc, #60]	; (810be6c <USB_DevInit+0x2b8>)
 810be2e:	4313      	orrs	r3, r2
 810be30:	687a      	ldr	r2, [r7, #4]
 810be32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810be34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810be36:	2b00      	cmp	r3, #0
 810be38:	d005      	beq.n	810be46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810be3a:	687b      	ldr	r3, [r7, #4]
 810be3c:	699b      	ldr	r3, [r3, #24]
 810be3e:	f043 0208 	orr.w	r2, r3, #8
 810be42:	687b      	ldr	r3, [r7, #4]
 810be44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810be46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810be48:	2b01      	cmp	r3, #1
 810be4a:	d107      	bne.n	810be5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810be4c:	687b      	ldr	r3, [r7, #4]
 810be4e:	699b      	ldr	r3, [r3, #24]
 810be50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810be54:	f043 0304 	orr.w	r3, r3, #4
 810be58:	687a      	ldr	r2, [r7, #4]
 810be5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810be5c:	7dfb      	ldrb	r3, [r7, #23]
}
 810be5e:	4618      	mov	r0, r3
 810be60:	3718      	adds	r7, #24
 810be62:	46bd      	mov	sp, r7
 810be64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810be68:	b004      	add	sp, #16
 810be6a:	4770      	bx	lr
 810be6c:	803c3800 	.word	0x803c3800

0810be70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810be70:	b480      	push	{r7}
 810be72:	b085      	sub	sp, #20
 810be74:	af00      	add	r7, sp, #0
 810be76:	6078      	str	r0, [r7, #4]
 810be78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 810be7a:	2300      	movs	r3, #0
 810be7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810be7e:	683b      	ldr	r3, [r7, #0]
 810be80:	019b      	lsls	r3, r3, #6
 810be82:	f043 0220 	orr.w	r2, r3, #32
 810be86:	687b      	ldr	r3, [r7, #4]
 810be88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810be8a:	68fb      	ldr	r3, [r7, #12]
 810be8c:	3301      	adds	r3, #1
 810be8e:	60fb      	str	r3, [r7, #12]
 810be90:	68fb      	ldr	r3, [r7, #12]
 810be92:	4a09      	ldr	r2, [pc, #36]	; (810beb8 <USB_FlushTxFifo+0x48>)
 810be94:	4293      	cmp	r3, r2
 810be96:	d901      	bls.n	810be9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 810be98:	2303      	movs	r3, #3
 810be9a:	e006      	b.n	810beaa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810be9c:	687b      	ldr	r3, [r7, #4]
 810be9e:	691b      	ldr	r3, [r3, #16]
 810bea0:	f003 0320 	and.w	r3, r3, #32
 810bea4:	2b20      	cmp	r3, #32
 810bea6:	d0f0      	beq.n	810be8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 810bea8:	2300      	movs	r3, #0
}
 810beaa:	4618      	mov	r0, r3
 810beac:	3714      	adds	r7, #20
 810beae:	46bd      	mov	sp, r7
 810beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810beb4:	4770      	bx	lr
 810beb6:	bf00      	nop
 810beb8:	00030d40 	.word	0x00030d40

0810bebc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810bebc:	b480      	push	{r7}
 810bebe:	b085      	sub	sp, #20
 810bec0:	af00      	add	r7, sp, #0
 810bec2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 810bec4:	2300      	movs	r3, #0
 810bec6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810bec8:	687b      	ldr	r3, [r7, #4]
 810beca:	2210      	movs	r2, #16
 810becc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810bece:	68fb      	ldr	r3, [r7, #12]
 810bed0:	3301      	adds	r3, #1
 810bed2:	60fb      	str	r3, [r7, #12]
 810bed4:	68fb      	ldr	r3, [r7, #12]
 810bed6:	4a09      	ldr	r2, [pc, #36]	; (810befc <USB_FlushRxFifo+0x40>)
 810bed8:	4293      	cmp	r3, r2
 810beda:	d901      	bls.n	810bee0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 810bedc:	2303      	movs	r3, #3
 810bede:	e006      	b.n	810beee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810bee0:	687b      	ldr	r3, [r7, #4]
 810bee2:	691b      	ldr	r3, [r3, #16]
 810bee4:	f003 0310 	and.w	r3, r3, #16
 810bee8:	2b10      	cmp	r3, #16
 810beea:	d0f0      	beq.n	810bece <USB_FlushRxFifo+0x12>

  return HAL_OK;
 810beec:	2300      	movs	r3, #0
}
 810beee:	4618      	mov	r0, r3
 810bef0:	3714      	adds	r7, #20
 810bef2:	46bd      	mov	sp, r7
 810bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bef8:	4770      	bx	lr
 810befa:	bf00      	nop
 810befc:	00030d40 	.word	0x00030d40

0810bf00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810bf00:	b480      	push	{r7}
 810bf02:	b085      	sub	sp, #20
 810bf04:	af00      	add	r7, sp, #0
 810bf06:	6078      	str	r0, [r7, #4]
 810bf08:	460b      	mov	r3, r1
 810bf0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bf0c:	687b      	ldr	r3, [r7, #4]
 810bf0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810bf10:	68fb      	ldr	r3, [r7, #12]
 810bf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bf16:	681a      	ldr	r2, [r3, #0]
 810bf18:	78fb      	ldrb	r3, [r7, #3]
 810bf1a:	68f9      	ldr	r1, [r7, #12]
 810bf1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810bf20:	4313      	orrs	r3, r2
 810bf22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810bf24:	2300      	movs	r3, #0
}
 810bf26:	4618      	mov	r0, r3
 810bf28:	3714      	adds	r7, #20
 810bf2a:	46bd      	mov	sp, r7
 810bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf30:	4770      	bx	lr

0810bf32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 810bf32:	b580      	push	{r7, lr}
 810bf34:	b084      	sub	sp, #16
 810bf36:	af00      	add	r7, sp, #0
 810bf38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bf3a:	687b      	ldr	r3, [r7, #4]
 810bf3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810bf3e:	68fb      	ldr	r3, [r7, #12]
 810bf40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810bf44:	685b      	ldr	r3, [r3, #4]
 810bf46:	68fa      	ldr	r2, [r7, #12]
 810bf48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810bf4c:	f043 0302 	orr.w	r3, r3, #2
 810bf50:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 810bf52:	2003      	movs	r0, #3
 810bf54:	f7f6 f9da 	bl	810230c <HAL_Delay>

  return HAL_OK;
 810bf58:	2300      	movs	r3, #0
}
 810bf5a:	4618      	mov	r0, r3
 810bf5c:	3710      	adds	r7, #16
 810bf5e:	46bd      	mov	sp, r7
 810bf60:	bd80      	pop	{r7, pc}
	...

0810bf64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810bf64:	b480      	push	{r7}
 810bf66:	b085      	sub	sp, #20
 810bf68:	af00      	add	r7, sp, #0
 810bf6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 810bf6c:	2300      	movs	r3, #0
 810bf6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 810bf70:	68fb      	ldr	r3, [r7, #12]
 810bf72:	3301      	adds	r3, #1
 810bf74:	60fb      	str	r3, [r7, #12]
 810bf76:	68fb      	ldr	r3, [r7, #12]
 810bf78:	4a13      	ldr	r2, [pc, #76]	; (810bfc8 <USB_CoreReset+0x64>)
 810bf7a:	4293      	cmp	r3, r2
 810bf7c:	d901      	bls.n	810bf82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810bf7e:	2303      	movs	r3, #3
 810bf80:	e01b      	b.n	810bfba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810bf82:	687b      	ldr	r3, [r7, #4]
 810bf84:	691b      	ldr	r3, [r3, #16]
 810bf86:	2b00      	cmp	r3, #0
 810bf88:	daf2      	bge.n	810bf70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810bf8a:	2300      	movs	r3, #0
 810bf8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810bf8e:	687b      	ldr	r3, [r7, #4]
 810bf90:	691b      	ldr	r3, [r3, #16]
 810bf92:	f043 0201 	orr.w	r2, r3, #1
 810bf96:	687b      	ldr	r3, [r7, #4]
 810bf98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810bf9a:	68fb      	ldr	r3, [r7, #12]
 810bf9c:	3301      	adds	r3, #1
 810bf9e:	60fb      	str	r3, [r7, #12]
 810bfa0:	68fb      	ldr	r3, [r7, #12]
 810bfa2:	4a09      	ldr	r2, [pc, #36]	; (810bfc8 <USB_CoreReset+0x64>)
 810bfa4:	4293      	cmp	r3, r2
 810bfa6:	d901      	bls.n	810bfac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810bfa8:	2303      	movs	r3, #3
 810bfaa:	e006      	b.n	810bfba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810bfac:	687b      	ldr	r3, [r7, #4]
 810bfae:	691b      	ldr	r3, [r3, #16]
 810bfb0:	f003 0301 	and.w	r3, r3, #1
 810bfb4:	2b01      	cmp	r3, #1
 810bfb6:	d0f0      	beq.n	810bf9a <USB_CoreReset+0x36>

  return HAL_OK;
 810bfb8:	2300      	movs	r3, #0
}
 810bfba:	4618      	mov	r0, r3
 810bfbc:	3714      	adds	r7, #20
 810bfbe:	46bd      	mov	sp, r7
 810bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfc4:	4770      	bx	lr
 810bfc6:	bf00      	nop
 810bfc8:	00030d40 	.word	0x00030d40

0810bfcc <__libc_init_array>:
 810bfcc:	b570      	push	{r4, r5, r6, lr}
 810bfce:	4e0d      	ldr	r6, [pc, #52]	; (810c004 <__libc_init_array+0x38>)
 810bfd0:	4c0d      	ldr	r4, [pc, #52]	; (810c008 <__libc_init_array+0x3c>)
 810bfd2:	1ba4      	subs	r4, r4, r6
 810bfd4:	10a4      	asrs	r4, r4, #2
 810bfd6:	2500      	movs	r5, #0
 810bfd8:	42a5      	cmp	r5, r4
 810bfda:	d109      	bne.n	810bff0 <__libc_init_array+0x24>
 810bfdc:	4e0b      	ldr	r6, [pc, #44]	; (810c00c <__libc_init_array+0x40>)
 810bfde:	4c0c      	ldr	r4, [pc, #48]	; (810c010 <__libc_init_array+0x44>)
 810bfe0:	f000 f820 	bl	810c024 <_init>
 810bfe4:	1ba4      	subs	r4, r4, r6
 810bfe6:	10a4      	asrs	r4, r4, #2
 810bfe8:	2500      	movs	r5, #0
 810bfea:	42a5      	cmp	r5, r4
 810bfec:	d105      	bne.n	810bffa <__libc_init_array+0x2e>
 810bfee:	bd70      	pop	{r4, r5, r6, pc}
 810bff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810bff4:	4798      	blx	r3
 810bff6:	3501      	adds	r5, #1
 810bff8:	e7ee      	b.n	810bfd8 <__libc_init_array+0xc>
 810bffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810bffe:	4798      	blx	r3
 810c000:	3501      	adds	r5, #1
 810c002:	e7f2      	b.n	810bfea <__libc_init_array+0x1e>
 810c004:	0810c064 	.word	0x0810c064
 810c008:	0810c064 	.word	0x0810c064
 810c00c:	0810c064 	.word	0x0810c064
 810c010:	0810c068 	.word	0x0810c068

0810c014 <memset>:
 810c014:	4402      	add	r2, r0
 810c016:	4603      	mov	r3, r0
 810c018:	4293      	cmp	r3, r2
 810c01a:	d100      	bne.n	810c01e <memset+0xa>
 810c01c:	4770      	bx	lr
 810c01e:	f803 1b01 	strb.w	r1, [r3], #1
 810c022:	e7f9      	b.n	810c018 <memset+0x4>

0810c024 <_init>:
 810c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c026:	bf00      	nop
 810c028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c02a:	bc08      	pop	{r3}
 810c02c:	469e      	mov	lr, r3
 810c02e:	4770      	bx	lr

0810c030 <_fini>:
 810c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c032:	bf00      	nop
 810c034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c036:	bc08      	pop	{r3}
 810c038:	469e      	mov	lr, r3
 810c03a:	4770      	bx	lr
