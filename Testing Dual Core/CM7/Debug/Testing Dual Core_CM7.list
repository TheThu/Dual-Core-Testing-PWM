
Testing Dual Core_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007714  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a30  08007a30  00017a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a38  08007a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08007a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000188  20000074  08007ab4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001fc  08007ab4  000201fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000194e5  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000029ff  00000000  00000000  00039587  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e08  00000000  00000000  0003bf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d00  00000000  00000000  0003cd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f529  00000000  00000000  0003da90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d929  00000000  00000000  0007cfb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019d65c  00000000  00000000  0008a8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00227f3e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d64  00000000  00000000  00227fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800799c 	.word	0x0800799c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	0800799c 	.word	0x0800799c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <Led_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Led_init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <Led_init+0x54>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <Led_init+0x54>)
 800078c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <Led_init+0x54>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <Led_init+0x58>)
 80007b8:	f000 fdbe 	bl	8001338 <HAL_GPIO_Init>
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	58024400 	.word	0x58024400
 80007c8:	58022400 	.word	0x58022400
 80007cc:	00000000 	.word	0x00000000

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af02      	add	r7, sp, #8
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	61bb      	str	r3, [r7, #24]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007dc:	bf00      	nop
 80007de:	4b68      	ldr	r3, [pc, #416]	; (8000980 <main+0x1b0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d004      	beq.n	80007f4 <main+0x24>
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	61ba      	str	r2, [r7, #24]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dcf4      	bgt.n	80007de <main+0xe>
  if ( timeout < 0 )
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da01      	bge.n	80007fe <main+0x2e>
  {
  Error_Handler();
 80007fa:	f000 fabf 	bl	8000d7c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fbf7 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f8cd 	bl	80009a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000806:	4b5e      	ldr	r3, [pc, #376]	; (8000980 <main+0x1b0>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	4a5c      	ldr	r2, [pc, #368]	; (8000980 <main+0x1b0>)
 800080e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000816:	4b5a      	ldr	r3, [pc, #360]	; (8000980 <main+0x1b0>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 ff37 	bl	8001698 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f000 ff4d 	bl	80016cc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000836:	61bb      	str	r3, [r7, #24]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000838:	bf00      	nop
 800083a:	4b51      	ldr	r3, [pc, #324]	; (8000980 <main+0x1b0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <main+0x80>
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	61ba      	str	r2, [r7, #24]
 800084c:	2b00      	cmp	r3, #0
 800084e:	dcf4      	bgt.n	800083a <main+0x6a>
if ( timeout < 0 )
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	2b00      	cmp	r3, #0
 8000854:	da01      	bge.n	800085a <main+0x8a>
{
Error_Handler();
 8000856:	f000 fa91 	bl	8000d7c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 fa2f 	bl	8000cbc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800085e:	f000 f9e1 	bl	8000c24 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 8000862:	f000 f99f 	bl	8000ba4 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  Led_init();
 8000866:	f7ff ff83 	bl	8000770 <Led_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  buf[0] = REG_TEMP;
 800086a:	2300      	movs	r3, #0
 800086c:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c4, TMP275_ADDR, buf, 1, HAL_MAX_DELAY);
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	b299      	uxth	r1, r3
 8000872:	1d3a      	adds	r2, r7, #4
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	4841      	ldr	r0, [pc, #260]	; (8000984 <main+0x1b4>)
 800087e:	f000 ffc9 	bl	8001814 <HAL_I2C_Master_Transmit>
 8000882:	4603      	mov	r3, r0
 8000884:	75fb      	strb	r3, [r7, #23]
	  if(ret!=HAL_OK)
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d005      	beq.n	8000898 <main+0xc8>
	  {
		  strcpy((char*)buf, "Error Tx\r \n");
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4a3e      	ldr	r2, [pc, #248]	; (8000988 <main+0x1b8>)
 8000890:	ca07      	ldmia	r2, {r0, r1, r2}
 8000892:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000896:	e05b      	b.n	8000950 <main+0x180>
	  }
	  else
	  {
		  ret = HAL_I2C_Master_Receive(&hi2c4, TMP275_ADDR, buf, 2, HAL_MAX_DELAY);
 8000898:	2390      	movs	r3, #144	; 0x90
 800089a:	b299      	uxth	r1, r3
 800089c:	1d3a      	adds	r2, r7, #4
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	4837      	ldr	r0, [pc, #220]	; (8000984 <main+0x1b4>)
 80008a8:	f001 f8a8 	bl	80019fc <HAL_I2C_Master_Receive>
 80008ac:	4603      	mov	r3, r0
 80008ae:	75fb      	strb	r3, [r7, #23]
		  if(ret!= HAL_OK )
 80008b0:	7dfb      	ldrb	r3, [r7, #23]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d005      	beq.n	80008c2 <main+0xf2>
		  {
			  strcpy((char*)buf, "Error Rx\r \n");
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4a34      	ldr	r2, [pc, #208]	; (800098c <main+0x1bc>)
 80008ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80008bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80008c0:	e046      	b.n	8000950 <main+0x180>
		  }
		  else
		  {
			 val = ( (uint16_t)buf[0] << 4 ) | (buf[1] >> 4);
 80008c2:	793b      	ldrb	r3, [r7, #4]
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	b21a      	sxth	r2, r3
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	091b      	lsrs	r3, r3, #4
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	83fb      	strh	r3, [r7, #30]
			  Convert to 2's complement

			  Check if value > 0111 1111 1111

			  */
			 if(val > 0x7FF)
 80008d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008dc:	db05      	blt.n	80008ea <main+0x11a>
			 {
				 //  Masking ,  value = value | 1111 0000 0000
				 val |= 0xF000;
 80008de:	8bfb      	ldrh	r3, [r7, #30]
 80008e0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80008e4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80008e8:	83fb      	strh	r3, [r7, #30]
			 }

			 // Convert temperature to decimal format

			 temp_c = val*0.0625;
 80008ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008ee:	ee07 3a90 	vmov	s15, r3
 80008f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8000978 <main+0x1a8>
 80008fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000902:	edc7 7a04 	vstr	s15, [r7, #16]

			 temp_c *= 100;
 8000906:	edd7 7a04 	vldr	s15, [r7, #16]
 800090a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000990 <main+0x1c0>
 800090e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000912:	edc7 7a04 	vstr	s15, [r7, #16]
			 sprintf((char*)buf,"%u.%02u C \r\n", ((unsigned int)temp_c / 100), ((unsigned int)temp_c % 100));
 8000916:	edd7 7a04 	vldr	s15, [r7, #16]
 800091a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800091e:	ee17 2a90 	vmov	r2, s15
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <main+0x1c4>)
 8000924:	fba3 2302 	umull	r2, r3, r3, r2
 8000928:	095c      	lsrs	r4, r3, #5
 800092a:	edd7 7a04 	vldr	s15, [r7, #16]
 800092e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000932:	ee17 2a90 	vmov	r2, s15
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <main+0x1c4>)
 8000938:	fba3 1302 	umull	r1, r3, r3, r2
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	2164      	movs	r1, #100	; 0x64
 8000940:	fb01 f303 	mul.w	r3, r1, r3
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	1d38      	adds	r0, r7, #4
 8000948:	4622      	mov	r2, r4
 800094a:	4913      	ldr	r1, [pc, #76]	; (8000998 <main+0x1c8>)
 800094c:	f006 fc20 	bl	8007190 <siprintf>

	  }


//	  strcpy((char*)buf, "Hello!\r \n");
	  HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fcc4 	bl	80002e0 <strlen>
 8000958:	4603      	mov	r3, r0
 800095a:	b29a      	uxth	r2, r3
 800095c:	1d39      	adds	r1, r7, #4
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <main+0x1cc>)
 8000964:	f003 ff44 	bl	80047f0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000968:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096c:	f000 fbd2 	bl	8001114 <HAL_Delay>
	  buf[0] = REG_TEMP;
 8000970:	e77b      	b.n	800086a <main+0x9a>
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	00000000 	.word	0x00000000
 800097c:	3fb00000 	.word	0x3fb00000
 8000980:	58024400 	.word	0x58024400
 8000984:	2000009c 	.word	0x2000009c
 8000988:	080079b4 	.word	0x080079b4
 800098c:	080079c0 	.word	0x080079c0
 8000990:	42c80000 	.word	0x42c80000
 8000994:	51eb851f 	.word	0x51eb851f
 8000998:	080079cc 	.word	0x080079cc
 800099c:	200000e8 	.word	0x200000e8

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b0cc      	sub	sp, #304	; 0x130
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009aa:	224c      	movs	r2, #76	; 0x4c
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f006 fbe6 	bl	8007180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009b8:	2220      	movs	r2, #32
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f006 fbdf 	bl	8007180 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4618      	mov	r0, r3
 80009c6:	23c0      	movs	r3, #192	; 0xc0
 80009c8:	461a      	mov	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f006 fbd8 	bl	8007180 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009d0:	2004      	movs	r0, #4
 80009d2:	f001 fb81 	bl	80020d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	4b6d      	ldr	r3, [pc, #436]	; (8000b94 <SystemClock_Config+0x1f4>)
 80009de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e0:	4a6c      	ldr	r2, [pc, #432]	; (8000b94 <SystemClock_Config+0x1f4>)
 80009e2:	f023 0301 	bic.w	r3, r3, #1
 80009e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009e8:	4b6a      	ldr	r3, [pc, #424]	; (8000b94 <SystemClock_Config+0x1f4>)
 80009ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ec:	f003 0201 	and.w	r2, r3, #1
 80009f0:	463b      	mov	r3, r7
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	4b68      	ldr	r3, [pc, #416]	; (8000b98 <SystemClock_Config+0x1f8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a67      	ldr	r2, [pc, #412]	; (8000b98 <SystemClock_Config+0x1f8>)
 80009fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b65      	ldr	r3, [pc, #404]	; (8000b98 <SystemClock_Config+0x1f8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a08:	463b      	mov	r3, r7
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a10:	bf00      	nop
 8000a12:	4b61      	ldr	r3, [pc, #388]	; (8000b98 <SystemClock_Config+0x1f8>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a1e:	d1f8      	bne.n	8000a12 <SystemClock_Config+0x72>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000a20:	4b5e      	ldr	r3, [pc, #376]	; (8000b9c <SystemClock_Config+0x1fc>)
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	4a5d      	ldr	r2, [pc, #372]	; (8000b9c <SystemClock_Config+0x1fc>)
 8000a26:	f023 0303 	bic.w	r3, r3, #3
 8000a2a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a38:	2340      	movs	r3, #64	; 0x40
 8000a3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000a50:	2320      	movs	r3, #32
 8000a52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000a56:	2381      	movs	r3, #129	; 0x81
 8000a58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fb81 	bl	800218c <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a90:	f000 f974 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	233f      	movs	r3, #63	; 0x3f
 8000a96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 ff36 	bl	800293c <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000ad6:	f000 f951 	bl	8000d7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <SystemClock_Config+0x200>)
 8000ade:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CEC|RCC_PERIPHCLK_QSPI
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2281      	movs	r2, #129	; 0x81
 8000aea:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2202      	movs	r2, #2
 8000af0:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2202      	movs	r2, #2
 8000af6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2202      	movs	r2, #2
 8000afc:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2240      	movs	r2, #64	; 0x40
 8000b02:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	665a      	str	r2, [r3, #100]	; 0x64
  PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fad3 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x1dc>
  {
    Error_Handler();
 8000b78:	f000 f900 	bl	8000d7c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b80:	2100      	movs	r1, #0
 8000b82:	2000      	movs	r0, #0
 8000b84:	f002 f890 	bl	8002ca8 <HAL_RCC_MCOConfig>
}
 8000b88:	bf00      	nop
 8000b8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	58000400 	.word	0x58000400
 8000b98:	58024800 	.word	0x58024800
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	0bc93113 	.word	0x0bc93113

08000ba4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <MX_I2C4_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <MX_I2C4_Init+0x7c>)
 8000bb2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000bde:	480e      	ldr	r0, [pc, #56]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000be0:	f000 fd88 	bl	80016f4 <HAL_I2C_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bea:	f000 f8c7 	bl	8000d7c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000bf2:	f001 f9d9 	bl	8001fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000bfc:	f000 f8be 	bl	8000d7c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_I2C4_Init+0x74>)
 8000c04:	f001 fa1b 	bl	800203e <HAL_I2CEx_ConfigDigitalFilter>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f000 f8b5 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000009c 	.word	0x2000009c
 8000c1c:	58001c00 	.word	0x58001c00
 8000c20:	10707dbc 	.word	0x10707dbc

08000c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <MX_USART1_UART_Init+0x94>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6c:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c6e:	f003 fd6f 	bl	8004750 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c78:	f000 f880 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c80:	f006 f96f 	bl	8006f62 <HAL_UARTEx_SetTxFifoThreshold>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f000 f877 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000c92:	f006 f9a4 	bl	8006fde <HAL_UARTEx_SetRxFifoThreshold>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 f86e 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_USART1_UART_Init+0x90>)
 8000ca2:	f006 f925 	bl	8006ef0 <HAL_UARTEx_DisableFifoMode>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 f866 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000e8 	.word	0x200000e8
 8000cb8:	40011000 	.word	0x40011000

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_GPIO_Init+0xbc>)
 8000d68:	f000 fae6 	bl	8001338 <HAL_GPIO_Init>

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58024400 	.word	0x58024400
 8000d78:	58020000 	.word	0x58020000

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_MspInit+0x30>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d98:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x30>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x30>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <HAL_I2C_MspInit+0x88>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12e      	bne.n	8000e40 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_I2C_MspInit+0x8c>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_I2C_MspInit+0x8c>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_I2C_MspInit+0x8c>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e06:	2312      	movs	r3, #18
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e12:	2304      	movs	r3, #4
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <HAL_I2C_MspInit+0x90>)
 8000e1e:	f000 fa8b 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_I2C_MspInit+0x8c>)
 8000e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e28:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_I2C_MspInit+0x8c>)
 8000e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_I2C_MspInit+0x8c>)
 8000e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58001c00 	.word	0x58001c00
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020c00 	.word	0x58020c00

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <HAL_UART_MspInit+0x88>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12e      	bne.n	8000ed4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e7c:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000eb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_UART_MspInit+0x90>)
 8000ed0:	f000 fa32 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58020000 	.word	0x58020000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f8ca 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x50>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x16>
		heap_end = &end;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <_sbrk+0x50>)
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <_sbrk+0x54>)
 8000f58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <_sbrk+0x50>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <_sbrk+0x50>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	466a      	mov	r2, sp
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d907      	bls.n	8000f7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f6e:	f006 f8dd 	bl	800712c <__errno>
 8000f72:	4602      	mov	r2, r0
 8000f74:	230c      	movs	r3, #12
 8000f76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	e006      	b.n	8000f8c <_sbrk+0x48>
	}

	heap_end += incr;
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <_sbrk+0x50>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <_sbrk+0x50>)
 8000f88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000090 	.word	0x20000090
 8000f98:	20000200 	.word	0x20000200

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa2:	e003      	b.n	8000fac <LoopCopyDataInit>

08000fa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000faa:	3104      	adds	r1, #4

08000fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb4:	d3f6      	bcc.n	8000fa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fb8:	e002      	b.n	8000fc0 <LoopFillZerobss>

08000fba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fbc:	f842 3b04 	str.w	r3, [r2], #4

08000fc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc4:	d3f9      	bcc.n	8000fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc6:	f7ff fb63 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f006 f8b5 	bl	8007138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fbff 	bl	80007d0 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fd8:	08007a40 	.word	0x08007a40
  ldr  r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000fe4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000fe8:	200001fc 	.word	0x200001fc

08000fec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC3_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	f000 f96c 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ffc:	f001 febe 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8001000:	4601      	mov	r1, r0
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_Init+0x68>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_Init+0x6c>)
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	fa21 f303 	lsr.w	r3, r1, r3
 8001018:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <HAL_Init+0x6c>)
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_Init+0x70>)
 8001032:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_Init+0x74>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f814 	bl	8001068 <HAL_InitTick>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e002      	b.n	8001050 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800104a:	f7ff fe9f 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58024400 	.word	0x58024400
 800105c:	080079ec 	.word	0x080079ec
 8001060:	20000004 	.word	0x20000004
 8001064:	20000000 	.word	0x20000000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_InitTick+0x60>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e021      	b.n	80010c0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_InitTick+0x64>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_InitTick+0x60>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f943 	bl	800131e <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f91b 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x68>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000000c 	.word	0x2000000c
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	200001f4 	.word	0x200001f4

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	200001f4 	.word	0x200001f4

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_Delay+0x40>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000000c 	.word	0x2000000c

08001158 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetREVID+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	0c1b      	lsrs	r3, r3, #16
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	5c001000 	.word	0x5c001000

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	4313      	orrs	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	05fa0000 	.word	0x05fa0000

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff47 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff5e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff90 	bl	8001228 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5f 	bl	80011d4 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffb2 	bl	8001290 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001346:	4b89      	ldr	r3, [pc, #548]	; (800156c <HAL_GPIO_Init+0x234>)
 8001348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800134a:	e194      	b.n	8001676 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2101      	movs	r1, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8186 	beq.w	8001670 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d00b      	beq.n	8001384 <HAL_GPIO_Init+0x4c>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d007      	beq.n	8001384 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001378:	2b11      	cmp	r3, #17
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d130      	bne.n	80013e6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ba:	2201      	movs	r2, #1
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 0201 	and.w	r2, r3, #1
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0xee>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b12      	cmp	r3, #18
 8001424:	d123      	bne.n	800146e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	69b9      	ldr	r1, [r7, #24]
 800146a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0203 	and.w	r2, r3, #3
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80e0 	beq.w	8001670 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x238>)
 80014b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b6:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <HAL_GPIO_Init+0x238>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_GPIO_Init+0x238>)
 80014c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ce:	4a29      	ldr	r2, [pc, #164]	; (8001574 <HAL_GPIO_Init+0x23c>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <HAL_GPIO_Init+0x240>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d052      	beq.n	80015a0 <HAL_GPIO_Init+0x268>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a1f      	ldr	r2, [pc, #124]	; (800157c <HAL_GPIO_Init+0x244>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d031      	beq.n	8001566 <HAL_GPIO_Init+0x22e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_GPIO_Init+0x248>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d02b      	beq.n	8001562 <HAL_GPIO_Init+0x22a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_GPIO_Init+0x24c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d025      	beq.n	800155e <HAL_GPIO_Init+0x226>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <HAL_GPIO_Init+0x250>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01f      	beq.n	800155a <HAL_GPIO_Init+0x222>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_GPIO_Init+0x254>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x21e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_GPIO_Init+0x258>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x21a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_GPIO_Init+0x25c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x216>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_GPIO_Init+0x260>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x212>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_GPIO_Init+0x264>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x20e>
 8001542:	2309      	movs	r3, #9
 8001544:	e02d      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001546:	230a      	movs	r3, #10
 8001548:	e02b      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800154a:	2308      	movs	r3, #8
 800154c:	e029      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800154e:	2307      	movs	r3, #7
 8001550:	e027      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001552:	2306      	movs	r3, #6
 8001554:	e025      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001556:	2305      	movs	r3, #5
 8001558:	e023      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800155a:	2304      	movs	r3, #4
 800155c:	e021      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800155e:	2303      	movs	r3, #3
 8001560:	e01f      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001562:	2302      	movs	r3, #2
 8001564:	e01d      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001566:	2301      	movs	r3, #1
 8001568:	e01b      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800156a:	bf00      	nop
 800156c:	58000080 	.word	0x58000080
 8001570:	58024400 	.word	0x58024400
 8001574:	58000400 	.word	0x58000400
 8001578:	58020000 	.word	0x58020000
 800157c:	58020400 	.word	0x58020400
 8001580:	58020800 	.word	0x58020800
 8001584:	58020c00 	.word	0x58020c00
 8001588:	58021000 	.word	0x58021000
 800158c:	58021400 	.word	0x58021400
 8001590:	58021800 	.word	0x58021800
 8001594:	58021c00 	.word	0x58021c00
 8001598:	58022000 	.word	0x58022000
 800159c:	58022400 	.word	0x58022400
 80015a0:	2300      	movs	r3, #0
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	f002 0203 	and.w	r2, r2, #3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4093      	lsls	r3, r2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b2:	4938      	ldr	r1, [pc, #224]	; (8001694 <HAL_GPIO_Init+0x35c>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800163a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3301      	adds	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	f47f ae63 	bne.w	800134c <HAL_GPIO_Init+0x14>
  }
}
 8001686:	bf00      	nop
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	58000400 	.word	0x58000400

08001698 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_HSEM_FastTake+0x2c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3320      	adds	r3, #32
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_HSEM_FastTake+0x30>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d101      	bne.n	80016b4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e000      	b.n	80016b6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	58026400 	.word	0x58026400
 80016c8:	80000300 	.word	0x80000300

080016cc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016d6:	4906      	ldr	r1, [pc, #24]	; (80016f0 <HAL_HSEM_Release+0x24>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	58026400 	.word	0x58026400

080016f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07f      	b.n	8001806 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fb50 	bl	8000dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	e006      	b.n	800177c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800177a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d104      	bne.n	800178e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800178c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_I2C_Init+0x11c>)
 800179a:	430b      	orrs	r3, r1
 800179c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	ea42 0103 	orr.w	r1, r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	021a      	lsls	r2, r3, #8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69d9      	ldr	r1, [r3, #28]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	02008000 	.word	0x02008000

08001814 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af02      	add	r7, sp, #8
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	461a      	mov	r2, r3
 8001820:	460b      	mov	r3, r1
 8001822:	817b      	strh	r3, [r7, #10]
 8001824:	4613      	mov	r3, r2
 8001826:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b20      	cmp	r3, #32
 8001832:	f040 80da 	bne.w	80019ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_I2C_Master_Transmit+0x30>
 8001840:	2302      	movs	r3, #2
 8001842:	e0d3      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800184c:	f7ff fc56 	bl	80010fc <HAL_GetTick>
 8001850:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2319      	movs	r3, #25
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f9e6 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0be      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2221      	movs	r2, #33	; 0x21
 8001872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2210      	movs	r2, #16
 800187a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	893a      	ldrh	r2, [r7, #8]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	2bff      	cmp	r3, #255	; 0xff
 800189e:	d90e      	bls.n	80018be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	22ff      	movs	r2, #255	; 0xff
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	8979      	ldrh	r1, [r7, #10]
 80018ae:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fb48 	bl	8001f4c <I2C_TransferConfig>
 80018bc:	e06c      	b.n	8001998 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	8979      	ldrh	r1, [r7, #10]
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 fb37 	bl	8001f4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80018de:	e05b      	b.n	8001998 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	6a39      	ldr	r1, [r7, #32]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f9e3 	bl	8001cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e07b      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d034      	beq.n	8001998 <HAL_I2C_Master_Transmit+0x184>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d130      	bne.n	8001998 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	2200      	movs	r2, #0
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f975 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e04d      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d90e      	bls.n	8001978 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	22ff      	movs	r2, #255	; 0xff
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	b2da      	uxtb	r2, r3
 8001966:	8979      	ldrh	r1, [r7, #10]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 faeb 	bl	8001f4c <I2C_TransferConfig>
 8001976:	e00f      	b.n	8001998 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	b2da      	uxtb	r2, r3
 8001988:	8979      	ldrh	r1, [r7, #10]
 800198a:	2300      	movs	r3, #0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fada 	bl	8001f4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d19e      	bne.n	80018e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f9c2 	bl	8001d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e01a      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2220      	movs	r2, #32
 80019bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80019ca:	400b      	ands	r3, r1
 80019cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	80002000 	.word	0x80002000
 80019f8:	fe00e800 	.word	0xfe00e800

080019fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	f040 80db 	bne.w	8001bd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_I2C_Master_Receive+0x30>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e0d4      	b.n	8001bd6 <HAL_I2C_Master_Receive+0x1da>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a34:	f7ff fb62 	bl	80010fc <HAL_GetTick>
 8001a38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2319      	movs	r3, #25
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f8f2 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0bf      	b.n	8001bd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2222      	movs	r2, #34	; 0x22
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2210      	movs	r2, #16
 8001a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	893a      	ldrh	r2, [r7, #8]
 8001a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2bff      	cmp	r3, #255	; 0xff
 8001a86:	d90e      	bls.n	8001aa6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	22ff      	movs	r2, #255	; 0xff
 8001a8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	8979      	ldrh	r1, [r7, #10]
 8001a96:	4b52      	ldr	r3, [pc, #328]	; (8001be0 <HAL_I2C_Master_Receive+0x1e4>)
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fa54 	bl	8001f4c <I2C_TransferConfig>
 8001aa4:	e06d      	b.n	8001b82 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	8979      	ldrh	r1, [r7, #10]
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <HAL_I2C_Master_Receive+0x1e4>)
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fa43 	bl	8001f4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ac6:	e05c      	b.n	8001b82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	6a39      	ldr	r1, [r7, #32]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f96b 	bl	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e07c      	b.n	8001bd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d034      	beq.n	8001b82 <HAL_I2C_Master_Receive+0x186>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d130      	bne.n	8001b82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	2200      	movs	r2, #0
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f880 	bl	8001c30 <I2C_WaitOnFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e04d      	b.n	8001bd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2bff      	cmp	r3, #255	; 0xff
 8001b42:	d90e      	bls.n	8001b62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	22ff      	movs	r2, #255	; 0xff
 8001b48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	8979      	ldrh	r1, [r7, #10]
 8001b52:	2300      	movs	r3, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f9f6 	bl	8001f4c <I2C_TransferConfig>
 8001b60:	e00f      	b.n	8001b82 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	8979      	ldrh	r1, [r7, #10]
 8001b74:	2300      	movs	r3, #0
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f9e5 	bl	8001f4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d19d      	bne.n	8001ac8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	6a39      	ldr	r1, [r7, #32]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f8cd 	bl	8001d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e01a      	b.n	8001bd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6859      	ldr	r1, [r3, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_I2C_Master_Receive+0x1e8>)
 8001bb4:	400b      	ands	r3, r1
 8001bb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	80002400 	.word	0x80002400
 8001be4:	fe00e800 	.word	0xfe00e800

08001be8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d103      	bne.n	8001c06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d007      	beq.n	8001c24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	619a      	str	r2, [r3, #24]
  }
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c40:	e022      	b.n	8001c88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d01e      	beq.n	8001c88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4a:	f7ff fa57 	bl	80010fc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d302      	bcc.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d113      	bne.n	8001c88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e00f      	b.n	8001ca8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4013      	ands	r3, r2
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d0cd      	beq.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cbc:	e02c      	b.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f8dc 	bl	8001e80 <I2C_IsAcknowledgeFailed>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e02a      	b.n	8001d28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d01e      	beq.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cda:	f7ff fa0f 	bl	80010fc <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d302      	bcc.n	8001cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d113      	bne.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e007      	b.n	8001d28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d1cb      	bne.n	8001cbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d3c:	e028      	b.n	8001d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f89c 	bl	8001e80 <I2C_IsAcknowledgeFailed>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e026      	b.n	8001da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d52:	f7ff f9d3 	bl	80010fc <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d113      	bne.n	8001d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e007      	b.n	8001da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d1cf      	bne.n	8001d3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001db4:	e055      	b.n	8001e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f860 	bl	8001e80 <I2C_IsAcknowledgeFailed>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e053      	b.n	8001e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d129      	bne.n	8001e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d105      	bne.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e03f      	b.n	8001e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2220      	movs	r2, #32
 8001df8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001e06:	400b      	ands	r3, r1
 8001e08:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e022      	b.n	8001e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2c:	f7ff f966 	bl	80010fc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d302      	bcc.n	8001e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f043 0220 	orr.w	r2, r3, #32
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e007      	b.n	8001e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d1a2      	bne.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	fe00e800 	.word	0xfe00e800

08001e80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d151      	bne.n	8001f3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e9a:	e022      	b.n	8001ee2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d01e      	beq.n	8001ee2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea4:	f7ff f92a 	bl	80010fc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d302      	bcc.n	8001eba <I2C_IsAcknowledgeFailed+0x3a>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d113      	bne.n	8001ee2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e02e      	b.n	8001f40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d1d5      	bne.n	8001e9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2220      	movs	r2, #32
 8001efe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff fe71 	bl	8001be8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <I2C_IsAcknowledgeFailed+0xc8>)
 8001f12:	400b      	ands	r3, r1
 8001f14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f043 0204 	orr.w	r2, r3, #4
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	fe00e800 	.word	0xfe00e800

08001f4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	817b      	strh	r3, [r7, #10]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <I2C_TransferConfig+0x58>)
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	43db      	mvns	r3, r3
 8001f72:	ea02 0103 	and.w	r1, r2, r3
 8001f76:	897b      	ldrh	r3, [r7, #10]
 8001f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f7c:	7a7b      	ldrb	r3, [r7, #9]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	03ff63ff 	.word	0x03ff63ff

08001fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d138      	bne.n	8002030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e032      	b.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b20      	cmp	r3, #32
 8002052:	d139      	bne.n	80020c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800205e:	2302      	movs	r3, #2
 8002060:	e033      	b.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2224      	movs	r2, #36	; 0x24
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e000      	b.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d00a      	beq.n	8002102 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e040      	b.n	8002180 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e03e      	b.n	8002180 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800210a:	491f      	ldr	r1, [pc, #124]	; (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002112:	f7fe fff3 	bl	80010fc <HAL_GetTick>
 8002116:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002118:	e009      	b.n	800212e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800211a:	f7fe ffef 	bl	80010fc <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002128:	d901      	bls.n	800212e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e028      	b.n	8002180 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213a:	d1ee      	bne.n	800211a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b1e      	cmp	r3, #30
 8002140:	d008      	beq.n	8002154 <HAL_PWREx_ConfigSupply+0x7c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b2e      	cmp	r3, #46	; 0x2e
 8002146:	d005      	beq.n	8002154 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b1d      	cmp	r3, #29
 800214c:	d002      	beq.n	8002154 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b2d      	cmp	r3, #45	; 0x2d
 8002152:	d114      	bne.n	800217e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002154:	f7fe ffd2 	bl	80010fc <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800215a:	e009      	b.n	8002170 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800215c:	f7fe ffce 	bl	80010fc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800216a:	d901      	bls.n	8002170 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e007      	b.n	8002180 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d1ee      	bne.n	800215c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	58024800 	.word	0x58024800

0800218c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	; 0x30
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e3c4      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8087 	beq.w	80022ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ac:	4ba2      	ldr	r3, [pc, #648]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021b6:	4ba0      	ldr	r3, [pc, #640]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d007      	beq.n	80021d2 <HAL_RCC_OscConfig+0x46>
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	2b18      	cmp	r3, #24
 80021c6:	d110      	bne.n	80021ea <HAL_RCC_OscConfig+0x5e>
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d10b      	bne.n	80021ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	4b99      	ldr	r3, [pc, #612]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d06c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x12c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d168      	bne.n	80022b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e39e      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x76>
 80021f4:	4b90      	ldr	r3, [pc, #576]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a8f      	ldr	r2, [pc, #572]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e02e      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x98>
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a8a      	ldr	r2, [pc, #552]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a87      	ldr	r2, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e01d      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0xbc>
 800222e:	4b82      	ldr	r3, [pc, #520]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a81      	ldr	r2, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7e      	ldr	r2, [pc, #504]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002248:	4b7b      	ldr	r3, [pc, #492]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a7a      	ldr	r2, [pc, #488]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b78      	ldr	r3, [pc, #480]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a77      	ldr	r2, [pc, #476]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe ff48 	bl	80010fc <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe ff44 	bl	80010fc <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e352      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002282:	4b6d      	ldr	r3, [pc, #436]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0xe4>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe ff34 	bl	80010fc <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe ff30 	bl	80010fc <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e33e      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x10c>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8092 	beq.w	80023ec <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c8:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d2:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_RCC_OscConfig+0x162>
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	2b18      	cmp	r3, #24
 80022e2:	d12d      	bne.n	8002340 <HAL_RCC_OscConfig+0x1b4>
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d128      	bne.n	8002340 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ee:	4b52      	ldr	r3, [pc, #328]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_RCC_OscConfig+0x17a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e310      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	f7fe ff27 	bl	8001158 <HAL_GetREVID>
 800230a:	4602      	mov	r2, r0
 800230c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002310:	429a      	cmp	r2, r3
 8002312:	d80a      	bhi.n	800232a <HAL_RCC_OscConfig+0x19e>
 8002314:	4b48      	ldr	r3, [pc, #288]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	031b      	lsls	r3, r3, #12
 8002322:	4945      	ldr	r1, [pc, #276]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002328:	e060      	b.n	80023ec <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	493f      	ldr	r1, [pc, #252]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233e:	e055      	b.n	80023ec <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d038      	beq.n	80023ba <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002348:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 0219 	bic.w	r2, r3, #25
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4938      	ldr	r1, [pc, #224]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fecf 	bl	80010fc <HAL_GetTick>
 800235e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002362:	f7fe fecb 	bl	80010fc <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e2d9      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002374:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002380:	f7fe feea 	bl	8001158 <HAL_GetREVID>
 8002384:	4602      	mov	r2, r0
 8002386:	f241 0303 	movw	r3, #4099	; 0x1003
 800238a:	429a      	cmp	r2, r3
 800238c:	d80a      	bhi.n	80023a4 <HAL_RCC_OscConfig+0x218>
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	031b      	lsls	r3, r3, #12
 800239c:	4926      	ldr	r1, [pc, #152]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
 80023a2:	e023      	b.n	80023ec <HAL_RCC_OscConfig+0x260>
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	4921      	ldr	r1, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e018      	b.n	80023ec <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fe99 	bl	80010fc <HAL_GetTick>
 80023ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ce:	f7fe fe95 	bl	80010fc <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e2a3      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8091 	beq.w	800251c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002402:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d007      	beq.n	8002420 <HAL_RCC_OscConfig+0x294>
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b18      	cmp	r3, #24
 8002414:	d12f      	bne.n	8002476 <HAL_RCC_OscConfig+0x2ea>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d12a      	bne.n	8002476 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_OscConfig+0x2ac>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_RCC_OscConfig+0x2b0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b80      	cmp	r3, #128	; 0x80
 8002432:	d003      	beq.n	800243c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e277      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
 8002438:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800243c:	f7fe fe8c 	bl	8001158 <HAL_GetREVID>
 8002440:	4602      	mov	r2, r0
 8002442:	f241 0303 	movw	r3, #4099	; 0x1003
 8002446:	429a      	cmp	r2, r3
 8002448:	d80a      	bhi.n	8002460 <HAL_RCC_OscConfig+0x2d4>
 800244a:	4ba2      	ldr	r3, [pc, #648]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	069b      	lsls	r3, r3, #26
 8002458:	499e      	ldr	r1, [pc, #632]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800245e:	e05d      	b.n	800251c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002460:	4b9c      	ldr	r3, [pc, #624]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	4999      	ldr	r1, [pc, #612]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002470:	4313      	orrs	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002474:	e052      	b.n	800251c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d035      	beq.n	80024ea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800247e:	4b95      	ldr	r3, [pc, #596]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a94      	ldr	r2, [pc, #592]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fe37 	bl	80010fc <HAL_GetTick>
 800248e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002492:	f7fe fe33 	bl	80010fc <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e241      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024a4:	4b8b      	ldr	r3, [pc, #556]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024b0:	f7fe fe52 	bl	8001158 <HAL_GetREVID>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d80a      	bhi.n	80024d4 <HAL_RCC_OscConfig+0x348>
 80024be:	4b85      	ldr	r3, [pc, #532]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	069b      	lsls	r3, r3, #26
 80024cc:	4981      	ldr	r1, [pc, #516]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
 80024d2:	e023      	b.n	800251c <HAL_RCC_OscConfig+0x390>
 80024d4:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	497c      	ldr	r1, [pc, #496]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
 80024e8:	e018      	b.n	800251c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024ea:	4b7a      	ldr	r3, [pc, #488]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a79      	ldr	r2, [pc, #484]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80024f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fe01 	bl	80010fc <HAL_GetTick>
 80024fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024fe:	f7fe fdfd 	bl	80010fc <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e20b      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002510:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d036      	beq.n	8002596 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d019      	beq.n	8002564 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002530:	4b68      	ldr	r3, [pc, #416]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002534:	4a67      	ldr	r2, [pc, #412]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fdde 	bl	80010fc <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe fdda 	bl	80010fc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1e8      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002556:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x3b8>
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002564:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002568:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fdc4 	bl	80010fc <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fdc0 	bl	80010fc <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1ce      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800258a:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d036      	beq.n	8002610 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d019      	beq.n	80025de <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025aa:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80025b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025b6:	f7fe fda1 	bl	80010fc <HAL_GetTick>
 80025ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025be:	f7fe fd9d 	bl	80010fc <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1ab      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025d0:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x432>
 80025dc:	e018      	b.n	8002610 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a3c      	ldr	r2, [pc, #240]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80025e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fd87 	bl	80010fc <HAL_GetTick>
 80025ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025f2:	f7fe fd83 	bl	80010fc <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e191      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002604:	4b33      	ldr	r3, [pc, #204]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8086 	beq.w	800272a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_RCC_OscConfig+0x54c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <HAL_RCC_OscConfig+0x54c>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800262a:	f7fe fd67 	bl	80010fc <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe fd63 	bl	80010fc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e171      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002644:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0x54c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x4da>
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	e02d      	b.n	80026c2 <HAL_RCC_OscConfig+0x536>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x4fc>
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	e01c      	b.n	80026c2 <HAL_RCC_OscConfig+0x536>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x51e>
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0x536>
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_RCC_OscConfig+0x548>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01a      	beq.n	8002700 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7fe fd17 	bl	80010fc <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d0:	e00f      	b.n	80026f2 <HAL_RCC_OscConfig+0x566>
 80026d2:	bf00      	nop
 80026d4:	58024400 	.word	0x58024400
 80026d8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fd0e 	bl	80010fc <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e11a      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026f2:	4b8f      	ldr	r3, [pc, #572]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0ee      	beq.n	80026dc <HAL_RCC_OscConfig+0x550>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fcfc 	bl	80010fc <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fcf8 	bl	80010fc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e104      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800271e:	4b84      	ldr	r3, [pc, #528]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1ee      	bne.n	8002708 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80f9 	beq.w	8002926 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002734:	4b7e      	ldr	r3, [pc, #504]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800273c:	2b18      	cmp	r3, #24
 800273e:	f000 80b4 	beq.w	80028aa <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b02      	cmp	r3, #2
 8002748:	f040 8095 	bne.w	8002876 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b78      	ldr	r3, [pc, #480]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a77      	ldr	r2, [pc, #476]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fcd0 	bl	80010fc <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fccc 	bl	80010fc <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0da      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002772:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277e:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002782:	4b6c      	ldr	r3, [pc, #432]	; (8002934 <HAL_RCC_OscConfig+0x7a8>)
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	430a      	orrs	r2, r1
 8002792:	4967      	ldr	r1, [pc, #412]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	628b      	str	r3, [r1, #40]	; 0x28
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	3b01      	subs	r3, #1
 800279e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a6:	3b01      	subs	r3, #1
 80027a8:	025b      	lsls	r3, r3, #9
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	3b01      	subs	r3, #1
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	3b01      	subs	r3, #1
 80027c2:	061b      	lsls	r3, r3, #24
 80027c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027c8:	4959      	ldr	r1, [pc, #356]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80027ce:	4b58      	ldr	r3, [pc, #352]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	4a57      	ldr	r2, [pc, #348]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027da:	4b55      	ldr	r3, [pc, #340]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80027dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027de:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_RCC_OscConfig+0x7ac>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027e6:	00d2      	lsls	r2, r2, #3
 80027e8:	4951      	ldr	r1, [pc, #324]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027ee:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f023 020c 	bic.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002800:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	f023 0202 	bic.w	r2, r3, #2
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	4948      	ldr	r1, [pc, #288]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	4a46      	ldr	r2, [pc, #280]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800281e:	4b44      	ldr	r3, [pc, #272]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	4a43      	ldr	r2, [pc, #268]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	4a40      	ldr	r2, [pc, #256]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002836:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	4a3d      	ldr	r2, [pc, #244]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002842:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fc55 	bl	80010fc <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe fc51 	bl	80010fc <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e05f      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x6ca>
 8002874:	e057      	b.n	8002926 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2d      	ldr	r2, [pc, #180]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 800287c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fc3b 	bl	80010fc <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fc37 	bl	80010fc <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e045      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x6fe>
 80028a8:	e03d      	b.n	8002926 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028aa:	4b21      	ldr	r3, [pc, #132]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028b0:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_RCC_OscConfig+0x7a4>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d031      	beq.n	8002922 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d12a      	bne.n	8002922 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d122      	bne.n	8002922 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d11a      	bne.n	8002922 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d111      	bne.n	8002922 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d108      	bne.n	8002922 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	0e1b      	lsrs	r3, r3, #24
 8002914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3730      	adds	r7, #48	; 0x30
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	58024400 	.word	0x58024400
 8002934:	fffffc0c 	.word	0xfffffc0c
 8002938:	ffff0007 	.word	0xffff0007

0800293c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e19c      	b.n	8002c8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d910      	bls.n	8002980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b87      	ldr	r3, [pc, #540]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 020f 	bic.w	r2, r3, #15
 8002966:	4985      	ldr	r1, [pc, #532]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b83      	ldr	r3, [pc, #524]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e184      	b.n	8002c8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	4b7b      	ldr	r3, [pc, #492]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002998:	429a      	cmp	r2, r3
 800299a:	d908      	bls.n	80029ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800299c:	4b78      	ldr	r3, [pc, #480]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	4975      	ldr	r1, [pc, #468]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	4b70      	ldr	r3, [pc, #448]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d908      	bls.n	80029dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029ca:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	496a      	ldr	r1, [pc, #424]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d010      	beq.n	8002a0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d908      	bls.n	8002a0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029f8:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	495e      	ldr	r1, [pc, #376]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d908      	bls.n	8002a38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a26:	4b56      	ldr	r3, [pc, #344]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4953      	ldr	r1, [pc, #332]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d010      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	4b4d      	ldr	r3, [pc, #308]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d908      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f023 020f 	bic.w	r2, r3, #15
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4947      	ldr	r1, [pc, #284]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d055      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a72:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4940      	ldr	r1, [pc, #256]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d121      	bne.n	8002adc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0f6      	b.n	8002c8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d115      	bne.n	8002adc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0ea      	b.n	8002c8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0de      	b.n	8002c8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002acc:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0d6      	b.n	8002c8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f023 0207 	bic.w	r2, r3, #7
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4925      	ldr	r1, [pc, #148]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7fe fb05 	bl	80010fc <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af6:	f7fe fb01 	bl	80010fc <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0be      	b.n	8002c8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d1eb      	bne.n	8002af6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d208      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f023 020f 	bic.w	r2, r3, #15
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	490e      	ldr	r1, [pc, #56]	; (8002b80 <HAL_RCC_ClockConfig+0x244>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d214      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 020f 	bic.w	r2, r3, #15
 8002b62:	4906      	ldr	r1, [pc, #24]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <HAL_RCC_ClockConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e086      	b.n	8002c8a <HAL_RCC_ClockConfig+0x34e>
 8002b7c:	52002000 	.word	0x52002000
 8002b80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d208      	bcs.n	8002bb2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ba0:	4b3c      	ldr	r3, [pc, #240]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4939      	ldr	r1, [pc, #228]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d208      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bce:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	492e      	ldr	r1, [pc, #184]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d208      	bcs.n	8002c0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	4922      	ldr	r1, [pc, #136]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d010      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d208      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4917      	ldr	r1, [pc, #92]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c3c:	f000 f89e 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002c40:	4601      	mov	r1, r0
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_RCC_ClockConfig+0x35c>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa21 f303 	lsr.w	r3, r1, r3
 8002c58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_RCC_ClockConfig+0x358>)
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <HAL_RCC_ClockConfig+0x35c>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x360>)
 8002c72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c74:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x364>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_ClockConfig+0x368>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe f9f2 	bl	8001068 <HAL_InitTick>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	58024400 	.word	0x58024400
 8002c98:	080079ec 	.word	0x080079ec
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000008 	.word	0x20000008

08002ca8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d12a      	bne.n	8002d10 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	481f      	ldr	r0, [pc, #124]	; (8002d74 <HAL_RCC_MCOConfig+0xcc>)
 8002cf6:	f7fe fb1f 	bl	8001338 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	430b      	orrs	r3, r1
 8002d08:	4919      	ldr	r1, [pc, #100]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002d0e:	e02a      	b.n	8002d66 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	4619      	mov	r1, r3
 8002d4a:	480b      	ldr	r0, [pc, #44]	; (8002d78 <HAL_RCC_MCOConfig+0xd0>)
 8002d4c:	f7fe faf4 	bl	8001338 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	01d9      	lsls	r1, r3, #7
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	4903      	ldr	r1, [pc, #12]	; (8002d70 <HAL_RCC_MCOConfig+0xc8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	610b      	str	r3, [r1, #16]
}
 8002d66:	bf00      	nop
 8002d68:	3730      	adds	r7, #48	; 0x30
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	58024400 	.word	0x58024400
 8002d74:	58020000 	.word	0x58020000
 8002d78:	58020800 	.word	0x58020800

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d82:	4baf      	ldr	r3, [pc, #700]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d8a:	2b18      	cmp	r3, #24
 8002d8c:	f200 814e 	bhi.w	800302c <HAL_RCC_GetSysClockFreq+0x2b0>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dfd 	.word	0x08002dfd
 8002d9c:	0800302d 	.word	0x0800302d
 8002da0:	0800302d 	.word	0x0800302d
 8002da4:	0800302d 	.word	0x0800302d
 8002da8:	0800302d 	.word	0x0800302d
 8002dac:	0800302d 	.word	0x0800302d
 8002db0:	0800302d 	.word	0x0800302d
 8002db4:	0800302d 	.word	0x0800302d
 8002db8:	08002e23 	.word	0x08002e23
 8002dbc:	0800302d 	.word	0x0800302d
 8002dc0:	0800302d 	.word	0x0800302d
 8002dc4:	0800302d 	.word	0x0800302d
 8002dc8:	0800302d 	.word	0x0800302d
 8002dcc:	0800302d 	.word	0x0800302d
 8002dd0:	0800302d 	.word	0x0800302d
 8002dd4:	0800302d 	.word	0x0800302d
 8002dd8:	08002e29 	.word	0x08002e29
 8002ddc:	0800302d 	.word	0x0800302d
 8002de0:	0800302d 	.word	0x0800302d
 8002de4:	0800302d 	.word	0x0800302d
 8002de8:	0800302d 	.word	0x0800302d
 8002dec:	0800302d 	.word	0x0800302d
 8002df0:	0800302d 	.word	0x0800302d
 8002df4:	0800302d 	.word	0x0800302d
 8002df8:	08002e2f 	.word	0x08002e2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dfc:	4b90      	ldr	r3, [pc, #576]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e08:	4b8d      	ldr	r3, [pc, #564]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	4a8c      	ldr	r2, [pc, #560]	; (8003044 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002e1a:	e10a      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e1c:	4b89      	ldr	r3, [pc, #548]	; (8003044 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002e1e:	61bb      	str	r3, [r7, #24]
    break;
 8002e20:	e107      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e22:	4b89      	ldr	r3, [pc, #548]	; (8003048 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002e24:	61bb      	str	r3, [r7, #24]
    break;
 8002e26:	e104      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e28:	4b88      	ldr	r3, [pc, #544]	; (800304c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002e2a:	61bb      	str	r3, [r7, #24]
    break;
 8002e2c:	e101      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e2e:	4b84      	ldr	r3, [pc, #528]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e38:	4b81      	ldr	r3, [pc, #516]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e44:	4b7e      	ldr	r3, [pc, #504]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e4e:	4b7c      	ldr	r3, [pc, #496]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	08db      	lsrs	r3, r3, #3
 8002e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80da 	beq.w	8003026 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d05a      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1b2>
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d302      	bcc.n	8002e82 <HAL_RCC_GetSysClockFreq+0x106>
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d078      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002e80:	e099      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e82:	4b6f      	ldr	r3, [pc, #444]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d02d      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e8e:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	4a6a      	ldr	r2, [pc, #424]	; (8003044 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eb8:	4b61      	ldr	r3, [pc, #388]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ec8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ecc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002ee8:	e087      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	ee07 3a90 	vmov	s15, r3
 8002ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003054 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f10:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f2c:	e065      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f38:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003058 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f40:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f50:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f54:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f70:	e043      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800305c <HAL_RCC_GetSysClockFreq+0x2e0>
 8002f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f84:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	ee07 3a90 	vmov	s15, r3
 8002f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f94:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f98:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fb4:	e021      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003058 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fdc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003050 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fe8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ff8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	0a5b      	lsrs	r3, r3, #9
 8003000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003004:	3301      	adds	r3, #1
 8003006:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003012:	edd7 6a07 	vldr	s13, [r7, #28]
 8003016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800301e:	ee17 3a90 	vmov	r3, s15
 8003022:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003024:	e005      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
    break;
 800302a:	e002      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800302e:	61bb      	str	r3, [r7, #24]
    break;
 8003030:	bf00      	nop
  }

  return sysclockfreq;
 8003032:	69bb      	ldr	r3, [r7, #24]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3724      	adds	r7, #36	; 0x24
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	58024400 	.word	0x58024400
 8003044:	03d09000 	.word	0x03d09000
 8003048:	003d0900 	.word	0x003d0900
 800304c:	017d7840 	.word	0x017d7840
 8003050:	46000000 	.word	0x46000000
 8003054:	4c742400 	.word	0x4c742400
 8003058:	4a742400 	.word	0x4a742400
 800305c:	4bbebc20 	.word	0x4bbebc20

08003060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003066:	f7ff fe89 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 800306a:	4601      	mov	r1, r0
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a0f      	ldr	r2, [pc, #60]	; (80030b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	fa21 f303 	lsr.w	r3, r1, r3
 8003082:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800308e:	5cd3      	ldrb	r3, [r2, r3]
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800309c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800309e:	4a07      	ldr	r2, [pc, #28]	; (80030bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	58024400 	.word	0x58024400
 80030b4:	080079ec 	.word	0x080079ec
 80030b8:	20000004 	.word	0x20000004
 80030bc:	20000000 	.word	0x20000000

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80030c4:	f7ff ffcc 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 80030c8:	4601      	mov	r1, r0
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	58024400 	.word	0x58024400
 80030e8:	080079ec 	.word	0x080079ec

080030ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030f0:	f7ff ffb6 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 80030f4:	4601      	mov	r1, r0
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd80      	pop	{r7, pc}
 8003110:	58024400 	.word	0x58024400
 8003114:	080079ec 	.word	0x080079ec

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003124:	2300      	movs	r3, #0
 8003126:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d03d      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313c:	d013      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800313e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003142:	d802      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003148:	e01f      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800314a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800314e:	d013      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003150:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003154:	d01c      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003156:	e018      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003158:	4baf      	ldr	r3, [pc, #700]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	4aae      	ldr	r2, [pc, #696]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800315e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003164:	e015      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	2102      	movs	r1, #2
 800316c:	4618      	mov	r0, r3
 800316e:	f001 f98b 	bl	8004488 <RCCEx_PLL2_Config>
 8003172:	4603      	mov	r3, r0
 8003174:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003176:	e00c      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3324      	adds	r3, #36	; 0x24
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f001 fa34 	bl	80045ec <RCCEx_PLL3_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003188:	e003      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
      break;
 800318e:	e000      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003198:	4b9f      	ldr	r3, [pc, #636]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a4:	499c      	ldr	r1, [pc, #624]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	650b      	str	r3, [r1, #80]	; 0x50
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d03d      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d826      	bhi.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	080031e1 	.word	0x080031e1
 80031d0:	080031ef 	.word	0x080031ef
 80031d4:	08003201 	.word	0x08003201
 80031d8:	08003219 	.word	0x08003219
 80031dc:	08003219 	.word	0x08003219
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e0:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	4a8c      	ldr	r2, [pc, #560]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80031e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031ec:	e015      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 f947 	bl	8004488 <RCCEx_PLL2_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031fe:	e00c      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3324      	adds	r3, #36	; 0x24
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f9f0 	bl	80045ec <RCCEx_PLL3_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
      break;
 8003216:	e000      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003220:	4b7d      	ldr	r3, [pc, #500]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003224:	f023 0207 	bic.w	r2, r3, #7
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	497a      	ldr	r1, [pc, #488]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800322e:	4313      	orrs	r3, r2
 8003230:	650b      	str	r3, [r1, #80]	; 0x50
 8003232:	e001      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03e      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d01c      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800324c:	2b80      	cmp	r3, #128	; 0x80
 800324e:	d804      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d00d      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003258:	e01e      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800325a:	2bc0      	cmp	r3, #192	; 0xc0
 800325c:	d01f      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d01e      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003264:	e018      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003266:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800326c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003270:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003272:	e017      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3304      	adds	r3, #4
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f001 f904 	bl	8004488 <RCCEx_PLL2_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003284:	e00e      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3324      	adds	r3, #36	; 0x24
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f001 f9ad 	bl	80045ec <RCCEx_PLL3_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003296:	e005      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
      break;
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80032a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032aa:	4b5b      	ldr	r3, [pc, #364]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80032ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	4958      	ldr	r1, [pc, #352]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	650b      	str	r3, [r1, #80]	; 0x50
 80032bc:	e001      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d044      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d8:	d01f      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d805      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80032e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e8:	d00e      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80032ea:	e01f      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80032ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032f0:	d01f      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80032f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f6:	d01e      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80032f8:	e018      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	4a46      	ldr	r2, [pc, #280]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003306:	e017      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f8ba 	bl	8004488 <RCCEx_PLL2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003318:	e00e      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3324      	adds	r3, #36	; 0x24
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f001 f963 	bl	80045ec <RCCEx_PLL3_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800332a:	e005      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	75fb      	strb	r3, [r7, #23]
      break;
 8003330:	e002      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800333e:	4b36      	ldr	r3, [pc, #216]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800334c:	4932      	ldr	r1, [pc, #200]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800334e:	4313      	orrs	r3, r2
 8003350:	658b      	str	r3, [r1, #88]	; 0x58
 8003352:	e001      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003360:	2b00      	cmp	r3, #0
 8003362:	d044      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800336a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336e:	d01f      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003374:	d805      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800337a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800337e:	d00e      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003380:	e01f      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003382:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003386:	d01f      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800338c:	d01e      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800338e:	e018      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	4a20      	ldr	r2, [pc, #128]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800339c:	e017      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 f86f 	bl	8004488 <RCCEx_PLL2_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033ae:	e00e      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3324      	adds	r3, #36	; 0x24
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 f918 	bl	80045ec <RCCEx_PLL3_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033c0:	e005      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80033cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033e2:	490d      	ldr	r1, [pc, #52]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	658b      	str	r3, [r1, #88]	; 0x58
 80033e8:	e001      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d035      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d00c      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003402:	2b10      	cmp	r3, #16
 8003404:	d802      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01b      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800340a:	e017      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d00c      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003410:	2b30      	cmp	r3, #48	; 0x30
 8003412:	d018      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003414:	e012      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003416:	bf00      	nop
 8003418:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341c:	4bae      	ldr	r3, [pc, #696]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	4aad      	ldr	r2, [pc, #692]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003428:	e00e      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2102      	movs	r1, #2
 8003430:	4618      	mov	r0, r3
 8003432:	f001 f829 	bl	8004488 <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800343a:	e005      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	75fb      	strb	r3, [r7, #23]
      break;
 8003440:	e002      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800344e:	4ba2      	ldr	r3, [pc, #648]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345a:	499f      	ldr	r1, [pc, #636]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800345c:	4313      	orrs	r3, r2
 800345e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003460:	e001      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d042      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347a:	d01f      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800347c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003480:	d805      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348a:	d00e      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x392>
 800348c:	e01f      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800348e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003492:	d01f      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003498:	d01e      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800349a:	e018      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800349c:	4b8e      	ldr	r3, [pc, #568]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	4a8d      	ldr	r2, [pc, #564]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80034a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034a8:	e017      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 ffe9 	bl	8004488 <RCCEx_PLL2_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034ba:	e00e      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3324      	adds	r3, #36	; 0x24
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f892 	bl	80045ec <RCCEx_PLL3_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034cc:	e005      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
      break;
 80034d2:	e002      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80034d4:	bf00      	nop
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80034d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034e0:	4b7d      	ldr	r3, [pc, #500]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ec:	497a      	ldr	r1, [pc, #488]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	650b      	str	r3, [r1, #80]	; 0x50
 80034f2:	e001      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d042      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800350c:	d01b      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800350e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003512:	d805      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d022      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800351e:	e01b      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003520:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003524:	d01d      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352a:	d01c      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800352c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003530:	d01b      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003532:	e011      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	2101      	movs	r1, #1
 800353a:	4618      	mov	r0, r3
 800353c:	f000 ffa4 	bl	8004488 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003544:	e012      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3324      	adds	r3, #36	; 0x24
 800354a:	2101      	movs	r1, #1
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f84d 	bl	80045ec <RCCEx_PLL3_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003556:	e009      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
      break;
 800355c:	e006      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800355e:	bf00      	nop
 8003560:	e004      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800356a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003572:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357e:	4956      	ldr	r1, [pc, #344]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	650b      	str	r3, [r1, #80]	; 0x50
 8003584:	e001      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d044      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800359c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a0:	d01b      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80035a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035a6:	d805      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d022      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80035ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80035b2:	e01b      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d01d      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80035ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035be:	d01c      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80035c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035c4:	d01b      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035c6:	e011      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	2101      	movs	r1, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 ff5a 	bl	8004488 <RCCEx_PLL2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035d8:	e012      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3324      	adds	r3, #36	; 0x24
 80035de:	2101      	movs	r1, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 f803 	bl	80045ec <RCCEx_PLL3_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035ea:	e009      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	75fb      	strb	r3, [r7, #23]
      break;
 80035f0:	e006      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80035f2:	bf00      	nop
 80035f4:	e004      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80035f6:	bf00      	nop
 80035f8:	e002      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80035fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003606:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003614:	4930      	ldr	r1, [pc, #192]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003616:	4313      	orrs	r3, r2
 8003618:	658b      	str	r3, [r1, #88]	; 0x58
 800361a:	e001      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d022      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8003634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003638:	d108      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f000 ff21 	bl	8004488 <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 800364a:	e003      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
      break;
 8003650:	e000      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 8003652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800365a:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	491c      	ldr	r1, [pc, #112]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800366c:	e001      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d030      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003686:	d005      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368c:	d009      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d013      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003692:	e00f      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800369a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036a0:	e00c      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 feed 	bl	8004488 <RCCEx_PLL2_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036b2:	e003      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
      break;
 80036b8:	e000      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 80036ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10c      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4902      	ldr	r1, [pc, #8]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	650b      	str	r3, [r1, #80]	; 0x50
 80036d4:	e004      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80036d6:	bf00      	nop
 80036d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d032      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d81b      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003733 	.word	0x08003733
 8003700:	0800370d 	.word	0x0800370d
 8003704:	0800371b 	.word	0x0800371b
 8003708:	08003733 	.word	0x08003733
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370c:	4bb8      	ldr	r3, [pc, #736]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4ab7      	ldr	r2, [pc, #732]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003718:	e00c      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f000 feb1 	bl	8004488 <RCCEx_PLL2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 8003732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800373a:	4bad      	ldr	r3, [pc, #692]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	f023 0203 	bic.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	49aa      	ldr	r1, [pc, #680]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800374c:	e001      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8086 	beq.w	800386c <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003760:	4ba4      	ldr	r3, [pc, #656]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4aa3      	ldr	r2, [pc, #652]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800376c:	f7fd fcc6 	bl	80010fc <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003772:	e009      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fd fcc2 	bl	80010fc <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d902      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	75fb      	strb	r3, [r7, #23]
        break;
 8003786:	e005      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003788:	4b9a      	ldr	r3, [pc, #616]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d166      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800379a:	4b95      	ldr	r3, [pc, #596]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800379c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037a4:	4053      	eors	r3, r2
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ae:	4b90      	ldr	r3, [pc, #576]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037b8:	4b8d      	ldr	r3, [pc, #564]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a8c      	ldr	r2, [pc, #560]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037c4:	4b8a      	ldr	r3, [pc, #552]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a89      	ldr	r2, [pc, #548]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037d0:	4a87      	ldr	r2, [pc, #540]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e0:	d115      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7fd fc8b 	bl	80010fc <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e8:	e00b      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fd fc87 	bl	80010fc <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d902      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	75fb      	strb	r3, [r7, #23]
            break;
 8003800:	e005      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003802:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ed      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d126      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003822:	d10d      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003824:	4b72      	ldr	r3, [pc, #456]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003832:	0919      	lsrs	r1, r3, #4
 8003834:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003836:	400b      	ands	r3, r1
 8003838:	496d      	ldr	r1, [pc, #436]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	610b      	str	r3, [r1, #16]
 800383e:	e005      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x734>
 8003840:	4b6b      	ldr	r3, [pc, #428]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4a6a      	ldr	r2, [pc, #424]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003846:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800384a:	6113      	str	r3, [r2, #16]
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800384e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385a:	4965      	ldr	r1, [pc, #404]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800385c:	4313      	orrs	r3, r2
 800385e:	670b      	str	r3, [r1, #112]	; 0x70
 8003860:	e004      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	75bb      	strb	r3, [r7, #22]
 8003866:	e001      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d07e      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800387c:	2b28      	cmp	r3, #40	; 0x28
 800387e:	d867      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003957 	.word	0x08003957
 800388c:	08003951 	.word	0x08003951
 8003890:	08003951 	.word	0x08003951
 8003894:	08003951 	.word	0x08003951
 8003898:	08003951 	.word	0x08003951
 800389c:	08003951 	.word	0x08003951
 80038a0:	08003951 	.word	0x08003951
 80038a4:	08003951 	.word	0x08003951
 80038a8:	0800392d 	.word	0x0800392d
 80038ac:	08003951 	.word	0x08003951
 80038b0:	08003951 	.word	0x08003951
 80038b4:	08003951 	.word	0x08003951
 80038b8:	08003951 	.word	0x08003951
 80038bc:	08003951 	.word	0x08003951
 80038c0:	08003951 	.word	0x08003951
 80038c4:	08003951 	.word	0x08003951
 80038c8:	0800393f 	.word	0x0800393f
 80038cc:	08003951 	.word	0x08003951
 80038d0:	08003951 	.word	0x08003951
 80038d4:	08003951 	.word	0x08003951
 80038d8:	08003951 	.word	0x08003951
 80038dc:	08003951 	.word	0x08003951
 80038e0:	08003951 	.word	0x08003951
 80038e4:	08003951 	.word	0x08003951
 80038e8:	08003957 	.word	0x08003957
 80038ec:	08003951 	.word	0x08003951
 80038f0:	08003951 	.word	0x08003951
 80038f4:	08003951 	.word	0x08003951
 80038f8:	08003951 	.word	0x08003951
 80038fc:	08003951 	.word	0x08003951
 8003900:	08003951 	.word	0x08003951
 8003904:	08003951 	.word	0x08003951
 8003908:	08003957 	.word	0x08003957
 800390c:	08003951 	.word	0x08003951
 8003910:	08003951 	.word	0x08003951
 8003914:	08003951 	.word	0x08003951
 8003918:	08003951 	.word	0x08003951
 800391c:	08003951 	.word	0x08003951
 8003920:	08003951 	.word	0x08003951
 8003924:	08003951 	.word	0x08003951
 8003928:	08003957 	.word	0x08003957
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fda8 	bl	8004488 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800393c:	e00c      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3324      	adds	r3, #36	; 0x24
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fe51 	bl	80045ec <RCCEx_PLL3_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800394e:	e003      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
      break;
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 8003956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800396a:	4921      	ldr	r1, [pc, #132]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	654b      	str	r3, [r1, #84]	; 0x54
 8003970:	e001      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d03e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003986:	2b05      	cmp	r3, #5
 8003988:	d820      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCCEx_PeriphCLKConfig+0x878>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039d3 	.word	0x080039d3
 8003994:	080039a9 	.word	0x080039a9
 8003998:	080039bb 	.word	0x080039bb
 800399c:	080039d3 	.word	0x080039d3
 80039a0:	080039d3 	.word	0x080039d3
 80039a4:	080039d3 	.word	0x080039d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fd6a 	bl	8004488 <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039b8:	e00c      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3324      	adds	r3, #36	; 0x24
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fe13 	bl	80045ec <RCCEx_PLL3_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039ca:	e003      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 80039d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d110      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e6:	4902      	ldr	r1, [pc, #8]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	654b      	str	r3, [r1, #84]	; 0x54
 80039ec:	e008      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400
 80039f4:	58024800 	.word	0x58024800
 80039f8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d039      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d820      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a5f 	.word	0x08003a5f
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a47 	.word	0x08003a47
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a5f 	.word	0x08003a5f
 8003a30:	08003a5f 	.word	0x08003a5f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fd24 	bl	8004488 <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a44:	e00c      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3324      	adds	r3, #36	; 0x24
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fdcd 	bl	80045ec <RCCEx_PLL3_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 8003a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a66:	4bb2      	ldr	r3, [pc, #712]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a74:	49ae      	ldr	r1, [pc, #696]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	658b      	str	r3, [r1, #88]	; 0x58
 8003a7a:	e001      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d044      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a96:	d01b      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8003a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a9c:	d805      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x992>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d022      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003aa8:	e01b      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d01d      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab4:	d01c      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8003ab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aba:	d01b      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8003abc:	e011      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fcdf 	bl	8004488 <RCCEx_PLL2_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ace:	e012      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3324      	adds	r3, #36	; 0x24
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fd88 	bl	80045ec <RCCEx_PLL3_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ae0:	e009      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae6:	e006      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003ae8:	bf00      	nop
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003aec:	bf00      	nop
 8003aee:	e002      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003af0:	bf00      	nop
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003afc:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	4989      	ldr	r1, [pc, #548]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	654b      	str	r3, [r1, #84]	; 0x54
 8003b10:	e001      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d044      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	d01b      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 8003b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b32:	d805      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d022      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8003b3e:	e01b      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b44:	d01d      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003b46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b4a:	d01c      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8003b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b50:	d01b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xa72>
 8003b52:	e011      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fc94 	bl	8004488 <RCCEx_PLL2_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b64:	e012      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3324      	adds	r3, #36	; 0x24
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fd3d 	bl	80045ec <RCCEx_PLL3_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b76:	e009      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e004      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8003b82:	bf00      	nop
 8003b84:	e002      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8003b86:	bf00      	nop
 8003b88:	e000      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8003b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b92:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ba0:	4963      	ldr	r1, [pc, #396]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ba6:	e001      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d044      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc2:	d01b      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8003bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc8:	d805      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d022      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003bd4:	e01b      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bda:	d01d      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8003bdc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003be0:	d01c      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8003be2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003be6:	d01b      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8003be8:	e011      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fc49 	bl	8004488 <RCCEx_PLL2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bfa:	e012      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3324      	adds	r3, #36	; 0x24
 8003c00:	2102      	movs	r1, #2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fcf2 	bl	80045ec <RCCEx_PLL3_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e009      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
      break;
 8003c12:	e006      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003c14:	bf00      	nop
 8003c16:	e004      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003c18:	bf00      	nop
 8003c1a:	e002      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003c1c:	bf00      	nop
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c28:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c36:	493e      	ldr	r1, [pc, #248]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003c3c:	e001      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d10a      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3324      	adds	r3, #36	; 0x24
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fcc3 	bl	80045ec <RCCEx_PLL3_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7e:	492c      	ldr	r1, [pc, #176]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3324      	adds	r3, #36	; 0x24
 8003ca0:	2102      	movs	r1, #2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fca2 	bl	80045ec <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cb2:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc0:	491b      	ldr	r1, [pc, #108]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d032      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cdc:	d00d      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8003cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce2:	d016      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d111      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fbca 	bl	8004488 <RCCEx_PLL2_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003cf8:	e00c      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3324      	adds	r3, #36	; 0x24
 8003cfe:	2102      	movs	r1, #2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fc73 	bl	80045ec <RCCEx_PLL3_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d0a:	e003      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d10:	e000      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 8003d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d28:	4901      	ldr	r1, [pc, #4]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d02f      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d4e:	d00c      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003d50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d54:	d015      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 8003d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5a:	d10f      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5c:	4b72      	ldr	r3, [pc, #456]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a71      	ldr	r2, [pc, #452]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d68:	e00c      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3324      	adds	r3, #36	; 0x24
 8003d6e:	2101      	movs	r1, #1
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fc3b 	bl	80045ec <RCCEx_PLL3_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d7a:	e003      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 8003d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8a:	4b67      	ldr	r3, [pc, #412]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	4963      	ldr	r1, [pc, #396]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	654b      	str	r3, [r1, #84]	; 0x54
 8003d9e:	e001      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d029      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d007      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 8003dbe:	e00f      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc0:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a58      	ldr	r2, [pc, #352]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dcc:	e00b      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fb57 	bl	8004488 <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dde:	e002      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
      break;
 8003de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003dec:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	494b      	ldr	r1, [pc, #300]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dfe:	e001      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3324      	adds	r3, #36	; 0x24
 8003e14:	2102      	movs	r1, #2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fbe8 	bl	80045ec <RCCEx_PLL3_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d031      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3c:	d00c      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e42:	d802      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xd32>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d011      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd54>
 8003e48:	e00d      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4e:	d00f      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8003e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e54:	d00e      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8003e56:	e006      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e58:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	4a32      	ldr	r2, [pc, #200]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e64:	e007      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003e6c:	bf00      	nop
 8003e6e:	e002      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8a:	4927      	ldr	r1, [pc, #156]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e90:	e001      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	491e      	ldr	r1, [pc, #120]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ec0:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ecc:	4916      	ldr	r1, [pc, #88]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00d      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xde2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ee8:	6113      	str	r3, [r2, #16]
 8003eea:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ef4:	490c      	ldr	r1, [pc, #48]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da08      	bge.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	4906      	ldr	r1, [pc, #24]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003f14:	7dbb      	ldrb	r3, [r7, #22]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  }
  return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	58024400 	.word	0x58024400

08003f2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f30:	f7ff f896 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 8003f34:	4601      	mov	r1, r0
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	58024400 	.word	0x58024400
 8003f54:	080079ec 	.word	0x080079ec

08003f58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	; 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f60:	4b9d      	ldr	r3, [pc, #628]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f6a:	4b9b      	ldr	r3, [pc, #620]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	0b1b      	lsrs	r3, r3, #12
 8003f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f76:	4b98      	ldr	r3, [pc, #608]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f82:	4b95      	ldr	r3, [pc, #596]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	08db      	lsrs	r3, r3, #3
 8003f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 810a 	beq.w	80041ba <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d05a      	beq.n	8004062 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d302      	bcc.n	8003fb6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d078      	beq.n	80040a6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003fb4:	e099      	b.n	80040ea <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fb6:	4b88      	ldr	r3, [pc, #544]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d02d      	beq.n	800401e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fc2:	4b85      	ldr	r3, [pc, #532]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	08db      	lsrs	r3, r3, #3
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	4a83      	ldr	r2, [pc, #524]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003fce:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	ee07 3a90 	vmov	s15, r3
 8003fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fec:	4b7a      	ldr	r3, [pc, #488]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004000:	eddf 5a77 	vldr	s11, [pc, #476]	; 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004018:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800401c:	e087      	b.n	800412e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	ee07 3a90 	vmov	s15, r3
 8004024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004028:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800402c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004030:	4b69      	ldr	r3, [pc, #420]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004040:	ed97 6a03 	vldr	s12, [r7, #12]
 8004044:	eddf 5a66 	vldr	s11, [pc, #408]	; 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004060:	e065      	b.n	800412e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004074:	4b58      	ldr	r3, [pc, #352]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004084:	ed97 6a03 	vldr	s12, [r7, #12]
 8004088:	eddf 5a55 	vldr	s11, [pc, #340]	; 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800408c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040a4:	e043      	b.n	800412e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80040b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b8:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80040cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80040d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040e8:	e021      	b.n	800412e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80040f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fc:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004110:	eddf 5a33 	vldr	s11, [pc, #204]	; 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004128:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800412c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800412e:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	0a5b      	lsrs	r3, r3, #9
 8004134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004144:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004148:	edd7 6a07 	vldr	s13, [r7, #28]
 800414c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004154:	ee17 2a90 	vmov	r2, s15
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800415c:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004176:	edd7 6a07 	vldr	s13, [r7, #28]
 800417a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004182:	ee17 2a90 	vmov	r2, s15
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	0e1b      	lsrs	r3, r3, #24
 8004190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b0:	ee17 2a90 	vmov	r2, s15
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041b8:	e008      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	3724      	adds	r7, #36	; 0x24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	58024400 	.word	0x58024400
 80041dc:	03d09000 	.word	0x03d09000
 80041e0:	46000000 	.word	0x46000000
 80041e4:	4c742400 	.word	0x4c742400
 80041e8:	4a742400 	.word	0x4a742400
 80041ec:	4bbebc20 	.word	0x4bbebc20

080041f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	; 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041f8:	4b9d      	ldr	r3, [pc, #628]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004202:	4b9b      	ldr	r3, [pc, #620]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	0d1b      	lsrs	r3, r3, #20
 8004208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800420c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800420e:	4b98      	ldr	r3, [pc, #608]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800421a:	4b95      	ldr	r3, [pc, #596]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	08db      	lsrs	r3, r3, #3
 8004220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 810a 	beq.w	8004452 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d05a      	beq.n	80042fa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004244:	2b01      	cmp	r3, #1
 8004246:	d302      	bcc.n	800424e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004248:	2b02      	cmp	r3, #2
 800424a:	d078      	beq.n	800433e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800424c:	e099      	b.n	8004382 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800424e:	4b88      	ldr	r3, [pc, #544]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02d      	beq.n	80042b6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800425a:	4b85      	ldr	r3, [pc, #532]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	08db      	lsrs	r3, r3, #3
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	4a83      	ldr	r2, [pc, #524]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004284:	4b7a      	ldr	r3, [pc, #488]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004294:	ed97 6a03 	vldr	s12, [r7, #12]
 8004298:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800429c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042b4:	e087      	b.n	80043c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	ee07 3a90 	vmov	s15, r3
 80042bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800447c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80042c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c8:	4b69      	ldr	r3, [pc, #420]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d0:	ee07 3a90 	vmov	s15, r3
 80042d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80042dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80042e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042f8:	e065      	b.n	80043c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	ee07 3a90 	vmov	s15, r3
 8004300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004304:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430c:	4b58      	ldr	r3, [pc, #352]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004320:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800433c:	e043      	b.n	80043c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004348:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800434c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004350:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004358:	ee07 3a90 	vmov	s15, r3
 800435c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004360:	ed97 6a03 	vldr	s12, [r7, #12]
 8004364:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004380:	e021      	b.n	80043c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	ee07 3a90 	vmov	s15, r3
 8004388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80043a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80043ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043c4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	0a5b      	lsrs	r3, r3, #9
 80043cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d0:	ee07 3a90 	vmov	s15, r3
 80043d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ec:	ee17 2a90 	vmov	r2, s15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80043f4:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800440a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800440e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441a:	ee17 2a90 	vmov	r2, s15
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	0e1b      	lsrs	r3, r3, #24
 8004428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800443c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004448:	ee17 2a90 	vmov	r2, s15
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004450:	e008      	b.n	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	3724      	adds	r7, #36	; 0x24
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	58024400 	.word	0x58024400
 8004474:	03d09000 	.word	0x03d09000
 8004478:	46000000 	.word	0x46000000
 800447c:	4c742400 	.word	0x4c742400
 8004480:	4a742400 	.word	0x4a742400
 8004484:	4bbebc20 	.word	0x4bbebc20

08004488 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004496:	4b53      	ldr	r3, [pc, #332]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d101      	bne.n	80044a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e099      	b.n	80045da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044a6:	4b4f      	ldr	r3, [pc, #316]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a4e      	ldr	r2, [pc, #312]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b2:	f7fc fe23 	bl	80010fc <HAL_GetTick>
 80044b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044b8:	e008      	b.n	80044cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044ba:	f7fc fe1f 	bl	80010fc <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e086      	b.n	80045da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044cc:	4b45      	ldr	r3, [pc, #276]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f0      	bne.n	80044ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044d8:	4b42      	ldr	r3, [pc, #264]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	493f      	ldr	r1, [pc, #252]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	628b      	str	r3, [r1, #40]	; 0x28
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	025b      	lsls	r3, r3, #9
 80044fe:	b29b      	uxth	r3, r3
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	3b01      	subs	r3, #1
 8004508:	041b      	lsls	r3, r3, #16
 800450a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	3b01      	subs	r3, #1
 8004516:	061b      	lsls	r3, r3, #24
 8004518:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800451c:	4931      	ldr	r1, [pc, #196]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004522:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	492d      	ldr	r1, [pc, #180]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004534:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	f023 0220 	bic.w	r2, r3, #32
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4928      	ldr	r1, [pc, #160]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004546:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 800454c:	f023 0310 	bic.w	r3, r3, #16
 8004550:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <RCCEx_PLL2_Config+0x160>)
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	69d2      	ldr	r2, [r2, #28]
 800455e:	00d2      	lsls	r2, r2, #3
 8004560:	4920      	ldr	r1, [pc, #128]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004566:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 800456c:	f043 0310 	orr.w	r3, r3, #16
 8004570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004578:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 800457e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004582:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004584:	e00f      	b.n	80045a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d106      	bne.n	800459a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 8004592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004598:	e005      	b.n	80045a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80045a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a0e      	ldr	r2, [pc, #56]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80045ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b2:	f7fc fda3 	bl	80010fc <HAL_GetTick>
 80045b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045b8:	e008      	b.n	80045cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045ba:	f7fc fd9f 	bl	80010fc <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e006      	b.n	80045da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	58024400 	.word	0x58024400
 80045e8:	ffff0007 	.word	0xffff0007

080045ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045fa:	4b53      	ldr	r3, [pc, #332]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b03      	cmp	r3, #3
 8004604:	d101      	bne.n	800460a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e099      	b.n	800473e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800460a:	4b4f      	ldr	r3, [pc, #316]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a4e      	ldr	r2, [pc, #312]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004616:	f7fc fd71 	bl	80010fc <HAL_GetTick>
 800461a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800461c:	e008      	b.n	8004630 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800461e:	f7fc fd6d 	bl	80010fc <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e086      	b.n	800473e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004630:	4b45      	ldr	r3, [pc, #276]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800463c:	4b42      	ldr	r3, [pc, #264]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	051b      	lsls	r3, r3, #20
 800464a:	493f      	ldr	r1, [pc, #252]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 800464c:	4313      	orrs	r3, r2
 800464e:	628b      	str	r3, [r1, #40]	; 0x28
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	3b01      	subs	r3, #1
 8004656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	3b01      	subs	r3, #1
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	b29b      	uxth	r3, r3
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	3b01      	subs	r3, #1
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	3b01      	subs	r3, #1
 800467a:	061b      	lsls	r3, r3, #24
 800467c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004680:	4931      	ldr	r1, [pc, #196]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004686:	4b30      	ldr	r3, [pc, #192]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	492d      	ldr	r1, [pc, #180]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004694:	4313      	orrs	r3, r2
 8004696:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004698:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	4928      	ldr	r1, [pc, #160]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	4a26      	ldr	r2, [pc, #152]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <RCCEx_PLL3_Config+0x160>)
 80046bc:	4013      	ands	r3, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	69d2      	ldr	r2, [r2, #28]
 80046c2:	00d2      	lsls	r2, r2, #3
 80046c4:	4920      	ldr	r1, [pc, #128]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046ca:	4b1f      	ldr	r3, [pc, #124]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	4a19      	ldr	r2, [pc, #100]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046e8:	e00f      	b.n	800470a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d106      	bne.n	80046fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046f0:	4b15      	ldr	r3, [pc, #84]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	4a14      	ldr	r2, [pc, #80]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 80046f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046fc:	e005      	b.n	800470a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4a11      	ldr	r2, [pc, #68]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800470a:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004716:	f7fc fcf1 	bl	80010fc <HAL_GetTick>
 800471a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800471c:	e008      	b.n	8004730 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800471e:	f7fc fced 	bl	80010fc <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e006      	b.n	800473e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <RCCEx_PLL3_Config+0x15c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400
 800474c:	ffff0007 	.word	0xffff0007

08004750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e042      	b.n	80047e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fc fb6d 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2224      	movs	r2, #36	; 0x24
 800477e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8c4 	bl	8004920 <UART_SetConfig>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e022      	b.n	80047e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f002 fa36 	bl	8006c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f002 fabd 	bl	8006d60 <UART_CheckIdleState>
 80047e6:	4603      	mov	r3, r0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08a      	sub	sp, #40	; 0x28
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004806:	2b20      	cmp	r3, #32
 8004808:	f040 8083 	bne.w	8004912 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_UART_Transmit+0x28>
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e07b      	b.n	8004914 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_UART_Transmit+0x3a>
 8004826:	2302      	movs	r3, #2
 8004828:	e074      	b.n	8004914 <HAL_UART_Transmit+0x124>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2221      	movs	r2, #33	; 0x21
 800483e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004842:	f7fc fc5b 	bl	80010fc <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004860:	d108      	bne.n	8004874 <HAL_UART_Transmit+0x84>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e003      	b.n	800487c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800487c:	e02c      	b.n	80048d8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2180      	movs	r1, #128	; 0x80
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f002 fab1 	bl	8006df0 <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e03d      	b.n	8004914 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10b      	bne.n	80048b6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	3302      	adds	r3, #2
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	e007      	b.n	80048c6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	3301      	adds	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1cc      	bne.n	800487e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	2140      	movs	r1, #64	; 0x40
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f002 fa7e 	bl	8006df0 <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e00a      	b.n	8004914 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	0000      	movs	r0, r0
	...

08004920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004924:	b090      	sub	sp, #64	; 0x40
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800492a:	2300      	movs	r3, #0
 800492c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004934:	2300      	movs	r3, #0
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	4313      	orrs	r3, r2
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004956:	4313      	orrs	r3, r2
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4bc1      	ldr	r3, [pc, #772]	; (8004c68 <UART_SetConfig+0x348>)
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800496a:	430b      	orrs	r3, r1
 800496c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4ab7      	ldr	r2, [pc, #732]	; (8004c6c <UART_SetConfig+0x34c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800499a:	4313      	orrs	r3, r2
 800499c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	4bb2      	ldr	r3, [pc, #712]	; (8004c70 <UART_SetConfig+0x350>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049ae:	430b      	orrs	r3, r1
 80049b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	f023 010f 	bic.w	r1, r3, #15
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4aa9      	ldr	r2, [pc, #676]	; (8004c74 <UART_SetConfig+0x354>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d177      	bne.n	8004ac2 <UART_SetConfig+0x1a2>
 80049d2:	4ba9      	ldr	r3, [pc, #676]	; (8004c78 <UART_SetConfig+0x358>)
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049da:	2b28      	cmp	r3, #40	; 0x28
 80049dc:	d86c      	bhi.n	8004ab8 <UART_SetConfig+0x198>
 80049de:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <UART_SetConfig+0xc4>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	08004a89 	.word	0x08004a89
 80049e8:	08004ab9 	.word	0x08004ab9
 80049ec:	08004ab9 	.word	0x08004ab9
 80049f0:	08004ab9 	.word	0x08004ab9
 80049f4:	08004ab9 	.word	0x08004ab9
 80049f8:	08004ab9 	.word	0x08004ab9
 80049fc:	08004ab9 	.word	0x08004ab9
 8004a00:	08004ab9 	.word	0x08004ab9
 8004a04:	08004a91 	.word	0x08004a91
 8004a08:	08004ab9 	.word	0x08004ab9
 8004a0c:	08004ab9 	.word	0x08004ab9
 8004a10:	08004ab9 	.word	0x08004ab9
 8004a14:	08004ab9 	.word	0x08004ab9
 8004a18:	08004ab9 	.word	0x08004ab9
 8004a1c:	08004ab9 	.word	0x08004ab9
 8004a20:	08004ab9 	.word	0x08004ab9
 8004a24:	08004a99 	.word	0x08004a99
 8004a28:	08004ab9 	.word	0x08004ab9
 8004a2c:	08004ab9 	.word	0x08004ab9
 8004a30:	08004ab9 	.word	0x08004ab9
 8004a34:	08004ab9 	.word	0x08004ab9
 8004a38:	08004ab9 	.word	0x08004ab9
 8004a3c:	08004ab9 	.word	0x08004ab9
 8004a40:	08004ab9 	.word	0x08004ab9
 8004a44:	08004aa1 	.word	0x08004aa1
 8004a48:	08004ab9 	.word	0x08004ab9
 8004a4c:	08004ab9 	.word	0x08004ab9
 8004a50:	08004ab9 	.word	0x08004ab9
 8004a54:	08004ab9 	.word	0x08004ab9
 8004a58:	08004ab9 	.word	0x08004ab9
 8004a5c:	08004ab9 	.word	0x08004ab9
 8004a60:	08004ab9 	.word	0x08004ab9
 8004a64:	08004aa9 	.word	0x08004aa9
 8004a68:	08004ab9 	.word	0x08004ab9
 8004a6c:	08004ab9 	.word	0x08004ab9
 8004a70:	08004ab9 	.word	0x08004ab9
 8004a74:	08004ab9 	.word	0x08004ab9
 8004a78:	08004ab9 	.word	0x08004ab9
 8004a7c:	08004ab9 	.word	0x08004ab9
 8004a80:	08004ab9 	.word	0x08004ab9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a8e:	e233      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a96:	e22f      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a9e:	e22b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004aa6:	e227      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004aae:	e223      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ab0:	2340      	movs	r3, #64	; 0x40
 8004ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ab6:	e21f      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004abe:	bf00      	nop
 8004ac0:	e21a      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6d      	ldr	r2, [pc, #436]	; (8004c7c <UART_SetConfig+0x35c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d132      	bne.n	8004b32 <UART_SetConfig+0x212>
 8004acc:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <UART_SetConfig+0x358>)
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d827      	bhi.n	8004b28 <UART_SetConfig+0x208>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0x1c0>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004af9 	.word	0x08004af9
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b19 	.word	0x08004b19
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004afe:	e1fb      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b06:	e1f7      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b0e:	e1f3      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b16:	e1ef      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b18:	2320      	movs	r3, #32
 8004b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b1e:	e1eb      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b20:	2340      	movs	r3, #64	; 0x40
 8004b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b26:	e1e7      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b2e:	bf00      	nop
 8004b30:	e1e2      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a52      	ldr	r2, [pc, #328]	; (8004c80 <UART_SetConfig+0x360>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d132      	bne.n	8004ba2 <UART_SetConfig+0x282>
 8004b3c:	4b4e      	ldr	r3, [pc, #312]	; (8004c78 <UART_SetConfig+0x358>)
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	d827      	bhi.n	8004b98 <UART_SetConfig+0x278>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0x230>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b69 	.word	0x08004b69
 8004b54:	08004b71 	.word	0x08004b71
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b6e:	e1c3      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b70:	2304      	movs	r3, #4
 8004b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b76:	e1bf      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b78:	2308      	movs	r3, #8
 8004b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b7e:	e1bb      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b80:	2310      	movs	r3, #16
 8004b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b86:	e1b7      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b88:	2320      	movs	r3, #32
 8004b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b8e:	e1b3      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b90:	2340      	movs	r3, #64	; 0x40
 8004b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b96:	e1af      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b9e:	bf00      	nop
 8004ba0:	e1aa      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a37      	ldr	r2, [pc, #220]	; (8004c84 <UART_SetConfig+0x364>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d132      	bne.n	8004c12 <UART_SetConfig+0x2f2>
 8004bac:	4b32      	ldr	r3, [pc, #200]	; (8004c78 <UART_SetConfig+0x358>)
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d827      	bhi.n	8004c08 <UART_SetConfig+0x2e8>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x2a0>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bd9 	.word	0x08004bd9
 8004bc4:	08004be1 	.word	0x08004be1
 8004bc8:	08004be9 	.word	0x08004be9
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bde:	e18b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004be6:	e187      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bee:	e183      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bf6:	e17f      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bfe:	e17b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c00:	2340      	movs	r3, #64	; 0x40
 8004c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c06:	e177      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c0e:	bf00      	nop
 8004c10:	e172      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <UART_SetConfig+0x368>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d144      	bne.n	8004ca6 <UART_SetConfig+0x386>
 8004c1c:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <UART_SetConfig+0x358>)
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d839      	bhi.n	8004c9c <UART_SetConfig+0x37c>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <UART_SetConfig+0x310>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c49 	.word	0x08004c49
 8004c34:	08004c51 	.word	0x08004c51
 8004c38:	08004c59 	.word	0x08004c59
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c8d 	.word	0x08004c8d
 8004c44:	08004c95 	.word	0x08004c95
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c4e:	e153      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c50:	2304      	movs	r3, #4
 8004c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c56:	e14f      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c58:	2308      	movs	r3, #8
 8004c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c5e:	e14b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c66:	e147      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c68:	cfff69f3 	.word	0xcfff69f3
 8004c6c:	58000c00 	.word	0x58000c00
 8004c70:	11fff4ff 	.word	0x11fff4ff
 8004c74:	40011000 	.word	0x40011000
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	40004400 	.word	0x40004400
 8004c80:	40004800 	.word	0x40004800
 8004c84:	40004c00 	.word	0x40004c00
 8004c88:	40005000 	.word	0x40005000
 8004c8c:	2320      	movs	r3, #32
 8004c8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c92:	e131      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c94:	2340      	movs	r3, #64	; 0x40
 8004c96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c9a:	e12d      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ca2:	bf00      	nop
 8004ca4:	e128      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4ac3      	ldr	r2, [pc, #780]	; (8004fb8 <UART_SetConfig+0x698>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d178      	bne.n	8004da2 <UART_SetConfig+0x482>
 8004cb0:	4bc2      	ldr	r3, [pc, #776]	; (8004fbc <UART_SetConfig+0x69c>)
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cb8:	2b28      	cmp	r3, #40	; 0x28
 8004cba:	d86d      	bhi.n	8004d98 <UART_SetConfig+0x478>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x3a4>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004d69 	.word	0x08004d69
 8004cc8:	08004d99 	.word	0x08004d99
 8004ccc:	08004d99 	.word	0x08004d99
 8004cd0:	08004d99 	.word	0x08004d99
 8004cd4:	08004d99 	.word	0x08004d99
 8004cd8:	08004d99 	.word	0x08004d99
 8004cdc:	08004d99 	.word	0x08004d99
 8004ce0:	08004d99 	.word	0x08004d99
 8004ce4:	08004d71 	.word	0x08004d71
 8004ce8:	08004d99 	.word	0x08004d99
 8004cec:	08004d99 	.word	0x08004d99
 8004cf0:	08004d99 	.word	0x08004d99
 8004cf4:	08004d99 	.word	0x08004d99
 8004cf8:	08004d99 	.word	0x08004d99
 8004cfc:	08004d99 	.word	0x08004d99
 8004d00:	08004d99 	.word	0x08004d99
 8004d04:	08004d79 	.word	0x08004d79
 8004d08:	08004d99 	.word	0x08004d99
 8004d0c:	08004d99 	.word	0x08004d99
 8004d10:	08004d99 	.word	0x08004d99
 8004d14:	08004d99 	.word	0x08004d99
 8004d18:	08004d99 	.word	0x08004d99
 8004d1c:	08004d99 	.word	0x08004d99
 8004d20:	08004d99 	.word	0x08004d99
 8004d24:	08004d81 	.word	0x08004d81
 8004d28:	08004d99 	.word	0x08004d99
 8004d2c:	08004d99 	.word	0x08004d99
 8004d30:	08004d99 	.word	0x08004d99
 8004d34:	08004d99 	.word	0x08004d99
 8004d38:	08004d99 	.word	0x08004d99
 8004d3c:	08004d99 	.word	0x08004d99
 8004d40:	08004d99 	.word	0x08004d99
 8004d44:	08004d89 	.word	0x08004d89
 8004d48:	08004d99 	.word	0x08004d99
 8004d4c:	08004d99 	.word	0x08004d99
 8004d50:	08004d99 	.word	0x08004d99
 8004d54:	08004d99 	.word	0x08004d99
 8004d58:	08004d99 	.word	0x08004d99
 8004d5c:	08004d99 	.word	0x08004d99
 8004d60:	08004d99 	.word	0x08004d99
 8004d64:	08004d91 	.word	0x08004d91
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d6e:	e0c3      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004d70:	2304      	movs	r3, #4
 8004d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d76:	e0bf      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004d78:	2308      	movs	r3, #8
 8004d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d7e:	e0bb      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004d80:	2310      	movs	r3, #16
 8004d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d86:	e0b7      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004d88:	2320      	movs	r3, #32
 8004d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d8e:	e0b3      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004d90:	2340      	movs	r3, #64	; 0x40
 8004d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d96:	e0af      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d9e:	bf00      	nop
 8004da0:	e0aa      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a86      	ldr	r2, [pc, #536]	; (8004fc0 <UART_SetConfig+0x6a0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d132      	bne.n	8004e12 <UART_SetConfig+0x4f2>
 8004dac:	4b83      	ldr	r3, [pc, #524]	; (8004fbc <UART_SetConfig+0x69c>)
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	2b05      	cmp	r3, #5
 8004db6:	d827      	bhi.n	8004e08 <UART_SetConfig+0x4e8>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0x4a0>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004dd9 	.word	0x08004dd9
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	08004de9 	.word	0x08004de9
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	08004df9 	.word	0x08004df9
 8004dd4:	08004e01 	.word	0x08004e01
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dde:	e08b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004de6:	e087      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dee:	e083      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004df6:	e07f      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004df8:	2320      	movs	r3, #32
 8004dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dfe:	e07b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e00:	2340      	movs	r3, #64	; 0x40
 8004e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e06:	e077      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e0e:	bf00      	nop
 8004e10:	e072      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6b      	ldr	r2, [pc, #428]	; (8004fc4 <UART_SetConfig+0x6a4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d132      	bne.n	8004e82 <UART_SetConfig+0x562>
 8004e1c:	4b67      	ldr	r3, [pc, #412]	; (8004fbc <UART_SetConfig+0x69c>)
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d827      	bhi.n	8004e78 <UART_SetConfig+0x558>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x510>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e49 	.word	0x08004e49
 8004e34:	08004e51 	.word	0x08004e51
 8004e38:	08004e59 	.word	0x08004e59
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e69 	.word	0x08004e69
 8004e44:	08004e71 	.word	0x08004e71
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e4e:	e053      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e50:	2304      	movs	r3, #4
 8004e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e56:	e04f      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e58:	2308      	movs	r3, #8
 8004e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e5e:	e04b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e60:	2310      	movs	r3, #16
 8004e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e66:	e047      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e68:	2320      	movs	r3, #32
 8004e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e6e:	e043      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e70:	2340      	movs	r3, #64	; 0x40
 8004e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e76:	e03f      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e7e:	bf00      	nop
 8004e80:	e03a      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a50      	ldr	r2, [pc, #320]	; (8004fc8 <UART_SetConfig+0x6a8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d132      	bne.n	8004ef2 <UART_SetConfig+0x5d2>
 8004e8c:	4b4b      	ldr	r3, [pc, #300]	; (8004fbc <UART_SetConfig+0x69c>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d827      	bhi.n	8004ee8 <UART_SetConfig+0x5c8>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0x580>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004eb9 	.word	0x08004eb9
 8004ea4:	08004ec1 	.word	0x08004ec1
 8004ea8:	08004ec9 	.word	0x08004ec9
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	2302      	movs	r3, #2
 8004eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ebe:	e01b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ec6:	e017      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ec8:	2308      	movs	r3, #8
 8004eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ece:	e013      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ed6:	e00f      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ed8:	2320      	movs	r3, #32
 8004eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ede:	e00b      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ee0:	2340      	movs	r3, #64	; 0x40
 8004ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ee6:	e007      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004eee:	bf00      	nop
 8004ef0:	e002      	b.n	8004ef8 <UART_SetConfig+0x5d8>
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a32      	ldr	r2, [pc, #200]	; (8004fc8 <UART_SetConfig+0x6a8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	f040 86f7 	bne.w	8005cf2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f04:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	f000 80c0 	beq.w	800508e <UART_SetConfig+0x76e>
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	dc04      	bgt.n	8004f1c <UART_SetConfig+0x5fc>
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d00c      	beq.n	8004f30 <UART_SetConfig+0x610>
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d065      	beq.n	8004fe6 <UART_SetConfig+0x6c6>
 8004f1a:	e27a      	b.n	8005412 <UART_SetConfig+0xaf2>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	f000 81b0 	beq.w	8005282 <UART_SetConfig+0x962>
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	f000 821e 	beq.w	8005364 <UART_SetConfig+0xa44>
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	f000 8104 	beq.w	8005136 <UART_SetConfig+0x816>
 8004f2e:	e270      	b.n	8005412 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f30:	f7fe fffc 	bl	8003f2c <HAL_RCCEx_GetD3PCLK1Freq>
 8004f34:	4602      	mov	r2, r0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d04e      	beq.n	8004fdc <UART_SetConfig+0x6bc>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d048      	beq.n	8004fd8 <UART_SetConfig+0x6b8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d042      	beq.n	8004fd4 <UART_SetConfig+0x6b4>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d03c      	beq.n	8004fd0 <UART_SetConfig+0x6b0>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d036      	beq.n	8004fcc <UART_SetConfig+0x6ac>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d026      	beq.n	8004fb4 <UART_SetConfig+0x694>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b06      	cmp	r3, #6
 8004f6c:	d020      	beq.n	8004fb0 <UART_SetConfig+0x690>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	d01a      	beq.n	8004fac <UART_SetConfig+0x68c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d014      	beq.n	8004fa8 <UART_SetConfig+0x688>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	2b09      	cmp	r3, #9
 8004f84:	d00e      	beq.n	8004fa4 <UART_SetConfig+0x684>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	2b0a      	cmp	r3, #10
 8004f8c:	d008      	beq.n	8004fa0 <UART_SetConfig+0x680>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2b0b      	cmp	r3, #11
 8004f94:	d102      	bne.n	8004f9c <UART_SetConfig+0x67c>
 8004f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9a:	e020      	b.n	8004fde <UART_SetConfig+0x6be>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e01e      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	e01c      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	e01a      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fa8:	2320      	movs	r3, #32
 8004faa:	e018      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fac:	2310      	movs	r3, #16
 8004fae:	e016      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	e014      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fb4:	230a      	movs	r3, #10
 8004fb6:	e012      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fb8:	40011400 	.word	0x40011400
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	40007800 	.word	0x40007800
 8004fc4:	40007c00 	.word	0x40007c00
 8004fc8:	58000c00 	.word	0x58000c00
 8004fcc:	2308      	movs	r3, #8
 8004fce:	e006      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fd0:	2306      	movs	r3, #6
 8004fd2:	e004      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	e002      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e000      	b.n	8004fde <UART_SetConfig+0x6be>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fe4:	e219      	b.n	800541a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fe6:	f107 0318 	add.w	r3, r7, #24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe ffb4 	bl	8003f58 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d044      	beq.n	8005084 <UART_SetConfig+0x764>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d03e      	beq.n	8005080 <UART_SetConfig+0x760>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b02      	cmp	r3, #2
 8005008:	d038      	beq.n	800507c <UART_SetConfig+0x75c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b03      	cmp	r3, #3
 8005010:	d032      	beq.n	8005078 <UART_SetConfig+0x758>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b04      	cmp	r3, #4
 8005018:	d02c      	beq.n	8005074 <UART_SetConfig+0x754>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b05      	cmp	r3, #5
 8005020:	d026      	beq.n	8005070 <UART_SetConfig+0x750>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b06      	cmp	r3, #6
 8005028:	d020      	beq.n	800506c <UART_SetConfig+0x74c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b07      	cmp	r3, #7
 8005030:	d01a      	beq.n	8005068 <UART_SetConfig+0x748>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b08      	cmp	r3, #8
 8005038:	d014      	beq.n	8005064 <UART_SetConfig+0x744>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b09      	cmp	r3, #9
 8005040:	d00e      	beq.n	8005060 <UART_SetConfig+0x740>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	2b0a      	cmp	r3, #10
 8005048:	d008      	beq.n	800505c <UART_SetConfig+0x73c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b0b      	cmp	r3, #11
 8005050:	d102      	bne.n	8005058 <UART_SetConfig+0x738>
 8005052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005056:	e016      	b.n	8005086 <UART_SetConfig+0x766>
 8005058:	2301      	movs	r3, #1
 800505a:	e014      	b.n	8005086 <UART_SetConfig+0x766>
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	e012      	b.n	8005086 <UART_SetConfig+0x766>
 8005060:	2340      	movs	r3, #64	; 0x40
 8005062:	e010      	b.n	8005086 <UART_SetConfig+0x766>
 8005064:	2320      	movs	r3, #32
 8005066:	e00e      	b.n	8005086 <UART_SetConfig+0x766>
 8005068:	2310      	movs	r3, #16
 800506a:	e00c      	b.n	8005086 <UART_SetConfig+0x766>
 800506c:	230c      	movs	r3, #12
 800506e:	e00a      	b.n	8005086 <UART_SetConfig+0x766>
 8005070:	230a      	movs	r3, #10
 8005072:	e008      	b.n	8005086 <UART_SetConfig+0x766>
 8005074:	2308      	movs	r3, #8
 8005076:	e006      	b.n	8005086 <UART_SetConfig+0x766>
 8005078:	2306      	movs	r3, #6
 800507a:	e004      	b.n	8005086 <UART_SetConfig+0x766>
 800507c:	2304      	movs	r3, #4
 800507e:	e002      	b.n	8005086 <UART_SetConfig+0x766>
 8005080:	2302      	movs	r3, #2
 8005082:	e000      	b.n	8005086 <UART_SetConfig+0x766>
 8005084:	2301      	movs	r3, #1
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800508c:	e1c5      	b.n	800541a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800508e:	f107 030c 	add.w	r3, r7, #12
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff f8ac 	bl	80041f0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d044      	beq.n	800512c <UART_SetConfig+0x80c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d03e      	beq.n	8005128 <UART_SetConfig+0x808>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d038      	beq.n	8005124 <UART_SetConfig+0x804>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d032      	beq.n	8005120 <UART_SetConfig+0x800>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d02c      	beq.n	800511c <UART_SetConfig+0x7fc>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d026      	beq.n	8005118 <UART_SetConfig+0x7f8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b06      	cmp	r3, #6
 80050d0:	d020      	beq.n	8005114 <UART_SetConfig+0x7f4>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b07      	cmp	r3, #7
 80050d8:	d01a      	beq.n	8005110 <UART_SetConfig+0x7f0>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d014      	beq.n	800510c <UART_SetConfig+0x7ec>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d00e      	beq.n	8005108 <UART_SetConfig+0x7e8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2b0a      	cmp	r3, #10
 80050f0:	d008      	beq.n	8005104 <UART_SetConfig+0x7e4>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	2b0b      	cmp	r3, #11
 80050f8:	d102      	bne.n	8005100 <UART_SetConfig+0x7e0>
 80050fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050fe:	e016      	b.n	800512e <UART_SetConfig+0x80e>
 8005100:	2301      	movs	r3, #1
 8005102:	e014      	b.n	800512e <UART_SetConfig+0x80e>
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	e012      	b.n	800512e <UART_SetConfig+0x80e>
 8005108:	2340      	movs	r3, #64	; 0x40
 800510a:	e010      	b.n	800512e <UART_SetConfig+0x80e>
 800510c:	2320      	movs	r3, #32
 800510e:	e00e      	b.n	800512e <UART_SetConfig+0x80e>
 8005110:	2310      	movs	r3, #16
 8005112:	e00c      	b.n	800512e <UART_SetConfig+0x80e>
 8005114:	230c      	movs	r3, #12
 8005116:	e00a      	b.n	800512e <UART_SetConfig+0x80e>
 8005118:	230a      	movs	r3, #10
 800511a:	e008      	b.n	800512e <UART_SetConfig+0x80e>
 800511c:	2308      	movs	r3, #8
 800511e:	e006      	b.n	800512e <UART_SetConfig+0x80e>
 8005120:	2306      	movs	r3, #6
 8005122:	e004      	b.n	800512e <UART_SetConfig+0x80e>
 8005124:	2304      	movs	r3, #4
 8005126:	e002      	b.n	800512e <UART_SetConfig+0x80e>
 8005128:	2302      	movs	r3, #2
 800512a:	e000      	b.n	800512e <UART_SetConfig+0x80e>
 800512c:	2301      	movs	r3, #1
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005134:	e171      	b.n	800541a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005136:	4b7a      	ldr	r3, [pc, #488]	; (8005320 <UART_SetConfig+0xa00>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d054      	beq.n	80051ec <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005142:	4b77      	ldr	r3, [pc, #476]	; (8005320 <UART_SetConfig+0xa00>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	08db      	lsrs	r3, r3, #3
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	4a75      	ldr	r2, [pc, #468]	; (8005324 <UART_SetConfig+0xa04>)
 800514e:	40da      	lsrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d044      	beq.n	80051e2 <UART_SetConfig+0x8c2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	2b01      	cmp	r3, #1
 800515e:	d03e      	beq.n	80051de <UART_SetConfig+0x8be>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b02      	cmp	r3, #2
 8005166:	d038      	beq.n	80051da <UART_SetConfig+0x8ba>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b03      	cmp	r3, #3
 800516e:	d032      	beq.n	80051d6 <UART_SetConfig+0x8b6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	2b04      	cmp	r3, #4
 8005176:	d02c      	beq.n	80051d2 <UART_SetConfig+0x8b2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2b05      	cmp	r3, #5
 800517e:	d026      	beq.n	80051ce <UART_SetConfig+0x8ae>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	2b06      	cmp	r3, #6
 8005186:	d020      	beq.n	80051ca <UART_SetConfig+0x8aa>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2b07      	cmp	r3, #7
 800518e:	d01a      	beq.n	80051c6 <UART_SetConfig+0x8a6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	2b08      	cmp	r3, #8
 8005196:	d014      	beq.n	80051c2 <UART_SetConfig+0x8a2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2b09      	cmp	r3, #9
 800519e:	d00e      	beq.n	80051be <UART_SetConfig+0x89e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b0a      	cmp	r3, #10
 80051a6:	d008      	beq.n	80051ba <UART_SetConfig+0x89a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b0b      	cmp	r3, #11
 80051ae:	d102      	bne.n	80051b6 <UART_SetConfig+0x896>
 80051b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051b4:	e016      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e014      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	e012      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051be:	2340      	movs	r3, #64	; 0x40
 80051c0:	e010      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051c2:	2320      	movs	r3, #32
 80051c4:	e00e      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051c6:	2310      	movs	r3, #16
 80051c8:	e00c      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051ca:	230c      	movs	r3, #12
 80051cc:	e00a      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051ce:	230a      	movs	r3, #10
 80051d0:	e008      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051d2:	2308      	movs	r3, #8
 80051d4:	e006      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051d6:	2306      	movs	r3, #6
 80051d8:	e004      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051da:	2304      	movs	r3, #4
 80051dc:	e002      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051de:	2302      	movs	r3, #2
 80051e0:	e000      	b.n	80051e4 <UART_SetConfig+0x8c4>
 80051e2:	2301      	movs	r3, #1
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80051ea:	e116      	b.n	800541a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d043      	beq.n	800527c <UART_SetConfig+0x95c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d03d      	beq.n	8005278 <UART_SetConfig+0x958>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2b02      	cmp	r3, #2
 8005202:	d037      	beq.n	8005274 <UART_SetConfig+0x954>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	2b03      	cmp	r3, #3
 800520a:	d031      	beq.n	8005270 <UART_SetConfig+0x950>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	2b04      	cmp	r3, #4
 8005212:	d02b      	beq.n	800526c <UART_SetConfig+0x94c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2b05      	cmp	r3, #5
 800521a:	d025      	beq.n	8005268 <UART_SetConfig+0x948>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2b06      	cmp	r3, #6
 8005222:	d01f      	beq.n	8005264 <UART_SetConfig+0x944>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b07      	cmp	r3, #7
 800522a:	d019      	beq.n	8005260 <UART_SetConfig+0x940>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	2b08      	cmp	r3, #8
 8005232:	d013      	beq.n	800525c <UART_SetConfig+0x93c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	2b09      	cmp	r3, #9
 800523a:	d00d      	beq.n	8005258 <UART_SetConfig+0x938>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b0a      	cmp	r3, #10
 8005242:	d007      	beq.n	8005254 <UART_SetConfig+0x934>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	2b0b      	cmp	r3, #11
 800524a:	d101      	bne.n	8005250 <UART_SetConfig+0x930>
 800524c:	4b36      	ldr	r3, [pc, #216]	; (8005328 <UART_SetConfig+0xa08>)
 800524e:	e016      	b.n	800527e <UART_SetConfig+0x95e>
 8005250:	4b34      	ldr	r3, [pc, #208]	; (8005324 <UART_SetConfig+0xa04>)
 8005252:	e014      	b.n	800527e <UART_SetConfig+0x95e>
 8005254:	4b35      	ldr	r3, [pc, #212]	; (800532c <UART_SetConfig+0xa0c>)
 8005256:	e012      	b.n	800527e <UART_SetConfig+0x95e>
 8005258:	4b35      	ldr	r3, [pc, #212]	; (8005330 <UART_SetConfig+0xa10>)
 800525a:	e010      	b.n	800527e <UART_SetConfig+0x95e>
 800525c:	4b35      	ldr	r3, [pc, #212]	; (8005334 <UART_SetConfig+0xa14>)
 800525e:	e00e      	b.n	800527e <UART_SetConfig+0x95e>
 8005260:	4b35      	ldr	r3, [pc, #212]	; (8005338 <UART_SetConfig+0xa18>)
 8005262:	e00c      	b.n	800527e <UART_SetConfig+0x95e>
 8005264:	4b35      	ldr	r3, [pc, #212]	; (800533c <UART_SetConfig+0xa1c>)
 8005266:	e00a      	b.n	800527e <UART_SetConfig+0x95e>
 8005268:	4b35      	ldr	r3, [pc, #212]	; (8005340 <UART_SetConfig+0xa20>)
 800526a:	e008      	b.n	800527e <UART_SetConfig+0x95e>
 800526c:	4b35      	ldr	r3, [pc, #212]	; (8005344 <UART_SetConfig+0xa24>)
 800526e:	e006      	b.n	800527e <UART_SetConfig+0x95e>
 8005270:	4b35      	ldr	r3, [pc, #212]	; (8005348 <UART_SetConfig+0xa28>)
 8005272:	e004      	b.n	800527e <UART_SetConfig+0x95e>
 8005274:	4b35      	ldr	r3, [pc, #212]	; (800534c <UART_SetConfig+0xa2c>)
 8005276:	e002      	b.n	800527e <UART_SetConfig+0x95e>
 8005278:	4b35      	ldr	r3, [pc, #212]	; (8005350 <UART_SetConfig+0xa30>)
 800527a:	e000      	b.n	800527e <UART_SetConfig+0x95e>
 800527c:	4b29      	ldr	r3, [pc, #164]	; (8005324 <UART_SetConfig+0xa04>)
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005280:	e0cb      	b.n	800541a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d046      	beq.n	8005318 <UART_SetConfig+0x9f8>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b01      	cmp	r3, #1
 8005290:	d040      	beq.n	8005314 <UART_SetConfig+0x9f4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b02      	cmp	r3, #2
 8005298:	d03a      	beq.n	8005310 <UART_SetConfig+0x9f0>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d034      	beq.n	800530c <UART_SetConfig+0x9ec>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d02e      	beq.n	8005308 <UART_SetConfig+0x9e8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d028      	beq.n	8005304 <UART_SetConfig+0x9e4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b06      	cmp	r3, #6
 80052b8:	d022      	beq.n	8005300 <UART_SetConfig+0x9e0>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b07      	cmp	r3, #7
 80052c0:	d01c      	beq.n	80052fc <UART_SetConfig+0x9dc>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d016      	beq.n	80052f8 <UART_SetConfig+0x9d8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	2b09      	cmp	r3, #9
 80052d0:	d00f      	beq.n	80052f2 <UART_SetConfig+0x9d2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	2b0a      	cmp	r3, #10
 80052d8:	d008      	beq.n	80052ec <UART_SetConfig+0x9cc>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b0b      	cmp	r3, #11
 80052e0:	d102      	bne.n	80052e8 <UART_SetConfig+0x9c8>
 80052e2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80052e6:	e018      	b.n	800531a <UART_SetConfig+0x9fa>
 80052e8:	4b13      	ldr	r3, [pc, #76]	; (8005338 <UART_SetConfig+0xa18>)
 80052ea:	e016      	b.n	800531a <UART_SetConfig+0x9fa>
 80052ec:	f647 2312 	movw	r3, #31250	; 0x7a12
 80052f0:	e013      	b.n	800531a <UART_SetConfig+0x9fa>
 80052f2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80052f6:	e010      	b.n	800531a <UART_SetConfig+0x9fa>
 80052f8:	4b16      	ldr	r3, [pc, #88]	; (8005354 <UART_SetConfig+0xa34>)
 80052fa:	e00e      	b.n	800531a <UART_SetConfig+0x9fa>
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <UART_SetConfig+0xa08>)
 80052fe:	e00c      	b.n	800531a <UART_SetConfig+0x9fa>
 8005300:	4b15      	ldr	r3, [pc, #84]	; (8005358 <UART_SetConfig+0xa38>)
 8005302:	e00a      	b.n	800531a <UART_SetConfig+0x9fa>
 8005304:	4b15      	ldr	r3, [pc, #84]	; (800535c <UART_SetConfig+0xa3c>)
 8005306:	e008      	b.n	800531a <UART_SetConfig+0x9fa>
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <UART_SetConfig+0xa0c>)
 800530a:	e006      	b.n	800531a <UART_SetConfig+0x9fa>
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <UART_SetConfig+0xa40>)
 800530e:	e004      	b.n	800531a <UART_SetConfig+0x9fa>
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <UART_SetConfig+0xa10>)
 8005312:	e002      	b.n	800531a <UART_SetConfig+0x9fa>
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <UART_SetConfig+0xa14>)
 8005316:	e000      	b.n	800531a <UART_SetConfig+0x9fa>
 8005318:	4b07      	ldr	r3, [pc, #28]	; (8005338 <UART_SetConfig+0xa18>)
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800531c:	e07d      	b.n	800541a <UART_SetConfig+0xafa>
 800531e:	bf00      	nop
 8005320:	58024400 	.word	0x58024400
 8005324:	03d09000 	.word	0x03d09000
 8005328:	0003d090 	.word	0x0003d090
 800532c:	0007a120 	.word	0x0007a120
 8005330:	000f4240 	.word	0x000f4240
 8005334:	001e8480 	.word	0x001e8480
 8005338:	003d0900 	.word	0x003d0900
 800533c:	00516155 	.word	0x00516155
 8005340:	0061a800 	.word	0x0061a800
 8005344:	007a1200 	.word	0x007a1200
 8005348:	00a2c2aa 	.word	0x00a2c2aa
 800534c:	00f42400 	.word	0x00f42400
 8005350:	01e84800 	.word	0x01e84800
 8005354:	0001e848 	.word	0x0001e848
 8005358:	00051615 	.word	0x00051615
 800535c:	00061a80 	.word	0x00061a80
 8005360:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b00      	cmp	r3, #0
 800536a:	d04e      	beq.n	800540a <UART_SetConfig+0xaea>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	2b01      	cmp	r3, #1
 8005372:	d047      	beq.n	8005404 <UART_SetConfig+0xae4>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b02      	cmp	r3, #2
 800537a:	d040      	beq.n	80053fe <UART_SetConfig+0xade>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b03      	cmp	r3, #3
 8005382:	d039      	beq.n	80053f8 <UART_SetConfig+0xad8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b04      	cmp	r3, #4
 800538a:	d032      	beq.n	80053f2 <UART_SetConfig+0xad2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b05      	cmp	r3, #5
 8005392:	d02b      	beq.n	80053ec <UART_SetConfig+0xacc>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2b06      	cmp	r3, #6
 800539a:	d024      	beq.n	80053e6 <UART_SetConfig+0xac6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b07      	cmp	r3, #7
 80053a2:	d01d      	beq.n	80053e0 <UART_SetConfig+0xac0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d016      	beq.n	80053da <UART_SetConfig+0xaba>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d00f      	beq.n	80053d4 <UART_SetConfig+0xab4>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b0a      	cmp	r3, #10
 80053ba:	d008      	beq.n	80053ce <UART_SetConfig+0xaae>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b0b      	cmp	r3, #11
 80053c2:	d101      	bne.n	80053c8 <UART_SetConfig+0xaa8>
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	e022      	b.n	800540e <UART_SetConfig+0xaee>
 80053c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053cc:	e01f      	b.n	800540e <UART_SetConfig+0xaee>
 80053ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053d2:	e01c      	b.n	800540e <UART_SetConfig+0xaee>
 80053d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d8:	e019      	b.n	800540e <UART_SetConfig+0xaee>
 80053da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053de:	e016      	b.n	800540e <UART_SetConfig+0xaee>
 80053e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053e4:	e013      	b.n	800540e <UART_SetConfig+0xaee>
 80053e6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80053ea:	e010      	b.n	800540e <UART_SetConfig+0xaee>
 80053ec:	f640 43cc 	movw	r3, #3276	; 0xccc
 80053f0:	e00d      	b.n	800540e <UART_SetConfig+0xaee>
 80053f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f6:	e00a      	b.n	800540e <UART_SetConfig+0xaee>
 80053f8:	f241 5355 	movw	r3, #5461	; 0x1555
 80053fc:	e007      	b.n	800540e <UART_SetConfig+0xaee>
 80053fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005402:	e004      	b.n	800540e <UART_SetConfig+0xaee>
 8005404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005408:	e001      	b.n	800540e <UART_SetConfig+0xaee>
 800540a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005410:	e003      	b.n	800541a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005418:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	2b00      	cmp	r3, #0
 800541e:	f001 83e8 	beq.w	8006bf2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542e:	429a      	cmp	r2, r3
 8005430:	d305      	bcc.n	800543e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543a:	429a      	cmp	r2, r3
 800543c:	d904      	bls.n	8005448 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005444:	f001 bbd5 	b.w	8006bf2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8005448:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800544c:	2b08      	cmp	r3, #8
 800544e:	f000 8154 	beq.w	80056fa <UART_SetConfig+0xdda>
 8005452:	2b08      	cmp	r3, #8
 8005454:	dc06      	bgt.n	8005464 <UART_SetConfig+0xb44>
 8005456:	2b02      	cmp	r3, #2
 8005458:	d00f      	beq.n	800547a <UART_SetConfig+0xb5a>
 800545a:	2b04      	cmp	r3, #4
 800545c:	f000 80ac 	beq.w	80055b8 <UART_SetConfig+0xc98>
 8005460:	f000 bc30 	b.w	8005cc4 <UART_SetConfig+0x13a4>
 8005464:	2b20      	cmp	r3, #32
 8005466:	f000 832d 	beq.w	8005ac4 <UART_SetConfig+0x11a4>
 800546a:	2b40      	cmp	r3, #64	; 0x40
 800546c:	f000 83a5 	beq.w	8005bba <UART_SetConfig+0x129a>
 8005470:	2b10      	cmp	r3, #16
 8005472:	f000 81e3 	beq.w	800583c <UART_SetConfig+0xf1c>
 8005476:	f000 bc25 	b.w	8005cc4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800547a:	f7fe fd57 	bl	8003f2c <HAL_RCCEx_GetD3PCLK1Freq>
 800547e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	4618      	mov	r0, r3
 8005484:	f04f 0100 	mov.w	r1, #0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d067      	beq.n	8005560 <UART_SetConfig+0xc40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	2b01      	cmp	r3, #1
 8005496:	d05e      	beq.n	8005556 <UART_SetConfig+0xc36>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	2b02      	cmp	r3, #2
 800549e:	d055      	beq.n	800554c <UART_SetConfig+0xc2c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d04c      	beq.n	8005542 <UART_SetConfig+0xc22>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d043      	beq.n	8005538 <UART_SetConfig+0xc18>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	2b05      	cmp	r3, #5
 80054b6:	d03a      	beq.n	800552e <UART_SetConfig+0xc0e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	2b06      	cmp	r3, #6
 80054be:	d031      	beq.n	8005524 <UART_SetConfig+0xc04>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b07      	cmp	r3, #7
 80054c6:	d028      	beq.n	800551a <UART_SetConfig+0xbfa>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d01f      	beq.n	8005510 <UART_SetConfig+0xbf0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	2b09      	cmp	r3, #9
 80054d6:	d016      	beq.n	8005506 <UART_SetConfig+0xbe6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b0a      	cmp	r3, #10
 80054de:	d00d      	beq.n	80054fc <UART_SetConfig+0xbdc>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b0b      	cmp	r3, #11
 80054e6:	d104      	bne.n	80054f2 <UART_SetConfig+0xbd2>
 80054e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ec:	f04f 0400 	mov.w	r4, #0
 80054f0:	e03a      	b.n	8005568 <UART_SetConfig+0xc48>
 80054f2:	f04f 0301 	mov.w	r3, #1
 80054f6:	f04f 0400 	mov.w	r4, #0
 80054fa:	e035      	b.n	8005568 <UART_SetConfig+0xc48>
 80054fc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	e030      	b.n	8005568 <UART_SetConfig+0xc48>
 8005506:	f04f 0340 	mov.w	r3, #64	; 0x40
 800550a:	f04f 0400 	mov.w	r4, #0
 800550e:	e02b      	b.n	8005568 <UART_SetConfig+0xc48>
 8005510:	f04f 0320 	mov.w	r3, #32
 8005514:	f04f 0400 	mov.w	r4, #0
 8005518:	e026      	b.n	8005568 <UART_SetConfig+0xc48>
 800551a:	f04f 0310 	mov.w	r3, #16
 800551e:	f04f 0400 	mov.w	r4, #0
 8005522:	e021      	b.n	8005568 <UART_SetConfig+0xc48>
 8005524:	f04f 030c 	mov.w	r3, #12
 8005528:	f04f 0400 	mov.w	r4, #0
 800552c:	e01c      	b.n	8005568 <UART_SetConfig+0xc48>
 800552e:	f04f 030a 	mov.w	r3, #10
 8005532:	f04f 0400 	mov.w	r4, #0
 8005536:	e017      	b.n	8005568 <UART_SetConfig+0xc48>
 8005538:	f04f 0308 	mov.w	r3, #8
 800553c:	f04f 0400 	mov.w	r4, #0
 8005540:	e012      	b.n	8005568 <UART_SetConfig+0xc48>
 8005542:	f04f 0306 	mov.w	r3, #6
 8005546:	f04f 0400 	mov.w	r4, #0
 800554a:	e00d      	b.n	8005568 <UART_SetConfig+0xc48>
 800554c:	f04f 0304 	mov.w	r3, #4
 8005550:	f04f 0400 	mov.w	r4, #0
 8005554:	e008      	b.n	8005568 <UART_SetConfig+0xc48>
 8005556:	f04f 0302 	mov.w	r3, #2
 800555a:	f04f 0400 	mov.w	r4, #0
 800555e:	e003      	b.n	8005568 <UART_SetConfig+0xc48>
 8005560:	f04f 0301 	mov.w	r3, #1
 8005564:	f04f 0400 	mov.w	r4, #0
 8005568:	461a      	mov	r2, r3
 800556a:	4623      	mov	r3, r4
 800556c:	f7fa ff10 	bl	8000390 <__aeabi_uldivmod>
 8005570:	4603      	mov	r3, r0
 8005572:	460c      	mov	r4, r1
 8005574:	4619      	mov	r1, r3
 8005576:	4622      	mov	r2, r4
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	0214      	lsls	r4, r2, #8
 8005582:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005586:	020b      	lsls	r3, r1, #8
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6852      	ldr	r2, [r2, #4]
 800558c:	0852      	lsrs	r2, r2, #1
 800558e:	4611      	mov	r1, r2
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	eb13 0b01 	adds.w	fp, r3, r1
 8005598:	eb44 0c02 	adc.w	ip, r4, r2
 800559c:	4658      	mov	r0, fp
 800559e:	4661      	mov	r1, ip
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f04f 0400 	mov.w	r4, #0
 80055a8:	461a      	mov	r2, r3
 80055aa:	4623      	mov	r3, r4
 80055ac:	f7fa fef0 	bl	8000390 <__aeabi_uldivmod>
 80055b0:	4603      	mov	r3, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80055b6:	e389      	b.n	8005ccc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055b8:	f107 0318 	add.w	r3, r7, #24
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe fccb 	bl	8003f58 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d067      	beq.n	80056a2 <UART_SetConfig+0xd82>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d05e      	beq.n	8005698 <UART_SetConfig+0xd78>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d055      	beq.n	800568e <UART_SetConfig+0xd6e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d04c      	beq.n	8005684 <UART_SetConfig+0xd64>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d043      	beq.n	800567a <UART_SetConfig+0xd5a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d03a      	beq.n	8005670 <UART_SetConfig+0xd50>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d031      	beq.n	8005666 <UART_SetConfig+0xd46>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b07      	cmp	r3, #7
 8005608:	d028      	beq.n	800565c <UART_SetConfig+0xd3c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b08      	cmp	r3, #8
 8005610:	d01f      	beq.n	8005652 <UART_SetConfig+0xd32>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b09      	cmp	r3, #9
 8005618:	d016      	beq.n	8005648 <UART_SetConfig+0xd28>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b0a      	cmp	r3, #10
 8005620:	d00d      	beq.n	800563e <UART_SetConfig+0xd1e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b0b      	cmp	r3, #11
 8005628:	d104      	bne.n	8005634 <UART_SetConfig+0xd14>
 800562a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562e:	f04f 0400 	mov.w	r4, #0
 8005632:	e03a      	b.n	80056aa <UART_SetConfig+0xd8a>
 8005634:	f04f 0301 	mov.w	r3, #1
 8005638:	f04f 0400 	mov.w	r4, #0
 800563c:	e035      	b.n	80056aa <UART_SetConfig+0xd8a>
 800563e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005642:	f04f 0400 	mov.w	r4, #0
 8005646:	e030      	b.n	80056aa <UART_SetConfig+0xd8a>
 8005648:	f04f 0340 	mov.w	r3, #64	; 0x40
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	e02b      	b.n	80056aa <UART_SetConfig+0xd8a>
 8005652:	f04f 0320 	mov.w	r3, #32
 8005656:	f04f 0400 	mov.w	r4, #0
 800565a:	e026      	b.n	80056aa <UART_SetConfig+0xd8a>
 800565c:	f04f 0310 	mov.w	r3, #16
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	e021      	b.n	80056aa <UART_SetConfig+0xd8a>
 8005666:	f04f 030c 	mov.w	r3, #12
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	e01c      	b.n	80056aa <UART_SetConfig+0xd8a>
 8005670:	f04f 030a 	mov.w	r3, #10
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	e017      	b.n	80056aa <UART_SetConfig+0xd8a>
 800567a:	f04f 0308 	mov.w	r3, #8
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	e012      	b.n	80056aa <UART_SetConfig+0xd8a>
 8005684:	f04f 0306 	mov.w	r3, #6
 8005688:	f04f 0400 	mov.w	r4, #0
 800568c:	e00d      	b.n	80056aa <UART_SetConfig+0xd8a>
 800568e:	f04f 0304 	mov.w	r3, #4
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	e008      	b.n	80056aa <UART_SetConfig+0xd8a>
 8005698:	f04f 0302 	mov.w	r3, #2
 800569c:	f04f 0400 	mov.w	r4, #0
 80056a0:	e003      	b.n	80056aa <UART_SetConfig+0xd8a>
 80056a2:	f04f 0301 	mov.w	r3, #1
 80056a6:	f04f 0400 	mov.w	r4, #0
 80056aa:	461a      	mov	r2, r3
 80056ac:	4623      	mov	r3, r4
 80056ae:	f7fa fe6f 	bl	8000390 <__aeabi_uldivmod>
 80056b2:	4603      	mov	r3, r0
 80056b4:	460c      	mov	r4, r1
 80056b6:	4619      	mov	r1, r3
 80056b8:	4622      	mov	r2, r4
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	f04f 0400 	mov.w	r4, #0
 80056c2:	0214      	lsls	r4, r2, #8
 80056c4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80056c8:	020b      	lsls	r3, r1, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6852      	ldr	r2, [r2, #4]
 80056ce:	0852      	lsrs	r2, r2, #1
 80056d0:	4611      	mov	r1, r2
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	eb13 0b01 	adds.w	fp, r3, r1
 80056da:	eb44 0c02 	adc.w	ip, r4, r2
 80056de:	4658      	mov	r0, fp
 80056e0:	4661      	mov	r1, ip
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	461a      	mov	r2, r3
 80056ec:	4623      	mov	r3, r4
 80056ee:	f7fa fe4f 	bl	8000390 <__aeabi_uldivmod>
 80056f2:	4603      	mov	r3, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80056f8:	e2e8      	b.n	8005ccc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056fa:	f107 030c 	add.w	r3, r7, #12
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fd76 	bl	80041f0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4618      	mov	r0, r3
 8005708:	f04f 0100 	mov.w	r1, #0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	d067      	beq.n	80057e4 <UART_SetConfig+0xec4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b01      	cmp	r3, #1
 800571a:	d05e      	beq.n	80057da <UART_SetConfig+0xeba>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b02      	cmp	r3, #2
 8005722:	d055      	beq.n	80057d0 <UART_SetConfig+0xeb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b03      	cmp	r3, #3
 800572a:	d04c      	beq.n	80057c6 <UART_SetConfig+0xea6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b04      	cmp	r3, #4
 8005732:	d043      	beq.n	80057bc <UART_SetConfig+0xe9c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b05      	cmp	r3, #5
 800573a:	d03a      	beq.n	80057b2 <UART_SetConfig+0xe92>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	2b06      	cmp	r3, #6
 8005742:	d031      	beq.n	80057a8 <UART_SetConfig+0xe88>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b07      	cmp	r3, #7
 800574a:	d028      	beq.n	800579e <UART_SetConfig+0xe7e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b08      	cmp	r3, #8
 8005752:	d01f      	beq.n	8005794 <UART_SetConfig+0xe74>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b09      	cmp	r3, #9
 800575a:	d016      	beq.n	800578a <UART_SetConfig+0xe6a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b0a      	cmp	r3, #10
 8005762:	d00d      	beq.n	8005780 <UART_SetConfig+0xe60>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2b0b      	cmp	r3, #11
 800576a:	d104      	bne.n	8005776 <UART_SetConfig+0xe56>
 800576c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	e03a      	b.n	80057ec <UART_SetConfig+0xecc>
 8005776:	f04f 0301 	mov.w	r3, #1
 800577a:	f04f 0400 	mov.w	r4, #0
 800577e:	e035      	b.n	80057ec <UART_SetConfig+0xecc>
 8005780:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005784:	f04f 0400 	mov.w	r4, #0
 8005788:	e030      	b.n	80057ec <UART_SetConfig+0xecc>
 800578a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800578e:	f04f 0400 	mov.w	r4, #0
 8005792:	e02b      	b.n	80057ec <UART_SetConfig+0xecc>
 8005794:	f04f 0320 	mov.w	r3, #32
 8005798:	f04f 0400 	mov.w	r4, #0
 800579c:	e026      	b.n	80057ec <UART_SetConfig+0xecc>
 800579e:	f04f 0310 	mov.w	r3, #16
 80057a2:	f04f 0400 	mov.w	r4, #0
 80057a6:	e021      	b.n	80057ec <UART_SetConfig+0xecc>
 80057a8:	f04f 030c 	mov.w	r3, #12
 80057ac:	f04f 0400 	mov.w	r4, #0
 80057b0:	e01c      	b.n	80057ec <UART_SetConfig+0xecc>
 80057b2:	f04f 030a 	mov.w	r3, #10
 80057b6:	f04f 0400 	mov.w	r4, #0
 80057ba:	e017      	b.n	80057ec <UART_SetConfig+0xecc>
 80057bc:	f04f 0308 	mov.w	r3, #8
 80057c0:	f04f 0400 	mov.w	r4, #0
 80057c4:	e012      	b.n	80057ec <UART_SetConfig+0xecc>
 80057c6:	f04f 0306 	mov.w	r3, #6
 80057ca:	f04f 0400 	mov.w	r4, #0
 80057ce:	e00d      	b.n	80057ec <UART_SetConfig+0xecc>
 80057d0:	f04f 0304 	mov.w	r3, #4
 80057d4:	f04f 0400 	mov.w	r4, #0
 80057d8:	e008      	b.n	80057ec <UART_SetConfig+0xecc>
 80057da:	f04f 0302 	mov.w	r3, #2
 80057de:	f04f 0400 	mov.w	r4, #0
 80057e2:	e003      	b.n	80057ec <UART_SetConfig+0xecc>
 80057e4:	f04f 0301 	mov.w	r3, #1
 80057e8:	f04f 0400 	mov.w	r4, #0
 80057ec:	461a      	mov	r2, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	f7fa fdce 	bl	8000390 <__aeabi_uldivmod>
 80057f4:	4603      	mov	r3, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	4619      	mov	r1, r3
 80057fa:	4622      	mov	r2, r4
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	f04f 0400 	mov.w	r4, #0
 8005804:	0214      	lsls	r4, r2, #8
 8005806:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800580a:	020b      	lsls	r3, r1, #8
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6852      	ldr	r2, [r2, #4]
 8005810:	0852      	lsrs	r2, r2, #1
 8005812:	4611      	mov	r1, r2
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	eb13 0b01 	adds.w	fp, r3, r1
 800581c:	eb44 0c02 	adc.w	ip, r4, r2
 8005820:	4658      	mov	r0, fp
 8005822:	4661      	mov	r1, ip
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	461a      	mov	r2, r3
 800582e:	4623      	mov	r3, r4
 8005830:	f7fa fdae 	bl	8000390 <__aeabi_uldivmod>
 8005834:	4603      	mov	r3, r0
 8005836:	460c      	mov	r4, r1
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800583a:	e247      	b.n	8005ccc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800583c:	4b96      	ldr	r3, [pc, #600]	; (8005a98 <UART_SetConfig+0x1178>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a3 	beq.w	8005990 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800584a:	4b93      	ldr	r3, [pc, #588]	; (8005a98 <UART_SetConfig+0x1178>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	08db      	lsrs	r3, r3, #3
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	4a91      	ldr	r2, [pc, #580]	; (8005a9c <UART_SetConfig+0x117c>)
 8005856:	fa22 f303 	lsr.w	r3, r2, r3
 800585a:	4618      	mov	r0, r3
 800585c:	f04f 0100 	mov.w	r1, #0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d067      	beq.n	8005938 <UART_SetConfig+0x1018>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b01      	cmp	r3, #1
 800586e:	d05e      	beq.n	800592e <UART_SetConfig+0x100e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	2b02      	cmp	r3, #2
 8005876:	d055      	beq.n	8005924 <UART_SetConfig+0x1004>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	2b03      	cmp	r3, #3
 800587e:	d04c      	beq.n	800591a <UART_SetConfig+0xffa>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	2b04      	cmp	r3, #4
 8005886:	d043      	beq.n	8005910 <UART_SetConfig+0xff0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	2b05      	cmp	r3, #5
 800588e:	d03a      	beq.n	8005906 <UART_SetConfig+0xfe6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2b06      	cmp	r3, #6
 8005896:	d031      	beq.n	80058fc <UART_SetConfig+0xfdc>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	2b07      	cmp	r3, #7
 800589e:	d028      	beq.n	80058f2 <UART_SetConfig+0xfd2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d01f      	beq.n	80058e8 <UART_SetConfig+0xfc8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2b09      	cmp	r3, #9
 80058ae:	d016      	beq.n	80058de <UART_SetConfig+0xfbe>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b0a      	cmp	r3, #10
 80058b6:	d00d      	beq.n	80058d4 <UART_SetConfig+0xfb4>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b0b      	cmp	r3, #11
 80058be:	d104      	bne.n	80058ca <UART_SetConfig+0xfaa>
 80058c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	e03a      	b.n	8005940 <UART_SetConfig+0x1020>
 80058ca:	f04f 0301 	mov.w	r3, #1
 80058ce:	f04f 0400 	mov.w	r4, #0
 80058d2:	e035      	b.n	8005940 <UART_SetConfig+0x1020>
 80058d4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	e030      	b.n	8005940 <UART_SetConfig+0x1020>
 80058de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80058e2:	f04f 0400 	mov.w	r4, #0
 80058e6:	e02b      	b.n	8005940 <UART_SetConfig+0x1020>
 80058e8:	f04f 0320 	mov.w	r3, #32
 80058ec:	f04f 0400 	mov.w	r4, #0
 80058f0:	e026      	b.n	8005940 <UART_SetConfig+0x1020>
 80058f2:	f04f 0310 	mov.w	r3, #16
 80058f6:	f04f 0400 	mov.w	r4, #0
 80058fa:	e021      	b.n	8005940 <UART_SetConfig+0x1020>
 80058fc:	f04f 030c 	mov.w	r3, #12
 8005900:	f04f 0400 	mov.w	r4, #0
 8005904:	e01c      	b.n	8005940 <UART_SetConfig+0x1020>
 8005906:	f04f 030a 	mov.w	r3, #10
 800590a:	f04f 0400 	mov.w	r4, #0
 800590e:	e017      	b.n	8005940 <UART_SetConfig+0x1020>
 8005910:	f04f 0308 	mov.w	r3, #8
 8005914:	f04f 0400 	mov.w	r4, #0
 8005918:	e012      	b.n	8005940 <UART_SetConfig+0x1020>
 800591a:	f04f 0306 	mov.w	r3, #6
 800591e:	f04f 0400 	mov.w	r4, #0
 8005922:	e00d      	b.n	8005940 <UART_SetConfig+0x1020>
 8005924:	f04f 0304 	mov.w	r3, #4
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	e008      	b.n	8005940 <UART_SetConfig+0x1020>
 800592e:	f04f 0302 	mov.w	r3, #2
 8005932:	f04f 0400 	mov.w	r4, #0
 8005936:	e003      	b.n	8005940 <UART_SetConfig+0x1020>
 8005938:	f04f 0301 	mov.w	r3, #1
 800593c:	f04f 0400 	mov.w	r4, #0
 8005940:	461a      	mov	r2, r3
 8005942:	4623      	mov	r3, r4
 8005944:	f7fa fd24 	bl	8000390 <__aeabi_uldivmod>
 8005948:	4603      	mov	r3, r0
 800594a:	460c      	mov	r4, r1
 800594c:	4619      	mov	r1, r3
 800594e:	4622      	mov	r2, r4
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	f04f 0400 	mov.w	r4, #0
 8005958:	0214      	lsls	r4, r2, #8
 800595a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800595e:	020b      	lsls	r3, r1, #8
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6852      	ldr	r2, [r2, #4]
 8005964:	0852      	lsrs	r2, r2, #1
 8005966:	4611      	mov	r1, r2
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	eb13 0b01 	adds.w	fp, r3, r1
 8005970:	eb44 0c02 	adc.w	ip, r4, r2
 8005974:	4658      	mov	r0, fp
 8005976:	4661      	mov	r1, ip
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f04f 0400 	mov.w	r4, #0
 8005980:	461a      	mov	r2, r3
 8005982:	4623      	mov	r3, r4
 8005984:	f7fa fd04 	bl	8000390 <__aeabi_uldivmod>
 8005988:	4603      	mov	r3, r0
 800598a:	460c      	mov	r4, r1
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800598e:	e19d      	b.n	8005ccc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d05b      	beq.n	8005a50 <UART_SetConfig+0x1130>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b01      	cmp	r3, #1
 800599e:	d053      	beq.n	8005a48 <UART_SetConfig+0x1128>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d04b      	beq.n	8005a40 <UART_SetConfig+0x1120>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d043      	beq.n	8005a38 <UART_SetConfig+0x1118>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d03b      	beq.n	8005a30 <UART_SetConfig+0x1110>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b05      	cmp	r3, #5
 80059be:	d033      	beq.n	8005a28 <UART_SetConfig+0x1108>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d02b      	beq.n	8005a20 <UART_SetConfig+0x1100>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b07      	cmp	r3, #7
 80059ce:	d023      	beq.n	8005a18 <UART_SetConfig+0x10f8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d01b      	beq.n	8005a10 <UART_SetConfig+0x10f0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b09      	cmp	r3, #9
 80059de:	d013      	beq.n	8005a08 <UART_SetConfig+0x10e8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b0a      	cmp	r3, #10
 80059e6:	d00b      	beq.n	8005a00 <UART_SetConfig+0x10e0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b0b      	cmp	r3, #11
 80059ee:	d103      	bne.n	80059f8 <UART_SetConfig+0x10d8>
 80059f0:	4b2a      	ldr	r3, [pc, #168]	; (8005a9c <UART_SetConfig+0x117c>)
 80059f2:	f04f 0400 	mov.w	r4, #0
 80059f6:	e02e      	b.n	8005a56 <UART_SetConfig+0x1136>
 80059f8:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <UART_SetConfig+0x1180>)
 80059fa:	f04f 0403 	mov.w	r4, #3
 80059fe:	e02a      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a00:	4b28      	ldr	r3, [pc, #160]	; (8005aa4 <UART_SetConfig+0x1184>)
 8005a02:	f04f 0400 	mov.w	r4, #0
 8005a06:	e026      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a08:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <UART_SetConfig+0x1188>)
 8005a0a:	f04f 0400 	mov.w	r4, #0
 8005a0e:	e022      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a10:	4b26      	ldr	r3, [pc, #152]	; (8005aac <UART_SetConfig+0x118c>)
 8005a12:	f04f 0400 	mov.w	r4, #0
 8005a16:	e01e      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a18:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <UART_SetConfig+0x1190>)
 8005a1a:	f04f 0400 	mov.w	r4, #0
 8005a1e:	e01a      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a20:	a419      	add	r4, pc, #100	; (adr r4, 8005a88 <UART_SetConfig+0x1168>)
 8005a22:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005a26:	e016      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a28:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <UART_SetConfig+0x1194>)
 8005a2a:	f04f 0400 	mov.w	r4, #0
 8005a2e:	e012      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a30:	4b21      	ldr	r3, [pc, #132]	; (8005ab8 <UART_SetConfig+0x1198>)
 8005a32:	f04f 0400 	mov.w	r4, #0
 8005a36:	e00e      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a38:	a415      	add	r4, pc, #84	; (adr r4, 8005a90 <UART_SetConfig+0x1170>)
 8005a3a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005a3e:	e00a      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a40:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <UART_SetConfig+0x119c>)
 8005a42:	f04f 0400 	mov.w	r4, #0
 8005a46:	e006      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a48:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <UART_SetConfig+0x11a0>)
 8005a4a:	f04f 0401 	mov.w	r4, #1
 8005a4e:	e002      	b.n	8005a56 <UART_SetConfig+0x1136>
 8005a50:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <UART_SetConfig+0x1180>)
 8005a52:	f04f 0403 	mov.w	r4, #3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6852      	ldr	r2, [r2, #4]
 8005a5a:	0852      	lsrs	r2, r2, #1
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	eb13 0b01 	adds.w	fp, r3, r1
 8005a66:	eb44 0c02 	adc.w	ip, r4, r2
 8005a6a:	4658      	mov	r0, fp
 8005a6c:	4661      	mov	r1, ip
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f04f 0400 	mov.w	r4, #0
 8005a76:	461a      	mov	r2, r3
 8005a78:	4623      	mov	r3, r4
 8005a7a:	f7fa fc89 	bl	8000390 <__aeabi_uldivmod>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	460c      	mov	r4, r1
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a84:	e122      	b.n	8005ccc <UART_SetConfig+0x13ac>
 8005a86:	bf00      	nop
 8005a88:	51615500 	.word	0x51615500
 8005a8c:	00000000 	.word	0x00000000
 8005a90:	a2c2aa00 	.word	0xa2c2aa00
 8005a94:	00000000 	.word	0x00000000
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	03d09000 	.word	0x03d09000
 8005aa0:	d0900000 	.word	0xd0900000
 8005aa4:	07a12000 	.word	0x07a12000
 8005aa8:	0f424000 	.word	0x0f424000
 8005aac:	1e848000 	.word	0x1e848000
 8005ab0:	3d090000 	.word	0x3d090000
 8005ab4:	61a80000 	.word	0x61a80000
 8005ab8:	7a120000 	.word	0x7a120000
 8005abc:	f4240000 	.word	0xf4240000
 8005ac0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d05b      	beq.n	8005b84 <UART_SetConfig+0x1264>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d053      	beq.n	8005b7c <UART_SetConfig+0x125c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d04b      	beq.n	8005b74 <UART_SetConfig+0x1254>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d043      	beq.n	8005b6c <UART_SetConfig+0x124c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d03b      	beq.n	8005b64 <UART_SetConfig+0x1244>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b05      	cmp	r3, #5
 8005af2:	d033      	beq.n	8005b5c <UART_SetConfig+0x123c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b06      	cmp	r3, #6
 8005afa:	d02b      	beq.n	8005b54 <UART_SetConfig+0x1234>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b07      	cmp	r3, #7
 8005b02:	d023      	beq.n	8005b4c <UART_SetConfig+0x122c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d01b      	beq.n	8005b44 <UART_SetConfig+0x1224>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b09      	cmp	r3, #9
 8005b12:	d013      	beq.n	8005b3c <UART_SetConfig+0x121c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b0a      	cmp	r3, #10
 8005b1a:	d00b      	beq.n	8005b34 <UART_SetConfig+0x1214>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b0b      	cmp	r3, #11
 8005b22:	d103      	bne.n	8005b2c <UART_SetConfig+0x120c>
 8005b24:	4bc0      	ldr	r3, [pc, #768]	; (8005e28 <UART_SetConfig+0x1508>)
 8005b26:	f04f 0400 	mov.w	r4, #0
 8005b2a:	e02e      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b2c:	4bbf      	ldr	r3, [pc, #764]	; (8005e2c <UART_SetConfig+0x150c>)
 8005b2e:	f04f 0400 	mov.w	r4, #0
 8005b32:	e02a      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b34:	4bbe      	ldr	r3, [pc, #760]	; (8005e30 <UART_SetConfig+0x1510>)
 8005b36:	f04f 0400 	mov.w	r4, #0
 8005b3a:	e026      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b3c:	4bbd      	ldr	r3, [pc, #756]	; (8005e34 <UART_SetConfig+0x1514>)
 8005b3e:	f04f 0400 	mov.w	r4, #0
 8005b42:	e022      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b44:	4bbc      	ldr	r3, [pc, #752]	; (8005e38 <UART_SetConfig+0x1518>)
 8005b46:	f04f 0400 	mov.w	r4, #0
 8005b4a:	e01e      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b4c:	4bbb      	ldr	r3, [pc, #748]	; (8005e3c <UART_SetConfig+0x151c>)
 8005b4e:	f04f 0400 	mov.w	r4, #0
 8005b52:	e01a      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b54:	a4b0      	add	r4, pc, #704	; (adr r4, 8005e18 <UART_SetConfig+0x14f8>)
 8005b56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005b5a:	e016      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b5c:	4bb8      	ldr	r3, [pc, #736]	; (8005e40 <UART_SetConfig+0x1520>)
 8005b5e:	f04f 0400 	mov.w	r4, #0
 8005b62:	e012      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b64:	4bb7      	ldr	r3, [pc, #732]	; (8005e44 <UART_SetConfig+0x1524>)
 8005b66:	f04f 0400 	mov.w	r4, #0
 8005b6a:	e00e      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b6c:	a4ac      	add	r4, pc, #688	; (adr r4, 8005e20 <UART_SetConfig+0x1500>)
 8005b6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005b72:	e00a      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b74:	4bb4      	ldr	r3, [pc, #720]	; (8005e48 <UART_SetConfig+0x1528>)
 8005b76:	f04f 0400 	mov.w	r4, #0
 8005b7a:	e006      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b7c:	4bb3      	ldr	r3, [pc, #716]	; (8005e4c <UART_SetConfig+0x152c>)
 8005b7e:	f04f 0400 	mov.w	r4, #0
 8005b82:	e002      	b.n	8005b8a <UART_SetConfig+0x126a>
 8005b84:	4ba9      	ldr	r3, [pc, #676]	; (8005e2c <UART_SetConfig+0x150c>)
 8005b86:	f04f 0400 	mov.w	r4, #0
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6852      	ldr	r2, [r2, #4]
 8005b8e:	0852      	lsrs	r2, r2, #1
 8005b90:	4611      	mov	r1, r2
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	eb13 0b01 	adds.w	fp, r3, r1
 8005b9a:	eb44 0c02 	adc.w	ip, r4, r2
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	4661      	mov	r1, ip
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f04f 0400 	mov.w	r4, #0
 8005baa:	461a      	mov	r2, r3
 8005bac:	4623      	mov	r3, r4
 8005bae:	f7fa fbef 	bl	8000390 <__aeabi_uldivmod>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005bb8:	e088      	b.n	8005ccc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d064      	beq.n	8005c8c <UART_SetConfig+0x136c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d05b      	beq.n	8005c82 <UART_SetConfig+0x1362>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d052      	beq.n	8005c78 <UART_SetConfig+0x1358>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d04a      	beq.n	8005c70 <UART_SetConfig+0x1350>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d041      	beq.n	8005c66 <UART_SetConfig+0x1346>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	2b05      	cmp	r3, #5
 8005be8:	d039      	beq.n	8005c5e <UART_SetConfig+0x133e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d031      	beq.n	8005c56 <UART_SetConfig+0x1336>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	2b07      	cmp	r3, #7
 8005bf8:	d028      	beq.n	8005c4c <UART_SetConfig+0x132c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d01f      	beq.n	8005c42 <UART_SetConfig+0x1322>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2b09      	cmp	r3, #9
 8005c08:	d016      	beq.n	8005c38 <UART_SetConfig+0x1318>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2b0a      	cmp	r3, #10
 8005c10:	d00d      	beq.n	8005c2e <UART_SetConfig+0x130e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	2b0b      	cmp	r3, #11
 8005c18:	d104      	bne.n	8005c24 <UART_SetConfig+0x1304>
 8005c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c1e:	f04f 0400 	mov.w	r4, #0
 8005c22:	e037      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c28:	f04f 0400 	mov.w	r4, #0
 8005c2c:	e032      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c32:	f04f 0400 	mov.w	r4, #0
 8005c36:	e02d      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c3c:	f04f 0400 	mov.w	r4, #0
 8005c40:	e028      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c46:	f04f 0400 	mov.w	r4, #0
 8005c4a:	e023      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005c50:	f04f 0400 	mov.w	r4, #0
 8005c54:	e01e      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c56:	4b7e      	ldr	r3, [pc, #504]	; (8005e50 <UART_SetConfig+0x1530>)
 8005c58:	f04f 0400 	mov.w	r4, #0
 8005c5c:	e01a      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c5e:	4b7d      	ldr	r3, [pc, #500]	; (8005e54 <UART_SetConfig+0x1534>)
 8005c60:	f04f 0400 	mov.w	r4, #0
 8005c64:	e016      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c6a:	f04f 0400 	mov.w	r4, #0
 8005c6e:	e011      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c70:	4b79      	ldr	r3, [pc, #484]	; (8005e58 <UART_SetConfig+0x1538>)
 8005c72:	f04f 0400 	mov.w	r4, #0
 8005c76:	e00d      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c7c:	f04f 0400 	mov.w	r4, #0
 8005c80:	e008      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c86:	f04f 0400 	mov.w	r4, #0
 8005c8a:	e003      	b.n	8005c94 <UART_SetConfig+0x1374>
 8005c8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c90:	f04f 0400 	mov.w	r4, #0
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6852      	ldr	r2, [r2, #4]
 8005c98:	0852      	lsrs	r2, r2, #1
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	eb13 0b01 	adds.w	fp, r3, r1
 8005ca4:	eb44 0c02 	adc.w	ip, r4, r2
 8005ca8:	4658      	mov	r0, fp
 8005caa:	4661      	mov	r1, ip
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f04f 0400 	mov.w	r4, #0
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	f7fa fb6a 	bl	8000390 <__aeabi_uldivmod>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005cc2:	e003      	b.n	8005ccc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8005cca:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd2:	d309      	bcc.n	8005ce8 <UART_SetConfig+0x13c8>
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cda:	d205      	bcs.n	8005ce8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ce2:	60da      	str	r2, [r3, #12]
 8005ce4:	f000 bf85 	b.w	8006bf2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cee:	f000 bf80 	b.w	8006bf2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfa:	f040 83da 	bne.w	80064b2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8005cfe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	f200 83b3 	bhi.w	800646e <UART_SetConfig+0x1b4e>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x13f0>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005e5d 	.word	0x08005e5d
 8005d14:	08005f15 	.word	0x08005f15
 8005d18:	0800646f 	.word	0x0800646f
 8005d1c:	0800646f 	.word	0x0800646f
 8005d20:	08005fcd 	.word	0x08005fcd
 8005d24:	0800646f 	.word	0x0800646f
 8005d28:	0800646f 	.word	0x0800646f
 8005d2c:	0800646f 	.word	0x0800646f
 8005d30:	08006089 	.word	0x08006089
 8005d34:	0800646f 	.word	0x0800646f
 8005d38:	0800646f 	.word	0x0800646f
 8005d3c:	0800646f 	.word	0x0800646f
 8005d40:	0800646f 	.word	0x0800646f
 8005d44:	0800646f 	.word	0x0800646f
 8005d48:	0800646f 	.word	0x0800646f
 8005d4c:	0800646f 	.word	0x0800646f
 8005d50:	08006145 	.word	0x08006145
 8005d54:	0800646f 	.word	0x0800646f
 8005d58:	0800646f 	.word	0x0800646f
 8005d5c:	0800646f 	.word	0x0800646f
 8005d60:	0800646f 	.word	0x0800646f
 8005d64:	0800646f 	.word	0x0800646f
 8005d68:	0800646f 	.word	0x0800646f
 8005d6c:	0800646f 	.word	0x0800646f
 8005d70:	0800646f 	.word	0x0800646f
 8005d74:	0800646f 	.word	0x0800646f
 8005d78:	0800646f 	.word	0x0800646f
 8005d7c:	0800646f 	.word	0x0800646f
 8005d80:	0800646f 	.word	0x0800646f
 8005d84:	0800646f 	.word	0x0800646f
 8005d88:	0800646f 	.word	0x0800646f
 8005d8c:	0800646f 	.word	0x0800646f
 8005d90:	080062b7 	.word	0x080062b7
 8005d94:	0800646f 	.word	0x0800646f
 8005d98:	0800646f 	.word	0x0800646f
 8005d9c:	0800646f 	.word	0x0800646f
 8005da0:	0800646f 	.word	0x0800646f
 8005da4:	0800646f 	.word	0x0800646f
 8005da8:	0800646f 	.word	0x0800646f
 8005dac:	0800646f 	.word	0x0800646f
 8005db0:	0800646f 	.word	0x0800646f
 8005db4:	0800646f 	.word	0x0800646f
 8005db8:	0800646f 	.word	0x0800646f
 8005dbc:	0800646f 	.word	0x0800646f
 8005dc0:	0800646f 	.word	0x0800646f
 8005dc4:	0800646f 	.word	0x0800646f
 8005dc8:	0800646f 	.word	0x0800646f
 8005dcc:	0800646f 	.word	0x0800646f
 8005dd0:	0800646f 	.word	0x0800646f
 8005dd4:	0800646f 	.word	0x0800646f
 8005dd8:	0800646f 	.word	0x0800646f
 8005ddc:	0800646f 	.word	0x0800646f
 8005de0:	0800646f 	.word	0x0800646f
 8005de4:	0800646f 	.word	0x0800646f
 8005de8:	0800646f 	.word	0x0800646f
 8005dec:	0800646f 	.word	0x0800646f
 8005df0:	0800646f 	.word	0x0800646f
 8005df4:	0800646f 	.word	0x0800646f
 8005df8:	0800646f 	.word	0x0800646f
 8005dfc:	0800646f 	.word	0x0800646f
 8005e00:	0800646f 	.word	0x0800646f
 8005e04:	0800646f 	.word	0x0800646f
 8005e08:	0800646f 	.word	0x0800646f
 8005e0c:	0800646f 	.word	0x0800646f
 8005e10:	080063ad 	.word	0x080063ad
 8005e14:	f3af 8000 	nop.w
 8005e18:	05161500 	.word	0x05161500
 8005e1c:	00000000 	.word	0x00000000
 8005e20:	0a2c2a00 	.word	0x0a2c2a00
 8005e24:	00000000 	.word	0x00000000
 8005e28:	003d0900 	.word	0x003d0900
 8005e2c:	3d090000 	.word	0x3d090000
 8005e30:	007a1200 	.word	0x007a1200
 8005e34:	00f42400 	.word	0x00f42400
 8005e38:	01e84800 	.word	0x01e84800
 8005e3c:	03d09000 	.word	0x03d09000
 8005e40:	061a8000 	.word	0x061a8000
 8005e44:	07a12000 	.word	0x07a12000
 8005e48:	0f424000 	.word	0x0f424000
 8005e4c:	1e848000 	.word	0x1e848000
 8005e50:	000aaa00 	.word	0x000aaa00
 8005e54:	000ccc00 	.word	0x000ccc00
 8005e58:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f7fd f930 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8005e60:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d044      	beq.n	8005ef4 <UART_SetConfig+0x15d4>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d03e      	beq.n	8005ef0 <UART_SetConfig+0x15d0>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d038      	beq.n	8005eec <UART_SetConfig+0x15cc>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d032      	beq.n	8005ee8 <UART_SetConfig+0x15c8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d02c      	beq.n	8005ee4 <UART_SetConfig+0x15c4>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d026      	beq.n	8005ee0 <UART_SetConfig+0x15c0>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b06      	cmp	r3, #6
 8005e98:	d020      	beq.n	8005edc <UART_SetConfig+0x15bc>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b07      	cmp	r3, #7
 8005ea0:	d01a      	beq.n	8005ed8 <UART_SetConfig+0x15b8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d014      	beq.n	8005ed4 <UART_SetConfig+0x15b4>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	2b09      	cmp	r3, #9
 8005eb0:	d00e      	beq.n	8005ed0 <UART_SetConfig+0x15b0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b0a      	cmp	r3, #10
 8005eb8:	d008      	beq.n	8005ecc <UART_SetConfig+0x15ac>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	2b0b      	cmp	r3, #11
 8005ec0:	d102      	bne.n	8005ec8 <UART_SetConfig+0x15a8>
 8005ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ec6:	e016      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e014      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	e012      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	e010      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	e00e      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	e00c      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005edc:	230c      	movs	r3, #12
 8005ede:	e00a      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ee0:	230a      	movs	r3, #10
 8005ee2:	e008      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	e006      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ee8:	2306      	movs	r3, #6
 8005eea:	e004      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005eec:	2304      	movs	r3, #4
 8005eee:	e002      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e000      	b.n	8005ef6 <UART_SetConfig+0x15d6>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	005a      	lsls	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	441a      	add	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f12:	e2b0      	b.n	8006476 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f14:	f7fd f8ea 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8005f18:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d044      	beq.n	8005fac <UART_SetConfig+0x168c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d03e      	beq.n	8005fa8 <UART_SetConfig+0x1688>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d038      	beq.n	8005fa4 <UART_SetConfig+0x1684>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d032      	beq.n	8005fa0 <UART_SetConfig+0x1680>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d02c      	beq.n	8005f9c <UART_SetConfig+0x167c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d026      	beq.n	8005f98 <UART_SetConfig+0x1678>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b06      	cmp	r3, #6
 8005f50:	d020      	beq.n	8005f94 <UART_SetConfig+0x1674>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b07      	cmp	r3, #7
 8005f58:	d01a      	beq.n	8005f90 <UART_SetConfig+0x1670>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d014      	beq.n	8005f8c <UART_SetConfig+0x166c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d00e      	beq.n	8005f88 <UART_SetConfig+0x1668>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b0a      	cmp	r3, #10
 8005f70:	d008      	beq.n	8005f84 <UART_SetConfig+0x1664>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b0b      	cmp	r3, #11
 8005f78:	d102      	bne.n	8005f80 <UART_SetConfig+0x1660>
 8005f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f7e:	e016      	b.n	8005fae <UART_SetConfig+0x168e>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e014      	b.n	8005fae <UART_SetConfig+0x168e>
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	e012      	b.n	8005fae <UART_SetConfig+0x168e>
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	e010      	b.n	8005fae <UART_SetConfig+0x168e>
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	e00e      	b.n	8005fae <UART_SetConfig+0x168e>
 8005f90:	2310      	movs	r3, #16
 8005f92:	e00c      	b.n	8005fae <UART_SetConfig+0x168e>
 8005f94:	230c      	movs	r3, #12
 8005f96:	e00a      	b.n	8005fae <UART_SetConfig+0x168e>
 8005f98:	230a      	movs	r3, #10
 8005f9a:	e008      	b.n	8005fae <UART_SetConfig+0x168e>
 8005f9c:	2308      	movs	r3, #8
 8005f9e:	e006      	b.n	8005fae <UART_SetConfig+0x168e>
 8005fa0:	2306      	movs	r3, #6
 8005fa2:	e004      	b.n	8005fae <UART_SetConfig+0x168e>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	e002      	b.n	8005fae <UART_SetConfig+0x168e>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e000      	b.n	8005fae <UART_SetConfig+0x168e>
 8005fac:	2301      	movs	r3, #1
 8005fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	005a      	lsls	r2, r3, #1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	441a      	add	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fca:	e254      	b.n	8006476 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fcc:	f107 0318 	add.w	r3, r7, #24
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fd ffc1 	bl	8003f58 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d044      	beq.n	800606a <UART_SetConfig+0x174a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d03e      	beq.n	8006066 <UART_SetConfig+0x1746>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d038      	beq.n	8006062 <UART_SetConfig+0x1742>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d032      	beq.n	800605e <UART_SetConfig+0x173e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d02c      	beq.n	800605a <UART_SetConfig+0x173a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	2b05      	cmp	r3, #5
 8006006:	d026      	beq.n	8006056 <UART_SetConfig+0x1736>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b06      	cmp	r3, #6
 800600e:	d020      	beq.n	8006052 <UART_SetConfig+0x1732>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	2b07      	cmp	r3, #7
 8006016:	d01a      	beq.n	800604e <UART_SetConfig+0x172e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	2b08      	cmp	r3, #8
 800601e:	d014      	beq.n	800604a <UART_SetConfig+0x172a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	2b09      	cmp	r3, #9
 8006026:	d00e      	beq.n	8006046 <UART_SetConfig+0x1726>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	2b0a      	cmp	r3, #10
 800602e:	d008      	beq.n	8006042 <UART_SetConfig+0x1722>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2b0b      	cmp	r3, #11
 8006036:	d102      	bne.n	800603e <UART_SetConfig+0x171e>
 8006038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800603c:	e016      	b.n	800606c <UART_SetConfig+0x174c>
 800603e:	2301      	movs	r3, #1
 8006040:	e014      	b.n	800606c <UART_SetConfig+0x174c>
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	e012      	b.n	800606c <UART_SetConfig+0x174c>
 8006046:	2340      	movs	r3, #64	; 0x40
 8006048:	e010      	b.n	800606c <UART_SetConfig+0x174c>
 800604a:	2320      	movs	r3, #32
 800604c:	e00e      	b.n	800606c <UART_SetConfig+0x174c>
 800604e:	2310      	movs	r3, #16
 8006050:	e00c      	b.n	800606c <UART_SetConfig+0x174c>
 8006052:	230c      	movs	r3, #12
 8006054:	e00a      	b.n	800606c <UART_SetConfig+0x174c>
 8006056:	230a      	movs	r3, #10
 8006058:	e008      	b.n	800606c <UART_SetConfig+0x174c>
 800605a:	2308      	movs	r3, #8
 800605c:	e006      	b.n	800606c <UART_SetConfig+0x174c>
 800605e:	2306      	movs	r3, #6
 8006060:	e004      	b.n	800606c <UART_SetConfig+0x174c>
 8006062:	2304      	movs	r3, #4
 8006064:	e002      	b.n	800606c <UART_SetConfig+0x174c>
 8006066:	2302      	movs	r3, #2
 8006068:	e000      	b.n	800606c <UART_SetConfig+0x174c>
 800606a:	2301      	movs	r3, #1
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	005a      	lsls	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	441a      	add	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	b29b      	uxth	r3, r3
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006086:	e1f6      	b.n	8006476 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006088:	f107 030c 	add.w	r3, r7, #12
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe f8af 	bl	80041f0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	d044      	beq.n	8006126 <UART_SetConfig+0x1806>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d03e      	beq.n	8006122 <UART_SetConfig+0x1802>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d038      	beq.n	800611e <UART_SetConfig+0x17fe>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d032      	beq.n	800611a <UART_SetConfig+0x17fa>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d02c      	beq.n	8006116 <UART_SetConfig+0x17f6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b05      	cmp	r3, #5
 80060c2:	d026      	beq.n	8006112 <UART_SetConfig+0x17f2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b06      	cmp	r3, #6
 80060ca:	d020      	beq.n	800610e <UART_SetConfig+0x17ee>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b07      	cmp	r3, #7
 80060d2:	d01a      	beq.n	800610a <UART_SetConfig+0x17ea>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d014      	beq.n	8006106 <UART_SetConfig+0x17e6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b09      	cmp	r3, #9
 80060e2:	d00e      	beq.n	8006102 <UART_SetConfig+0x17e2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b0a      	cmp	r3, #10
 80060ea:	d008      	beq.n	80060fe <UART_SetConfig+0x17de>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b0b      	cmp	r3, #11
 80060f2:	d102      	bne.n	80060fa <UART_SetConfig+0x17da>
 80060f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060f8:	e016      	b.n	8006128 <UART_SetConfig+0x1808>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e014      	b.n	8006128 <UART_SetConfig+0x1808>
 80060fe:	2380      	movs	r3, #128	; 0x80
 8006100:	e012      	b.n	8006128 <UART_SetConfig+0x1808>
 8006102:	2340      	movs	r3, #64	; 0x40
 8006104:	e010      	b.n	8006128 <UART_SetConfig+0x1808>
 8006106:	2320      	movs	r3, #32
 8006108:	e00e      	b.n	8006128 <UART_SetConfig+0x1808>
 800610a:	2310      	movs	r3, #16
 800610c:	e00c      	b.n	8006128 <UART_SetConfig+0x1808>
 800610e:	230c      	movs	r3, #12
 8006110:	e00a      	b.n	8006128 <UART_SetConfig+0x1808>
 8006112:	230a      	movs	r3, #10
 8006114:	e008      	b.n	8006128 <UART_SetConfig+0x1808>
 8006116:	2308      	movs	r3, #8
 8006118:	e006      	b.n	8006128 <UART_SetConfig+0x1808>
 800611a:	2306      	movs	r3, #6
 800611c:	e004      	b.n	8006128 <UART_SetConfig+0x1808>
 800611e:	2304      	movs	r3, #4
 8006120:	e002      	b.n	8006128 <UART_SetConfig+0x1808>
 8006122:	2302      	movs	r3, #2
 8006124:	e000      	b.n	8006128 <UART_SetConfig+0x1808>
 8006126:	2301      	movs	r3, #1
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	005a      	lsls	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	b29b      	uxth	r3, r3
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006142:	e198      	b.n	8006476 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006144:	4b87      	ldr	r3, [pc, #540]	; (8006364 <UART_SetConfig+0x1a44>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d05e      	beq.n	800620e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006150:	4b84      	ldr	r3, [pc, #528]	; (8006364 <UART_SetConfig+0x1a44>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	08db      	lsrs	r3, r3, #3
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	4a83      	ldr	r2, [pc, #524]	; (8006368 <UART_SetConfig+0x1a48>)
 800615c:	40da      	lsrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d044      	beq.n	80061f0 <UART_SetConfig+0x18d0>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b01      	cmp	r3, #1
 800616c:	d03e      	beq.n	80061ec <UART_SetConfig+0x18cc>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b02      	cmp	r3, #2
 8006174:	d038      	beq.n	80061e8 <UART_SetConfig+0x18c8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	2b03      	cmp	r3, #3
 800617c:	d032      	beq.n	80061e4 <UART_SetConfig+0x18c4>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2b04      	cmp	r3, #4
 8006184:	d02c      	beq.n	80061e0 <UART_SetConfig+0x18c0>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2b05      	cmp	r3, #5
 800618c:	d026      	beq.n	80061dc <UART_SetConfig+0x18bc>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	2b06      	cmp	r3, #6
 8006194:	d020      	beq.n	80061d8 <UART_SetConfig+0x18b8>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	2b07      	cmp	r3, #7
 800619c:	d01a      	beq.n	80061d4 <UART_SetConfig+0x18b4>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d014      	beq.n	80061d0 <UART_SetConfig+0x18b0>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b09      	cmp	r3, #9
 80061ac:	d00e      	beq.n	80061cc <UART_SetConfig+0x18ac>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b0a      	cmp	r3, #10
 80061b4:	d008      	beq.n	80061c8 <UART_SetConfig+0x18a8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	2b0b      	cmp	r3, #11
 80061bc:	d102      	bne.n	80061c4 <UART_SetConfig+0x18a4>
 80061be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061c2:	e016      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e014      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	e012      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061cc:	2340      	movs	r3, #64	; 0x40
 80061ce:	e010      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061d0:	2320      	movs	r3, #32
 80061d2:	e00e      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061d4:	2310      	movs	r3, #16
 80061d6:	e00c      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061d8:	230c      	movs	r3, #12
 80061da:	e00a      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061dc:	230a      	movs	r3, #10
 80061de:	e008      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061e0:	2308      	movs	r3, #8
 80061e2:	e006      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061e4:	2306      	movs	r3, #6
 80061e6:	e004      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061e8:	2304      	movs	r3, #4
 80061ea:	e002      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e000      	b.n	80061f2 <UART_SetConfig+0x18d2>
 80061f0:	2301      	movs	r3, #1
 80061f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f6:	005a      	lsls	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	085b      	lsrs	r3, r3, #1
 80061fe:	441a      	add	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	b29b      	uxth	r3, r3
 800620a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800620c:	e133      	b.n	8006476 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d043      	beq.n	800629e <UART_SetConfig+0x197e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	2b01      	cmp	r3, #1
 800621c:	d03d      	beq.n	800629a <UART_SetConfig+0x197a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	2b02      	cmp	r3, #2
 8006224:	d037      	beq.n	8006296 <UART_SetConfig+0x1976>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b03      	cmp	r3, #3
 800622c:	d031      	beq.n	8006292 <UART_SetConfig+0x1972>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b04      	cmp	r3, #4
 8006234:	d02b      	beq.n	800628e <UART_SetConfig+0x196e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	2b05      	cmp	r3, #5
 800623c:	d025      	beq.n	800628a <UART_SetConfig+0x196a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b06      	cmp	r3, #6
 8006244:	d01f      	beq.n	8006286 <UART_SetConfig+0x1966>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b07      	cmp	r3, #7
 800624c:	d019      	beq.n	8006282 <UART_SetConfig+0x1962>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	2b08      	cmp	r3, #8
 8006254:	d013      	beq.n	800627e <UART_SetConfig+0x195e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b09      	cmp	r3, #9
 800625c:	d00d      	beq.n	800627a <UART_SetConfig+0x195a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	2b0a      	cmp	r3, #10
 8006264:	d007      	beq.n	8006276 <UART_SetConfig+0x1956>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	2b0b      	cmp	r3, #11
 800626c:	d101      	bne.n	8006272 <UART_SetConfig+0x1952>
 800626e:	4b3f      	ldr	r3, [pc, #252]	; (800636c <UART_SetConfig+0x1a4c>)
 8006270:	e016      	b.n	80062a0 <UART_SetConfig+0x1980>
 8006272:	4b3f      	ldr	r3, [pc, #252]	; (8006370 <UART_SetConfig+0x1a50>)
 8006274:	e014      	b.n	80062a0 <UART_SetConfig+0x1980>
 8006276:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <UART_SetConfig+0x1a54>)
 8006278:	e012      	b.n	80062a0 <UART_SetConfig+0x1980>
 800627a:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <UART_SetConfig+0x1a58>)
 800627c:	e010      	b.n	80062a0 <UART_SetConfig+0x1980>
 800627e:	4b3f      	ldr	r3, [pc, #252]	; (800637c <UART_SetConfig+0x1a5c>)
 8006280:	e00e      	b.n	80062a0 <UART_SetConfig+0x1980>
 8006282:	4b3f      	ldr	r3, [pc, #252]	; (8006380 <UART_SetConfig+0x1a60>)
 8006284:	e00c      	b.n	80062a0 <UART_SetConfig+0x1980>
 8006286:	4b3f      	ldr	r3, [pc, #252]	; (8006384 <UART_SetConfig+0x1a64>)
 8006288:	e00a      	b.n	80062a0 <UART_SetConfig+0x1980>
 800628a:	4b3f      	ldr	r3, [pc, #252]	; (8006388 <UART_SetConfig+0x1a68>)
 800628c:	e008      	b.n	80062a0 <UART_SetConfig+0x1980>
 800628e:	4b3f      	ldr	r3, [pc, #252]	; (800638c <UART_SetConfig+0x1a6c>)
 8006290:	e006      	b.n	80062a0 <UART_SetConfig+0x1980>
 8006292:	4b3f      	ldr	r3, [pc, #252]	; (8006390 <UART_SetConfig+0x1a70>)
 8006294:	e004      	b.n	80062a0 <UART_SetConfig+0x1980>
 8006296:	4b3f      	ldr	r3, [pc, #252]	; (8006394 <UART_SetConfig+0x1a74>)
 8006298:	e002      	b.n	80062a0 <UART_SetConfig+0x1980>
 800629a:	4b33      	ldr	r3, [pc, #204]	; (8006368 <UART_SetConfig+0x1a48>)
 800629c:	e000      	b.n	80062a0 <UART_SetConfig+0x1980>
 800629e:	4b34      	ldr	r3, [pc, #208]	; (8006370 <UART_SetConfig+0x1a50>)
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6852      	ldr	r2, [r2, #4]
 80062a4:	0852      	lsrs	r2, r2, #1
 80062a6:	441a      	add	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062b4:	e0df      	b.n	8006476 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d045      	beq.n	800634a <UART_SetConfig+0x1a2a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d03f      	beq.n	8006346 <UART_SetConfig+0x1a26>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d039      	beq.n	8006342 <UART_SetConfig+0x1a22>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d033      	beq.n	800633e <UART_SetConfig+0x1a1e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d02d      	beq.n	800633a <UART_SetConfig+0x1a1a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d027      	beq.n	8006336 <UART_SetConfig+0x1a16>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d021      	beq.n	8006332 <UART_SetConfig+0x1a12>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	2b07      	cmp	r3, #7
 80062f4:	d01b      	beq.n	800632e <UART_SetConfig+0x1a0e>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d015      	beq.n	800632a <UART_SetConfig+0x1a0a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b09      	cmp	r3, #9
 8006304:	d00f      	beq.n	8006326 <UART_SetConfig+0x1a06>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	2b0a      	cmp	r3, #10
 800630c:	d008      	beq.n	8006320 <UART_SetConfig+0x1a00>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	2b0b      	cmp	r3, #11
 8006314:	d102      	bne.n	800631c <UART_SetConfig+0x19fc>
 8006316:	f647 2312 	movw	r3, #31250	; 0x7a12
 800631a:	e017      	b.n	800634c <UART_SetConfig+0x1a2c>
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <UART_SetConfig+0x1a60>)
 800631e:	e015      	b.n	800634c <UART_SetConfig+0x1a2c>
 8006320:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006324:	e012      	b.n	800634c <UART_SetConfig+0x1a2c>
 8006326:	4b1c      	ldr	r3, [pc, #112]	; (8006398 <UART_SetConfig+0x1a78>)
 8006328:	e010      	b.n	800634c <UART_SetConfig+0x1a2c>
 800632a:	4b1c      	ldr	r3, [pc, #112]	; (800639c <UART_SetConfig+0x1a7c>)
 800632c:	e00e      	b.n	800634c <UART_SetConfig+0x1a2c>
 800632e:	4b0f      	ldr	r3, [pc, #60]	; (800636c <UART_SetConfig+0x1a4c>)
 8006330:	e00c      	b.n	800634c <UART_SetConfig+0x1a2c>
 8006332:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <UART_SetConfig+0x1a80>)
 8006334:	e00a      	b.n	800634c <UART_SetConfig+0x1a2c>
 8006336:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <UART_SetConfig+0x1a84>)
 8006338:	e008      	b.n	800634c <UART_SetConfig+0x1a2c>
 800633a:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <UART_SetConfig+0x1a54>)
 800633c:	e006      	b.n	800634c <UART_SetConfig+0x1a2c>
 800633e:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <UART_SetConfig+0x1a88>)
 8006340:	e004      	b.n	800634c <UART_SetConfig+0x1a2c>
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <UART_SetConfig+0x1a58>)
 8006344:	e002      	b.n	800634c <UART_SetConfig+0x1a2c>
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <UART_SetConfig+0x1a5c>)
 8006348:	e000      	b.n	800634c <UART_SetConfig+0x1a2c>
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <UART_SetConfig+0x1a60>)
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6852      	ldr	r2, [r2, #4]
 8006350:	0852      	lsrs	r2, r2, #1
 8006352:	441a      	add	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	b29b      	uxth	r3, r3
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006360:	e089      	b.n	8006476 <UART_SetConfig+0x1b56>
 8006362:	bf00      	nop
 8006364:	58024400 	.word	0x58024400
 8006368:	03d09000 	.word	0x03d09000
 800636c:	0007a120 	.word	0x0007a120
 8006370:	07a12000 	.word	0x07a12000
 8006374:	000f4240 	.word	0x000f4240
 8006378:	001e8480 	.word	0x001e8480
 800637c:	003d0900 	.word	0x003d0900
 8006380:	007a1200 	.word	0x007a1200
 8006384:	00a2c2aa 	.word	0x00a2c2aa
 8006388:	00c35000 	.word	0x00c35000
 800638c:	00f42400 	.word	0x00f42400
 8006390:	01458554 	.word	0x01458554
 8006394:	01e84800 	.word	0x01e84800
 8006398:	0001e848 	.word	0x0001e848
 800639c:	0003d090 	.word	0x0003d090
 80063a0:	000a2c2a 	.word	0x000a2c2a
 80063a4:	000c3500 	.word	0x000c3500
 80063a8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d04f      	beq.n	8006454 <UART_SetConfig+0x1b34>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d048      	beq.n	800644e <UART_SetConfig+0x1b2e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d041      	beq.n	8006448 <UART_SetConfig+0x1b28>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d03a      	beq.n	8006442 <UART_SetConfig+0x1b22>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d033      	beq.n	800643c <UART_SetConfig+0x1b1c>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2b05      	cmp	r3, #5
 80063da:	d02c      	beq.n	8006436 <UART_SetConfig+0x1b16>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	2b06      	cmp	r3, #6
 80063e2:	d025      	beq.n	8006430 <UART_SetConfig+0x1b10>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	2b07      	cmp	r3, #7
 80063ea:	d01e      	beq.n	800642a <UART_SetConfig+0x1b0a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d017      	beq.n	8006424 <UART_SetConfig+0x1b04>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b09      	cmp	r3, #9
 80063fa:	d010      	beq.n	800641e <UART_SetConfig+0x1afe>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	2b0a      	cmp	r3, #10
 8006402:	d009      	beq.n	8006418 <UART_SetConfig+0x1af8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	2b0b      	cmp	r3, #11
 800640a:	d102      	bne.n	8006412 <UART_SetConfig+0x1af2>
 800640c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006410:	e022      	b.n	8006458 <UART_SetConfig+0x1b38>
 8006412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006416:	e01f      	b.n	8006458 <UART_SetConfig+0x1b38>
 8006418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800641c:	e01c      	b.n	8006458 <UART_SetConfig+0x1b38>
 800641e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006422:	e019      	b.n	8006458 <UART_SetConfig+0x1b38>
 8006424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006428:	e016      	b.n	8006458 <UART_SetConfig+0x1b38>
 800642a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800642e:	e013      	b.n	8006458 <UART_SetConfig+0x1b38>
 8006430:	f241 5354 	movw	r3, #5460	; 0x1554
 8006434:	e010      	b.n	8006458 <UART_SetConfig+0x1b38>
 8006436:	f641 1398 	movw	r3, #6552	; 0x1998
 800643a:	e00d      	b.n	8006458 <UART_SetConfig+0x1b38>
 800643c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006440:	e00a      	b.n	8006458 <UART_SetConfig+0x1b38>
 8006442:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006446:	e007      	b.n	8006458 <UART_SetConfig+0x1b38>
 8006448:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800644c:	e004      	b.n	8006458 <UART_SetConfig+0x1b38>
 800644e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006452:	e001      	b.n	8006458 <UART_SetConfig+0x1b38>
 8006454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6852      	ldr	r2, [r2, #4]
 800645c:	0852      	lsrs	r2, r2, #1
 800645e:	441a      	add	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	fbb2 f3f3 	udiv	r3, r2, r3
 8006468:	b29b      	uxth	r3, r3
 800646a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800646c:	e003      	b.n	8006476 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	2b0f      	cmp	r3, #15
 800647a:	d916      	bls.n	80064aa <UART_SetConfig+0x1b8a>
 800647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006482:	d212      	bcs.n	80064aa <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	b29b      	uxth	r3, r3
 8006488:	f023 030f 	bic.w	r3, r3, #15
 800648c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	b29b      	uxth	r3, r3
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	b29a      	uxth	r2, r3
 800649a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800649c:	4313      	orrs	r3, r2
 800649e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064a6:	60da      	str	r2, [r3, #12]
 80064a8:	e3a3      	b.n	8006bf2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b0:	e39f      	b.n	8006bf2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 80064b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	f200 8388 	bhi.w	8006bcc <UART_SetConfig+0x22ac>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x1ba4>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080065c9 	.word	0x080065c9
 80064c8:	0800667f 	.word	0x0800667f
 80064cc:	08006bcd 	.word	0x08006bcd
 80064d0:	08006bcd 	.word	0x08006bcd
 80064d4:	08006735 	.word	0x08006735
 80064d8:	08006bcd 	.word	0x08006bcd
 80064dc:	08006bcd 	.word	0x08006bcd
 80064e0:	08006bcd 	.word	0x08006bcd
 80064e4:	080067ef 	.word	0x080067ef
 80064e8:	08006bcd 	.word	0x08006bcd
 80064ec:	08006bcd 	.word	0x08006bcd
 80064f0:	08006bcd 	.word	0x08006bcd
 80064f4:	08006bcd 	.word	0x08006bcd
 80064f8:	08006bcd 	.word	0x08006bcd
 80064fc:	08006bcd 	.word	0x08006bcd
 8006500:	08006bcd 	.word	0x08006bcd
 8006504:	080068a9 	.word	0x080068a9
 8006508:	08006bcd 	.word	0x08006bcd
 800650c:	08006bcd 	.word	0x08006bcd
 8006510:	08006bcd 	.word	0x08006bcd
 8006514:	08006bcd 	.word	0x08006bcd
 8006518:	08006bcd 	.word	0x08006bcd
 800651c:	08006bcd 	.word	0x08006bcd
 8006520:	08006bcd 	.word	0x08006bcd
 8006524:	08006bcd 	.word	0x08006bcd
 8006528:	08006bcd 	.word	0x08006bcd
 800652c:	08006bcd 	.word	0x08006bcd
 8006530:	08006bcd 	.word	0x08006bcd
 8006534:	08006bcd 	.word	0x08006bcd
 8006538:	08006bcd 	.word	0x08006bcd
 800653c:	08006bcd 	.word	0x08006bcd
 8006540:	08006bcd 	.word	0x08006bcd
 8006544:	08006a19 	.word	0x08006a19
 8006548:	08006bcd 	.word	0x08006bcd
 800654c:	08006bcd 	.word	0x08006bcd
 8006550:	08006bcd 	.word	0x08006bcd
 8006554:	08006bcd 	.word	0x08006bcd
 8006558:	08006bcd 	.word	0x08006bcd
 800655c:	08006bcd 	.word	0x08006bcd
 8006560:	08006bcd 	.word	0x08006bcd
 8006564:	08006bcd 	.word	0x08006bcd
 8006568:	08006bcd 	.word	0x08006bcd
 800656c:	08006bcd 	.word	0x08006bcd
 8006570:	08006bcd 	.word	0x08006bcd
 8006574:	08006bcd 	.word	0x08006bcd
 8006578:	08006bcd 	.word	0x08006bcd
 800657c:	08006bcd 	.word	0x08006bcd
 8006580:	08006bcd 	.word	0x08006bcd
 8006584:	08006bcd 	.word	0x08006bcd
 8006588:	08006bcd 	.word	0x08006bcd
 800658c:	08006bcd 	.word	0x08006bcd
 8006590:	08006bcd 	.word	0x08006bcd
 8006594:	08006bcd 	.word	0x08006bcd
 8006598:	08006bcd 	.word	0x08006bcd
 800659c:	08006bcd 	.word	0x08006bcd
 80065a0:	08006bcd 	.word	0x08006bcd
 80065a4:	08006bcd 	.word	0x08006bcd
 80065a8:	08006bcd 	.word	0x08006bcd
 80065ac:	08006bcd 	.word	0x08006bcd
 80065b0:	08006bcd 	.word	0x08006bcd
 80065b4:	08006bcd 	.word	0x08006bcd
 80065b8:	08006bcd 	.word	0x08006bcd
 80065bc:	08006bcd 	.word	0x08006bcd
 80065c0:	08006bcd 	.word	0x08006bcd
 80065c4:	08006b0d 	.word	0x08006b0d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fc fd7a 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 80065cc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d044      	beq.n	8006660 <UART_SetConfig+0x1d40>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d03e      	beq.n	800665c <UART_SetConfig+0x1d3c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d038      	beq.n	8006658 <UART_SetConfig+0x1d38>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d032      	beq.n	8006654 <UART_SetConfig+0x1d34>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d02c      	beq.n	8006650 <UART_SetConfig+0x1d30>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	2b05      	cmp	r3, #5
 80065fc:	d026      	beq.n	800664c <UART_SetConfig+0x1d2c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	2b06      	cmp	r3, #6
 8006604:	d020      	beq.n	8006648 <UART_SetConfig+0x1d28>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	2b07      	cmp	r3, #7
 800660c:	d01a      	beq.n	8006644 <UART_SetConfig+0x1d24>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	2b08      	cmp	r3, #8
 8006614:	d014      	beq.n	8006640 <UART_SetConfig+0x1d20>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	2b09      	cmp	r3, #9
 800661c:	d00e      	beq.n	800663c <UART_SetConfig+0x1d1c>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	2b0a      	cmp	r3, #10
 8006624:	d008      	beq.n	8006638 <UART_SetConfig+0x1d18>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	2b0b      	cmp	r3, #11
 800662c:	d102      	bne.n	8006634 <UART_SetConfig+0x1d14>
 800662e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006632:	e016      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006634:	2301      	movs	r3, #1
 8006636:	e014      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006638:	2380      	movs	r3, #128	; 0x80
 800663a:	e012      	b.n	8006662 <UART_SetConfig+0x1d42>
 800663c:	2340      	movs	r3, #64	; 0x40
 800663e:	e010      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006640:	2320      	movs	r3, #32
 8006642:	e00e      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006644:	2310      	movs	r3, #16
 8006646:	e00c      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006648:	230c      	movs	r3, #12
 800664a:	e00a      	b.n	8006662 <UART_SetConfig+0x1d42>
 800664c:	230a      	movs	r3, #10
 800664e:	e008      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006650:	2308      	movs	r3, #8
 8006652:	e006      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006654:	2306      	movs	r3, #6
 8006656:	e004      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006658:	2304      	movs	r3, #4
 800665a:	e002      	b.n	8006662 <UART_SetConfig+0x1d42>
 800665c:	2302      	movs	r3, #2
 800665e:	e000      	b.n	8006662 <UART_SetConfig+0x1d42>
 8006660:	2301      	movs	r3, #1
 8006662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006664:	fbb2 f2f3 	udiv	r2, r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	441a      	add	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	b29b      	uxth	r3, r3
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800667c:	e2aa      	b.n	8006bd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800667e:	f7fc fd35 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8006682:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d044      	beq.n	8006716 <UART_SetConfig+0x1df6>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	2b01      	cmp	r3, #1
 8006692:	d03e      	beq.n	8006712 <UART_SetConfig+0x1df2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	2b02      	cmp	r3, #2
 800669a:	d038      	beq.n	800670e <UART_SetConfig+0x1dee>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d032      	beq.n	800670a <UART_SetConfig+0x1dea>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d02c      	beq.n	8006706 <UART_SetConfig+0x1de6>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	d026      	beq.n	8006702 <UART_SetConfig+0x1de2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	2b06      	cmp	r3, #6
 80066ba:	d020      	beq.n	80066fe <UART_SetConfig+0x1dde>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	2b07      	cmp	r3, #7
 80066c2:	d01a      	beq.n	80066fa <UART_SetConfig+0x1dda>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d014      	beq.n	80066f6 <UART_SetConfig+0x1dd6>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	2b09      	cmp	r3, #9
 80066d2:	d00e      	beq.n	80066f2 <UART_SetConfig+0x1dd2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	2b0a      	cmp	r3, #10
 80066da:	d008      	beq.n	80066ee <UART_SetConfig+0x1dce>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	2b0b      	cmp	r3, #11
 80066e2:	d102      	bne.n	80066ea <UART_SetConfig+0x1dca>
 80066e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066e8:	e016      	b.n	8006718 <UART_SetConfig+0x1df8>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e014      	b.n	8006718 <UART_SetConfig+0x1df8>
 80066ee:	2380      	movs	r3, #128	; 0x80
 80066f0:	e012      	b.n	8006718 <UART_SetConfig+0x1df8>
 80066f2:	2340      	movs	r3, #64	; 0x40
 80066f4:	e010      	b.n	8006718 <UART_SetConfig+0x1df8>
 80066f6:	2320      	movs	r3, #32
 80066f8:	e00e      	b.n	8006718 <UART_SetConfig+0x1df8>
 80066fa:	2310      	movs	r3, #16
 80066fc:	e00c      	b.n	8006718 <UART_SetConfig+0x1df8>
 80066fe:	230c      	movs	r3, #12
 8006700:	e00a      	b.n	8006718 <UART_SetConfig+0x1df8>
 8006702:	230a      	movs	r3, #10
 8006704:	e008      	b.n	8006718 <UART_SetConfig+0x1df8>
 8006706:	2308      	movs	r3, #8
 8006708:	e006      	b.n	8006718 <UART_SetConfig+0x1df8>
 800670a:	2306      	movs	r3, #6
 800670c:	e004      	b.n	8006718 <UART_SetConfig+0x1df8>
 800670e:	2304      	movs	r3, #4
 8006710:	e002      	b.n	8006718 <UART_SetConfig+0x1df8>
 8006712:	2302      	movs	r3, #2
 8006714:	e000      	b.n	8006718 <UART_SetConfig+0x1df8>
 8006716:	2301      	movs	r3, #1
 8006718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671a:	fbb2 f2f3 	udiv	r2, r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	b29b      	uxth	r3, r3
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006732:	e24f      	b.n	8006bd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006734:	f107 0318 	add.w	r3, r7, #24
 8006738:	4618      	mov	r0, r3
 800673a:	f7fd fc0d 	bl	8003f58 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d044      	beq.n	80067d2 <UART_SetConfig+0x1eb2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b01      	cmp	r3, #1
 800674e:	d03e      	beq.n	80067ce <UART_SetConfig+0x1eae>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	2b02      	cmp	r3, #2
 8006756:	d038      	beq.n	80067ca <UART_SetConfig+0x1eaa>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	2b03      	cmp	r3, #3
 800675e:	d032      	beq.n	80067c6 <UART_SetConfig+0x1ea6>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2b04      	cmp	r3, #4
 8006766:	d02c      	beq.n	80067c2 <UART_SetConfig+0x1ea2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2b05      	cmp	r3, #5
 800676e:	d026      	beq.n	80067be <UART_SetConfig+0x1e9e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	2b06      	cmp	r3, #6
 8006776:	d020      	beq.n	80067ba <UART_SetConfig+0x1e9a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b07      	cmp	r3, #7
 800677e:	d01a      	beq.n	80067b6 <UART_SetConfig+0x1e96>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	2b08      	cmp	r3, #8
 8006786:	d014      	beq.n	80067b2 <UART_SetConfig+0x1e92>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	2b09      	cmp	r3, #9
 800678e:	d00e      	beq.n	80067ae <UART_SetConfig+0x1e8e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2b0a      	cmp	r3, #10
 8006796:	d008      	beq.n	80067aa <UART_SetConfig+0x1e8a>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	2b0b      	cmp	r3, #11
 800679e:	d102      	bne.n	80067a6 <UART_SetConfig+0x1e86>
 80067a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067a4:	e016      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e014      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	e012      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067ae:	2340      	movs	r3, #64	; 0x40
 80067b0:	e010      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067b2:	2320      	movs	r3, #32
 80067b4:	e00e      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067b6:	2310      	movs	r3, #16
 80067b8:	e00c      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067ba:	230c      	movs	r3, #12
 80067bc:	e00a      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067be:	230a      	movs	r3, #10
 80067c0:	e008      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067c2:	2308      	movs	r3, #8
 80067c4:	e006      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067c6:	2306      	movs	r3, #6
 80067c8:	e004      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067ca:	2304      	movs	r3, #4
 80067cc:	e002      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e000      	b.n	80067d4 <UART_SetConfig+0x1eb4>
 80067d2:	2301      	movs	r3, #1
 80067d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	085b      	lsrs	r3, r3, #1
 80067de:	441a      	add	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ec:	e1f2      	b.n	8006bd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ee:	f107 030c 	add.w	r3, r7, #12
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fd fcfc 	bl	80041f0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d044      	beq.n	800688c <UART_SetConfig+0x1f6c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2b01      	cmp	r3, #1
 8006808:	d03e      	beq.n	8006888 <UART_SetConfig+0x1f68>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	2b02      	cmp	r3, #2
 8006810:	d038      	beq.n	8006884 <UART_SetConfig+0x1f64>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b03      	cmp	r3, #3
 8006818:	d032      	beq.n	8006880 <UART_SetConfig+0x1f60>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b04      	cmp	r3, #4
 8006820:	d02c      	beq.n	800687c <UART_SetConfig+0x1f5c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b05      	cmp	r3, #5
 8006828:	d026      	beq.n	8006878 <UART_SetConfig+0x1f58>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b06      	cmp	r3, #6
 8006830:	d020      	beq.n	8006874 <UART_SetConfig+0x1f54>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b07      	cmp	r3, #7
 8006838:	d01a      	beq.n	8006870 <UART_SetConfig+0x1f50>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b08      	cmp	r3, #8
 8006840:	d014      	beq.n	800686c <UART_SetConfig+0x1f4c>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	2b09      	cmp	r3, #9
 8006848:	d00e      	beq.n	8006868 <UART_SetConfig+0x1f48>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	2b0a      	cmp	r3, #10
 8006850:	d008      	beq.n	8006864 <UART_SetConfig+0x1f44>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b0b      	cmp	r3, #11
 8006858:	d102      	bne.n	8006860 <UART_SetConfig+0x1f40>
 800685a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800685e:	e016      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006860:	2301      	movs	r3, #1
 8006862:	e014      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006864:	2380      	movs	r3, #128	; 0x80
 8006866:	e012      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006868:	2340      	movs	r3, #64	; 0x40
 800686a:	e010      	b.n	800688e <UART_SetConfig+0x1f6e>
 800686c:	2320      	movs	r3, #32
 800686e:	e00e      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006870:	2310      	movs	r3, #16
 8006872:	e00c      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006874:	230c      	movs	r3, #12
 8006876:	e00a      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006878:	230a      	movs	r3, #10
 800687a:	e008      	b.n	800688e <UART_SetConfig+0x1f6e>
 800687c:	2308      	movs	r3, #8
 800687e:	e006      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006880:	2306      	movs	r3, #6
 8006882:	e004      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006884:	2304      	movs	r3, #4
 8006886:	e002      	b.n	800688e <UART_SetConfig+0x1f6e>
 8006888:	2302      	movs	r3, #2
 800688a:	e000      	b.n	800688e <UART_SetConfig+0x1f6e>
 800688c:	2301      	movs	r3, #1
 800688e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	441a      	add	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068a6:	e195      	b.n	8006bd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068a8:	4b87      	ldr	r3, [pc, #540]	; (8006ac8 <UART_SetConfig+0x21a8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d05d      	beq.n	8006970 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b4:	4b84      	ldr	r3, [pc, #528]	; (8006ac8 <UART_SetConfig+0x21a8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	08db      	lsrs	r3, r3, #3
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	4a83      	ldr	r2, [pc, #524]	; (8006acc <UART_SetConfig+0x21ac>)
 80068c0:	40da      	lsrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d044      	beq.n	8006954 <UART_SetConfig+0x2034>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d03e      	beq.n	8006950 <UART_SetConfig+0x2030>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d038      	beq.n	800694c <UART_SetConfig+0x202c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d032      	beq.n	8006948 <UART_SetConfig+0x2028>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d02c      	beq.n	8006944 <UART_SetConfig+0x2024>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	2b05      	cmp	r3, #5
 80068f0:	d026      	beq.n	8006940 <UART_SetConfig+0x2020>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d020      	beq.n	800693c <UART_SetConfig+0x201c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	2b07      	cmp	r3, #7
 8006900:	d01a      	beq.n	8006938 <UART_SetConfig+0x2018>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	2b08      	cmp	r3, #8
 8006908:	d014      	beq.n	8006934 <UART_SetConfig+0x2014>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	2b09      	cmp	r3, #9
 8006910:	d00e      	beq.n	8006930 <UART_SetConfig+0x2010>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	2b0a      	cmp	r3, #10
 8006918:	d008      	beq.n	800692c <UART_SetConfig+0x200c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2b0b      	cmp	r3, #11
 8006920:	d102      	bne.n	8006928 <UART_SetConfig+0x2008>
 8006922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006926:	e016      	b.n	8006956 <UART_SetConfig+0x2036>
 8006928:	2301      	movs	r3, #1
 800692a:	e014      	b.n	8006956 <UART_SetConfig+0x2036>
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	e012      	b.n	8006956 <UART_SetConfig+0x2036>
 8006930:	2340      	movs	r3, #64	; 0x40
 8006932:	e010      	b.n	8006956 <UART_SetConfig+0x2036>
 8006934:	2320      	movs	r3, #32
 8006936:	e00e      	b.n	8006956 <UART_SetConfig+0x2036>
 8006938:	2310      	movs	r3, #16
 800693a:	e00c      	b.n	8006956 <UART_SetConfig+0x2036>
 800693c:	230c      	movs	r3, #12
 800693e:	e00a      	b.n	8006956 <UART_SetConfig+0x2036>
 8006940:	230a      	movs	r3, #10
 8006942:	e008      	b.n	8006956 <UART_SetConfig+0x2036>
 8006944:	2308      	movs	r3, #8
 8006946:	e006      	b.n	8006956 <UART_SetConfig+0x2036>
 8006948:	2306      	movs	r3, #6
 800694a:	e004      	b.n	8006956 <UART_SetConfig+0x2036>
 800694c:	2304      	movs	r3, #4
 800694e:	e002      	b.n	8006956 <UART_SetConfig+0x2036>
 8006950:	2302      	movs	r3, #2
 8006952:	e000      	b.n	8006956 <UART_SetConfig+0x2036>
 8006954:	2301      	movs	r3, #1
 8006956:	fbb2 f2f3 	udiv	r2, r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	fbb2 f3f3 	udiv	r3, r2, r3
 800696a:	b29b      	uxth	r3, r3
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800696e:	e131      	b.n	8006bd4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	2b00      	cmp	r3, #0
 8006976:	d043      	beq.n	8006a00 <UART_SetConfig+0x20e0>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b01      	cmp	r3, #1
 800697e:	d03d      	beq.n	80069fc <UART_SetConfig+0x20dc>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	2b02      	cmp	r3, #2
 8006986:	d037      	beq.n	80069f8 <UART_SetConfig+0x20d8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	2b03      	cmp	r3, #3
 800698e:	d031      	beq.n	80069f4 <UART_SetConfig+0x20d4>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2b04      	cmp	r3, #4
 8006996:	d02b      	beq.n	80069f0 <UART_SetConfig+0x20d0>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	2b05      	cmp	r3, #5
 800699e:	d025      	beq.n	80069ec <UART_SetConfig+0x20cc>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	2b06      	cmp	r3, #6
 80069a6:	d01f      	beq.n	80069e8 <UART_SetConfig+0x20c8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	2b07      	cmp	r3, #7
 80069ae:	d019      	beq.n	80069e4 <UART_SetConfig+0x20c4>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d013      	beq.n	80069e0 <UART_SetConfig+0x20c0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	2b09      	cmp	r3, #9
 80069be:	d00d      	beq.n	80069dc <UART_SetConfig+0x20bc>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	2b0a      	cmp	r3, #10
 80069c6:	d007      	beq.n	80069d8 <UART_SetConfig+0x20b8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2b0b      	cmp	r3, #11
 80069ce:	d101      	bne.n	80069d4 <UART_SetConfig+0x20b4>
 80069d0:	4b3f      	ldr	r3, [pc, #252]	; (8006ad0 <UART_SetConfig+0x21b0>)
 80069d2:	e016      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069d4:	4b3d      	ldr	r3, [pc, #244]	; (8006acc <UART_SetConfig+0x21ac>)
 80069d6:	e014      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069d8:	4b3e      	ldr	r3, [pc, #248]	; (8006ad4 <UART_SetConfig+0x21b4>)
 80069da:	e012      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069dc:	4b3e      	ldr	r3, [pc, #248]	; (8006ad8 <UART_SetConfig+0x21b8>)
 80069de:	e010      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069e0:	4b3e      	ldr	r3, [pc, #248]	; (8006adc <UART_SetConfig+0x21bc>)
 80069e2:	e00e      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069e4:	4b3e      	ldr	r3, [pc, #248]	; (8006ae0 <UART_SetConfig+0x21c0>)
 80069e6:	e00c      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069e8:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <UART_SetConfig+0x21c4>)
 80069ea:	e00a      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069ec:	4b3e      	ldr	r3, [pc, #248]	; (8006ae8 <UART_SetConfig+0x21c8>)
 80069ee:	e008      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069f0:	4b3e      	ldr	r3, [pc, #248]	; (8006aec <UART_SetConfig+0x21cc>)
 80069f2:	e006      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069f4:	4b3e      	ldr	r3, [pc, #248]	; (8006af0 <UART_SetConfig+0x21d0>)
 80069f6:	e004      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069f8:	4b3e      	ldr	r3, [pc, #248]	; (8006af4 <UART_SetConfig+0x21d4>)
 80069fa:	e002      	b.n	8006a02 <UART_SetConfig+0x20e2>
 80069fc:	4b3e      	ldr	r3, [pc, #248]	; (8006af8 <UART_SetConfig+0x21d8>)
 80069fe:	e000      	b.n	8006a02 <UART_SetConfig+0x20e2>
 8006a00:	4b32      	ldr	r3, [pc, #200]	; (8006acc <UART_SetConfig+0x21ac>)
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6852      	ldr	r2, [r2, #4]
 8006a06:	0852      	lsrs	r2, r2, #1
 8006a08:	441a      	add	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a16:	e0dd      	b.n	8006bd4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d046      	beq.n	8006aae <UART_SetConfig+0x218e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d040      	beq.n	8006aaa <UART_SetConfig+0x218a>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d03a      	beq.n	8006aa6 <UART_SetConfig+0x2186>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d034      	beq.n	8006aa2 <UART_SetConfig+0x2182>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d02e      	beq.n	8006a9e <UART_SetConfig+0x217e>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d028      	beq.n	8006a9a <UART_SetConfig+0x217a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	2b06      	cmp	r3, #6
 8006a4e:	d022      	beq.n	8006a96 <UART_SetConfig+0x2176>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	2b07      	cmp	r3, #7
 8006a56:	d01c      	beq.n	8006a92 <UART_SetConfig+0x2172>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d016      	beq.n	8006a8e <UART_SetConfig+0x216e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	2b09      	cmp	r3, #9
 8006a66:	d00f      	beq.n	8006a88 <UART_SetConfig+0x2168>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	2b0a      	cmp	r3, #10
 8006a6e:	d008      	beq.n	8006a82 <UART_SetConfig+0x2162>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	2b0b      	cmp	r3, #11
 8006a76:	d102      	bne.n	8006a7e <UART_SetConfig+0x215e>
 8006a78:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006a7c:	e018      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006a7e:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <UART_SetConfig+0x21c0>)
 8006a80:	e016      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006a82:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006a86:	e013      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006a88:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006a8c:	e010      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006a8e:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <UART_SetConfig+0x21dc>)
 8006a90:	e00e      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006a92:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <UART_SetConfig+0x21b0>)
 8006a94:	e00c      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006a96:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <UART_SetConfig+0x21e0>)
 8006a98:	e00a      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006a9a:	4b1a      	ldr	r3, [pc, #104]	; (8006b04 <UART_SetConfig+0x21e4>)
 8006a9c:	e008      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ad4 <UART_SetConfig+0x21b4>)
 8006aa0:	e006      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006aa2:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <UART_SetConfig+0x21e8>)
 8006aa4:	e004      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <UART_SetConfig+0x21b8>)
 8006aa8:	e002      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <UART_SetConfig+0x21bc>)
 8006aac:	e000      	b.n	8006ab0 <UART_SetConfig+0x2190>
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <UART_SetConfig+0x21c0>)
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6852      	ldr	r2, [r2, #4]
 8006ab4:	0852      	lsrs	r2, r2, #1
 8006ab6:	441a      	add	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ac4:	e086      	b.n	8006bd4 <UART_SetConfig+0x22b4>
 8006ac6:	bf00      	nop
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	03d09000 	.word	0x03d09000
 8006ad0:	0003d090 	.word	0x0003d090
 8006ad4:	0007a120 	.word	0x0007a120
 8006ad8:	000f4240 	.word	0x000f4240
 8006adc:	001e8480 	.word	0x001e8480
 8006ae0:	003d0900 	.word	0x003d0900
 8006ae4:	00516155 	.word	0x00516155
 8006ae8:	0061a800 	.word	0x0061a800
 8006aec:	007a1200 	.word	0x007a1200
 8006af0:	00a2c2aa 	.word	0x00a2c2aa
 8006af4:	00f42400 	.word	0x00f42400
 8006af8:	01e84800 	.word	0x01e84800
 8006afc:	0001e848 	.word	0x0001e848
 8006b00:	00051615 	.word	0x00051615
 8006b04:	00061a80 	.word	0x00061a80
 8006b08:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d04e      	beq.n	8006bb2 <UART_SetConfig+0x2292>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d047      	beq.n	8006bac <UART_SetConfig+0x228c>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d040      	beq.n	8006ba6 <UART_SetConfig+0x2286>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d039      	beq.n	8006ba0 <UART_SetConfig+0x2280>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d032      	beq.n	8006b9a <UART_SetConfig+0x227a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	2b05      	cmp	r3, #5
 8006b3a:	d02b      	beq.n	8006b94 <UART_SetConfig+0x2274>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	2b06      	cmp	r3, #6
 8006b42:	d024      	beq.n	8006b8e <UART_SetConfig+0x226e>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	2b07      	cmp	r3, #7
 8006b4a:	d01d      	beq.n	8006b88 <UART_SetConfig+0x2268>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d016      	beq.n	8006b82 <UART_SetConfig+0x2262>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	2b09      	cmp	r3, #9
 8006b5a:	d00f      	beq.n	8006b7c <UART_SetConfig+0x225c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	2b0a      	cmp	r3, #10
 8006b62:	d008      	beq.n	8006b76 <UART_SetConfig+0x2256>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	2b0b      	cmp	r3, #11
 8006b6a:	d101      	bne.n	8006b70 <UART_SetConfig+0x2250>
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	e022      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b74:	e01f      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b7a:	e01c      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b80:	e019      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b86:	e016      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b8c:	e013      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006b8e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006b92:	e010      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006b94:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006b98:	e00d      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b9e:	e00a      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006ba0:	f241 5355 	movw	r3, #5461	; 0x1555
 8006ba4:	e007      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006baa:	e004      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006bac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bb0:	e001      	b.n	8006bb6 <UART_SetConfig+0x2296>
 8006bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6852      	ldr	r2, [r2, #4]
 8006bba:	0852      	lsrs	r2, r2, #1
 8006bbc:	441a      	add	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bca:	e003      	b.n	8006bd4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006bd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	2b0f      	cmp	r3, #15
 8006bd8:	d908      	bls.n	8006bec <UART_SetConfig+0x22cc>
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be0:	d204      	bcs.n	8006bec <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	e002      	b.n	8006bf2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3740      	adds	r7, #64	; 0x40
 8006c16:	46bd      	mov	sp, r7
 8006c18:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1a:	d10a      	bne.n	8006d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d70:	f7fa f9c4 	bl	80010fc <HAL_GetTick>
 8006d74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d10e      	bne.n	8006da2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f82c 	bl	8006df0 <UART_WaitOnFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e022      	b.n	8006de8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d10e      	bne.n	8006dce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f816 	bl	8006df0 <UART_WaitOnFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e00c      	b.n	8006de8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e00:	e062      	b.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e08:	d05e      	beq.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0a:	f7fa f977 	bl	80010fc <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d302      	bcc.n	8006e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d11d      	bne.n	8006e5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e2e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e045      	b.n	8006ee8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d02e      	beq.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e78:	d126      	bne.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e82:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e92:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0201 	bic.w	r2, r2, #1
 8006ea2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e00f      	b.n	8006ee8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2301      	moveq	r3, #1
 8006eda:	2300      	movne	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	461a      	mov	r2, r3
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d08d      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e027      	b.n	8006f56 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2224      	movs	r2, #36	; 0x24
 8006f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0201 	bic.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d101      	bne.n	8006f7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f76:	2302      	movs	r3, #2
 8006f78:	e02d      	b.n	8006fd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2224      	movs	r2, #36	; 0x24
 8006f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0201 	bic.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f850 	bl	800705c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e02d      	b.n	8007052 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2224      	movs	r2, #36	; 0x24
 8007002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0201 	bic.w	r2, r2, #1
 800701c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f812 	bl	800705c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b089      	sub	sp, #36	; 0x24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007064:	4a2f      	ldr	r2, [pc, #188]	; (8007124 <UARTEx_SetNbDataToProcess+0xc8>)
 8007066:	f107 0314 	add.w	r3, r7, #20
 800706a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800706e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007072:	4a2d      	ldr	r2, [pc, #180]	; (8007128 <UARTEx_SetNbDataToProcess+0xcc>)
 8007074:	f107 030c 	add.w	r3, r7, #12
 8007078:	e892 0003 	ldmia.w	r2, {r0, r1}
 800707c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007084:	2b00      	cmp	r3, #0
 8007086:	d108      	bne.n	800709a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007098:	e03d      	b.n	8007116 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800709a:	2308      	movs	r3, #8
 800709c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800709e:	2308      	movs	r3, #8
 80070a0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	0e5b      	lsrs	r3, r3, #25
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	0f5b      	lsrs	r3, r3, #29
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80070c2:	7fbb      	ldrb	r3, [r7, #30]
 80070c4:	7f3a      	ldrb	r2, [r7, #28]
 80070c6:	f107 0120 	add.w	r1, r7, #32
 80070ca:	440a      	add	r2, r1
 80070cc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
 80070d4:	7f3a      	ldrb	r2, [r7, #28]
 80070d6:	f107 0120 	add.w	r1, r7, #32
 80070da:	440a      	add	r2, r1
 80070dc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80070e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80070ec:	7ffb      	ldrb	r3, [r7, #31]
 80070ee:	7f7a      	ldrb	r2, [r7, #29]
 80070f0:	f107 0120 	add.w	r1, r7, #32
 80070f4:	440a      	add	r2, r1
 80070f6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
 80070fe:	7f7a      	ldrb	r2, [r7, #29]
 8007100:	f107 0120 	add.w	r1, r7, #32
 8007104:	440a      	add	r2, r1
 8007106:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800710a:	fb93 f3f2 	sdiv	r3, r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007116:	bf00      	nop
 8007118:	3724      	adds	r7, #36	; 0x24
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	080079dc 	.word	0x080079dc
 8007128:	080079e4 	.word	0x080079e4

0800712c <__errno>:
 800712c:	4b01      	ldr	r3, [pc, #4]	; (8007134 <__errno+0x8>)
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	20000010 	.word	0x20000010

08007138 <__libc_init_array>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4e0d      	ldr	r6, [pc, #52]	; (8007170 <__libc_init_array+0x38>)
 800713c:	4c0d      	ldr	r4, [pc, #52]	; (8007174 <__libc_init_array+0x3c>)
 800713e:	1ba4      	subs	r4, r4, r6
 8007140:	10a4      	asrs	r4, r4, #2
 8007142:	2500      	movs	r5, #0
 8007144:	42a5      	cmp	r5, r4
 8007146:	d109      	bne.n	800715c <__libc_init_array+0x24>
 8007148:	4e0b      	ldr	r6, [pc, #44]	; (8007178 <__libc_init_array+0x40>)
 800714a:	4c0c      	ldr	r4, [pc, #48]	; (800717c <__libc_init_array+0x44>)
 800714c:	f000 fc26 	bl	800799c <_init>
 8007150:	1ba4      	subs	r4, r4, r6
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	2500      	movs	r5, #0
 8007156:	42a5      	cmp	r5, r4
 8007158:	d105      	bne.n	8007166 <__libc_init_array+0x2e>
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007160:	4798      	blx	r3
 8007162:	3501      	adds	r5, #1
 8007164:	e7ee      	b.n	8007144 <__libc_init_array+0xc>
 8007166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800716a:	4798      	blx	r3
 800716c:	3501      	adds	r5, #1
 800716e:	e7f2      	b.n	8007156 <__libc_init_array+0x1e>
 8007170:	08007a38 	.word	0x08007a38
 8007174:	08007a38 	.word	0x08007a38
 8007178:	08007a38 	.word	0x08007a38
 800717c:	08007a3c 	.word	0x08007a3c

08007180 <memset>:
 8007180:	4402      	add	r2, r0
 8007182:	4603      	mov	r3, r0
 8007184:	4293      	cmp	r3, r2
 8007186:	d100      	bne.n	800718a <memset+0xa>
 8007188:	4770      	bx	lr
 800718a:	f803 1b01 	strb.w	r1, [r3], #1
 800718e:	e7f9      	b.n	8007184 <memset+0x4>

08007190 <siprintf>:
 8007190:	b40e      	push	{r1, r2, r3}
 8007192:	b500      	push	{lr}
 8007194:	b09c      	sub	sp, #112	; 0x70
 8007196:	ab1d      	add	r3, sp, #116	; 0x74
 8007198:	9002      	str	r0, [sp, #8]
 800719a:	9006      	str	r0, [sp, #24]
 800719c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071a0:	4809      	ldr	r0, [pc, #36]	; (80071c8 <siprintf+0x38>)
 80071a2:	9107      	str	r1, [sp, #28]
 80071a4:	9104      	str	r1, [sp, #16]
 80071a6:	4909      	ldr	r1, [pc, #36]	; (80071cc <siprintf+0x3c>)
 80071a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ac:	9105      	str	r1, [sp, #20]
 80071ae:	6800      	ldr	r0, [r0, #0]
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	a902      	add	r1, sp, #8
 80071b4:	f000 f866 	bl	8007284 <_svfiprintf_r>
 80071b8:	9b02      	ldr	r3, [sp, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	b01c      	add	sp, #112	; 0x70
 80071c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c4:	b003      	add	sp, #12
 80071c6:	4770      	bx	lr
 80071c8:	20000010 	.word	0x20000010
 80071cc:	ffff0208 	.word	0xffff0208

080071d0 <__ssputs_r>:
 80071d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	688e      	ldr	r6, [r1, #8]
 80071d6:	429e      	cmp	r6, r3
 80071d8:	4682      	mov	sl, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	4690      	mov	r8, r2
 80071de:	4699      	mov	r9, r3
 80071e0:	d837      	bhi.n	8007252 <__ssputs_r+0x82>
 80071e2:	898a      	ldrh	r2, [r1, #12]
 80071e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071e8:	d031      	beq.n	800724e <__ssputs_r+0x7e>
 80071ea:	6825      	ldr	r5, [r4, #0]
 80071ec:	6909      	ldr	r1, [r1, #16]
 80071ee:	1a6f      	subs	r7, r5, r1
 80071f0:	6965      	ldr	r5, [r4, #20]
 80071f2:	2302      	movs	r3, #2
 80071f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80071fc:	f109 0301 	add.w	r3, r9, #1
 8007200:	443b      	add	r3, r7
 8007202:	429d      	cmp	r5, r3
 8007204:	bf38      	it	cc
 8007206:	461d      	movcc	r5, r3
 8007208:	0553      	lsls	r3, r2, #21
 800720a:	d530      	bpl.n	800726e <__ssputs_r+0x9e>
 800720c:	4629      	mov	r1, r5
 800720e:	f000 fb2b 	bl	8007868 <_malloc_r>
 8007212:	4606      	mov	r6, r0
 8007214:	b950      	cbnz	r0, 800722c <__ssputs_r+0x5c>
 8007216:	230c      	movs	r3, #12
 8007218:	f8ca 3000 	str.w	r3, [sl]
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722c:	463a      	mov	r2, r7
 800722e:	6921      	ldr	r1, [r4, #16]
 8007230:	f000 faa8 	bl	8007784 <memcpy>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800723a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	6126      	str	r6, [r4, #16]
 8007242:	6165      	str	r5, [r4, #20]
 8007244:	443e      	add	r6, r7
 8007246:	1bed      	subs	r5, r5, r7
 8007248:	6026      	str	r6, [r4, #0]
 800724a:	60a5      	str	r5, [r4, #8]
 800724c:	464e      	mov	r6, r9
 800724e:	454e      	cmp	r6, r9
 8007250:	d900      	bls.n	8007254 <__ssputs_r+0x84>
 8007252:	464e      	mov	r6, r9
 8007254:	4632      	mov	r2, r6
 8007256:	4641      	mov	r1, r8
 8007258:	6820      	ldr	r0, [r4, #0]
 800725a:	f000 fa9e 	bl	800779a <memmove>
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	1b9b      	subs	r3, r3, r6
 8007262:	60a3      	str	r3, [r4, #8]
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	441e      	add	r6, r3
 8007268:	6026      	str	r6, [r4, #0]
 800726a:	2000      	movs	r0, #0
 800726c:	e7dc      	b.n	8007228 <__ssputs_r+0x58>
 800726e:	462a      	mov	r2, r5
 8007270:	f000 fb54 	bl	800791c <_realloc_r>
 8007274:	4606      	mov	r6, r0
 8007276:	2800      	cmp	r0, #0
 8007278:	d1e2      	bne.n	8007240 <__ssputs_r+0x70>
 800727a:	6921      	ldr	r1, [r4, #16]
 800727c:	4650      	mov	r0, sl
 800727e:	f000 faa5 	bl	80077cc <_free_r>
 8007282:	e7c8      	b.n	8007216 <__ssputs_r+0x46>

08007284 <_svfiprintf_r>:
 8007284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007288:	461d      	mov	r5, r3
 800728a:	898b      	ldrh	r3, [r1, #12]
 800728c:	061f      	lsls	r7, r3, #24
 800728e:	b09d      	sub	sp, #116	; 0x74
 8007290:	4680      	mov	r8, r0
 8007292:	460c      	mov	r4, r1
 8007294:	4616      	mov	r6, r2
 8007296:	d50f      	bpl.n	80072b8 <_svfiprintf_r+0x34>
 8007298:	690b      	ldr	r3, [r1, #16]
 800729a:	b96b      	cbnz	r3, 80072b8 <_svfiprintf_r+0x34>
 800729c:	2140      	movs	r1, #64	; 0x40
 800729e:	f000 fae3 	bl	8007868 <_malloc_r>
 80072a2:	6020      	str	r0, [r4, #0]
 80072a4:	6120      	str	r0, [r4, #16]
 80072a6:	b928      	cbnz	r0, 80072b4 <_svfiprintf_r+0x30>
 80072a8:	230c      	movs	r3, #12
 80072aa:	f8c8 3000 	str.w	r3, [r8]
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295
 80072b2:	e0c8      	b.n	8007446 <_svfiprintf_r+0x1c2>
 80072b4:	2340      	movs	r3, #64	; 0x40
 80072b6:	6163      	str	r3, [r4, #20]
 80072b8:	2300      	movs	r3, #0
 80072ba:	9309      	str	r3, [sp, #36]	; 0x24
 80072bc:	2320      	movs	r3, #32
 80072be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072c2:	2330      	movs	r3, #48	; 0x30
 80072c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072c8:	9503      	str	r5, [sp, #12]
 80072ca:	f04f 0b01 	mov.w	fp, #1
 80072ce:	4637      	mov	r7, r6
 80072d0:	463d      	mov	r5, r7
 80072d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072d6:	b10b      	cbz	r3, 80072dc <_svfiprintf_r+0x58>
 80072d8:	2b25      	cmp	r3, #37	; 0x25
 80072da:	d13e      	bne.n	800735a <_svfiprintf_r+0xd6>
 80072dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80072e0:	d00b      	beq.n	80072fa <_svfiprintf_r+0x76>
 80072e2:	4653      	mov	r3, sl
 80072e4:	4632      	mov	r2, r6
 80072e6:	4621      	mov	r1, r4
 80072e8:	4640      	mov	r0, r8
 80072ea:	f7ff ff71 	bl	80071d0 <__ssputs_r>
 80072ee:	3001      	adds	r0, #1
 80072f0:	f000 80a4 	beq.w	800743c <_svfiprintf_r+0x1b8>
 80072f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f6:	4453      	add	r3, sl
 80072f8:	9309      	str	r3, [sp, #36]	; 0x24
 80072fa:	783b      	ldrb	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 809d 	beq.w	800743c <_svfiprintf_r+0x1b8>
 8007302:	2300      	movs	r3, #0
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007314:	931a      	str	r3, [sp, #104]	; 0x68
 8007316:	462f      	mov	r7, r5
 8007318:	2205      	movs	r2, #5
 800731a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800731e:	4850      	ldr	r0, [pc, #320]	; (8007460 <_svfiprintf_r+0x1dc>)
 8007320:	f7f8 ffe6 	bl	80002f0 <memchr>
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	b9d0      	cbnz	r0, 800735e <_svfiprintf_r+0xda>
 8007328:	06d9      	lsls	r1, r3, #27
 800732a:	bf44      	itt	mi
 800732c:	2220      	movmi	r2, #32
 800732e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007332:	071a      	lsls	r2, r3, #28
 8007334:	bf44      	itt	mi
 8007336:	222b      	movmi	r2, #43	; 0x2b
 8007338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800733c:	782a      	ldrb	r2, [r5, #0]
 800733e:	2a2a      	cmp	r2, #42	; 0x2a
 8007340:	d015      	beq.n	800736e <_svfiprintf_r+0xea>
 8007342:	9a07      	ldr	r2, [sp, #28]
 8007344:	462f      	mov	r7, r5
 8007346:	2000      	movs	r0, #0
 8007348:	250a      	movs	r5, #10
 800734a:	4639      	mov	r1, r7
 800734c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007350:	3b30      	subs	r3, #48	; 0x30
 8007352:	2b09      	cmp	r3, #9
 8007354:	d94d      	bls.n	80073f2 <_svfiprintf_r+0x16e>
 8007356:	b1b8      	cbz	r0, 8007388 <_svfiprintf_r+0x104>
 8007358:	e00f      	b.n	800737a <_svfiprintf_r+0xf6>
 800735a:	462f      	mov	r7, r5
 800735c:	e7b8      	b.n	80072d0 <_svfiprintf_r+0x4c>
 800735e:	4a40      	ldr	r2, [pc, #256]	; (8007460 <_svfiprintf_r+0x1dc>)
 8007360:	1a80      	subs	r0, r0, r2
 8007362:	fa0b f000 	lsl.w	r0, fp, r0
 8007366:	4318      	orrs	r0, r3
 8007368:	9004      	str	r0, [sp, #16]
 800736a:	463d      	mov	r5, r7
 800736c:	e7d3      	b.n	8007316 <_svfiprintf_r+0x92>
 800736e:	9a03      	ldr	r2, [sp, #12]
 8007370:	1d11      	adds	r1, r2, #4
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	9103      	str	r1, [sp, #12]
 8007376:	2a00      	cmp	r2, #0
 8007378:	db01      	blt.n	800737e <_svfiprintf_r+0xfa>
 800737a:	9207      	str	r2, [sp, #28]
 800737c:	e004      	b.n	8007388 <_svfiprintf_r+0x104>
 800737e:	4252      	negs	r2, r2
 8007380:	f043 0302 	orr.w	r3, r3, #2
 8007384:	9207      	str	r2, [sp, #28]
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	783b      	ldrb	r3, [r7, #0]
 800738a:	2b2e      	cmp	r3, #46	; 0x2e
 800738c:	d10c      	bne.n	80073a8 <_svfiprintf_r+0x124>
 800738e:	787b      	ldrb	r3, [r7, #1]
 8007390:	2b2a      	cmp	r3, #42	; 0x2a
 8007392:	d133      	bne.n	80073fc <_svfiprintf_r+0x178>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	1d1a      	adds	r2, r3, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	9203      	str	r2, [sp, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfb8      	it	lt
 80073a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80073a4:	3702      	adds	r7, #2
 80073a6:	9305      	str	r3, [sp, #20]
 80073a8:	4d2e      	ldr	r5, [pc, #184]	; (8007464 <_svfiprintf_r+0x1e0>)
 80073aa:	7839      	ldrb	r1, [r7, #0]
 80073ac:	2203      	movs	r2, #3
 80073ae:	4628      	mov	r0, r5
 80073b0:	f7f8 ff9e 	bl	80002f0 <memchr>
 80073b4:	b138      	cbz	r0, 80073c6 <_svfiprintf_r+0x142>
 80073b6:	2340      	movs	r3, #64	; 0x40
 80073b8:	1b40      	subs	r0, r0, r5
 80073ba:	fa03 f000 	lsl.w	r0, r3, r0
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	4303      	orrs	r3, r0
 80073c2:	3701      	adds	r7, #1
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	7839      	ldrb	r1, [r7, #0]
 80073c8:	4827      	ldr	r0, [pc, #156]	; (8007468 <_svfiprintf_r+0x1e4>)
 80073ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073ce:	2206      	movs	r2, #6
 80073d0:	1c7e      	adds	r6, r7, #1
 80073d2:	f7f8 ff8d 	bl	80002f0 <memchr>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d038      	beq.n	800744c <_svfiprintf_r+0x1c8>
 80073da:	4b24      	ldr	r3, [pc, #144]	; (800746c <_svfiprintf_r+0x1e8>)
 80073dc:	bb13      	cbnz	r3, 8007424 <_svfiprintf_r+0x1a0>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	3307      	adds	r3, #7
 80073e2:	f023 0307 	bic.w	r3, r3, #7
 80073e6:	3308      	adds	r3, #8
 80073e8:	9303      	str	r3, [sp, #12]
 80073ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ec:	444b      	add	r3, r9
 80073ee:	9309      	str	r3, [sp, #36]	; 0x24
 80073f0:	e76d      	b.n	80072ce <_svfiprintf_r+0x4a>
 80073f2:	fb05 3202 	mla	r2, r5, r2, r3
 80073f6:	2001      	movs	r0, #1
 80073f8:	460f      	mov	r7, r1
 80073fa:	e7a6      	b.n	800734a <_svfiprintf_r+0xc6>
 80073fc:	2300      	movs	r3, #0
 80073fe:	3701      	adds	r7, #1
 8007400:	9305      	str	r3, [sp, #20]
 8007402:	4619      	mov	r1, r3
 8007404:	250a      	movs	r5, #10
 8007406:	4638      	mov	r0, r7
 8007408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800740c:	3a30      	subs	r2, #48	; 0x30
 800740e:	2a09      	cmp	r2, #9
 8007410:	d903      	bls.n	800741a <_svfiprintf_r+0x196>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0c8      	beq.n	80073a8 <_svfiprintf_r+0x124>
 8007416:	9105      	str	r1, [sp, #20]
 8007418:	e7c6      	b.n	80073a8 <_svfiprintf_r+0x124>
 800741a:	fb05 2101 	mla	r1, r5, r1, r2
 800741e:	2301      	movs	r3, #1
 8007420:	4607      	mov	r7, r0
 8007422:	e7f0      	b.n	8007406 <_svfiprintf_r+0x182>
 8007424:	ab03      	add	r3, sp, #12
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4622      	mov	r2, r4
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <_svfiprintf_r+0x1ec>)
 800742c:	a904      	add	r1, sp, #16
 800742e:	4640      	mov	r0, r8
 8007430:	f3af 8000 	nop.w
 8007434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007438:	4681      	mov	r9, r0
 800743a:	d1d6      	bne.n	80073ea <_svfiprintf_r+0x166>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	065b      	lsls	r3, r3, #25
 8007440:	f53f af35 	bmi.w	80072ae <_svfiprintf_r+0x2a>
 8007444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007446:	b01d      	add	sp, #116	; 0x74
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	ab03      	add	r3, sp, #12
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	4622      	mov	r2, r4
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <_svfiprintf_r+0x1ec>)
 8007454:	a904      	add	r1, sp, #16
 8007456:	4640      	mov	r0, r8
 8007458:	f000 f882 	bl	8007560 <_printf_i>
 800745c:	e7ea      	b.n	8007434 <_svfiprintf_r+0x1b0>
 800745e:	bf00      	nop
 8007460:	080079fc 	.word	0x080079fc
 8007464:	08007a02 	.word	0x08007a02
 8007468:	08007a06 	.word	0x08007a06
 800746c:	00000000 	.word	0x00000000
 8007470:	080071d1 	.word	0x080071d1

08007474 <_printf_common>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	4691      	mov	r9, r2
 800747a:	461f      	mov	r7, r3
 800747c:	688a      	ldr	r2, [r1, #8]
 800747e:	690b      	ldr	r3, [r1, #16]
 8007480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007484:	4293      	cmp	r3, r2
 8007486:	bfb8      	it	lt
 8007488:	4613      	movlt	r3, r2
 800748a:	f8c9 3000 	str.w	r3, [r9]
 800748e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007492:	4606      	mov	r6, r0
 8007494:	460c      	mov	r4, r1
 8007496:	b112      	cbz	r2, 800749e <_printf_common+0x2a>
 8007498:	3301      	adds	r3, #1
 800749a:	f8c9 3000 	str.w	r3, [r9]
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	0699      	lsls	r1, r3, #26
 80074a2:	bf42      	ittt	mi
 80074a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074a8:	3302      	addmi	r3, #2
 80074aa:	f8c9 3000 	strmi.w	r3, [r9]
 80074ae:	6825      	ldr	r5, [r4, #0]
 80074b0:	f015 0506 	ands.w	r5, r5, #6
 80074b4:	d107      	bne.n	80074c6 <_printf_common+0x52>
 80074b6:	f104 0a19 	add.w	sl, r4, #25
 80074ba:	68e3      	ldr	r3, [r4, #12]
 80074bc:	f8d9 2000 	ldr.w	r2, [r9]
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	42ab      	cmp	r3, r5
 80074c4:	dc28      	bgt.n	8007518 <_printf_common+0xa4>
 80074c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	3300      	adds	r3, #0
 80074ce:	bf18      	it	ne
 80074d0:	2301      	movne	r3, #1
 80074d2:	0692      	lsls	r2, r2, #26
 80074d4:	d42d      	bmi.n	8007532 <_printf_common+0xbe>
 80074d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074da:	4639      	mov	r1, r7
 80074dc:	4630      	mov	r0, r6
 80074de:	47c0      	blx	r8
 80074e0:	3001      	adds	r0, #1
 80074e2:	d020      	beq.n	8007526 <_printf_common+0xb2>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	68e5      	ldr	r5, [r4, #12]
 80074e8:	f8d9 2000 	ldr.w	r2, [r9]
 80074ec:	f003 0306 	and.w	r3, r3, #6
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	bf08      	it	eq
 80074f4:	1aad      	subeq	r5, r5, r2
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	bf0c      	ite	eq
 80074fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007500:	2500      	movne	r5, #0
 8007502:	4293      	cmp	r3, r2
 8007504:	bfc4      	itt	gt
 8007506:	1a9b      	subgt	r3, r3, r2
 8007508:	18ed      	addgt	r5, r5, r3
 800750a:	f04f 0900 	mov.w	r9, #0
 800750e:	341a      	adds	r4, #26
 8007510:	454d      	cmp	r5, r9
 8007512:	d11a      	bne.n	800754a <_printf_common+0xd6>
 8007514:	2000      	movs	r0, #0
 8007516:	e008      	b.n	800752a <_printf_common+0xb6>
 8007518:	2301      	movs	r3, #1
 800751a:	4652      	mov	r2, sl
 800751c:	4639      	mov	r1, r7
 800751e:	4630      	mov	r0, r6
 8007520:	47c0      	blx	r8
 8007522:	3001      	adds	r0, #1
 8007524:	d103      	bne.n	800752e <_printf_common+0xba>
 8007526:	f04f 30ff 	mov.w	r0, #4294967295
 800752a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752e:	3501      	adds	r5, #1
 8007530:	e7c3      	b.n	80074ba <_printf_common+0x46>
 8007532:	18e1      	adds	r1, r4, r3
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	2030      	movs	r0, #48	; 0x30
 8007538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800753c:	4422      	add	r2, r4
 800753e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007542:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007546:	3302      	adds	r3, #2
 8007548:	e7c5      	b.n	80074d6 <_printf_common+0x62>
 800754a:	2301      	movs	r3, #1
 800754c:	4622      	mov	r2, r4
 800754e:	4639      	mov	r1, r7
 8007550:	4630      	mov	r0, r6
 8007552:	47c0      	blx	r8
 8007554:	3001      	adds	r0, #1
 8007556:	d0e6      	beq.n	8007526 <_printf_common+0xb2>
 8007558:	f109 0901 	add.w	r9, r9, #1
 800755c:	e7d8      	b.n	8007510 <_printf_common+0x9c>
	...

08007560 <_printf_i>:
 8007560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007568:	460c      	mov	r4, r1
 800756a:	7e09      	ldrb	r1, [r1, #24]
 800756c:	b085      	sub	sp, #20
 800756e:	296e      	cmp	r1, #110	; 0x6e
 8007570:	4617      	mov	r7, r2
 8007572:	4606      	mov	r6, r0
 8007574:	4698      	mov	r8, r3
 8007576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007578:	f000 80b3 	beq.w	80076e2 <_printf_i+0x182>
 800757c:	d822      	bhi.n	80075c4 <_printf_i+0x64>
 800757e:	2963      	cmp	r1, #99	; 0x63
 8007580:	d036      	beq.n	80075f0 <_printf_i+0x90>
 8007582:	d80a      	bhi.n	800759a <_printf_i+0x3a>
 8007584:	2900      	cmp	r1, #0
 8007586:	f000 80b9 	beq.w	80076fc <_printf_i+0x19c>
 800758a:	2958      	cmp	r1, #88	; 0x58
 800758c:	f000 8083 	beq.w	8007696 <_printf_i+0x136>
 8007590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007598:	e032      	b.n	8007600 <_printf_i+0xa0>
 800759a:	2964      	cmp	r1, #100	; 0x64
 800759c:	d001      	beq.n	80075a2 <_printf_i+0x42>
 800759e:	2969      	cmp	r1, #105	; 0x69
 80075a0:	d1f6      	bne.n	8007590 <_printf_i+0x30>
 80075a2:	6820      	ldr	r0, [r4, #0]
 80075a4:	6813      	ldr	r3, [r2, #0]
 80075a6:	0605      	lsls	r5, r0, #24
 80075a8:	f103 0104 	add.w	r1, r3, #4
 80075ac:	d52a      	bpl.n	8007604 <_printf_i+0xa4>
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6011      	str	r1, [r2, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	da03      	bge.n	80075be <_printf_i+0x5e>
 80075b6:	222d      	movs	r2, #45	; 0x2d
 80075b8:	425b      	negs	r3, r3
 80075ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80075be:	486f      	ldr	r0, [pc, #444]	; (800777c <_printf_i+0x21c>)
 80075c0:	220a      	movs	r2, #10
 80075c2:	e039      	b.n	8007638 <_printf_i+0xd8>
 80075c4:	2973      	cmp	r1, #115	; 0x73
 80075c6:	f000 809d 	beq.w	8007704 <_printf_i+0x1a4>
 80075ca:	d808      	bhi.n	80075de <_printf_i+0x7e>
 80075cc:	296f      	cmp	r1, #111	; 0x6f
 80075ce:	d020      	beq.n	8007612 <_printf_i+0xb2>
 80075d0:	2970      	cmp	r1, #112	; 0x70
 80075d2:	d1dd      	bne.n	8007590 <_printf_i+0x30>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	f043 0320 	orr.w	r3, r3, #32
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	e003      	b.n	80075e6 <_printf_i+0x86>
 80075de:	2975      	cmp	r1, #117	; 0x75
 80075e0:	d017      	beq.n	8007612 <_printf_i+0xb2>
 80075e2:	2978      	cmp	r1, #120	; 0x78
 80075e4:	d1d4      	bne.n	8007590 <_printf_i+0x30>
 80075e6:	2378      	movs	r3, #120	; 0x78
 80075e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ec:	4864      	ldr	r0, [pc, #400]	; (8007780 <_printf_i+0x220>)
 80075ee:	e055      	b.n	800769c <_printf_i+0x13c>
 80075f0:	6813      	ldr	r3, [r2, #0]
 80075f2:	1d19      	adds	r1, r3, #4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6011      	str	r1, [r2, #0]
 80075f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007600:	2301      	movs	r3, #1
 8007602:	e08c      	b.n	800771e <_printf_i+0x1be>
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6011      	str	r1, [r2, #0]
 8007608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800760c:	bf18      	it	ne
 800760e:	b21b      	sxthne	r3, r3
 8007610:	e7cf      	b.n	80075b2 <_printf_i+0x52>
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	1d18      	adds	r0, r3, #4
 8007618:	6010      	str	r0, [r2, #0]
 800761a:	0628      	lsls	r0, r5, #24
 800761c:	d501      	bpl.n	8007622 <_printf_i+0xc2>
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	e002      	b.n	8007628 <_printf_i+0xc8>
 8007622:	0668      	lsls	r0, r5, #25
 8007624:	d5fb      	bpl.n	800761e <_printf_i+0xbe>
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	4854      	ldr	r0, [pc, #336]	; (800777c <_printf_i+0x21c>)
 800762a:	296f      	cmp	r1, #111	; 0x6f
 800762c:	bf14      	ite	ne
 800762e:	220a      	movne	r2, #10
 8007630:	2208      	moveq	r2, #8
 8007632:	2100      	movs	r1, #0
 8007634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007638:	6865      	ldr	r5, [r4, #4]
 800763a:	60a5      	str	r5, [r4, #8]
 800763c:	2d00      	cmp	r5, #0
 800763e:	f2c0 8095 	blt.w	800776c <_printf_i+0x20c>
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	f021 0104 	bic.w	r1, r1, #4
 8007648:	6021      	str	r1, [r4, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d13d      	bne.n	80076ca <_printf_i+0x16a>
 800764e:	2d00      	cmp	r5, #0
 8007650:	f040 808e 	bne.w	8007770 <_printf_i+0x210>
 8007654:	4665      	mov	r5, ip
 8007656:	2a08      	cmp	r2, #8
 8007658:	d10b      	bne.n	8007672 <_printf_i+0x112>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	07db      	lsls	r3, r3, #31
 800765e:	d508      	bpl.n	8007672 <_printf_i+0x112>
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	6862      	ldr	r2, [r4, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	bfde      	ittt	le
 8007668:	2330      	movle	r3, #48	; 0x30
 800766a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800766e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007672:	ebac 0305 	sub.w	r3, ip, r5
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	f8cd 8000 	str.w	r8, [sp]
 800767c:	463b      	mov	r3, r7
 800767e:	aa03      	add	r2, sp, #12
 8007680:	4621      	mov	r1, r4
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff fef6 	bl	8007474 <_printf_common>
 8007688:	3001      	adds	r0, #1
 800768a:	d14d      	bne.n	8007728 <_printf_i+0x1c8>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	b005      	add	sp, #20
 8007692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007696:	4839      	ldr	r0, [pc, #228]	; (800777c <_printf_i+0x21c>)
 8007698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800769c:	6813      	ldr	r3, [r2, #0]
 800769e:	6821      	ldr	r1, [r4, #0]
 80076a0:	1d1d      	adds	r5, r3, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6015      	str	r5, [r2, #0]
 80076a6:	060a      	lsls	r2, r1, #24
 80076a8:	d50b      	bpl.n	80076c2 <_printf_i+0x162>
 80076aa:	07ca      	lsls	r2, r1, #31
 80076ac:	bf44      	itt	mi
 80076ae:	f041 0120 	orrmi.w	r1, r1, #32
 80076b2:	6021      	strmi	r1, [r4, #0]
 80076b4:	b91b      	cbnz	r3, 80076be <_printf_i+0x15e>
 80076b6:	6822      	ldr	r2, [r4, #0]
 80076b8:	f022 0220 	bic.w	r2, r2, #32
 80076bc:	6022      	str	r2, [r4, #0]
 80076be:	2210      	movs	r2, #16
 80076c0:	e7b7      	b.n	8007632 <_printf_i+0xd2>
 80076c2:	064d      	lsls	r5, r1, #25
 80076c4:	bf48      	it	mi
 80076c6:	b29b      	uxthmi	r3, r3
 80076c8:	e7ef      	b.n	80076aa <_printf_i+0x14a>
 80076ca:	4665      	mov	r5, ip
 80076cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80076d0:	fb02 3311 	mls	r3, r2, r1, r3
 80076d4:	5cc3      	ldrb	r3, [r0, r3]
 80076d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80076da:	460b      	mov	r3, r1
 80076dc:	2900      	cmp	r1, #0
 80076de:	d1f5      	bne.n	80076cc <_printf_i+0x16c>
 80076e0:	e7b9      	b.n	8007656 <_printf_i+0xf6>
 80076e2:	6813      	ldr	r3, [r2, #0]
 80076e4:	6825      	ldr	r5, [r4, #0]
 80076e6:	6961      	ldr	r1, [r4, #20]
 80076e8:	1d18      	adds	r0, r3, #4
 80076ea:	6010      	str	r0, [r2, #0]
 80076ec:	0628      	lsls	r0, r5, #24
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	d501      	bpl.n	80076f6 <_printf_i+0x196>
 80076f2:	6019      	str	r1, [r3, #0]
 80076f4:	e002      	b.n	80076fc <_printf_i+0x19c>
 80076f6:	066a      	lsls	r2, r5, #25
 80076f8:	d5fb      	bpl.n	80076f2 <_printf_i+0x192>
 80076fa:	8019      	strh	r1, [r3, #0]
 80076fc:	2300      	movs	r3, #0
 80076fe:	6123      	str	r3, [r4, #16]
 8007700:	4665      	mov	r5, ip
 8007702:	e7b9      	b.n	8007678 <_printf_i+0x118>
 8007704:	6813      	ldr	r3, [r2, #0]
 8007706:	1d19      	adds	r1, r3, #4
 8007708:	6011      	str	r1, [r2, #0]
 800770a:	681d      	ldr	r5, [r3, #0]
 800770c:	6862      	ldr	r2, [r4, #4]
 800770e:	2100      	movs	r1, #0
 8007710:	4628      	mov	r0, r5
 8007712:	f7f8 fded 	bl	80002f0 <memchr>
 8007716:	b108      	cbz	r0, 800771c <_printf_i+0x1bc>
 8007718:	1b40      	subs	r0, r0, r5
 800771a:	6060      	str	r0, [r4, #4]
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	2300      	movs	r3, #0
 8007722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007726:	e7a7      	b.n	8007678 <_printf_i+0x118>
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	462a      	mov	r2, r5
 800772c:	4639      	mov	r1, r7
 800772e:	4630      	mov	r0, r6
 8007730:	47c0      	blx	r8
 8007732:	3001      	adds	r0, #1
 8007734:	d0aa      	beq.n	800768c <_printf_i+0x12c>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	079b      	lsls	r3, r3, #30
 800773a:	d413      	bmi.n	8007764 <_printf_i+0x204>
 800773c:	68e0      	ldr	r0, [r4, #12]
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	4298      	cmp	r0, r3
 8007742:	bfb8      	it	lt
 8007744:	4618      	movlt	r0, r3
 8007746:	e7a3      	b.n	8007690 <_printf_i+0x130>
 8007748:	2301      	movs	r3, #1
 800774a:	464a      	mov	r2, r9
 800774c:	4639      	mov	r1, r7
 800774e:	4630      	mov	r0, r6
 8007750:	47c0      	blx	r8
 8007752:	3001      	adds	r0, #1
 8007754:	d09a      	beq.n	800768c <_printf_i+0x12c>
 8007756:	3501      	adds	r5, #1
 8007758:	68e3      	ldr	r3, [r4, #12]
 800775a:	9a03      	ldr	r2, [sp, #12]
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	42ab      	cmp	r3, r5
 8007760:	dcf2      	bgt.n	8007748 <_printf_i+0x1e8>
 8007762:	e7eb      	b.n	800773c <_printf_i+0x1dc>
 8007764:	2500      	movs	r5, #0
 8007766:	f104 0919 	add.w	r9, r4, #25
 800776a:	e7f5      	b.n	8007758 <_printf_i+0x1f8>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1ac      	bne.n	80076ca <_printf_i+0x16a>
 8007770:	7803      	ldrb	r3, [r0, #0]
 8007772:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800777a:	e76c      	b.n	8007656 <_printf_i+0xf6>
 800777c:	08007a0d 	.word	0x08007a0d
 8007780:	08007a1e 	.word	0x08007a1e

08007784 <memcpy>:
 8007784:	b510      	push	{r4, lr}
 8007786:	1e43      	subs	r3, r0, #1
 8007788:	440a      	add	r2, r1
 800778a:	4291      	cmp	r1, r2
 800778c:	d100      	bne.n	8007790 <memcpy+0xc>
 800778e:	bd10      	pop	{r4, pc}
 8007790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007798:	e7f7      	b.n	800778a <memcpy+0x6>

0800779a <memmove>:
 800779a:	4288      	cmp	r0, r1
 800779c:	b510      	push	{r4, lr}
 800779e:	eb01 0302 	add.w	r3, r1, r2
 80077a2:	d807      	bhi.n	80077b4 <memmove+0x1a>
 80077a4:	1e42      	subs	r2, r0, #1
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d00a      	beq.n	80077c0 <memmove+0x26>
 80077aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80077b2:	e7f8      	b.n	80077a6 <memmove+0xc>
 80077b4:	4283      	cmp	r3, r0
 80077b6:	d9f5      	bls.n	80077a4 <memmove+0xa>
 80077b8:	1881      	adds	r1, r0, r2
 80077ba:	1ad2      	subs	r2, r2, r3
 80077bc:	42d3      	cmn	r3, r2
 80077be:	d100      	bne.n	80077c2 <memmove+0x28>
 80077c0:	bd10      	pop	{r4, pc}
 80077c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80077ca:	e7f7      	b.n	80077bc <memmove+0x22>

080077cc <_free_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4605      	mov	r5, r0
 80077d0:	2900      	cmp	r1, #0
 80077d2:	d045      	beq.n	8007860 <_free_r+0x94>
 80077d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d8:	1f0c      	subs	r4, r1, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	bfb8      	it	lt
 80077de:	18e4      	addlt	r4, r4, r3
 80077e0:	f000 f8d2 	bl	8007988 <__malloc_lock>
 80077e4:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <_free_r+0x98>)
 80077e6:	6813      	ldr	r3, [r2, #0]
 80077e8:	4610      	mov	r0, r2
 80077ea:	b933      	cbnz	r3, 80077fa <_free_r+0x2e>
 80077ec:	6063      	str	r3, [r4, #4]
 80077ee:	6014      	str	r4, [r2, #0]
 80077f0:	4628      	mov	r0, r5
 80077f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f6:	f000 b8c8 	b.w	800798a <__malloc_unlock>
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	d90c      	bls.n	8007818 <_free_r+0x4c>
 80077fe:	6821      	ldr	r1, [r4, #0]
 8007800:	1862      	adds	r2, r4, r1
 8007802:	4293      	cmp	r3, r2
 8007804:	bf04      	itt	eq
 8007806:	681a      	ldreq	r2, [r3, #0]
 8007808:	685b      	ldreq	r3, [r3, #4]
 800780a:	6063      	str	r3, [r4, #4]
 800780c:	bf04      	itt	eq
 800780e:	1852      	addeq	r2, r2, r1
 8007810:	6022      	streq	r2, [r4, #0]
 8007812:	6004      	str	r4, [r0, #0]
 8007814:	e7ec      	b.n	80077f0 <_free_r+0x24>
 8007816:	4613      	mov	r3, r2
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	b10a      	cbz	r2, 8007820 <_free_r+0x54>
 800781c:	42a2      	cmp	r2, r4
 800781e:	d9fa      	bls.n	8007816 <_free_r+0x4a>
 8007820:	6819      	ldr	r1, [r3, #0]
 8007822:	1858      	adds	r0, r3, r1
 8007824:	42a0      	cmp	r0, r4
 8007826:	d10b      	bne.n	8007840 <_free_r+0x74>
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	4401      	add	r1, r0
 800782c:	1858      	adds	r0, r3, r1
 800782e:	4282      	cmp	r2, r0
 8007830:	6019      	str	r1, [r3, #0]
 8007832:	d1dd      	bne.n	80077f0 <_free_r+0x24>
 8007834:	6810      	ldr	r0, [r2, #0]
 8007836:	6852      	ldr	r2, [r2, #4]
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	4401      	add	r1, r0
 800783c:	6019      	str	r1, [r3, #0]
 800783e:	e7d7      	b.n	80077f0 <_free_r+0x24>
 8007840:	d902      	bls.n	8007848 <_free_r+0x7c>
 8007842:	230c      	movs	r3, #12
 8007844:	602b      	str	r3, [r5, #0]
 8007846:	e7d3      	b.n	80077f0 <_free_r+0x24>
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	1821      	adds	r1, r4, r0
 800784c:	428a      	cmp	r2, r1
 800784e:	bf04      	itt	eq
 8007850:	6811      	ldreq	r1, [r2, #0]
 8007852:	6852      	ldreq	r2, [r2, #4]
 8007854:	6062      	str	r2, [r4, #4]
 8007856:	bf04      	itt	eq
 8007858:	1809      	addeq	r1, r1, r0
 800785a:	6021      	streq	r1, [r4, #0]
 800785c:	605c      	str	r4, [r3, #4]
 800785e:	e7c7      	b.n	80077f0 <_free_r+0x24>
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	bf00      	nop
 8007864:	20000094 	.word	0x20000094

08007868 <_malloc_r>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	1ccd      	adds	r5, r1, #3
 800786c:	f025 0503 	bic.w	r5, r5, #3
 8007870:	3508      	adds	r5, #8
 8007872:	2d0c      	cmp	r5, #12
 8007874:	bf38      	it	cc
 8007876:	250c      	movcc	r5, #12
 8007878:	2d00      	cmp	r5, #0
 800787a:	4606      	mov	r6, r0
 800787c:	db01      	blt.n	8007882 <_malloc_r+0x1a>
 800787e:	42a9      	cmp	r1, r5
 8007880:	d903      	bls.n	800788a <_malloc_r+0x22>
 8007882:	230c      	movs	r3, #12
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	2000      	movs	r0, #0
 8007888:	bd70      	pop	{r4, r5, r6, pc}
 800788a:	f000 f87d 	bl	8007988 <__malloc_lock>
 800788e:	4a21      	ldr	r2, [pc, #132]	; (8007914 <_malloc_r+0xac>)
 8007890:	6814      	ldr	r4, [r2, #0]
 8007892:	4621      	mov	r1, r4
 8007894:	b991      	cbnz	r1, 80078bc <_malloc_r+0x54>
 8007896:	4c20      	ldr	r4, [pc, #128]	; (8007918 <_malloc_r+0xb0>)
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	b91b      	cbnz	r3, 80078a4 <_malloc_r+0x3c>
 800789c:	4630      	mov	r0, r6
 800789e:	f000 f863 	bl	8007968 <_sbrk_r>
 80078a2:	6020      	str	r0, [r4, #0]
 80078a4:	4629      	mov	r1, r5
 80078a6:	4630      	mov	r0, r6
 80078a8:	f000 f85e 	bl	8007968 <_sbrk_r>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d124      	bne.n	80078fa <_malloc_r+0x92>
 80078b0:	230c      	movs	r3, #12
 80078b2:	6033      	str	r3, [r6, #0]
 80078b4:	4630      	mov	r0, r6
 80078b6:	f000 f868 	bl	800798a <__malloc_unlock>
 80078ba:	e7e4      	b.n	8007886 <_malloc_r+0x1e>
 80078bc:	680b      	ldr	r3, [r1, #0]
 80078be:	1b5b      	subs	r3, r3, r5
 80078c0:	d418      	bmi.n	80078f4 <_malloc_r+0x8c>
 80078c2:	2b0b      	cmp	r3, #11
 80078c4:	d90f      	bls.n	80078e6 <_malloc_r+0x7e>
 80078c6:	600b      	str	r3, [r1, #0]
 80078c8:	50cd      	str	r5, [r1, r3]
 80078ca:	18cc      	adds	r4, r1, r3
 80078cc:	4630      	mov	r0, r6
 80078ce:	f000 f85c 	bl	800798a <__malloc_unlock>
 80078d2:	f104 000b 	add.w	r0, r4, #11
 80078d6:	1d23      	adds	r3, r4, #4
 80078d8:	f020 0007 	bic.w	r0, r0, #7
 80078dc:	1ac3      	subs	r3, r0, r3
 80078de:	d0d3      	beq.n	8007888 <_malloc_r+0x20>
 80078e0:	425a      	negs	r2, r3
 80078e2:	50e2      	str	r2, [r4, r3]
 80078e4:	e7d0      	b.n	8007888 <_malloc_r+0x20>
 80078e6:	428c      	cmp	r4, r1
 80078e8:	684b      	ldr	r3, [r1, #4]
 80078ea:	bf16      	itet	ne
 80078ec:	6063      	strne	r3, [r4, #4]
 80078ee:	6013      	streq	r3, [r2, #0]
 80078f0:	460c      	movne	r4, r1
 80078f2:	e7eb      	b.n	80078cc <_malloc_r+0x64>
 80078f4:	460c      	mov	r4, r1
 80078f6:	6849      	ldr	r1, [r1, #4]
 80078f8:	e7cc      	b.n	8007894 <_malloc_r+0x2c>
 80078fa:	1cc4      	adds	r4, r0, #3
 80078fc:	f024 0403 	bic.w	r4, r4, #3
 8007900:	42a0      	cmp	r0, r4
 8007902:	d005      	beq.n	8007910 <_malloc_r+0xa8>
 8007904:	1a21      	subs	r1, r4, r0
 8007906:	4630      	mov	r0, r6
 8007908:	f000 f82e 	bl	8007968 <_sbrk_r>
 800790c:	3001      	adds	r0, #1
 800790e:	d0cf      	beq.n	80078b0 <_malloc_r+0x48>
 8007910:	6025      	str	r5, [r4, #0]
 8007912:	e7db      	b.n	80078cc <_malloc_r+0x64>
 8007914:	20000094 	.word	0x20000094
 8007918:	20000098 	.word	0x20000098

0800791c <_realloc_r>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	4607      	mov	r7, r0
 8007920:	4614      	mov	r4, r2
 8007922:	460e      	mov	r6, r1
 8007924:	b921      	cbnz	r1, 8007930 <_realloc_r+0x14>
 8007926:	4611      	mov	r1, r2
 8007928:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800792c:	f7ff bf9c 	b.w	8007868 <_malloc_r>
 8007930:	b922      	cbnz	r2, 800793c <_realloc_r+0x20>
 8007932:	f7ff ff4b 	bl	80077cc <_free_r>
 8007936:	4625      	mov	r5, r4
 8007938:	4628      	mov	r0, r5
 800793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793c:	f000 f826 	bl	800798c <_malloc_usable_size_r>
 8007940:	42a0      	cmp	r0, r4
 8007942:	d20f      	bcs.n	8007964 <_realloc_r+0x48>
 8007944:	4621      	mov	r1, r4
 8007946:	4638      	mov	r0, r7
 8007948:	f7ff ff8e 	bl	8007868 <_malloc_r>
 800794c:	4605      	mov	r5, r0
 800794e:	2800      	cmp	r0, #0
 8007950:	d0f2      	beq.n	8007938 <_realloc_r+0x1c>
 8007952:	4631      	mov	r1, r6
 8007954:	4622      	mov	r2, r4
 8007956:	f7ff ff15 	bl	8007784 <memcpy>
 800795a:	4631      	mov	r1, r6
 800795c:	4638      	mov	r0, r7
 800795e:	f7ff ff35 	bl	80077cc <_free_r>
 8007962:	e7e9      	b.n	8007938 <_realloc_r+0x1c>
 8007964:	4635      	mov	r5, r6
 8007966:	e7e7      	b.n	8007938 <_realloc_r+0x1c>

08007968 <_sbrk_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4c06      	ldr	r4, [pc, #24]	; (8007984 <_sbrk_r+0x1c>)
 800796c:	2300      	movs	r3, #0
 800796e:	4605      	mov	r5, r0
 8007970:	4608      	mov	r0, r1
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	f7f9 fae6 	bl	8000f44 <_sbrk>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_sbrk_r+0x1a>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	b103      	cbz	r3, 8007982 <_sbrk_r+0x1a>
 8007980:	602b      	str	r3, [r5, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	200001f8 	.word	0x200001f8

08007988 <__malloc_lock>:
 8007988:	4770      	bx	lr

0800798a <__malloc_unlock>:
 800798a:	4770      	bx	lr

0800798c <_malloc_usable_size_r>:
 800798c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007990:	1f18      	subs	r0, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	bfbc      	itt	lt
 8007996:	580b      	ldrlt	r3, [r1, r0]
 8007998:	18c0      	addlt	r0, r0, r3
 800799a:	4770      	bx	lr

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
