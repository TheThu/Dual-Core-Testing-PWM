
Testing Dual Core_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006574  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000178  20000010  08006858  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000188  08006858  00020188  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018b67  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002835  00000000  00000000  00038ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000de8  00000000  00000000  0003b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cf0  00000000  00000000  0003c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003eca0  00000000  00000000  0003ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d319  00000000  00000000  0007bb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019bfa1  00000000  00000000  00088e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00224e12  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000039ec  00000000  00000000  00224e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080067f4 	.word	0x080067f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080067f4 	.word	0x080067f4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <SystemInit+0xc4>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f2:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <SystemInit+0xc4>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <SystemInit+0xc4>)
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <SystemInit+0xc4>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemInit+0xc8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <SystemInit+0xc8>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <SystemInit+0xc8>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemInit+0xc8>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4924      	ldr	r1, [pc, #144]	; (80006b0 <SystemInit+0xc8>)
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <SystemInit+0xcc>)
 8000622:	4013      	ands	r3, r2
 8000624:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemInit+0xc8>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <SystemInit+0xc8>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemInit+0xc8>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <SystemInit+0xc8>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <SystemInit+0xc8>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <SystemInit+0xc8>)
 8000646:	2200      	movs	r2, #0
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <SystemInit+0xc8>)
 800064c:	2200      	movs	r2, #0
 800064e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <SystemInit+0xc8>)
 8000652:	2200      	movs	r2, #0
 8000654:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <SystemInit+0xc8>)
 8000658:	2200      	movs	r2, #0
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <SystemInit+0xc8>)
 800065e:	2200      	movs	r2, #0
 8000660:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <SystemInit+0xc8>)
 8000664:	2200      	movs	r2, #0
 8000666:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <SystemInit+0xc8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <SystemInit+0xc8>)
 800066e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000672:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <SystemInit+0xc8>)
 8000676:	2200      	movs	r2, #0
 8000678:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <SystemInit+0xd0>)
 800067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <SystemInit+0xd0>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <SystemInit+0xd4>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <SystemInit+0xd8>)
 800068c:	4013      	ands	r3, r2
 800068e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000692:	d202      	bcs.n	800069a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <SystemInit+0xdc>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <SystemInit+0xc4>)
 800069c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006a0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	58024400 	.word	0x58024400
 80006b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006b8:	580000c0 	.word	0x580000c0
 80006bc:	5c001000 	.word	0x5c001000
 80006c0:	ffff0000 	.word	0xffff0000
 80006c4:	51008108 	.word	0x51008108

080006c8 <Led_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Led_init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <Led_init+0x54>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <Led_init+0x54>)
 80006e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <Led_init+0x54>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fa:	2301      	movs	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <Led_init+0x58>)
 8000710:	f000 fd14 	bl	800113c <HAL_GPIO_Init>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58024400 	.word	0x58024400
 8000720:	58022400 	.word	0x58022400

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800072a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072e:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000730:	bf00      	nop
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <main+0xcc>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d004      	beq.n	8000748 <main+0x24>
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	1e5a      	subs	r2, r3, #1
 8000742:	617a      	str	r2, [r7, #20]
 8000744:	2b00      	cmp	r3, #0
 8000746:	dcf4      	bgt.n	8000732 <main+0xe>
  if ( timeout < 0 )
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	2b00      	cmp	r3, #0
 800074c:	da01      	bge.n	8000752 <main+0x2e>
  {
  Error_Handler();
 800074e:	f000 fa43 	bl	8000bd8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fb4f 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f851 	bl	80007fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <main+0xcc>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <main+0xcc>)
 8000762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <main+0xcc>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fe8f 	bl	800149c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800077e:	2100      	movs	r1, #0
 8000780:	2000      	movs	r0, #0
 8000782:	f000 fea5 	bl	80014d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078a:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800078c:	bf00      	nop
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <main+0xcc>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d104      	bne.n	80007a4 <main+0x80>
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	1e5a      	subs	r2, r3, #1
 800079e:	617a      	str	r2, [r7, #20]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dcf4      	bgt.n	800078e <main+0x6a>
if ( timeout < 0 )
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da01      	bge.n	80007ae <main+0x8a>
{
Error_Handler();
 80007aa:	f000 fa15 	bl	8000bd8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 f9b3 	bl	8000b18 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b2:	f000 f965 	bl	8000a80 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 80007b6:	f000 f923 	bl	8000a00 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  Led_init();
 80007ba:	f7ff ff85 	bl	80006c8 <Led_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  strcpy((char*)buf, "Hello!\r \n");
 80007be:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <main+0xd0>)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c6:	c303      	stmia	r3!, {r0, r1}
 80007c8:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd82 	bl	80002d8 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f107 0108 	add.w	r1, r7, #8
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <main+0xd4>)
 80007e2:	f003 fb3d 	bl	8003e60 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80007e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ea:	f000 fb95 	bl	8000f18 <HAL_Delay>
	  strcpy((char*)buf, "Hello!\r \n");
 80007ee:	e7e6      	b.n	80007be <main+0x9a>
 80007f0:	58024400 	.word	0x58024400
 80007f4:	0800680c 	.word	0x0800680c
 80007f8:	20000078 	.word	0x20000078

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0cc      	sub	sp, #304	; 0x130
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000806:	224c      	movs	r2, #76	; 0x4c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f005 ffea 	bl	80067e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000814:	2220      	movs	r2, #32
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f005 ffe3 	bl	80067e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4618      	mov	r0, r3
 8000822:	23c0      	movs	r3, #192	; 0xc0
 8000824:	461a      	mov	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f005 ffdc 	bl	80067e4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800082c:	2004      	movs	r0, #4
 800082e:	f000 ff8b 	bl	8001748 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	4b6d      	ldr	r3, [pc, #436]	; (80009f0 <SystemClock_Config+0x1f4>)
 800083a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083c:	4a6c      	ldr	r2, [pc, #432]	; (80009f0 <SystemClock_Config+0x1f4>)
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000844:	4b6a      	ldr	r3, [pc, #424]	; (80009f0 <SystemClock_Config+0x1f4>)
 8000846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000848:	f003 0201 	and.w	r2, r3, #1
 800084c:	463b      	mov	r3, r7
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <SystemClock_Config+0x1f8>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a67      	ldr	r2, [pc, #412]	; (80009f4 <SystemClock_Config+0x1f8>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b65      	ldr	r3, [pc, #404]	; (80009f4 <SystemClock_Config+0x1f8>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000864:	463b      	mov	r3, r7
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	463b      	mov	r3, r7
 800086a:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b61      	ldr	r3, [pc, #388]	; (80009f4 <SystemClock_Config+0x1f8>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x72>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800087c:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <SystemClock_Config+0x1fc>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	4a5d      	ldr	r2, [pc, #372]	; (80009f8 <SystemClock_Config+0x1fc>)
 8000882:	f023 0303 	bic.w	r3, r3, #3
 8000886:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000888:	230a      	movs	r3, #10
 800088a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800088e:	2301      	movs	r3, #1
 8000890:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80008ac:	2320      	movs	r3, #32
 80008ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 80008b2:	2381      	movs	r3, #129	; 0x81
 80008b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008ca:	2304      	movs	r3, #4
 80008cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 ff8b 	bl	80017fc <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008ec:	f000 f974 	bl	8000bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	233f      	movs	r3, #63	; 0x3f
 80008f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000920:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fb40 	bl	8001fac <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000932:	f000 f951 	bl	8000bd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4a30      	ldr	r2, [pc, #192]	; (80009fc <SystemClock_Config+0x200>)
 800093a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CEC|RCC_PERIPHCLK_QSPI
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2220      	movs	r2, #32
 8000940:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2281      	movs	r2, #129	; 0x81
 8000946:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2202      	movs	r2, #2
 800094c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2202      	movs	r2, #2
 8000952:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2202      	movs	r2, #2
 8000958:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2240      	movs	r2, #64	; 0x40
 800095e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	665a      	str	r2, [r3, #100]	; 0x64
  PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fedd 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x1dc>
  {
    Error_Handler();
 80009d4:	f000 f900 	bl	8000bd8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f001 fc9a 	bl	8002318 <HAL_RCC_MCOConfig>
}
 80009e4:	bf00      	nop
 80009e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58000400 	.word	0x58000400
 80009f4:	58024800 	.word	0x58024800
 80009f8:	58024400 	.word	0x58024400
 80009fc:	0bc93113 	.word	0x0bc93113

08000a00 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_I2C4_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <MX_I2C4_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a3c:	f000 fd5c 	bl	80014f8 <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 f8c7 	bl	8000bd8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a4e:	f000 fde3 	bl	8001618 <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 f8be 	bl	8000bd8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_I2C4_Init+0x74>)
 8000a60:	f000 fe25 	bl	80016ae <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 f8b5 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000002c 	.word	0x2000002c
 8000a78:	58001c00 	.word	0x58001c00
 8000a7c:	10707dbc 	.word	0x10707dbc

08000a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_USART1_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aca:	f003 f979 	bl	8003dc0 <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 f880 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000adc:	f005 fd79 	bl	80065d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 f877 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aee:	f005 fdae 	bl	800664e <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 f86e 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000afe:	f005 fd2f 	bl	8006560 <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 f866 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000078 	.word	0x20000078
 8000b14:	40011000 	.word	0x40011000

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_GPIO_Init+0xb8>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_GPIO_Init+0xbc>)
 8000bc4:	f000 faba 	bl	800113c <HAL_GPIO_Init>

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020000 	.word	0x58020000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_MspInit+0x30>)
 8000bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x30>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x30>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	58024400 	.word	0x58024400

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12e      	bne.n	8000c9c <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c62:	2312      	movs	r3, #18
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <HAL_I2C_MspInit+0x90>)
 8000c7a:	f000 fa5f 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58001c00 	.word	0x58001c00
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58020c00 	.word	0x58020c00

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <HAL_UART_MspInit+0x88>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12e      	bne.n	8000d30 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_UART_MspInit+0x8c>)
 8000cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cd8:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <HAL_UART_MspInit+0x8c>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_UART_MspInit+0x8c>)
 8000ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_UART_MspInit+0x8c>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <HAL_UART_MspInit+0x8c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_UART_MspInit+0x8c>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d20:	2307      	movs	r3, #7
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_UART_MspInit+0x90>)
 8000d2c:	f000 fa06 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020000 	.word	0x58020000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <MemManage_Handler+0x4>

08000d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d98:	f000 f89e 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dc0:	f842 3b04 	str.w	r3, [r2], #4

08000dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dca:	f7ff fc0d 	bl	80005e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f005 fce5 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fca7 	bl	8000724 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ddc:	08006848 	.word	0x08006848
  ldr  r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000de8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000dec:	20000188 	.word	0x20000188

08000df0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC3_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 f96c 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e00:	f001 faf4 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8000e04:	4601      	mov	r1, r0
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_Init+0x68>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <HAL_Init+0x6c>)
 8000e12:	5cd3      	ldrb	r3, [r2, r3]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_Init+0x68>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_Init+0x6c>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_Init+0x70>)
 8000e36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_Init+0x74>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f814 	bl	8000e6c <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e002      	b.n	8000e54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4e:	f7ff fecb 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	08006828 	.word	0x08006828
 8000e64:	20000004 	.word	0x20000004
 8000e68:	20000000 	.word	0x20000000

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_InitTick+0x60>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e021      	b.n	8000ec4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_InitTick+0x64>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_InitTick+0x60>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f943 	bl	8001122 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f91b 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x68>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000000c 	.word	0x2000000c
 8000efc:	20000184 	.word	0x20000184

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000184 	.word	0x20000184

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_Delay+0x40>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000000c 	.word	0x2000000c

08000f5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetREVID+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0c1b      	lsrs	r3, r3, #16
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	5c001000 	.word	0x5c001000

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	05fa0000 	.word	0x05fa0000

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff47 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff90 	bl	800102c <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5f 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb2 	bl	8001094 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800114a:	4b89      	ldr	r3, [pc, #548]	; (8001370 <HAL_GPIO_Init+0x234>)
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800114e:	e194      	b.n	800147a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8186 	beq.w	8001474 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d00b      	beq.n	8001188 <HAL_GPIO_Init+0x4c>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117c:	2b11      	cmp	r3, #17
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b12      	cmp	r3, #18
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 0201 	and.w	r2, r3, #1
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0xee>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b12      	cmp	r3, #18
 8001228:	d123      	bne.n	8001272 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	69b9      	ldr	r1, [r7, #24]
 800126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0203 	and.w	r2, r3, #3
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80e0 	beq.w	8001474 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <HAL_GPIO_Init+0x238>)
 80012b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ba:	4a2e      	ldr	r2, [pc, #184]	; (8001374 <HAL_GPIO_Init+0x238>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <HAL_GPIO_Init+0x238>)
 80012c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d2:	4a29      	ldr	r2, [pc, #164]	; (8001378 <HAL_GPIO_Init+0x23c>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a20      	ldr	r2, [pc, #128]	; (800137c <HAL_GPIO_Init+0x240>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d052      	beq.n	80013a4 <HAL_GPIO_Init+0x268>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a1f      	ldr	r2, [pc, #124]	; (8001380 <HAL_GPIO_Init+0x244>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d031      	beq.n	800136a <HAL_GPIO_Init+0x22e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <HAL_GPIO_Init+0x248>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d02b      	beq.n	8001366 <HAL_GPIO_Init+0x22a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_GPIO_Init+0x24c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d025      	beq.n	8001362 <HAL_GPIO_Init+0x226>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <HAL_GPIO_Init+0x250>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01f      	beq.n	800135e <HAL_GPIO_Init+0x222>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_GPIO_Init+0x254>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_GPIO_Init+0x21e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x258>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0x21a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_GPIO_Init+0x25c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00d      	beq.n	8001352 <HAL_GPIO_Init+0x216>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_GPIO_Init+0x260>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d007      	beq.n	800134e <HAL_GPIO_Init+0x212>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_GPIO_Init+0x264>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d101      	bne.n	800134a <HAL_GPIO_Init+0x20e>
 8001346:	2309      	movs	r3, #9
 8001348:	e02d      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 800134a:	230a      	movs	r3, #10
 800134c:	e02b      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 800134e:	2308      	movs	r3, #8
 8001350:	e029      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 8001352:	2307      	movs	r3, #7
 8001354:	e027      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 8001356:	2306      	movs	r3, #6
 8001358:	e025      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 800135a:	2305      	movs	r3, #5
 800135c:	e023      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 800135e:	2304      	movs	r3, #4
 8001360:	e021      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 8001362:	2303      	movs	r3, #3
 8001364:	e01f      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 8001366:	2302      	movs	r3, #2
 8001368:	e01d      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 800136a:	2301      	movs	r3, #1
 800136c:	e01b      	b.n	80013a6 <HAL_GPIO_Init+0x26a>
 800136e:	bf00      	nop
 8001370:	58000080 	.word	0x58000080
 8001374:	58024400 	.word	0x58024400
 8001378:	58000400 	.word	0x58000400
 800137c:	58020000 	.word	0x58020000
 8001380:	58020400 	.word	0x58020400
 8001384:	58020800 	.word	0x58020800
 8001388:	58020c00 	.word	0x58020c00
 800138c:	58021000 	.word	0x58021000
 8001390:	58021400 	.word	0x58021400
 8001394:	58021800 	.word	0x58021800
 8001398:	58021c00 	.word	0x58021c00
 800139c:	58022000 	.word	0x58022000
 80013a0:	58022400 	.word	0x58022400
 80013a4:	2300      	movs	r3, #0
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4093      	lsls	r3, r2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b6:	4938      	ldr	r1, [pc, #224]	; (8001498 <HAL_GPIO_Init+0x35c>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800143e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800146c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	3301      	adds	r3, #1
 8001478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	f47f ae63 	bne.w	8001150 <HAL_GPIO_Init+0x14>
  }
}
 800148a:	bf00      	nop
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	58000400 	.word	0x58000400

0800149c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80014a4:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_HSEM_FastTake+0x2c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3320      	adds	r3, #32
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_HSEM_FastTake+0x30>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e000      	b.n	80014ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	58026400 	.word	0x58026400
 80014cc:	80000300 	.word	0x80000300

080014d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014da:	4906      	ldr	r1, [pc, #24]	; (80014f4 <HAL_HSEM_Release+0x24>)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	58026400 	.word	0x58026400

080014f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07f      	b.n	800160a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fb7c 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001548:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001558:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d107      	bne.n	8001572 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	e006      	b.n	8001580 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800157e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d104      	bne.n	8001592 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_I2C_Init+0x11c>)
 800159e:	430b      	orrs	r3, r1
 80015a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	ea42 0103 	orr.w	r1, r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	021a      	lsls	r2, r3, #8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69d9      	ldr	r1, [r3, #28]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	02008000 	.word	0x02008000

08001618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b20      	cmp	r3, #32
 800162c:	d138      	bne.n	80016a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001638:	2302      	movs	r3, #2
 800163a:	e032      	b.n	80016a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800166a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e000      	b.n	80016a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016a0:	2302      	movs	r3, #2
  }
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d139      	bne.n	8001738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e033      	b.n	800173a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2224      	movs	r2, #36	; 0x24
 80016de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001738:	2302      	movs	r3, #2
  }
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	2b06      	cmp	r3, #6
 800175a:	d00a      	beq.n	8001772 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	d001      	beq.n	800176e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e040      	b.n	80017f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e03e      	b.n	80017f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800177a:	491f      	ldr	r1, [pc, #124]	; (80017f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4313      	orrs	r3, r2
 8001780:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001782:	f7ff fbbd 	bl	8000f00 <HAL_GetTick>
 8001786:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001788:	e009      	b.n	800179e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800178a:	f7ff fbb9 	bl	8000f00 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001798:	d901      	bls.n	800179e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e028      	b.n	80017f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017aa:	d1ee      	bne.n	800178a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b1e      	cmp	r3, #30
 80017b0:	d008      	beq.n	80017c4 <HAL_PWREx_ConfigSupply+0x7c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b2e      	cmp	r3, #46	; 0x2e
 80017b6:	d005      	beq.n	80017c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b1d      	cmp	r3, #29
 80017bc:	d002      	beq.n	80017c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b2d      	cmp	r3, #45	; 0x2d
 80017c2:	d114      	bne.n	80017ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017c4:	f7ff fb9c 	bl	8000f00 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017ca:	e009      	b.n	80017e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017cc:	f7ff fb98 	bl	8000f00 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017da:	d901      	bls.n	80017e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e007      	b.n	80017f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d1ee      	bne.n	80017cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	58024800 	.word	0x58024800

080017fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	; 0x30
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e3c4      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8087 	beq.w	800192a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181c:	4ba2      	ldr	r3, [pc, #648]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001826:	4ba0      	ldr	r3, [pc, #640]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	2b10      	cmp	r3, #16
 8001830:	d007      	beq.n	8001842 <HAL_RCC_OscConfig+0x46>
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	2b18      	cmp	r3, #24
 8001836:	d110      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
 8001838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d10b      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4b99      	ldr	r3, [pc, #612]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06c      	beq.n	8001928 <HAL_RCC_OscConfig+0x12c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d168      	bne.n	8001928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e39e      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x76>
 8001864:	4b90      	ldr	r3, [pc, #576]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a8f      	ldr	r2, [pc, #572]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e02e      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x98>
 800187a:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a8a      	ldr	r2, [pc, #552]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a87      	ldr	r2, [pc, #540]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0xbc>
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a81      	ldr	r2, [pc, #516]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b7f      	ldr	r3, [pc, #508]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7e      	ldr	r2, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a77      	ldr	r2, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb12 	bl	8000f00 <HAL_GetTick>
 80018dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fb0e 	bl	8000f00 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e352      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xe4>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fafe 	bl	8000f00 <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fafa 	bl	8000f00 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e33e      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x10c>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8092 	beq.w	8001a5c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001938:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001940:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001942:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_RCC_OscConfig+0x162>
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	2b18      	cmp	r3, #24
 8001952:	d12d      	bne.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d128      	bne.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800195e:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x17a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e310      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	f7ff faf1 	bl	8000f5c <HAL_GetREVID>
 800197a:	4602      	mov	r2, r0
 800197c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001980:	429a      	cmp	r2, r3
 8001982:	d80a      	bhi.n	800199a <HAL_RCC_OscConfig+0x19e>
 8001984:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	031b      	lsls	r3, r3, #12
 8001992:	4945      	ldr	r1, [pc, #276]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001998:	e060      	b.n	8001a5c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	061b      	lsls	r3, r3, #24
 80019a8:	493f      	ldr	r1, [pc, #252]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ae:	e055      	b.n	8001a5c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d038      	beq.n	8001a2a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019b8:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 0219 	bic.w	r2, r3, #25
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4938      	ldr	r1, [pc, #224]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fa99 	bl	8000f00 <HAL_GetTick>
 80019ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fa95 	bl	8000f00 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e2d9      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	f7ff fab4 	bl	8000f5c <HAL_GetREVID>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d80a      	bhi.n	8001a14 <HAL_RCC_OscConfig+0x218>
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	031b      	lsls	r3, r3, #12
 8001a0c:	4926      	ldr	r1, [pc, #152]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
 8001a12:	e023      	b.n	8001a5c <HAL_RCC_OscConfig+0x260>
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fa63 	bl	8000f00 <HAL_GetTick>
 8001a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fa5f 	bl	8000f00 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e2a3      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8091 	beq.w	8001b8c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d007      	beq.n	8001a90 <HAL_RCC_OscConfig+0x294>
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b18      	cmp	r3, #24
 8001a84:	d12f      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2ea>
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d12a      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_RCC_OscConfig+0x2b0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b80      	cmp	r3, #128	; 0x80
 8001aa2:	d003      	beq.n	8001aac <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e277      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
 8001aa8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aac:	f7ff fa56 	bl	8000f5c <HAL_GetREVID>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d80a      	bhi.n	8001ad0 <HAL_RCC_OscConfig+0x2d4>
 8001aba:	4ba2      	ldr	r3, [pc, #648]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	069b      	lsls	r3, r3, #26
 8001ac8:	499e      	ldr	r1, [pc, #632]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ace:	e05d      	b.n	8001b8c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ad0:	4b9c      	ldr	r3, [pc, #624]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	4999      	ldr	r1, [pc, #612]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae4:	e052      	b.n	8001b8c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d035      	beq.n	8001b5a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001aee:	4b95      	ldr	r3, [pc, #596]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a94      	ldr	r2, [pc, #592]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff fa01 	bl	8000f00 <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b02:	f7ff f9fd 	bl	8000f00 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e241      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b14:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b20:	f7ff fa1c 	bl	8000f5c <HAL_GetREVID>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d80a      	bhi.n	8001b44 <HAL_RCC_OscConfig+0x348>
 8001b2e:	4b85      	ldr	r3, [pc, #532]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	069b      	lsls	r3, r3, #26
 8001b3c:	4981      	ldr	r1, [pc, #516]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
 8001b42:	e023      	b.n	8001b8c <HAL_RCC_OscConfig+0x390>
 8001b44:	4b7f      	ldr	r3, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	497c      	ldr	r1, [pc, #496]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e018      	b.n	8001b8c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b5a:	4b7a      	ldr	r3, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a79      	ldr	r2, [pc, #484]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff f9cb 	bl	8000f00 <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b6e:	f7ff f9c7 	bl	8000f00 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e20b      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b80:	4b70      	ldr	r3, [pc, #448]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d036      	beq.n	8001c06 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba4:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff f9a8 	bl	8000f00 <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f9a4 	bl	8000f00 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1e8      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc6:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x3b8>
 8001bd2:	e018      	b.n	8001c06 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd8:	4a5a      	ldr	r2, [pc, #360]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff f98e 	bl	8000f00 <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff f98a 	bl	8000f00 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1ce      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bfa:	4b52      	ldr	r3, [pc, #328]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d036      	beq.n	8001c80 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d019      	beq.n	8001c4e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c1a:	4b4a      	ldr	r3, [pc, #296]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a49      	ldr	r2, [pc, #292]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c26:	f7ff f96b 	bl	8000f00 <HAL_GetTick>
 8001c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c2e:	f7ff f967 	bl	8000f00 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e1ab      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c40:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x432>
 8001c4c:	e018      	b.n	8001c80 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f951 	bl	8000f00 <HAL_GetTick>
 8001c5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c62:	f7ff f94d 	bl	8000f00 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e191      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c74:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8086 	beq.w	8001d9a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_RCC_OscConfig+0x54c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2d      	ldr	r2, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x54c>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c9a:	f7ff f931 	bl	8000f00 <HAL_GetTick>
 8001c9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7ff f92d 	bl	8000f00 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e171      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_OscConfig+0x54c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x4da>
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	e02d      	b.n	8001d32 <HAL_RCC_OscConfig+0x536>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4fc>
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	e01c      	b.n	8001d32 <HAL_RCC_OscConfig+0x536>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x51e>
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
 8001d18:	e00b      	b.n	8001d32 <HAL_RCC_OscConfig+0x536>
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_RCC_OscConfig+0x548>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d01a      	beq.n	8001d70 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f8e1 	bl	8000f00 <HAL_GetTick>
 8001d3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d40:	e00f      	b.n	8001d62 <HAL_RCC_OscConfig+0x566>
 8001d42:	bf00      	nop
 8001d44:	58024400 	.word	0x58024400
 8001d48:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7ff f8d8 	bl	8000f00 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e11a      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d62:	4b8f      	ldr	r3, [pc, #572]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0ee      	beq.n	8001d4c <HAL_RCC_OscConfig+0x550>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff f8c6 	bl	8000f00 <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7ff f8c2 	bl	8000f00 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e104      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d8e:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1ee      	bne.n	8001d78 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80f9 	beq.w	8001f96 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001da4:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dac:	2b18      	cmp	r3, #24
 8001dae:	f000 80b4 	beq.w	8001f1a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	f040 8095 	bne.w	8001ee6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f89a 	bl	8000f00 <HAL_GetTick>
 8001dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff f896 	bl	8000f00 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0da      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001de2:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001df2:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x7a8>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	430a      	orrs	r2, r1
 8001e02:	4967      	ldr	r1, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	628b      	str	r3, [r1, #40]	; 0x28
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e16:	3b01      	subs	r3, #1
 8001e18:	025b      	lsls	r3, r3, #9
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	3b01      	subs	r3, #1
 8001e24:	041b      	lsls	r3, r3, #16
 8001e26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	3b01      	subs	r3, #1
 8001e32:	061b      	lsls	r3, r3, #24
 8001e34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e38:	4959      	ldr	r1, [pc, #356]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	4a57      	ldr	r2, [pc, #348]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e4a:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_RCC_OscConfig+0x7ac>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e56:	00d2      	lsls	r2, r2, #3
 8001e58:	4951      	ldr	r1, [pc, #324]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e5e:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f023 020c 	bic.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	494d      	ldr	r1, [pc, #308]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e70:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f023 0202 	bic.w	r2, r3, #2
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	4948      	ldr	r1, [pc, #288]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e82:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	4a46      	ldr	r2, [pc, #280]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e8e:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	4a43      	ldr	r2, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	4a3d      	ldr	r2, [pc, #244]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a3a      	ldr	r2, [pc, #232]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f81f 	bl	8000f00 <HAL_GetTick>
 8001ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff f81b 	bl	8000f00 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e05f      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x6ca>
 8001ee4:	e057      	b.n	8001f96 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7ff f805 	bl	8000f00 <HAL_GetTick>
 8001ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff f801 	bl	8000f00 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e045      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x6fe>
 8001f18:	e03d      	b.n	8001f96 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_RCC_OscConfig+0x7a4>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d031      	beq.n	8001f92 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d12a      	bne.n	8001f92 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d122      	bne.n	8001f92 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d11a      	bne.n	8001f92 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	0a5b      	lsrs	r3, r3, #9
 8001f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d111      	bne.n	8001f92 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d108      	bne.n	8001f92 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	0e1b      	lsrs	r3, r3, #24
 8001f84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3730      	adds	r7, #48	; 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	fffffc0c 	.word	0xfffffc0c
 8001fa8:	ffff0007 	.word	0xffff0007

08001fac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e19c      	b.n	80022fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b8a      	ldr	r3, [pc, #552]	; (80021ec <HAL_RCC_ClockConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d910      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b87      	ldr	r3, [pc, #540]	; (80021ec <HAL_RCC_ClockConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 020f 	bic.w	r2, r3, #15
 8001fd6:	4985      	ldr	r1, [pc, #532]	; (80021ec <HAL_RCC_ClockConfig+0x240>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b83      	ldr	r3, [pc, #524]	; (80021ec <HAL_RCC_ClockConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e184      	b.n	80022fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	4b7b      	ldr	r3, [pc, #492]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002008:	429a      	cmp	r2, r3
 800200a:	d908      	bls.n	800201e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800200c:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	4975      	ldr	r1, [pc, #468]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800201a:	4313      	orrs	r3, r2
 800201c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002036:	429a      	cmp	r2, r3
 8002038:	d908      	bls.n	800204c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800203a:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	496a      	ldr	r1, [pc, #424]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 8002048:	4313      	orrs	r3, r2
 800204a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002064:	429a      	cmp	r2, r3
 8002066:	d908      	bls.n	800207a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002068:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	495e      	ldr	r1, [pc, #376]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 8002076:	4313      	orrs	r3, r2
 8002078:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d010      	beq.n	80020a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002092:	429a      	cmp	r2, r3
 8002094:	d908      	bls.n	80020a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002096:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4953      	ldr	r1, [pc, #332]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d908      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f023 020f 	bic.w	r2, r3, #15
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4947      	ldr	r1, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d055      	beq.n	800218e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020e2:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	4940      	ldr	r1, [pc, #256]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d107      	bne.n	800210c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020fc:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d121      	bne.n	800214c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0f6      	b.n	80022fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002114:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d115      	bne.n	800214c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0ea      	b.n	80022fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0de      	b.n	80022fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800213c:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0d6      	b.n	80022fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f023 0207 	bic.w	r2, r3, #7
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4925      	ldr	r1, [pc, #148]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800215a:	4313      	orrs	r3, r2
 800215c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7fe fecf 	bl	8000f00 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002164:	e00a      	b.n	800217c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7fe fecb 	bl	8000f00 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0be      	b.n	80022fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	429a      	cmp	r2, r3
 800218c:	d1eb      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d208      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f023 020f 	bic.w	r2, r3, #15
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_RCC_ClockConfig+0x244>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_ClockConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d214      	bcs.n	80021f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_RCC_ClockConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 020f 	bic.w	r2, r3, #15
 80021d2:	4906      	ldr	r1, [pc, #24]	; (80021ec <HAL_RCC_ClockConfig+0x240>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_RCC_ClockConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e086      	b.n	80022fa <HAL_RCC_ClockConfig+0x34e>
 80021ec:	52002000 	.word	0x52002000
 80021f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d010      	beq.n	8002222 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800220c:	429a      	cmp	r2, r3
 800220e:	d208      	bcs.n	8002222 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002210:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	4939      	ldr	r1, [pc, #228]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 800221e:	4313      	orrs	r3, r2
 8002220:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d010      	beq.n	8002250 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800223a:	429a      	cmp	r2, r3
 800223c:	d208      	bcs.n	8002250 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800223e:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	492e      	ldr	r1, [pc, #184]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 800224c:	4313      	orrs	r3, r2
 800224e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d010      	beq.n	800227e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002268:	429a      	cmp	r2, r3
 800226a:	d208      	bcs.n	800227e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4922      	ldr	r1, [pc, #136]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 800227a:	4313      	orrs	r3, r2
 800227c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69da      	ldr	r2, [r3, #28]
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002296:	429a      	cmp	r2, r3
 8002298:	d208      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4917      	ldr	r1, [pc, #92]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022ac:	f000 f89e 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80022b0:	4601      	mov	r1, r0
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_RCC_ClockConfig+0x35c>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	fa21 f303 	lsr.w	r3, r1, r3
 80022c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x358>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <HAL_RCC_ClockConfig+0x35c>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x360>)
 80022e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x364>)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x368>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fdbc 	bl	8000e6c <HAL_InitTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	58024400 	.word	0x58024400
 8002308:	08006828 	.word	0x08006828
 800230c:	20000004 	.word	0x20000004
 8002310:	20000000 	.word	0x20000000
 8002314:	20000008 	.word	0x20000008

08002318 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	; 0x30
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d12a      	bne.n	8002380 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002330:	4a2b      	ldr	r2, [pc, #172]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800235a:	2300      	movs	r3, #0
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	481f      	ldr	r0, [pc, #124]	; (80023e4 <HAL_RCC_MCOConfig+0xcc>)
 8002366:	f7fe fee9 	bl	800113c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	430b      	orrs	r3, r1
 8002378:	4919      	ldr	r1, [pc, #100]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 800237a:	4313      	orrs	r3, r2
 800237c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800237e:	e02a      	b.n	80023d6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800239e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	480b      	ldr	r0, [pc, #44]	; (80023e8 <HAL_RCC_MCOConfig+0xd0>)
 80023bc:	f7fe febe 	bl	800113c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	01d9      	lsls	r1, r3, #7
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	430b      	orrs	r3, r1
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_MCOConfig+0xc8>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	610b      	str	r3, [r1, #16]
}
 80023d6:	bf00      	nop
 80023d8:	3730      	adds	r7, #48	; 0x30
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58020000 	.word	0x58020000
 80023e8:	58020800 	.word	0x58020800

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f2:	4baf      	ldr	r3, [pc, #700]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023fa:	2b18      	cmp	r3, #24
 80023fc:	f200 814e 	bhi.w	800269c <HAL_RCC_GetSysClockFreq+0x2b0>
 8002400:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002406:	bf00      	nop
 8002408:	0800246d 	.word	0x0800246d
 800240c:	0800269d 	.word	0x0800269d
 8002410:	0800269d 	.word	0x0800269d
 8002414:	0800269d 	.word	0x0800269d
 8002418:	0800269d 	.word	0x0800269d
 800241c:	0800269d 	.word	0x0800269d
 8002420:	0800269d 	.word	0x0800269d
 8002424:	0800269d 	.word	0x0800269d
 8002428:	08002493 	.word	0x08002493
 800242c:	0800269d 	.word	0x0800269d
 8002430:	0800269d 	.word	0x0800269d
 8002434:	0800269d 	.word	0x0800269d
 8002438:	0800269d 	.word	0x0800269d
 800243c:	0800269d 	.word	0x0800269d
 8002440:	0800269d 	.word	0x0800269d
 8002444:	0800269d 	.word	0x0800269d
 8002448:	08002499 	.word	0x08002499
 800244c:	0800269d 	.word	0x0800269d
 8002450:	0800269d 	.word	0x0800269d
 8002454:	0800269d 	.word	0x0800269d
 8002458:	0800269d 	.word	0x0800269d
 800245c:	0800269d 	.word	0x0800269d
 8002460:	0800269d 	.word	0x0800269d
 8002464:	0800269d 	.word	0x0800269d
 8002468:	0800249f 	.word	0x0800249f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800246c:	4b90      	ldr	r3, [pc, #576]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002478:	4b8d      	ldr	r3, [pc, #564]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	4a8c      	ldr	r2, [pc, #560]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800248a:	e10a      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800248c:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800248e:	61bb      	str	r3, [r7, #24]
    break;
 8002490:	e107      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002492:	4b89      	ldr	r3, [pc, #548]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002494:	61bb      	str	r3, [r7, #24]
    break;
 8002496:	e104      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002498:	4b88      	ldr	r3, [pc, #544]	; (80026bc <HAL_RCC_GetSysClockFreq+0x2d0>)
 800249a:	61bb      	str	r3, [r7, #24]
    break;
 800249c:	e101      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800249e:	4b84      	ldr	r3, [pc, #528]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80024a8:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024b4:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80024be:	4b7c      	ldr	r3, [pc, #496]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80da 	beq.w	8002696 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d05a      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x1b2>
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d302      	bcc.n	80024f2 <HAL_RCC_GetSysClockFreq+0x106>
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d078      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80024f0:	e099      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024f2:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02d      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024fe:	4b6c      	ldr	r3, [pc, #432]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	08db      	lsrs	r3, r3, #3
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002538:	ed97 6a02 	vldr	s12, [r7, #8]
 800253c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800254c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002554:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002558:	e087      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002564:	eddf 6a57 	vldr	s13, [pc, #348]	; 80026c4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002580:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002598:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800259c:	e065      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80026c8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80025ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b8:	ee07 3a90 	vmov	s15, r3
 80025bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80025c4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80025c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025e0:	e043      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ec:	eddf 6a37 	vldr	s13, [pc, #220]	; 80026cc <HAL_RCC_GetSysClockFreq+0x2e0>
 80025f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025f4:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fc:	ee07 3a90 	vmov	s15, r3
 8002600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002604:	ed97 6a02 	vldr	s12, [r7, #8]
 8002608:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800260c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800261c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002624:	e021      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	ee07 3a90 	vmov	s15, r3
 800262c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002630:	eddf 6a25 	vldr	s13, [pc, #148]	; 80026c8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002648:	ed97 6a02 	vldr	s12, [r7, #8]
 800264c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800265c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002664:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002668:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	0a5b      	lsrs	r3, r3, #9
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	3301      	adds	r3, #1
 8002676:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002682:	edd7 6a07 	vldr	s13, [r7, #28]
 8002686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800268a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800268e:	ee17 3a90 	vmov	r3, s15
 8002692:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002694:	e005      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
    break;
 800269a:	e002      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800269e:	61bb      	str	r3, [r7, #24]
    break;
 80026a0:	bf00      	nop
  }

  return sysclockfreq;
 80026a2:	69bb      	ldr	r3, [r7, #24]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3724      	adds	r7, #36	; 0x24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	58024400 	.word	0x58024400
 80026b4:	03d09000 	.word	0x03d09000
 80026b8:	003d0900 	.word	0x003d0900
 80026bc:	017d7840 	.word	0x017d7840
 80026c0:	46000000 	.word	0x46000000
 80026c4:	4c742400 	.word	0x4c742400
 80026c8:	4a742400 	.word	0x4a742400
 80026cc:	4bbebc20 	.word	0x4bbebc20

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026d6:	f7ff fe89 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80026da:	4601      	mov	r1, r0
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_RCC_GetHCLKFreq+0x50>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_RCC_GetHCLKFreq+0x54>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	fa21 f303 	lsr.w	r3, r1, r3
 80026f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_GetHCLKFreq+0x50>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_GetHCLKFreq+0x54>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_RCC_GetHCLKFreq+0x58>)
 800270c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_RCC_GetHCLKFreq+0x58>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	08006828 	.word	0x08006828
 8002728:	20000004 	.word	0x20000004
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002734:	f7ff ffcc 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002738:	4601      	mov	r1, r0
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	58024400 	.word	0x58024400
 8002758:	08006828 	.word	0x08006828

0800275c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002760:	f7ff ffb6 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002764:	4601      	mov	r1, r0
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	58024400 	.word	0x58024400
 8002784:	08006828 	.word	0x08006828

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002794:	2300      	movs	r3, #0
 8002796:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d03d      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ac:	d013      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80027ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027b2:	d802      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80027b8:	e01f      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x72>
 80027ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027be:	d013      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80027c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027c4:	d01c      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80027c6:	e018      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c8:	4baf      	ldr	r3, [pc, #700]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	4aae      	ldr	r2, [pc, #696]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027d4:	e015      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2102      	movs	r1, #2
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 f98b 	bl	8003af8 <RCCEx_PLL2_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027e6:	e00c      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3324      	adds	r3, #36	; 0x24
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fa34 	bl	8003c5c <RCCEx_PLL3_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027f8:	e003      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
      break;
 80027fe:	e000      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002808:	4b9f      	ldr	r3, [pc, #636]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800280a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002814:	499c      	ldr	r1, [pc, #624]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002816:	4313      	orrs	r3, r2
 8002818:	650b      	str	r3, [r1, #80]	; 0x50
 800281a:	e001      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d03d      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	2b04      	cmp	r3, #4
 8002832:	d826      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002834:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	08002851 	.word	0x08002851
 8002840:	0800285f 	.word	0x0800285f
 8002844:	08002871 	.word	0x08002871
 8002848:	08002889 	.word	0x08002889
 800284c:	08002889 	.word	0x08002889
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002850:	4b8d      	ldr	r3, [pc, #564]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	4a8c      	ldr	r2, [pc, #560]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800285c:	e015      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f001 f947 	bl	8003af8 <RCCEx_PLL2_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800286e:	e00c      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3324      	adds	r3, #36	; 0x24
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f001 f9f0 	bl	8003c5c <RCCEx_PLL3_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002880:	e003      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
      break;
 8002886:	e000      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002890:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002894:	f023 0207 	bic.w	r2, r3, #7
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	497a      	ldr	r1, [pc, #488]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	650b      	str	r3, [r1, #80]	; 0x50
 80028a2:	e001      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d03e      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d01c      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80028bc:	2b80      	cmp	r3, #128	; 0x80
 80028be:	d804      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x142>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d00d      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80028c8:	e01e      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80028ca:	2bc0      	cmp	r3, #192	; 0xc0
 80028cc:	d01f      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d2:	d01e      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80028d4:	e018      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d6:	4b6c      	ldr	r3, [pc, #432]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	4a6b      	ldr	r2, [pc, #428]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028e2:	e017      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3304      	adds	r3, #4
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f904 	bl	8003af8 <RCCEx_PLL2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028f4:	e00e      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3324      	adds	r3, #36	; 0x24
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 f9ad 	bl	8003c5c <RCCEx_PLL3_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002906:	e005      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
      break;
 800290c:	e002      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800291c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	4958      	ldr	r1, [pc, #352]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002928:	4313      	orrs	r3, r2
 800292a:	650b      	str	r3, [r1, #80]	; 0x50
 800292c:	e001      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	2b00      	cmp	r3, #0
 800293c:	d044      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002948:	d01f      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800294a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294e:	d805      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002958:	d00e      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800295a:	e01f      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800295c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002960:	d01f      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002966:	d01e      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002968:	e018      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	4a46      	ldr	r2, [pc, #280]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002976:	e017      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f001 f8ba 	bl	8003af8 <RCCEx_PLL2_Config>
 8002984:	4603      	mov	r3, r0
 8002986:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002988:	e00e      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3324      	adds	r3, #36	; 0x24
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f001 f963 	bl	8003c5c <RCCEx_PLL3_Config>
 8002996:	4603      	mov	r3, r0
 8002998:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800299a:	e005      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	75fb      	strb	r3, [r7, #23]
      break;
 80029a0:	e002      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80029a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029ae:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029bc:	4932      	ldr	r1, [pc, #200]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	658b      	str	r3, [r1, #88]	; 0x58
 80029c2:	e001      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d044      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029de:	d01f      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80029e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e4:	d805      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80029ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ee:	d00e      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80029f0:	e01f      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80029f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029f6:	d01f      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80029f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029fc:	d01e      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80029fe:	e018      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a00:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	4a20      	ldr	r2, [pc, #128]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a0c:	e017      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 f86f 	bl	8003af8 <RCCEx_PLL2_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a1e:	e00e      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3324      	adds	r3, #36	; 0x24
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 f918 	bl	8003c5c <RCCEx_PLL3_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a30:	e005      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002a38:	bf00      	nop
 8002a3a:	e000      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a52:	490d      	ldr	r1, [pc, #52]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	658b      	str	r3, [r1, #88]	; 0x58
 8002a58:	e001      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d035      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d00c      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d802      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01b      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002a7a:	e017      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d00c      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002a80:	2b30      	cmp	r3, #48	; 0x30
 8002a82:	d018      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002a84:	e012      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002a86:	bf00      	nop
 8002a88:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8c:	4bae      	ldr	r3, [pc, #696]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	4aad      	ldr	r2, [pc, #692]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a98:	e00e      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f829 	bl	8003af8 <RCCEx_PLL2_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002abe:	4ba2      	ldr	r3, [pc, #648]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	499f      	ldr	r1, [pc, #636]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ad0:	e001      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
 8002ad4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d042      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aea:	d01f      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af0:	d805      	bhi.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d00e      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002afc:	e01f      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002afe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b02:	d01f      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b08:	d01e      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002b0a:	e018      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b0c:	4b8e      	ldr	r3, [pc, #568]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	4a8d      	ldr	r2, [pc, #564]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b18:	e017      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 ffe9 	bl	8003af8 <RCCEx_PLL2_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b2a:	e00e      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3324      	adds	r3, #36	; 0x24
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 f892 	bl	8003c5c <RCCEx_PLL3_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b3c:	e005      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b50:	4b7d      	ldr	r3, [pc, #500]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b54:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5c:	497a      	ldr	r1, [pc, #488]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	650b      	str	r3, [r1, #80]	; 0x50
 8002b62:	e001      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d042      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b7c:	d01b      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b82:	d805      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d022      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002b8e:	e01b      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b94:	d01d      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002b96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002b9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ba0:	d01b      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002ba2:	e011      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 ffa4 	bl	8003af8 <RCCEx_PLL2_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bb4:	e012      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3324      	adds	r3, #36	; 0x24
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f84d 	bl	8003c5c <RCCEx_PLL3_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bc6:	e009      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	75fb      	strb	r3, [r7, #23]
      break;
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e004      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e002      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002be2:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bee:	4956      	ldr	r1, [pc, #344]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	650b      	str	r3, [r1, #80]	; 0x50
 8002bf4:	e001      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d044      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c10:	d01b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c16:	d805      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d022      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002c22:	e01b      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d01d      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2e:	d01c      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002c30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c34:	d01b      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002c36:	e011      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 ff5a 	bl	8003af8 <RCCEx_PLL2_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c48:	e012      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3324      	adds	r3, #36	; 0x24
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 f803 	bl	8003c5c <RCCEx_PLL3_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c5a:	e009      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c60:	e006      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e004      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c84:	4930      	ldr	r1, [pc, #192]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	658b      	str	r3, [r1, #88]	; 0x58
 8002c8a:	e001      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d022      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8002ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 ff21 	bl	8003af8 <RCCEx_PLL2_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002cba:	e003      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 8002cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	491c      	ldr	r1, [pc, #112]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002cdc:	e001      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d030      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d013      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d02:	e00f      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d04:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d10:	e00c      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2101      	movs	r1, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 feed 	bl	8003af8 <RCCEx_PLL2_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d22:	e003      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
      break;
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 8002d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4902      	ldr	r1, [pc, #8]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	650b      	str	r3, [r1, #80]	; 0x50
 8002d44:	e004      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002d46:	bf00      	nop
 8002d48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d032      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d81b      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002da3 	.word	0x08002da3
 8002d70:	08002d7d 	.word	0x08002d7d
 8002d74:	08002d8b 	.word	0x08002d8b
 8002d78:	08002da3 	.word	0x08002da3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d7c:	4bb8      	ldr	r3, [pc, #736]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	4ab7      	ldr	r2, [pc, #732]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d88:	e00c      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2102      	movs	r1, #2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 feb1 	bl	8003af8 <RCCEx_PLL2_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d9a:	e003      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002da0:	e000      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 8002da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002daa:	4bad      	ldr	r3, [pc, #692]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	49aa      	ldr	r1, [pc, #680]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002dbc:	e001      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8086 	beq.w	8002edc <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dd0:	4ba4      	ldr	r3, [pc, #656]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4aa3      	ldr	r2, [pc, #652]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe f890 	bl	8000f00 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de2:	e009      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe f88c 	bl	8000f00 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d902      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	75fb      	strb	r3, [r7, #23]
        break;
 8002df6:	e005      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df8:	4b9a      	ldr	r3, [pc, #616]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d166      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e0a:	4b95      	ldr	r3, [pc, #596]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e14:	4053      	eors	r3, r2
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d013      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e1e:	4b90      	ldr	r3, [pc, #576]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e26:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e28:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a8c      	ldr	r2, [pc, #560]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e34:	4b8a      	ldr	r3, [pc, #552]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a89      	ldr	r2, [pc, #548]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e40:	4a87      	ldr	r2, [pc, #540]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e50:	d115      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe f855 	bl	8000f00 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e58:	e00b      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe f851 	bl	8000f00 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d902      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8002e70:	e005      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e72:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ed      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d126      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002e94:	4b72      	ldr	r3, [pc, #456]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ea2:	0919      	lsrs	r1, r3, #4
 8002ea4:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002ea6:	400b      	ands	r3, r1
 8002ea8:	496d      	ldr	r1, [pc, #436]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	610b      	str	r3, [r1, #16]
 8002eae:	e005      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002eb0:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	4a6a      	ldr	r2, [pc, #424]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002eb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002eba:	6113      	str	r3, [r2, #16]
 8002ebc:	4b68      	ldr	r3, [pc, #416]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ebe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eca:	4965      	ldr	r1, [pc, #404]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	670b      	str	r3, [r1, #112]	; 0x70
 8002ed0:	e004      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	75bb      	strb	r3, [r7, #22]
 8002ed6:	e001      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d07e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eec:	2b28      	cmp	r3, #40	; 0x28
 8002eee:	d867      	bhi.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002fc7 	.word	0x08002fc7
 8002efc:	08002fc1 	.word	0x08002fc1
 8002f00:	08002fc1 	.word	0x08002fc1
 8002f04:	08002fc1 	.word	0x08002fc1
 8002f08:	08002fc1 	.word	0x08002fc1
 8002f0c:	08002fc1 	.word	0x08002fc1
 8002f10:	08002fc1 	.word	0x08002fc1
 8002f14:	08002fc1 	.word	0x08002fc1
 8002f18:	08002f9d 	.word	0x08002f9d
 8002f1c:	08002fc1 	.word	0x08002fc1
 8002f20:	08002fc1 	.word	0x08002fc1
 8002f24:	08002fc1 	.word	0x08002fc1
 8002f28:	08002fc1 	.word	0x08002fc1
 8002f2c:	08002fc1 	.word	0x08002fc1
 8002f30:	08002fc1 	.word	0x08002fc1
 8002f34:	08002fc1 	.word	0x08002fc1
 8002f38:	08002faf 	.word	0x08002faf
 8002f3c:	08002fc1 	.word	0x08002fc1
 8002f40:	08002fc1 	.word	0x08002fc1
 8002f44:	08002fc1 	.word	0x08002fc1
 8002f48:	08002fc1 	.word	0x08002fc1
 8002f4c:	08002fc1 	.word	0x08002fc1
 8002f50:	08002fc1 	.word	0x08002fc1
 8002f54:	08002fc1 	.word	0x08002fc1
 8002f58:	08002fc7 	.word	0x08002fc7
 8002f5c:	08002fc1 	.word	0x08002fc1
 8002f60:	08002fc1 	.word	0x08002fc1
 8002f64:	08002fc1 	.word	0x08002fc1
 8002f68:	08002fc1 	.word	0x08002fc1
 8002f6c:	08002fc1 	.word	0x08002fc1
 8002f70:	08002fc1 	.word	0x08002fc1
 8002f74:	08002fc1 	.word	0x08002fc1
 8002f78:	08002fc7 	.word	0x08002fc7
 8002f7c:	08002fc1 	.word	0x08002fc1
 8002f80:	08002fc1 	.word	0x08002fc1
 8002f84:	08002fc1 	.word	0x08002fc1
 8002f88:	08002fc1 	.word	0x08002fc1
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fc1 	.word	0x08002fc1
 8002f94:	08002fc1 	.word	0x08002fc1
 8002f98:	08002fc7 	.word	0x08002fc7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fda8 	bl	8003af8 <RCCEx_PLL2_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fac:	e00c      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3324      	adds	r3, #36	; 0x24
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fe51 	bl	8003c5c <RCCEx_PLL3_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fbe:	e003      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 8002fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fda:	4921      	ldr	r1, [pc, #132]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	654b      	str	r3, [r1, #84]	; 0x54
 8002fe0:	e001      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d03e      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d820      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <HAL_RCCEx_PeriphCLKConfig+0x878>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003043 	.word	0x08003043
 8003004:	08003019 	.word	0x08003019
 8003008:	0800302b 	.word	0x0800302b
 800300c:	08003043 	.word	0x08003043
 8003010:	08003043 	.word	0x08003043
 8003014:	08003043 	.word	0x08003043
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fd6a 	bl	8003af8 <RCCEx_PLL2_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003028:	e00c      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3324      	adds	r3, #36	; 0x24
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fe13 	bl	8003c5c <RCCEx_PLL3_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800303a:	e003      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	75fb      	strb	r3, [r7, #23]
      break;
 8003040:	e000      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 8003042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d110      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003056:	4902      	ldr	r1, [pc, #8]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	654b      	str	r3, [r1, #84]	; 0x54
 800305c:	e008      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 800305e:	bf00      	nop
 8003060:	58024400 	.word	0x58024400
 8003064:	58024800 	.word	0x58024800
 8003068:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d039      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003082:	2b05      	cmp	r3, #5
 8003084:	d820      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	080030cf 	.word	0x080030cf
 8003090:	080030a5 	.word	0x080030a5
 8003094:	080030b7 	.word	0x080030b7
 8003098:	080030cf 	.word	0x080030cf
 800309c:	080030cf 	.word	0x080030cf
 80030a0:	080030cf 	.word	0x080030cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	2101      	movs	r1, #1
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fd24 	bl	8003af8 <RCCEx_PLL2_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030b4:	e00c      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3324      	adds	r3, #36	; 0x24
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fdcd 	bl	8003c5c <RCCEx_PLL3_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030c6:	e003      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	75fb      	strb	r3, [r7, #23]
      break;
 80030cc:	e000      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 80030ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d6:	4bb2      	ldr	r3, [pc, #712]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	49ae      	ldr	r1, [pc, #696]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	658b      	str	r3, [r1, #88]	; 0x58
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d044      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003106:	d01b      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8003108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800310c:	d805      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x992>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d022      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003118:	e01b      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311e:	d01d      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003124:	d01c      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8003126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800312a:	d01b      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800312c:	e011      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fcdf 	bl	8003af8 <RCCEx_PLL2_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800313e:	e012      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3324      	adds	r3, #36	; 0x24
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fd88 	bl	8003c5c <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003150:	e009      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
      break;
 8003156:	e006      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003158:	bf00      	nop
 800315a:	e004      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 800315c:	bf00      	nop
 800315e:	e002      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316c:	4b8c      	ldr	r3, [pc, #560]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	4989      	ldr	r1, [pc, #548]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800317c:	4313      	orrs	r3, r2
 800317e:	654b      	str	r3, [r1, #84]	; 0x54
 8003180:	e001      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d044      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319c:	d01b      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 800319e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a2:	d805      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d022      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80031a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80031ae:	e01b      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b4:	d01d      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80031b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031ba:	d01c      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 80031bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031c0:	d01b      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xa72>
 80031c2:	e011      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fc94 	bl	8003af8 <RCCEx_PLL2_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031d4:	e012      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3324      	adds	r3, #36	; 0x24
 80031da:	2102      	movs	r1, #2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fd3d 	bl	8003c5c <RCCEx_PLL3_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031e6:	e009      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75fb      	strb	r3, [r7, #23]
      break;
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80031fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003210:	4963      	ldr	r1, [pc, #396]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003212:	4313      	orrs	r3, r2
 8003214:	658b      	str	r3, [r1, #88]	; 0x58
 8003216:	e001      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d044      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800322e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003232:	d01b      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8003234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003238:	d805      	bhi.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d022      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003244:	e01b      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324a:	d01d      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800324c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003250:	d01c      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8003252:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003256:	d01b      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8003258:	e011      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fc49 	bl	8003af8 <RCCEx_PLL2_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800326a:	e012      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3324      	adds	r3, #36	; 0x24
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fcf2 	bl	8003c5c <RCCEx_PLL3_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800327c:	e009      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
      break;
 8003282:	e006      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003284:	bf00      	nop
 8003286:	e004      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003288:	bf00      	nop
 800328a:	e002      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 800328c:	bf00      	nop
 800328e:	e000      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032a6:	493e      	ldr	r1, [pc, #248]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	658b      	str	r3, [r1, #88]	; 0x58
 80032ac:	e001      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c8:	d10a      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3324      	adds	r3, #36	; 0x24
 80032ce:	2102      	movs	r1, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fcc3 	bl	8003c5c <RCCEx_PLL3_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032e0:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	492c      	ldr	r1, [pc, #176]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330a:	d10a      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3324      	adds	r3, #36	; 0x24
 8003310:	2102      	movs	r1, #2
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fca2 	bl	8003c5c <RCCEx_PLL3_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003322:	4b1f      	ldr	r3, [pc, #124]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003330:	491b      	ldr	r1, [pc, #108]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003332:	4313      	orrs	r3, r2
 8003334:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d032      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d00d      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800334e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003352:	d016      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d111      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fbca 	bl	8003af8 <RCCEx_PLL2_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003368:	e00c      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3324      	adds	r3, #36	; 0x24
 800336e:	2102      	movs	r1, #2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fc73 	bl	8003c5c <RCCEx_PLL3_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
      break;
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 8003382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003398:	4901      	ldr	r1, [pc, #4]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800339a:	4313      	orrs	r3, r2
 800339c:	658b      	str	r3, [r1, #88]	; 0x58
 800339e:	e003      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80033a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033be:	d00c      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80033c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033c4:	d015      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ca:	d10f      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033cc:	4b72      	ldr	r3, [pc, #456]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	4a71      	ldr	r2, [pc, #452]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80033d8:	e00c      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3324      	adds	r3, #36	; 0x24
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fc3b 	bl	8003c5c <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80033ea:	e003      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	75fb      	strb	r3, [r7, #23]
      break;
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 80033f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033fa:	4b67      	ldr	r3, [pc, #412]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	4963      	ldr	r1, [pc, #396]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800340a:	4313      	orrs	r3, r2
 800340c:	654b      	str	r3, [r1, #84]	; 0x54
 800340e:	e001      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d029      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d007      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 800342e:	e00f      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800343c:	e00b      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fb57 	bl	8003af8 <RCCEx_PLL2_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800344e:	e002      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
      break;
 8003454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800345c:	4b4e      	ldr	r3, [pc, #312]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	494b      	ldr	r1, [pc, #300]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800346a:	4313      	orrs	r3, r2
 800346c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800346e:	e001      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3324      	adds	r3, #36	; 0x24
 8003484:	2102      	movs	r1, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fbe8 	bl	8003c5c <RCCEx_PLL3_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d031      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ac:	d00c      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 80034ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b2:	d802      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xd32>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d011      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xd54>
 80034b8:	e00d      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034be:	d00f      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80034c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c4:	d00e      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80034c6:	e006      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4b33      	ldr	r3, [pc, #204]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a32      	ldr	r2, [pc, #200]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80034d4:	e007      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
      break;
 80034da:	e004      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 80034dc:	bf00      	nop
 80034de:	e002      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 80034e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034ec:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fa:	4927      	ldr	r1, [pc, #156]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003500:	e001      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003512:	4b21      	ldr	r3, [pc, #132]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	491e      	ldr	r1, [pc, #120]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003520:	4313      	orrs	r3, r2
 8003522:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800353e:	4313      	orrs	r3, r2
 8003540:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xde2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	4a11      	ldr	r2, [pc, #68]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003554:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003558:	6113      	str	r3, [r2, #16]
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003564:	490c      	ldr	r1, [pc, #48]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003566:	4313      	orrs	r3, r2
 8003568:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da08      	bge.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	4906      	ldr	r1, [pc, #24]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003580:	4313      	orrs	r3, r2
 8003582:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003584:	7dbb      	ldrb	r3, [r7, #22]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  }
  return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	58024400 	.word	0x58024400

0800359c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80035a0:	f7ff f896 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80035a4:	4601      	mov	r1, r0
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	58024400 	.word	0x58024400
 80035c4:	08006828 	.word	0x08006828

080035c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035d0:	4b9d      	ldr	r3, [pc, #628]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80035da:	4b9b      	ldr	r3, [pc, #620]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	0b1b      	lsrs	r3, r3, #12
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80035e6:	4b98      	ldr	r3, [pc, #608]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80035f2:	4b95      	ldr	r3, [pc, #596]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	08db      	lsrs	r3, r3, #3
 80035f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 810a 	beq.w	800382a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d05a      	beq.n	80036d2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800361c:	2b01      	cmp	r3, #1
 800361e:	d302      	bcc.n	8003626 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003620:	2b02      	cmp	r3, #2
 8003622:	d078      	beq.n	8003716 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003624:	e099      	b.n	800375a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003626:	4b88      	ldr	r3, [pc, #544]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d02d      	beq.n	800368e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003632:	4b85      	ldr	r3, [pc, #532]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	08db      	lsrs	r3, r3, #3
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	4a83      	ldr	r2, [pc, #524]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365c:	4b7a      	ldr	r3, [pc, #488]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003670:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003688:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800368c:	e087      	b.n	800379e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003698:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800369c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a0:	4b69      	ldr	r3, [pc, #420]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80036b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80036b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036d0:	e065      	b.n	800379e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80036e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e4:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80036fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003710:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003714:	e043      	b.n	800379e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003720:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800385c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003728:	4b47      	ldr	r3, [pc, #284]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003738:	ed97 6a03 	vldr	s12, [r7, #12]
 800373c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003754:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003758:	e021      	b.n	800379e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003764:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376c:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003780:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003798:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800379c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800379e:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	0a5b      	lsrs	r3, r3, #9
 80037a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a8:	ee07 3a90 	vmov	s15, r3
 80037ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80037bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037c4:	ee17 2a90 	vmov	r2, s15
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80037ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f2:	ee17 2a90 	vmov	r2, s15
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	0e1b      	lsrs	r3, r3, #24
 8003800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800380c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003814:	edd7 6a07 	vldr	s13, [r7, #28]
 8003818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800381c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003820:	ee17 2a90 	vmov	r2, s15
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003828:	e008      	b.n	800383c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
}
 800383c:	bf00      	nop
 800383e:	3724      	adds	r7, #36	; 0x24
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	58024400 	.word	0x58024400
 800384c:	03d09000 	.word	0x03d09000
 8003850:	46000000 	.word	0x46000000
 8003854:	4c742400 	.word	0x4c742400
 8003858:	4a742400 	.word	0x4a742400
 800385c:	4bbebc20 	.word	0x4bbebc20

08003860 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003868:	4b9d      	ldr	r3, [pc, #628]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003872:	4b9b      	ldr	r3, [pc, #620]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	0d1b      	lsrs	r3, r3, #20
 8003878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800387e:	4b98      	ldr	r3, [pc, #608]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800388a:	4b95      	ldr	r3, [pc, #596]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	08db      	lsrs	r3, r3, #3
 8003890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 810a 	beq.w	8003ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d05a      	beq.n	800396a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d302      	bcc.n	80038be <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d078      	beq.n	80039ae <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80038bc:	e099      	b.n	80039f2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038be:	4b88      	ldr	r3, [pc, #544]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02d      	beq.n	8003926 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038ca:	4b85      	ldr	r3, [pc, #532]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	08db      	lsrs	r3, r3, #3
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	4a83      	ldr	r2, [pc, #524]	; (8003ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80038d6:	fa22 f303 	lsr.w	r3, r2, r3
 80038da:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f4:	4b7a      	ldr	r3, [pc, #488]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003904:	ed97 6a03 	vldr	s12, [r7, #12]
 8003908:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800390c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003920:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003924:	e087      	b.n	8003a36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003930:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003aec <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003938:	4b69      	ldr	r3, [pc, #420]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003948:	ed97 6a03 	vldr	s12, [r7, #12]
 800394c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003964:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003968:	e065      	b.n	8003a36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003974:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397c:	4b58      	ldr	r3, [pc, #352]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003990:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039ac:	e043      	b.n	8003a36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80039bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c0:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80039d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80039d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039f0:	e021      	b.n	8003a36 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	ee07 3a90 	vmov	s15, r3
 80039f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a04:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a18:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a34:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003a36:	4b2a      	ldr	r3, [pc, #168]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	0a5b      	lsrs	r3, r3, #9
 8003a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a50:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a5c:	ee17 2a90 	vmov	r2, s15
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003a64:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a8a:	ee17 2a90 	vmov	r2, s15
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	0e1b      	lsrs	r3, r3, #24
 8003a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ab8:	ee17 2a90 	vmov	r2, s15
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	3724      	adds	r7, #36	; 0x24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	58024400 	.word	0x58024400
 8003ae4:	03d09000 	.word	0x03d09000
 8003ae8:	46000000 	.word	0x46000000
 8003aec:	4c742400 	.word	0x4c742400
 8003af0:	4a742400 	.word	0x4a742400
 8003af4:	4bbebc20 	.word	0x4bbebc20

08003af8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b06:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d101      	bne.n	8003b16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e099      	b.n	8003c4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b16:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a4e      	ldr	r2, [pc, #312]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b22:	f7fd f9ed 	bl	8000f00 <HAL_GetTick>
 8003b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b2a:	f7fd f9e9 	bl	8000f00 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e086      	b.n	8003c4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b3c:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b48:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	493f      	ldr	r1, [pc, #252]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	628b      	str	r3, [r1, #40]	; 0x28
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	025b      	lsls	r3, r3, #9
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b8c:	4931      	ldr	r1, [pc, #196]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	492d      	ldr	r1, [pc, #180]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f023 0220 	bic.w	r2, r3, #32
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4928      	ldr	r1, [pc, #160]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bb6:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bbc:	f023 0310 	bic.w	r3, r3, #16
 8003bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <RCCEx_PLL2_Config+0x160>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	69d2      	ldr	r2, [r2, #28]
 8003bce:	00d2      	lsls	r2, r2, #3
 8003bd0:	4920      	ldr	r1, [pc, #128]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003bd6:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bdc:	f043 0310 	orr.w	r3, r3, #16
 8003be0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bf4:	e00f      	b.n	8003c16 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d106      	bne.n	8003c0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c08:	e005      	b.n	8003c16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c22:	f7fd f96d 	bl	8000f00 <HAL_GetTick>
 8003c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c28:	e008      	b.n	8003c3c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c2a:	f7fd f969 	bl	8000f00 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e006      	b.n	8003c4a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <RCCEx_PLL2_Config+0x15c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400
 8003c58:	ffff0007 	.word	0xffff0007

08003c5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c6a:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d101      	bne.n	8003c7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e099      	b.n	8003dae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c7a:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a4e      	ldr	r2, [pc, #312]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c86:	f7fd f93b 	bl	8000f00 <HAL_GetTick>
 8003c8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c8c:	e008      	b.n	8003ca0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c8e:	f7fd f937 	bl	8000f00 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e086      	b.n	8003dae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ca0:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f0      	bne.n	8003c8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	051b      	lsls	r3, r3, #20
 8003cba:	493f      	ldr	r1, [pc, #252]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	628b      	str	r3, [r1, #40]	; 0x28
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	025b      	lsls	r3, r3, #9
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	061b      	lsls	r3, r3, #24
 8003cec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cf0:	4931      	ldr	r1, [pc, #196]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003cf6:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	492d      	ldr	r1, [pc, #180]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4928      	ldr	r1, [pc, #160]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d1a:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <RCCEx_PLL3_Config+0x160>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	69d2      	ldr	r2, [r2, #28]
 8003d32:	00d2      	lsls	r2, r2, #3
 8003d34:	4920      	ldr	r1, [pc, #128]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d58:	e00f      	b.n	8003d7a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d106      	bne.n	8003d6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d60:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d6c:	e005      	b.n	8003d7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	4a11      	ldr	r2, [pc, #68]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d86:	f7fd f8bb 	bl	8000f00 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d8c:	e008      	b.n	8003da0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d8e:	f7fd f8b7 	bl	8000f00 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e006      	b.n	8003dae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <RCCEx_PLL3_Config+0x15c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	ffff0007 	.word	0xffff0007

08003dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e042      	b.n	8003e58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fc ff63 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2224      	movs	r2, #36	; 0x24
 8003dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8c4 	bl	8003f90 <UART_SetConfig>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e022      	b.n	8003e58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f002 fa36 	bl	800628c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f002 fabd 	bl	80063d0 <UART_CheckIdleState>
 8003e56:	4603      	mov	r3, r0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	f040 8083 	bne.w	8003f82 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_UART_Transmit+0x28>
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e07b      	b.n	8003f84 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_UART_Transmit+0x3a>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e074      	b.n	8003f84 <HAL_UART_Transmit+0x124>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2221      	movs	r2, #33	; 0x21
 8003eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003eb2:	f7fd f825 	bl	8000f00 <HAL_GetTick>
 8003eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	88fa      	ldrh	r2, [r7, #6]
 8003ebc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed0:	d108      	bne.n	8003ee4 <HAL_UART_Transmit+0x84>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	e003      	b.n	8003eec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eec:	e02c      	b.n	8003f48 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f002 fab1 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e03d      	b.n	8003f84 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3302      	adds	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e007      	b.n	8003f36 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1cc      	bne.n	8003eee <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2140      	movs	r1, #64	; 0x40
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f002 fa7e 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e00a      	b.n	8003f84 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
  }
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3720      	adds	r7, #32
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	0000      	movs	r0, r0
	...

08003f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f94:	b090      	sub	sp, #64	; 0x40
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4bc1      	ldr	r3, [pc, #772]	; (80042d8 <UART_SetConfig+0x348>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4ab7      	ldr	r2, [pc, #732]	; (80042dc <UART_SetConfig+0x34c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800400a:	4313      	orrs	r3, r2
 800400c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	4bb2      	ldr	r3, [pc, #712]	; (80042e0 <UART_SetConfig+0x350>)
 8004016:	4013      	ands	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800401e:	430b      	orrs	r3, r1
 8004020:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	f023 010f 	bic.w	r1, r3, #15
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4aa9      	ldr	r2, [pc, #676]	; (80042e4 <UART_SetConfig+0x354>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d177      	bne.n	8004132 <UART_SetConfig+0x1a2>
 8004042:	4ba9      	ldr	r3, [pc, #676]	; (80042e8 <UART_SetConfig+0x358>)
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800404a:	2b28      	cmp	r3, #40	; 0x28
 800404c:	d86c      	bhi.n	8004128 <UART_SetConfig+0x198>
 800404e:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0xc4>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	080040f9 	.word	0x080040f9
 8004058:	08004129 	.word	0x08004129
 800405c:	08004129 	.word	0x08004129
 8004060:	08004129 	.word	0x08004129
 8004064:	08004129 	.word	0x08004129
 8004068:	08004129 	.word	0x08004129
 800406c:	08004129 	.word	0x08004129
 8004070:	08004129 	.word	0x08004129
 8004074:	08004101 	.word	0x08004101
 8004078:	08004129 	.word	0x08004129
 800407c:	08004129 	.word	0x08004129
 8004080:	08004129 	.word	0x08004129
 8004084:	08004129 	.word	0x08004129
 8004088:	08004129 	.word	0x08004129
 800408c:	08004129 	.word	0x08004129
 8004090:	08004129 	.word	0x08004129
 8004094:	08004109 	.word	0x08004109
 8004098:	08004129 	.word	0x08004129
 800409c:	08004129 	.word	0x08004129
 80040a0:	08004129 	.word	0x08004129
 80040a4:	08004129 	.word	0x08004129
 80040a8:	08004129 	.word	0x08004129
 80040ac:	08004129 	.word	0x08004129
 80040b0:	08004129 	.word	0x08004129
 80040b4:	08004111 	.word	0x08004111
 80040b8:	08004129 	.word	0x08004129
 80040bc:	08004129 	.word	0x08004129
 80040c0:	08004129 	.word	0x08004129
 80040c4:	08004129 	.word	0x08004129
 80040c8:	08004129 	.word	0x08004129
 80040cc:	08004129 	.word	0x08004129
 80040d0:	08004129 	.word	0x08004129
 80040d4:	08004119 	.word	0x08004119
 80040d8:	08004129 	.word	0x08004129
 80040dc:	08004129 	.word	0x08004129
 80040e0:	08004129 	.word	0x08004129
 80040e4:	08004129 	.word	0x08004129
 80040e8:	08004129 	.word	0x08004129
 80040ec:	08004129 	.word	0x08004129
 80040f0:	08004129 	.word	0x08004129
 80040f4:	08004121 	.word	0x08004121
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80040fe:	e233      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004100:	2304      	movs	r3, #4
 8004102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004106:	e22f      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004108:	2308      	movs	r3, #8
 800410a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800410e:	e22b      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004110:	2310      	movs	r3, #16
 8004112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004116:	e227      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004118:	2320      	movs	r3, #32
 800411a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800411e:	e223      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004120:	2340      	movs	r3, #64	; 0x40
 8004122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004126:	e21f      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800412e:	bf00      	nop
 8004130:	e21a      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a6d      	ldr	r2, [pc, #436]	; (80042ec <UART_SetConfig+0x35c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d132      	bne.n	80041a2 <UART_SetConfig+0x212>
 800413c:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <UART_SetConfig+0x358>)
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	2b05      	cmp	r3, #5
 8004146:	d827      	bhi.n	8004198 <UART_SetConfig+0x208>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0x1c0>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004169 	.word	0x08004169
 8004154:	08004171 	.word	0x08004171
 8004158:	08004179 	.word	0x08004179
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	2300      	movs	r3, #0
 800416a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800416e:	e1fb      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004170:	2304      	movs	r3, #4
 8004172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004176:	e1f7      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004178:	2308      	movs	r3, #8
 800417a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800417e:	e1f3      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004186:	e1ef      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004188:	2320      	movs	r3, #32
 800418a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800418e:	e1eb      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004190:	2340      	movs	r3, #64	; 0x40
 8004192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004196:	e1e7      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800419e:	bf00      	nop
 80041a0:	e1e2      	b.n	8004568 <UART_SetConfig+0x5d8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <UART_SetConfig+0x360>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d132      	bne.n	8004212 <UART_SetConfig+0x282>
 80041ac:	4b4e      	ldr	r3, [pc, #312]	; (80042e8 <UART_SetConfig+0x358>)
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	d827      	bhi.n	8004208 <UART_SetConfig+0x278>
 80041b8:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <UART_SetConfig+0x230>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041d9 	.word	0x080041d9
 80041c4:	080041e1 	.word	0x080041e1
 80041c8:	080041e9 	.word	0x080041e9
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041de:	e1c3      	b.n	8004568 <UART_SetConfig+0x5d8>
 80041e0:	2304      	movs	r3, #4
 80041e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041e6:	e1bf      	b.n	8004568 <UART_SetConfig+0x5d8>
 80041e8:	2308      	movs	r3, #8
 80041ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041ee:	e1bb      	b.n	8004568 <UART_SetConfig+0x5d8>
 80041f0:	2310      	movs	r3, #16
 80041f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041f6:	e1b7      	b.n	8004568 <UART_SetConfig+0x5d8>
 80041f8:	2320      	movs	r3, #32
 80041fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80041fe:	e1b3      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004200:	2340      	movs	r3, #64	; 0x40
 8004202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004206:	e1af      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800420e:	bf00      	nop
 8004210:	e1aa      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a37      	ldr	r2, [pc, #220]	; (80042f4 <UART_SetConfig+0x364>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d132      	bne.n	8004282 <UART_SetConfig+0x2f2>
 800421c:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <UART_SetConfig+0x358>)
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	2b05      	cmp	r3, #5
 8004226:	d827      	bhi.n	8004278 <UART_SetConfig+0x2e8>
 8004228:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <UART_SetConfig+0x2a0>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004249 	.word	0x08004249
 8004234:	08004251 	.word	0x08004251
 8004238:	08004259 	.word	0x08004259
 800423c:	08004261 	.word	0x08004261
 8004240:	08004269 	.word	0x08004269
 8004244:	08004271 	.word	0x08004271
 8004248:	2300      	movs	r3, #0
 800424a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800424e:	e18b      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004250:	2304      	movs	r3, #4
 8004252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004256:	e187      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004258:	2308      	movs	r3, #8
 800425a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800425e:	e183      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004260:	2310      	movs	r3, #16
 8004262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004266:	e17f      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004268:	2320      	movs	r3, #32
 800426a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800426e:	e17b      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004270:	2340      	movs	r3, #64	; 0x40
 8004272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004276:	e177      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800427e:	bf00      	nop
 8004280:	e172      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <UART_SetConfig+0x368>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d144      	bne.n	8004316 <UART_SetConfig+0x386>
 800428c:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <UART_SetConfig+0x358>)
 800428e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	2b05      	cmp	r3, #5
 8004296:	d839      	bhi.n	800430c <UART_SetConfig+0x37c>
 8004298:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0x310>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042b9 	.word	0x080042b9
 80042a4:	080042c1 	.word	0x080042c1
 80042a8:	080042c9 	.word	0x080042c9
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042fd 	.word	0x080042fd
 80042b4:	08004305 	.word	0x08004305
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042be:	e153      	b.n	8004568 <UART_SetConfig+0x5d8>
 80042c0:	2304      	movs	r3, #4
 80042c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042c6:	e14f      	b.n	8004568 <UART_SetConfig+0x5d8>
 80042c8:	2308      	movs	r3, #8
 80042ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042ce:	e14b      	b.n	8004568 <UART_SetConfig+0x5d8>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042d6:	e147      	b.n	8004568 <UART_SetConfig+0x5d8>
 80042d8:	cfff69f3 	.word	0xcfff69f3
 80042dc:	58000c00 	.word	0x58000c00
 80042e0:	11fff4ff 	.word	0x11fff4ff
 80042e4:	40011000 	.word	0x40011000
 80042e8:	58024400 	.word	0x58024400
 80042ec:	40004400 	.word	0x40004400
 80042f0:	40004800 	.word	0x40004800
 80042f4:	40004c00 	.word	0x40004c00
 80042f8:	40005000 	.word	0x40005000
 80042fc:	2320      	movs	r3, #32
 80042fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004302:	e131      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004304:	2340      	movs	r3, #64	; 0x40
 8004306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800430a:	e12d      	b.n	8004568 <UART_SetConfig+0x5d8>
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004312:	bf00      	nop
 8004314:	e128      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4ac3      	ldr	r2, [pc, #780]	; (8004628 <UART_SetConfig+0x698>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d178      	bne.n	8004412 <UART_SetConfig+0x482>
 8004320:	4bc2      	ldr	r3, [pc, #776]	; (800462c <UART_SetConfig+0x69c>)
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004328:	2b28      	cmp	r3, #40	; 0x28
 800432a:	d86d      	bhi.n	8004408 <UART_SetConfig+0x478>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0x3a4>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	080043d9 	.word	0x080043d9
 8004338:	08004409 	.word	0x08004409
 800433c:	08004409 	.word	0x08004409
 8004340:	08004409 	.word	0x08004409
 8004344:	08004409 	.word	0x08004409
 8004348:	08004409 	.word	0x08004409
 800434c:	08004409 	.word	0x08004409
 8004350:	08004409 	.word	0x08004409
 8004354:	080043e1 	.word	0x080043e1
 8004358:	08004409 	.word	0x08004409
 800435c:	08004409 	.word	0x08004409
 8004360:	08004409 	.word	0x08004409
 8004364:	08004409 	.word	0x08004409
 8004368:	08004409 	.word	0x08004409
 800436c:	08004409 	.word	0x08004409
 8004370:	08004409 	.word	0x08004409
 8004374:	080043e9 	.word	0x080043e9
 8004378:	08004409 	.word	0x08004409
 800437c:	08004409 	.word	0x08004409
 8004380:	08004409 	.word	0x08004409
 8004384:	08004409 	.word	0x08004409
 8004388:	08004409 	.word	0x08004409
 800438c:	08004409 	.word	0x08004409
 8004390:	08004409 	.word	0x08004409
 8004394:	080043f1 	.word	0x080043f1
 8004398:	08004409 	.word	0x08004409
 800439c:	08004409 	.word	0x08004409
 80043a0:	08004409 	.word	0x08004409
 80043a4:	08004409 	.word	0x08004409
 80043a8:	08004409 	.word	0x08004409
 80043ac:	08004409 	.word	0x08004409
 80043b0:	08004409 	.word	0x08004409
 80043b4:	080043f9 	.word	0x080043f9
 80043b8:	08004409 	.word	0x08004409
 80043bc:	08004409 	.word	0x08004409
 80043c0:	08004409 	.word	0x08004409
 80043c4:	08004409 	.word	0x08004409
 80043c8:	08004409 	.word	0x08004409
 80043cc:	08004409 	.word	0x08004409
 80043d0:	08004409 	.word	0x08004409
 80043d4:	08004401 	.word	0x08004401
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043de:	e0c3      	b.n	8004568 <UART_SetConfig+0x5d8>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043e6:	e0bf      	b.n	8004568 <UART_SetConfig+0x5d8>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043ee:	e0bb      	b.n	8004568 <UART_SetConfig+0x5d8>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043f6:	e0b7      	b.n	8004568 <UART_SetConfig+0x5d8>
 80043f8:	2320      	movs	r3, #32
 80043fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043fe:	e0b3      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004406:	e0af      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800440e:	bf00      	nop
 8004410:	e0aa      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a86      	ldr	r2, [pc, #536]	; (8004630 <UART_SetConfig+0x6a0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d132      	bne.n	8004482 <UART_SetConfig+0x4f2>
 800441c:	4b83      	ldr	r3, [pc, #524]	; (800462c <UART_SetConfig+0x69c>)
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	2b05      	cmp	r3, #5
 8004426:	d827      	bhi.n	8004478 <UART_SetConfig+0x4e8>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <UART_SetConfig+0x4a0>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004449 	.word	0x08004449
 8004434:	08004451 	.word	0x08004451
 8004438:	08004459 	.word	0x08004459
 800443c:	08004461 	.word	0x08004461
 8004440:	08004469 	.word	0x08004469
 8004444:	08004471 	.word	0x08004471
 8004448:	2300      	movs	r3, #0
 800444a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800444e:	e08b      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004450:	2304      	movs	r3, #4
 8004452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004456:	e087      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004458:	2308      	movs	r3, #8
 800445a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800445e:	e083      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004460:	2310      	movs	r3, #16
 8004462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004466:	e07f      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004468:	2320      	movs	r3, #32
 800446a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800446e:	e07b      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004470:	2340      	movs	r3, #64	; 0x40
 8004472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004476:	e077      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800447e:	bf00      	nop
 8004480:	e072      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a6b      	ldr	r2, [pc, #428]	; (8004634 <UART_SetConfig+0x6a4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d132      	bne.n	80044f2 <UART_SetConfig+0x562>
 800448c:	4b67      	ldr	r3, [pc, #412]	; (800462c <UART_SetConfig+0x69c>)
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	2b05      	cmp	r3, #5
 8004496:	d827      	bhi.n	80044e8 <UART_SetConfig+0x558>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0x510>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044b9 	.word	0x080044b9
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	080044c9 	.word	0x080044c9
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044be:	e053      	b.n	8004568 <UART_SetConfig+0x5d8>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044c6:	e04f      	b.n	8004568 <UART_SetConfig+0x5d8>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ce:	e04b      	b.n	8004568 <UART_SetConfig+0x5d8>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044d6:	e047      	b.n	8004568 <UART_SetConfig+0x5d8>
 80044d8:	2320      	movs	r3, #32
 80044da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044de:	e043      	b.n	8004568 <UART_SetConfig+0x5d8>
 80044e0:	2340      	movs	r3, #64	; 0x40
 80044e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044e6:	e03f      	b.n	8004568 <UART_SetConfig+0x5d8>
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ee:	bf00      	nop
 80044f0:	e03a      	b.n	8004568 <UART_SetConfig+0x5d8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a50      	ldr	r2, [pc, #320]	; (8004638 <UART_SetConfig+0x6a8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d132      	bne.n	8004562 <UART_SetConfig+0x5d2>
 80044fc:	4b4b      	ldr	r3, [pc, #300]	; (800462c <UART_SetConfig+0x69c>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	2b05      	cmp	r3, #5
 8004506:	d827      	bhi.n	8004558 <UART_SetConfig+0x5c8>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x580>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004529 	.word	0x08004529
 8004514:	08004531 	.word	0x08004531
 8004518:	08004539 	.word	0x08004539
 800451c:	08004541 	.word	0x08004541
 8004520:	08004549 	.word	0x08004549
 8004524:	08004551 	.word	0x08004551
 8004528:	2302      	movs	r3, #2
 800452a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800452e:	e01b      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004536:	e017      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800453e:	e013      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004546:	e00f      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004548:	2320      	movs	r3, #32
 800454a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800454e:	e00b      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004550:	2340      	movs	r3, #64	; 0x40
 8004552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004556:	e007      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800455e:	bf00      	nop
 8004560:	e002      	b.n	8004568 <UART_SetConfig+0x5d8>
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a32      	ldr	r2, [pc, #200]	; (8004638 <UART_SetConfig+0x6a8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	f040 86f7 	bne.w	8005362 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004574:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004578:	2b08      	cmp	r3, #8
 800457a:	f000 80c0 	beq.w	80046fe <UART_SetConfig+0x76e>
 800457e:	2b08      	cmp	r3, #8
 8004580:	dc04      	bgt.n	800458c <UART_SetConfig+0x5fc>
 8004582:	2b02      	cmp	r3, #2
 8004584:	d00c      	beq.n	80045a0 <UART_SetConfig+0x610>
 8004586:	2b04      	cmp	r3, #4
 8004588:	d065      	beq.n	8004656 <UART_SetConfig+0x6c6>
 800458a:	e27a      	b.n	8004a82 <UART_SetConfig+0xaf2>
 800458c:	2b20      	cmp	r3, #32
 800458e:	f000 81b0 	beq.w	80048f2 <UART_SetConfig+0x962>
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	f000 821e 	beq.w	80049d4 <UART_SetConfig+0xa44>
 8004598:	2b10      	cmp	r3, #16
 800459a:	f000 8104 	beq.w	80047a6 <UART_SetConfig+0x816>
 800459e:	e270      	b.n	8004a82 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80045a0:	f7fe fffc 	bl	800359c <HAL_RCCEx_GetD3PCLK1Freq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d04e      	beq.n	800464c <UART_SetConfig+0x6bc>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d048      	beq.n	8004648 <UART_SetConfig+0x6b8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d042      	beq.n	8004644 <UART_SetConfig+0x6b4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d03c      	beq.n	8004640 <UART_SetConfig+0x6b0>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d036      	beq.n	800463c <UART_SetConfig+0x6ac>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d026      	beq.n	8004624 <UART_SetConfig+0x694>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d020      	beq.n	8004620 <UART_SetConfig+0x690>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b07      	cmp	r3, #7
 80045e4:	d01a      	beq.n	800461c <UART_SetConfig+0x68c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d014      	beq.n	8004618 <UART_SetConfig+0x688>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	d00e      	beq.n	8004614 <UART_SetConfig+0x684>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b0a      	cmp	r3, #10
 80045fc:	d008      	beq.n	8004610 <UART_SetConfig+0x680>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b0b      	cmp	r3, #11
 8004604:	d102      	bne.n	800460c <UART_SetConfig+0x67c>
 8004606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800460a:	e020      	b.n	800464e <UART_SetConfig+0x6be>
 800460c:	2301      	movs	r3, #1
 800460e:	e01e      	b.n	800464e <UART_SetConfig+0x6be>
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	e01c      	b.n	800464e <UART_SetConfig+0x6be>
 8004614:	2340      	movs	r3, #64	; 0x40
 8004616:	e01a      	b.n	800464e <UART_SetConfig+0x6be>
 8004618:	2320      	movs	r3, #32
 800461a:	e018      	b.n	800464e <UART_SetConfig+0x6be>
 800461c:	2310      	movs	r3, #16
 800461e:	e016      	b.n	800464e <UART_SetConfig+0x6be>
 8004620:	230c      	movs	r3, #12
 8004622:	e014      	b.n	800464e <UART_SetConfig+0x6be>
 8004624:	230a      	movs	r3, #10
 8004626:	e012      	b.n	800464e <UART_SetConfig+0x6be>
 8004628:	40011400 	.word	0x40011400
 800462c:	58024400 	.word	0x58024400
 8004630:	40007800 	.word	0x40007800
 8004634:	40007c00 	.word	0x40007c00
 8004638:	58000c00 	.word	0x58000c00
 800463c:	2308      	movs	r3, #8
 800463e:	e006      	b.n	800464e <UART_SetConfig+0x6be>
 8004640:	2306      	movs	r3, #6
 8004642:	e004      	b.n	800464e <UART_SetConfig+0x6be>
 8004644:	2304      	movs	r3, #4
 8004646:	e002      	b.n	800464e <UART_SetConfig+0x6be>
 8004648:	2302      	movs	r3, #2
 800464a:	e000      	b.n	800464e <UART_SetConfig+0x6be>
 800464c:	2301      	movs	r3, #1
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004654:	e219      	b.n	8004a8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004656:	f107 0318 	add.w	r3, r7, #24
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe ffb4 	bl	80035c8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d044      	beq.n	80046f4 <UART_SetConfig+0x764>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b01      	cmp	r3, #1
 8004670:	d03e      	beq.n	80046f0 <UART_SetConfig+0x760>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b02      	cmp	r3, #2
 8004678:	d038      	beq.n	80046ec <UART_SetConfig+0x75c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	2b03      	cmp	r3, #3
 8004680:	d032      	beq.n	80046e8 <UART_SetConfig+0x758>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	2b04      	cmp	r3, #4
 8004688:	d02c      	beq.n	80046e4 <UART_SetConfig+0x754>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	2b05      	cmp	r3, #5
 8004690:	d026      	beq.n	80046e0 <UART_SetConfig+0x750>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b06      	cmp	r3, #6
 8004698:	d020      	beq.n	80046dc <UART_SetConfig+0x74c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b07      	cmp	r3, #7
 80046a0:	d01a      	beq.n	80046d8 <UART_SetConfig+0x748>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d014      	beq.n	80046d4 <UART_SetConfig+0x744>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b09      	cmp	r3, #9
 80046b0:	d00e      	beq.n	80046d0 <UART_SetConfig+0x740>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b0a      	cmp	r3, #10
 80046b8:	d008      	beq.n	80046cc <UART_SetConfig+0x73c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b0b      	cmp	r3, #11
 80046c0:	d102      	bne.n	80046c8 <UART_SetConfig+0x738>
 80046c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046c6:	e016      	b.n	80046f6 <UART_SetConfig+0x766>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e014      	b.n	80046f6 <UART_SetConfig+0x766>
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	e012      	b.n	80046f6 <UART_SetConfig+0x766>
 80046d0:	2340      	movs	r3, #64	; 0x40
 80046d2:	e010      	b.n	80046f6 <UART_SetConfig+0x766>
 80046d4:	2320      	movs	r3, #32
 80046d6:	e00e      	b.n	80046f6 <UART_SetConfig+0x766>
 80046d8:	2310      	movs	r3, #16
 80046da:	e00c      	b.n	80046f6 <UART_SetConfig+0x766>
 80046dc:	230c      	movs	r3, #12
 80046de:	e00a      	b.n	80046f6 <UART_SetConfig+0x766>
 80046e0:	230a      	movs	r3, #10
 80046e2:	e008      	b.n	80046f6 <UART_SetConfig+0x766>
 80046e4:	2308      	movs	r3, #8
 80046e6:	e006      	b.n	80046f6 <UART_SetConfig+0x766>
 80046e8:	2306      	movs	r3, #6
 80046ea:	e004      	b.n	80046f6 <UART_SetConfig+0x766>
 80046ec:	2304      	movs	r3, #4
 80046ee:	e002      	b.n	80046f6 <UART_SetConfig+0x766>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e000      	b.n	80046f6 <UART_SetConfig+0x766>
 80046f4:	2301      	movs	r3, #1
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046fc:	e1c5      	b.n	8004a8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046fe:	f107 030c 	add.w	r3, r7, #12
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff f8ac 	bl	8003860 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d044      	beq.n	800479c <UART_SetConfig+0x80c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b01      	cmp	r3, #1
 8004718:	d03e      	beq.n	8004798 <UART_SetConfig+0x808>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b02      	cmp	r3, #2
 8004720:	d038      	beq.n	8004794 <UART_SetConfig+0x804>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b03      	cmp	r3, #3
 8004728:	d032      	beq.n	8004790 <UART_SetConfig+0x800>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b04      	cmp	r3, #4
 8004730:	d02c      	beq.n	800478c <UART_SetConfig+0x7fc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b05      	cmp	r3, #5
 8004738:	d026      	beq.n	8004788 <UART_SetConfig+0x7f8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b06      	cmp	r3, #6
 8004740:	d020      	beq.n	8004784 <UART_SetConfig+0x7f4>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b07      	cmp	r3, #7
 8004748:	d01a      	beq.n	8004780 <UART_SetConfig+0x7f0>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	2b08      	cmp	r3, #8
 8004750:	d014      	beq.n	800477c <UART_SetConfig+0x7ec>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2b09      	cmp	r3, #9
 8004758:	d00e      	beq.n	8004778 <UART_SetConfig+0x7e8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	2b0a      	cmp	r3, #10
 8004760:	d008      	beq.n	8004774 <UART_SetConfig+0x7e4>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2b0b      	cmp	r3, #11
 8004768:	d102      	bne.n	8004770 <UART_SetConfig+0x7e0>
 800476a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800476e:	e016      	b.n	800479e <UART_SetConfig+0x80e>
 8004770:	2301      	movs	r3, #1
 8004772:	e014      	b.n	800479e <UART_SetConfig+0x80e>
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	e012      	b.n	800479e <UART_SetConfig+0x80e>
 8004778:	2340      	movs	r3, #64	; 0x40
 800477a:	e010      	b.n	800479e <UART_SetConfig+0x80e>
 800477c:	2320      	movs	r3, #32
 800477e:	e00e      	b.n	800479e <UART_SetConfig+0x80e>
 8004780:	2310      	movs	r3, #16
 8004782:	e00c      	b.n	800479e <UART_SetConfig+0x80e>
 8004784:	230c      	movs	r3, #12
 8004786:	e00a      	b.n	800479e <UART_SetConfig+0x80e>
 8004788:	230a      	movs	r3, #10
 800478a:	e008      	b.n	800479e <UART_SetConfig+0x80e>
 800478c:	2308      	movs	r3, #8
 800478e:	e006      	b.n	800479e <UART_SetConfig+0x80e>
 8004790:	2306      	movs	r3, #6
 8004792:	e004      	b.n	800479e <UART_SetConfig+0x80e>
 8004794:	2304      	movs	r3, #4
 8004796:	e002      	b.n	800479e <UART_SetConfig+0x80e>
 8004798:	2302      	movs	r3, #2
 800479a:	e000      	b.n	800479e <UART_SetConfig+0x80e>
 800479c:	2301      	movs	r3, #1
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047a4:	e171      	b.n	8004a8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a6:	4b7a      	ldr	r3, [pc, #488]	; (8004990 <UART_SetConfig+0xa00>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d054      	beq.n	800485c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80047b2:	4b77      	ldr	r3, [pc, #476]	; (8004990 <UART_SetConfig+0xa00>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	08db      	lsrs	r3, r3, #3
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	4a75      	ldr	r2, [pc, #468]	; (8004994 <UART_SetConfig+0xa04>)
 80047be:	40da      	lsrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d044      	beq.n	8004852 <UART_SetConfig+0x8c2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d03e      	beq.n	800484e <UART_SetConfig+0x8be>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d038      	beq.n	800484a <UART_SetConfig+0x8ba>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d032      	beq.n	8004846 <UART_SetConfig+0x8b6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d02c      	beq.n	8004842 <UART_SetConfig+0x8b2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d026      	beq.n	800483e <UART_SetConfig+0x8ae>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d020      	beq.n	800483a <UART_SetConfig+0x8aa>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	2b07      	cmp	r3, #7
 80047fe:	d01a      	beq.n	8004836 <UART_SetConfig+0x8a6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b08      	cmp	r3, #8
 8004806:	d014      	beq.n	8004832 <UART_SetConfig+0x8a2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b09      	cmp	r3, #9
 800480e:	d00e      	beq.n	800482e <UART_SetConfig+0x89e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b0a      	cmp	r3, #10
 8004816:	d008      	beq.n	800482a <UART_SetConfig+0x89a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2b0b      	cmp	r3, #11
 800481e:	d102      	bne.n	8004826 <UART_SetConfig+0x896>
 8004820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004824:	e016      	b.n	8004854 <UART_SetConfig+0x8c4>
 8004826:	2301      	movs	r3, #1
 8004828:	e014      	b.n	8004854 <UART_SetConfig+0x8c4>
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	e012      	b.n	8004854 <UART_SetConfig+0x8c4>
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	e010      	b.n	8004854 <UART_SetConfig+0x8c4>
 8004832:	2320      	movs	r3, #32
 8004834:	e00e      	b.n	8004854 <UART_SetConfig+0x8c4>
 8004836:	2310      	movs	r3, #16
 8004838:	e00c      	b.n	8004854 <UART_SetConfig+0x8c4>
 800483a:	230c      	movs	r3, #12
 800483c:	e00a      	b.n	8004854 <UART_SetConfig+0x8c4>
 800483e:	230a      	movs	r3, #10
 8004840:	e008      	b.n	8004854 <UART_SetConfig+0x8c4>
 8004842:	2308      	movs	r3, #8
 8004844:	e006      	b.n	8004854 <UART_SetConfig+0x8c4>
 8004846:	2306      	movs	r3, #6
 8004848:	e004      	b.n	8004854 <UART_SetConfig+0x8c4>
 800484a:	2304      	movs	r3, #4
 800484c:	e002      	b.n	8004854 <UART_SetConfig+0x8c4>
 800484e:	2302      	movs	r3, #2
 8004850:	e000      	b.n	8004854 <UART_SetConfig+0x8c4>
 8004852:	2301      	movs	r3, #1
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800485a:	e116      	b.n	8004a8a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	d043      	beq.n	80048ec <UART_SetConfig+0x95c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	2b01      	cmp	r3, #1
 800486a:	d03d      	beq.n	80048e8 <UART_SetConfig+0x958>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2b02      	cmp	r3, #2
 8004872:	d037      	beq.n	80048e4 <UART_SetConfig+0x954>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	2b03      	cmp	r3, #3
 800487a:	d031      	beq.n	80048e0 <UART_SetConfig+0x950>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2b04      	cmp	r3, #4
 8004882:	d02b      	beq.n	80048dc <UART_SetConfig+0x94c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	2b05      	cmp	r3, #5
 800488a:	d025      	beq.n	80048d8 <UART_SetConfig+0x948>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	2b06      	cmp	r3, #6
 8004892:	d01f      	beq.n	80048d4 <UART_SetConfig+0x944>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	2b07      	cmp	r3, #7
 800489a:	d019      	beq.n	80048d0 <UART_SetConfig+0x940>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d013      	beq.n	80048cc <UART_SetConfig+0x93c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2b09      	cmp	r3, #9
 80048aa:	d00d      	beq.n	80048c8 <UART_SetConfig+0x938>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	2b0a      	cmp	r3, #10
 80048b2:	d007      	beq.n	80048c4 <UART_SetConfig+0x934>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2b0b      	cmp	r3, #11
 80048ba:	d101      	bne.n	80048c0 <UART_SetConfig+0x930>
 80048bc:	4b36      	ldr	r3, [pc, #216]	; (8004998 <UART_SetConfig+0xa08>)
 80048be:	e016      	b.n	80048ee <UART_SetConfig+0x95e>
 80048c0:	4b34      	ldr	r3, [pc, #208]	; (8004994 <UART_SetConfig+0xa04>)
 80048c2:	e014      	b.n	80048ee <UART_SetConfig+0x95e>
 80048c4:	4b35      	ldr	r3, [pc, #212]	; (800499c <UART_SetConfig+0xa0c>)
 80048c6:	e012      	b.n	80048ee <UART_SetConfig+0x95e>
 80048c8:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <UART_SetConfig+0xa10>)
 80048ca:	e010      	b.n	80048ee <UART_SetConfig+0x95e>
 80048cc:	4b35      	ldr	r3, [pc, #212]	; (80049a4 <UART_SetConfig+0xa14>)
 80048ce:	e00e      	b.n	80048ee <UART_SetConfig+0x95e>
 80048d0:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <UART_SetConfig+0xa18>)
 80048d2:	e00c      	b.n	80048ee <UART_SetConfig+0x95e>
 80048d4:	4b35      	ldr	r3, [pc, #212]	; (80049ac <UART_SetConfig+0xa1c>)
 80048d6:	e00a      	b.n	80048ee <UART_SetConfig+0x95e>
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <UART_SetConfig+0xa20>)
 80048da:	e008      	b.n	80048ee <UART_SetConfig+0x95e>
 80048dc:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <UART_SetConfig+0xa24>)
 80048de:	e006      	b.n	80048ee <UART_SetConfig+0x95e>
 80048e0:	4b35      	ldr	r3, [pc, #212]	; (80049b8 <UART_SetConfig+0xa28>)
 80048e2:	e004      	b.n	80048ee <UART_SetConfig+0x95e>
 80048e4:	4b35      	ldr	r3, [pc, #212]	; (80049bc <UART_SetConfig+0xa2c>)
 80048e6:	e002      	b.n	80048ee <UART_SetConfig+0x95e>
 80048e8:	4b35      	ldr	r3, [pc, #212]	; (80049c0 <UART_SetConfig+0xa30>)
 80048ea:	e000      	b.n	80048ee <UART_SetConfig+0x95e>
 80048ec:	4b29      	ldr	r3, [pc, #164]	; (8004994 <UART_SetConfig+0xa04>)
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048f0:	e0cb      	b.n	8004a8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d046      	beq.n	8004988 <UART_SetConfig+0x9f8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d040      	beq.n	8004984 <UART_SetConfig+0x9f4>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b02      	cmp	r3, #2
 8004908:	d03a      	beq.n	8004980 <UART_SetConfig+0x9f0>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b03      	cmp	r3, #3
 8004910:	d034      	beq.n	800497c <UART_SetConfig+0x9ec>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b04      	cmp	r3, #4
 8004918:	d02e      	beq.n	8004978 <UART_SetConfig+0x9e8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b05      	cmp	r3, #5
 8004920:	d028      	beq.n	8004974 <UART_SetConfig+0x9e4>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2b06      	cmp	r3, #6
 8004928:	d022      	beq.n	8004970 <UART_SetConfig+0x9e0>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b07      	cmp	r3, #7
 8004930:	d01c      	beq.n	800496c <UART_SetConfig+0x9dc>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b08      	cmp	r3, #8
 8004938:	d016      	beq.n	8004968 <UART_SetConfig+0x9d8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	2b09      	cmp	r3, #9
 8004940:	d00f      	beq.n	8004962 <UART_SetConfig+0x9d2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2b0a      	cmp	r3, #10
 8004948:	d008      	beq.n	800495c <UART_SetConfig+0x9cc>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b0b      	cmp	r3, #11
 8004950:	d102      	bne.n	8004958 <UART_SetConfig+0x9c8>
 8004952:	f643 5309 	movw	r3, #15625	; 0x3d09
 8004956:	e018      	b.n	800498a <UART_SetConfig+0x9fa>
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <UART_SetConfig+0xa18>)
 800495a:	e016      	b.n	800498a <UART_SetConfig+0x9fa>
 800495c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004960:	e013      	b.n	800498a <UART_SetConfig+0x9fa>
 8004962:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004966:	e010      	b.n	800498a <UART_SetConfig+0x9fa>
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <UART_SetConfig+0xa34>)
 800496a:	e00e      	b.n	800498a <UART_SetConfig+0x9fa>
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <UART_SetConfig+0xa08>)
 800496e:	e00c      	b.n	800498a <UART_SetConfig+0x9fa>
 8004970:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <UART_SetConfig+0xa38>)
 8004972:	e00a      	b.n	800498a <UART_SetConfig+0x9fa>
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <UART_SetConfig+0xa3c>)
 8004976:	e008      	b.n	800498a <UART_SetConfig+0x9fa>
 8004978:	4b08      	ldr	r3, [pc, #32]	; (800499c <UART_SetConfig+0xa0c>)
 800497a:	e006      	b.n	800498a <UART_SetConfig+0x9fa>
 800497c:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <UART_SetConfig+0xa40>)
 800497e:	e004      	b.n	800498a <UART_SetConfig+0x9fa>
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <UART_SetConfig+0xa10>)
 8004982:	e002      	b.n	800498a <UART_SetConfig+0x9fa>
 8004984:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <UART_SetConfig+0xa14>)
 8004986:	e000      	b.n	800498a <UART_SetConfig+0x9fa>
 8004988:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <UART_SetConfig+0xa18>)
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800498c:	e07d      	b.n	8004a8a <UART_SetConfig+0xafa>
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400
 8004994:	03d09000 	.word	0x03d09000
 8004998:	0003d090 	.word	0x0003d090
 800499c:	0007a120 	.word	0x0007a120
 80049a0:	000f4240 	.word	0x000f4240
 80049a4:	001e8480 	.word	0x001e8480
 80049a8:	003d0900 	.word	0x003d0900
 80049ac:	00516155 	.word	0x00516155
 80049b0:	0061a800 	.word	0x0061a800
 80049b4:	007a1200 	.word	0x007a1200
 80049b8:	00a2c2aa 	.word	0x00a2c2aa
 80049bc:	00f42400 	.word	0x00f42400
 80049c0:	01e84800 	.word	0x01e84800
 80049c4:	0001e848 	.word	0x0001e848
 80049c8:	00051615 	.word	0x00051615
 80049cc:	00061a80 	.word	0x00061a80
 80049d0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d04e      	beq.n	8004a7a <UART_SetConfig+0xaea>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d047      	beq.n	8004a74 <UART_SetConfig+0xae4>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d040      	beq.n	8004a6e <UART_SetConfig+0xade>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d039      	beq.n	8004a68 <UART_SetConfig+0xad8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d032      	beq.n	8004a62 <UART_SetConfig+0xad2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	2b05      	cmp	r3, #5
 8004a02:	d02b      	beq.n	8004a5c <UART_SetConfig+0xacc>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d024      	beq.n	8004a56 <UART_SetConfig+0xac6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b07      	cmp	r3, #7
 8004a12:	d01d      	beq.n	8004a50 <UART_SetConfig+0xac0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d016      	beq.n	8004a4a <UART_SetConfig+0xaba>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2b09      	cmp	r3, #9
 8004a22:	d00f      	beq.n	8004a44 <UART_SetConfig+0xab4>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b0a      	cmp	r3, #10
 8004a2a:	d008      	beq.n	8004a3e <UART_SetConfig+0xaae>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b0b      	cmp	r3, #11
 8004a32:	d101      	bne.n	8004a38 <UART_SetConfig+0xaa8>
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	e022      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3c:	e01f      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a42:	e01c      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a48:	e019      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a4e:	e016      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a54:	e013      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a56:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004a5a:	e010      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a5c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004a60:	e00d      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a66:	e00a      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a68:	f241 5355 	movw	r3, #5461	; 0x1555
 8004a6c:	e007      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a72:	e004      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a78:	e001      	b.n	8004a7e <UART_SetConfig+0xaee>
 8004a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a80:	e003      	b.n	8004a8a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8004a88:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f001 83e8 	beq.w	8006262 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d305      	bcc.n	8004aae <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d904      	bls.n	8004ab8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ab4:	f001 bbd5 	b.w	8006262 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004ab8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	f000 8154 	beq.w	8004d6a <UART_SetConfig+0xdda>
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	dc06      	bgt.n	8004ad4 <UART_SetConfig+0xb44>
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d00f      	beq.n	8004aea <UART_SetConfig+0xb5a>
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	f000 80ac 	beq.w	8004c28 <UART_SetConfig+0xc98>
 8004ad0:	f000 bc30 	b.w	8005334 <UART_SetConfig+0x13a4>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	f000 832d 	beq.w	8005134 <UART_SetConfig+0x11a4>
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	f000 83a5 	beq.w	800522a <UART_SetConfig+0x129a>
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	f000 81e3 	beq.w	8004eac <UART_SetConfig+0xf1c>
 8004ae6:	f000 bc25 	b.w	8005334 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004aea:	f7fe fd57 	bl	800359c <HAL_RCCEx_GetD3PCLK1Freq>
 8004aee:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	4618      	mov	r0, r3
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d067      	beq.n	8004bd0 <UART_SetConfig+0xc40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d05e      	beq.n	8004bc6 <UART_SetConfig+0xc36>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d055      	beq.n	8004bbc <UART_SetConfig+0xc2c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d04c      	beq.n	8004bb2 <UART_SetConfig+0xc22>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d043      	beq.n	8004ba8 <UART_SetConfig+0xc18>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d03a      	beq.n	8004b9e <UART_SetConfig+0xc0e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d031      	beq.n	8004b94 <UART_SetConfig+0xc04>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	d028      	beq.n	8004b8a <UART_SetConfig+0xbfa>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d01f      	beq.n	8004b80 <UART_SetConfig+0xbf0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b09      	cmp	r3, #9
 8004b46:	d016      	beq.n	8004b76 <UART_SetConfig+0xbe6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b0a      	cmp	r3, #10
 8004b4e:	d00d      	beq.n	8004b6c <UART_SetConfig+0xbdc>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b0b      	cmp	r3, #11
 8004b56:	d104      	bne.n	8004b62 <UART_SetConfig+0xbd2>
 8004b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b5c:	f04f 0400 	mov.w	r4, #0
 8004b60:	e03a      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004b62:	f04f 0301 	mov.w	r3, #1
 8004b66:	f04f 0400 	mov.w	r4, #0
 8004b6a:	e035      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004b6c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004b70:	f04f 0400 	mov.w	r4, #0
 8004b74:	e030      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004b76:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004b7a:	f04f 0400 	mov.w	r4, #0
 8004b7e:	e02b      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004b80:	f04f 0320 	mov.w	r3, #32
 8004b84:	f04f 0400 	mov.w	r4, #0
 8004b88:	e026      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004b8a:	f04f 0310 	mov.w	r3, #16
 8004b8e:	f04f 0400 	mov.w	r4, #0
 8004b92:	e021      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004b94:	f04f 030c 	mov.w	r3, #12
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	e01c      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004b9e:	f04f 030a 	mov.w	r3, #10
 8004ba2:	f04f 0400 	mov.w	r4, #0
 8004ba6:	e017      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004ba8:	f04f 0308 	mov.w	r3, #8
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	e012      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004bb2:	f04f 0306 	mov.w	r3, #6
 8004bb6:	f04f 0400 	mov.w	r4, #0
 8004bba:	e00d      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004bbc:	f04f 0304 	mov.w	r3, #4
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	e008      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004bc6:	f04f 0302 	mov.w	r3, #2
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	e003      	b.n	8004bd8 <UART_SetConfig+0xc48>
 8004bd0:	f04f 0301 	mov.w	r3, #1
 8004bd4:	f04f 0400 	mov.w	r4, #0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4623      	mov	r3, r4
 8004bdc:	f7fb fb84 	bl	80002e8 <__aeabi_uldivmod>
 8004be0:	4603      	mov	r3, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	4619      	mov	r1, r3
 8004be6:	4622      	mov	r2, r4
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	f04f 0400 	mov.w	r4, #0
 8004bf0:	0214      	lsls	r4, r2, #8
 8004bf2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004bf6:	020b      	lsls	r3, r1, #8
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6852      	ldr	r2, [r2, #4]
 8004bfc:	0852      	lsrs	r2, r2, #1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	eb13 0b01 	adds.w	fp, r3, r1
 8004c08:	eb44 0c02 	adc.w	ip, r4, r2
 8004c0c:	4658      	mov	r0, fp
 8004c0e:	4661      	mov	r1, ip
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f04f 0400 	mov.w	r4, #0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4623      	mov	r3, r4
 8004c1c:	f7fb fb64 	bl	80002e8 <__aeabi_uldivmod>
 8004c20:	4603      	mov	r3, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c26:	e389      	b.n	800533c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c28:	f107 0318 	add.w	r3, r7, #24
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe fccb 	bl	80035c8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d067      	beq.n	8004d12 <UART_SetConfig+0xd82>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d05e      	beq.n	8004d08 <UART_SetConfig+0xd78>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d055      	beq.n	8004cfe <UART_SetConfig+0xd6e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d04c      	beq.n	8004cf4 <UART_SetConfig+0xd64>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d043      	beq.n	8004cea <UART_SetConfig+0xd5a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d03a      	beq.n	8004ce0 <UART_SetConfig+0xd50>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d031      	beq.n	8004cd6 <UART_SetConfig+0xd46>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b07      	cmp	r3, #7
 8004c78:	d028      	beq.n	8004ccc <UART_SetConfig+0xd3c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d01f      	beq.n	8004cc2 <UART_SetConfig+0xd32>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b09      	cmp	r3, #9
 8004c88:	d016      	beq.n	8004cb8 <UART_SetConfig+0xd28>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b0a      	cmp	r3, #10
 8004c90:	d00d      	beq.n	8004cae <UART_SetConfig+0xd1e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b0b      	cmp	r3, #11
 8004c98:	d104      	bne.n	8004ca4 <UART_SetConfig+0xd14>
 8004c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c9e:	f04f 0400 	mov.w	r4, #0
 8004ca2:	e03a      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004ca4:	f04f 0301 	mov.w	r3, #1
 8004ca8:	f04f 0400 	mov.w	r4, #0
 8004cac:	e035      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004cae:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004cb2:	f04f 0400 	mov.w	r4, #0
 8004cb6:	e030      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004cb8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004cbc:	f04f 0400 	mov.w	r4, #0
 8004cc0:	e02b      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004cc2:	f04f 0320 	mov.w	r3, #32
 8004cc6:	f04f 0400 	mov.w	r4, #0
 8004cca:	e026      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004ccc:	f04f 0310 	mov.w	r3, #16
 8004cd0:	f04f 0400 	mov.w	r4, #0
 8004cd4:	e021      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004cd6:	f04f 030c 	mov.w	r3, #12
 8004cda:	f04f 0400 	mov.w	r4, #0
 8004cde:	e01c      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004ce0:	f04f 030a 	mov.w	r3, #10
 8004ce4:	f04f 0400 	mov.w	r4, #0
 8004ce8:	e017      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004cea:	f04f 0308 	mov.w	r3, #8
 8004cee:	f04f 0400 	mov.w	r4, #0
 8004cf2:	e012      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004cf4:	f04f 0306 	mov.w	r3, #6
 8004cf8:	f04f 0400 	mov.w	r4, #0
 8004cfc:	e00d      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004cfe:	f04f 0304 	mov.w	r3, #4
 8004d02:	f04f 0400 	mov.w	r4, #0
 8004d06:	e008      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004d08:	f04f 0302 	mov.w	r3, #2
 8004d0c:	f04f 0400 	mov.w	r4, #0
 8004d10:	e003      	b.n	8004d1a <UART_SetConfig+0xd8a>
 8004d12:	f04f 0301 	mov.w	r3, #1
 8004d16:	f04f 0400 	mov.w	r4, #0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	f7fb fae3 	bl	80002e8 <__aeabi_uldivmod>
 8004d22:	4603      	mov	r3, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	4619      	mov	r1, r3
 8004d28:	4622      	mov	r2, r4
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	f04f 0400 	mov.w	r4, #0
 8004d32:	0214      	lsls	r4, r2, #8
 8004d34:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d38:	020b      	lsls	r3, r1, #8
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6852      	ldr	r2, [r2, #4]
 8004d3e:	0852      	lsrs	r2, r2, #1
 8004d40:	4611      	mov	r1, r2
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	eb13 0b01 	adds.w	fp, r3, r1
 8004d4a:	eb44 0c02 	adc.w	ip, r4, r2
 8004d4e:	4658      	mov	r0, fp
 8004d50:	4661      	mov	r1, ip
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f04f 0400 	mov.w	r4, #0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	f7fb fac3 	bl	80002e8 <__aeabi_uldivmod>
 8004d62:	4603      	mov	r3, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d68:	e2e8      	b.n	800533c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d6a:	f107 030c 	add.w	r3, r7, #12
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe fd76 	bl	8003860 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f04f 0100 	mov.w	r1, #0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d067      	beq.n	8004e54 <UART_SetConfig+0xec4>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d05e      	beq.n	8004e4a <UART_SetConfig+0xeba>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d055      	beq.n	8004e40 <UART_SetConfig+0xeb0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d04c      	beq.n	8004e36 <UART_SetConfig+0xea6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d043      	beq.n	8004e2c <UART_SetConfig+0xe9c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d03a      	beq.n	8004e22 <UART_SetConfig+0xe92>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b06      	cmp	r3, #6
 8004db2:	d031      	beq.n	8004e18 <UART_SetConfig+0xe88>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d028      	beq.n	8004e0e <UART_SetConfig+0xe7e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d01f      	beq.n	8004e04 <UART_SetConfig+0xe74>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	d016      	beq.n	8004dfa <UART_SetConfig+0xe6a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2b0a      	cmp	r3, #10
 8004dd2:	d00d      	beq.n	8004df0 <UART_SetConfig+0xe60>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2b0b      	cmp	r3, #11
 8004dda:	d104      	bne.n	8004de6 <UART_SetConfig+0xe56>
 8004ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004de0:	f04f 0400 	mov.w	r4, #0
 8004de4:	e03a      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004de6:	f04f 0301 	mov.w	r3, #1
 8004dea:	f04f 0400 	mov.w	r4, #0
 8004dee:	e035      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004df0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004df4:	f04f 0400 	mov.w	r4, #0
 8004df8:	e030      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004dfa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004dfe:	f04f 0400 	mov.w	r4, #0
 8004e02:	e02b      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e04:	f04f 0320 	mov.w	r3, #32
 8004e08:	f04f 0400 	mov.w	r4, #0
 8004e0c:	e026      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e0e:	f04f 0310 	mov.w	r3, #16
 8004e12:	f04f 0400 	mov.w	r4, #0
 8004e16:	e021      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e18:	f04f 030c 	mov.w	r3, #12
 8004e1c:	f04f 0400 	mov.w	r4, #0
 8004e20:	e01c      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e22:	f04f 030a 	mov.w	r3, #10
 8004e26:	f04f 0400 	mov.w	r4, #0
 8004e2a:	e017      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e2c:	f04f 0308 	mov.w	r3, #8
 8004e30:	f04f 0400 	mov.w	r4, #0
 8004e34:	e012      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e36:	f04f 0306 	mov.w	r3, #6
 8004e3a:	f04f 0400 	mov.w	r4, #0
 8004e3e:	e00d      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e40:	f04f 0304 	mov.w	r3, #4
 8004e44:	f04f 0400 	mov.w	r4, #0
 8004e48:	e008      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e4a:	f04f 0302 	mov.w	r3, #2
 8004e4e:	f04f 0400 	mov.w	r4, #0
 8004e52:	e003      	b.n	8004e5c <UART_SetConfig+0xecc>
 8004e54:	f04f 0301 	mov.w	r3, #1
 8004e58:	f04f 0400 	mov.w	r4, #0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	f7fb fa42 	bl	80002e8 <__aeabi_uldivmod>
 8004e64:	4603      	mov	r3, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	f04f 0400 	mov.w	r4, #0
 8004e74:	0214      	lsls	r4, r2, #8
 8004e76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e7a:	020b      	lsls	r3, r1, #8
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6852      	ldr	r2, [r2, #4]
 8004e80:	0852      	lsrs	r2, r2, #1
 8004e82:	4611      	mov	r1, r2
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	eb13 0b01 	adds.w	fp, r3, r1
 8004e8c:	eb44 0c02 	adc.w	ip, r4, r2
 8004e90:	4658      	mov	r0, fp
 8004e92:	4661      	mov	r1, ip
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f04f 0400 	mov.w	r4, #0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	f7fb fa22 	bl	80002e8 <__aeabi_uldivmod>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004eaa:	e247      	b.n	800533c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eac:	4b96      	ldr	r3, [pc, #600]	; (8005108 <UART_SetConfig+0x1178>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a3 	beq.w	8005000 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eba:	4b93      	ldr	r3, [pc, #588]	; (8005108 <UART_SetConfig+0x1178>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	4a91      	ldr	r2, [pc, #580]	; (800510c <UART_SetConfig+0x117c>)
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f04f 0100 	mov.w	r1, #0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d067      	beq.n	8004fa8 <UART_SetConfig+0x1018>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d05e      	beq.n	8004f9e <UART_SetConfig+0x100e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d055      	beq.n	8004f94 <UART_SetConfig+0x1004>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d04c      	beq.n	8004f8a <UART_SetConfig+0xffa>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d043      	beq.n	8004f80 <UART_SetConfig+0xff0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2b05      	cmp	r3, #5
 8004efe:	d03a      	beq.n	8004f76 <UART_SetConfig+0xfe6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d031      	beq.n	8004f6c <UART_SetConfig+0xfdc>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b07      	cmp	r3, #7
 8004f0e:	d028      	beq.n	8004f62 <UART_SetConfig+0xfd2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d01f      	beq.n	8004f58 <UART_SetConfig+0xfc8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	d016      	beq.n	8004f4e <UART_SetConfig+0xfbe>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b0a      	cmp	r3, #10
 8004f26:	d00d      	beq.n	8004f44 <UART_SetConfig+0xfb4>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2b0b      	cmp	r3, #11
 8004f2e:	d104      	bne.n	8004f3a <UART_SetConfig+0xfaa>
 8004f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f34:	f04f 0400 	mov.w	r4, #0
 8004f38:	e03a      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f3a:	f04f 0301 	mov.w	r3, #1
 8004f3e:	f04f 0400 	mov.w	r4, #0
 8004f42:	e035      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f44:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004f48:	f04f 0400 	mov.w	r4, #0
 8004f4c:	e030      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f4e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004f52:	f04f 0400 	mov.w	r4, #0
 8004f56:	e02b      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f58:	f04f 0320 	mov.w	r3, #32
 8004f5c:	f04f 0400 	mov.w	r4, #0
 8004f60:	e026      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f62:	f04f 0310 	mov.w	r3, #16
 8004f66:	f04f 0400 	mov.w	r4, #0
 8004f6a:	e021      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f6c:	f04f 030c 	mov.w	r3, #12
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	e01c      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f76:	f04f 030a 	mov.w	r3, #10
 8004f7a:	f04f 0400 	mov.w	r4, #0
 8004f7e:	e017      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f80:	f04f 0308 	mov.w	r3, #8
 8004f84:	f04f 0400 	mov.w	r4, #0
 8004f88:	e012      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f8a:	f04f 0306 	mov.w	r3, #6
 8004f8e:	f04f 0400 	mov.w	r4, #0
 8004f92:	e00d      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f94:	f04f 0304 	mov.w	r3, #4
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	e008      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004f9e:	f04f 0302 	mov.w	r3, #2
 8004fa2:	f04f 0400 	mov.w	r4, #0
 8004fa6:	e003      	b.n	8004fb0 <UART_SetConfig+0x1020>
 8004fa8:	f04f 0301 	mov.w	r3, #1
 8004fac:	f04f 0400 	mov.w	r4, #0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	f7fb f998 	bl	80002e8 <__aeabi_uldivmod>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	0214      	lsls	r4, r2, #8
 8004fca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004fce:	020b      	lsls	r3, r1, #8
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6852      	ldr	r2, [r2, #4]
 8004fd4:	0852      	lsrs	r2, r2, #1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	eb13 0b01 	adds.w	fp, r3, r1
 8004fe0:	eb44 0c02 	adc.w	ip, r4, r2
 8004fe4:	4658      	mov	r0, fp
 8004fe6:	4661      	mov	r1, ip
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f04f 0400 	mov.w	r4, #0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	f7fb f978 	bl	80002e8 <__aeabi_uldivmod>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8004ffe:	e19d      	b.n	800533c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d05b      	beq.n	80050c0 <UART_SetConfig+0x1130>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2b01      	cmp	r3, #1
 800500e:	d053      	beq.n	80050b8 <UART_SetConfig+0x1128>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	2b02      	cmp	r3, #2
 8005016:	d04b      	beq.n	80050b0 <UART_SetConfig+0x1120>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b03      	cmp	r3, #3
 800501e:	d043      	beq.n	80050a8 <UART_SetConfig+0x1118>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	2b04      	cmp	r3, #4
 8005026:	d03b      	beq.n	80050a0 <UART_SetConfig+0x1110>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	2b05      	cmp	r3, #5
 800502e:	d033      	beq.n	8005098 <UART_SetConfig+0x1108>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	2b06      	cmp	r3, #6
 8005036:	d02b      	beq.n	8005090 <UART_SetConfig+0x1100>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2b07      	cmp	r3, #7
 800503e:	d023      	beq.n	8005088 <UART_SetConfig+0x10f8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	2b08      	cmp	r3, #8
 8005046:	d01b      	beq.n	8005080 <UART_SetConfig+0x10f0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2b09      	cmp	r3, #9
 800504e:	d013      	beq.n	8005078 <UART_SetConfig+0x10e8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b0a      	cmp	r3, #10
 8005056:	d00b      	beq.n	8005070 <UART_SetConfig+0x10e0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	2b0b      	cmp	r3, #11
 800505e:	d103      	bne.n	8005068 <UART_SetConfig+0x10d8>
 8005060:	4b2a      	ldr	r3, [pc, #168]	; (800510c <UART_SetConfig+0x117c>)
 8005062:	f04f 0400 	mov.w	r4, #0
 8005066:	e02e      	b.n	80050c6 <UART_SetConfig+0x1136>
 8005068:	4b29      	ldr	r3, [pc, #164]	; (8005110 <UART_SetConfig+0x1180>)
 800506a:	f04f 0403 	mov.w	r4, #3
 800506e:	e02a      	b.n	80050c6 <UART_SetConfig+0x1136>
 8005070:	4b28      	ldr	r3, [pc, #160]	; (8005114 <UART_SetConfig+0x1184>)
 8005072:	f04f 0400 	mov.w	r4, #0
 8005076:	e026      	b.n	80050c6 <UART_SetConfig+0x1136>
 8005078:	4b27      	ldr	r3, [pc, #156]	; (8005118 <UART_SetConfig+0x1188>)
 800507a:	f04f 0400 	mov.w	r4, #0
 800507e:	e022      	b.n	80050c6 <UART_SetConfig+0x1136>
 8005080:	4b26      	ldr	r3, [pc, #152]	; (800511c <UART_SetConfig+0x118c>)
 8005082:	f04f 0400 	mov.w	r4, #0
 8005086:	e01e      	b.n	80050c6 <UART_SetConfig+0x1136>
 8005088:	4b25      	ldr	r3, [pc, #148]	; (8005120 <UART_SetConfig+0x1190>)
 800508a:	f04f 0400 	mov.w	r4, #0
 800508e:	e01a      	b.n	80050c6 <UART_SetConfig+0x1136>
 8005090:	a419      	add	r4, pc, #100	; (adr r4, 80050f8 <UART_SetConfig+0x1168>)
 8005092:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005096:	e016      	b.n	80050c6 <UART_SetConfig+0x1136>
 8005098:	4b22      	ldr	r3, [pc, #136]	; (8005124 <UART_SetConfig+0x1194>)
 800509a:	f04f 0400 	mov.w	r4, #0
 800509e:	e012      	b.n	80050c6 <UART_SetConfig+0x1136>
 80050a0:	4b21      	ldr	r3, [pc, #132]	; (8005128 <UART_SetConfig+0x1198>)
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	e00e      	b.n	80050c6 <UART_SetConfig+0x1136>
 80050a8:	a415      	add	r4, pc, #84	; (adr r4, 8005100 <UART_SetConfig+0x1170>)
 80050aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80050ae:	e00a      	b.n	80050c6 <UART_SetConfig+0x1136>
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <UART_SetConfig+0x119c>)
 80050b2:	f04f 0400 	mov.w	r4, #0
 80050b6:	e006      	b.n	80050c6 <UART_SetConfig+0x1136>
 80050b8:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <UART_SetConfig+0x11a0>)
 80050ba:	f04f 0401 	mov.w	r4, #1
 80050be:	e002      	b.n	80050c6 <UART_SetConfig+0x1136>
 80050c0:	4b13      	ldr	r3, [pc, #76]	; (8005110 <UART_SetConfig+0x1180>)
 80050c2:	f04f 0403 	mov.w	r4, #3
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6852      	ldr	r2, [r2, #4]
 80050ca:	0852      	lsrs	r2, r2, #1
 80050cc:	4611      	mov	r1, r2
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	eb13 0b01 	adds.w	fp, r3, r1
 80050d6:	eb44 0c02 	adc.w	ip, r4, r2
 80050da:	4658      	mov	r0, fp
 80050dc:	4661      	mov	r1, ip
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	461a      	mov	r2, r3
 80050e8:	4623      	mov	r3, r4
 80050ea:	f7fb f8fd 	bl	80002e8 <__aeabi_uldivmod>
 80050ee:	4603      	mov	r3, r0
 80050f0:	460c      	mov	r4, r1
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80050f4:	e122      	b.n	800533c <UART_SetConfig+0x13ac>
 80050f6:	bf00      	nop
 80050f8:	51615500 	.word	0x51615500
 80050fc:	00000000 	.word	0x00000000
 8005100:	a2c2aa00 	.word	0xa2c2aa00
 8005104:	00000000 	.word	0x00000000
 8005108:	58024400 	.word	0x58024400
 800510c:	03d09000 	.word	0x03d09000
 8005110:	d0900000 	.word	0xd0900000
 8005114:	07a12000 	.word	0x07a12000
 8005118:	0f424000 	.word	0x0f424000
 800511c:	1e848000 	.word	0x1e848000
 8005120:	3d090000 	.word	0x3d090000
 8005124:	61a80000 	.word	0x61a80000
 8005128:	7a120000 	.word	0x7a120000
 800512c:	f4240000 	.word	0xf4240000
 8005130:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	d05b      	beq.n	80051f4 <UART_SetConfig+0x1264>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b01      	cmp	r3, #1
 8005142:	d053      	beq.n	80051ec <UART_SetConfig+0x125c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b02      	cmp	r3, #2
 800514a:	d04b      	beq.n	80051e4 <UART_SetConfig+0x1254>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	2b03      	cmp	r3, #3
 8005152:	d043      	beq.n	80051dc <UART_SetConfig+0x124c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	2b04      	cmp	r3, #4
 800515a:	d03b      	beq.n	80051d4 <UART_SetConfig+0x1244>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b05      	cmp	r3, #5
 8005162:	d033      	beq.n	80051cc <UART_SetConfig+0x123c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b06      	cmp	r3, #6
 800516a:	d02b      	beq.n	80051c4 <UART_SetConfig+0x1234>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2b07      	cmp	r3, #7
 8005172:	d023      	beq.n	80051bc <UART_SetConfig+0x122c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2b08      	cmp	r3, #8
 800517a:	d01b      	beq.n	80051b4 <UART_SetConfig+0x1224>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b09      	cmp	r3, #9
 8005182:	d013      	beq.n	80051ac <UART_SetConfig+0x121c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b0a      	cmp	r3, #10
 800518a:	d00b      	beq.n	80051a4 <UART_SetConfig+0x1214>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b0b      	cmp	r3, #11
 8005192:	d103      	bne.n	800519c <UART_SetConfig+0x120c>
 8005194:	4bc0      	ldr	r3, [pc, #768]	; (8005498 <UART_SetConfig+0x1508>)
 8005196:	f04f 0400 	mov.w	r4, #0
 800519a:	e02e      	b.n	80051fa <UART_SetConfig+0x126a>
 800519c:	4bbf      	ldr	r3, [pc, #764]	; (800549c <UART_SetConfig+0x150c>)
 800519e:	f04f 0400 	mov.w	r4, #0
 80051a2:	e02a      	b.n	80051fa <UART_SetConfig+0x126a>
 80051a4:	4bbe      	ldr	r3, [pc, #760]	; (80054a0 <UART_SetConfig+0x1510>)
 80051a6:	f04f 0400 	mov.w	r4, #0
 80051aa:	e026      	b.n	80051fa <UART_SetConfig+0x126a>
 80051ac:	4bbd      	ldr	r3, [pc, #756]	; (80054a4 <UART_SetConfig+0x1514>)
 80051ae:	f04f 0400 	mov.w	r4, #0
 80051b2:	e022      	b.n	80051fa <UART_SetConfig+0x126a>
 80051b4:	4bbc      	ldr	r3, [pc, #752]	; (80054a8 <UART_SetConfig+0x1518>)
 80051b6:	f04f 0400 	mov.w	r4, #0
 80051ba:	e01e      	b.n	80051fa <UART_SetConfig+0x126a>
 80051bc:	4bbb      	ldr	r3, [pc, #748]	; (80054ac <UART_SetConfig+0x151c>)
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	e01a      	b.n	80051fa <UART_SetConfig+0x126a>
 80051c4:	a4b0      	add	r4, pc, #704	; (adr r4, 8005488 <UART_SetConfig+0x14f8>)
 80051c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80051ca:	e016      	b.n	80051fa <UART_SetConfig+0x126a>
 80051cc:	4bb8      	ldr	r3, [pc, #736]	; (80054b0 <UART_SetConfig+0x1520>)
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	e012      	b.n	80051fa <UART_SetConfig+0x126a>
 80051d4:	4bb7      	ldr	r3, [pc, #732]	; (80054b4 <UART_SetConfig+0x1524>)
 80051d6:	f04f 0400 	mov.w	r4, #0
 80051da:	e00e      	b.n	80051fa <UART_SetConfig+0x126a>
 80051dc:	a4ac      	add	r4, pc, #688	; (adr r4, 8005490 <UART_SetConfig+0x1500>)
 80051de:	e9d4 3400 	ldrd	r3, r4, [r4]
 80051e2:	e00a      	b.n	80051fa <UART_SetConfig+0x126a>
 80051e4:	4bb4      	ldr	r3, [pc, #720]	; (80054b8 <UART_SetConfig+0x1528>)
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	e006      	b.n	80051fa <UART_SetConfig+0x126a>
 80051ec:	4bb3      	ldr	r3, [pc, #716]	; (80054bc <UART_SetConfig+0x152c>)
 80051ee:	f04f 0400 	mov.w	r4, #0
 80051f2:	e002      	b.n	80051fa <UART_SetConfig+0x126a>
 80051f4:	4ba9      	ldr	r3, [pc, #676]	; (800549c <UART_SetConfig+0x150c>)
 80051f6:	f04f 0400 	mov.w	r4, #0
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6852      	ldr	r2, [r2, #4]
 80051fe:	0852      	lsrs	r2, r2, #1
 8005200:	4611      	mov	r1, r2
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	eb13 0b01 	adds.w	fp, r3, r1
 800520a:	eb44 0c02 	adc.w	ip, r4, r2
 800520e:	4658      	mov	r0, fp
 8005210:	4661      	mov	r1, ip
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f04f 0400 	mov.w	r4, #0
 800521a:	461a      	mov	r2, r3
 800521c:	4623      	mov	r3, r4
 800521e:	f7fb f863 	bl	80002e8 <__aeabi_uldivmod>
 8005222:	4603      	mov	r3, r0
 8005224:	460c      	mov	r4, r1
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005228:	e088      	b.n	800533c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d064      	beq.n	80052fc <UART_SetConfig+0x136c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	2b01      	cmp	r3, #1
 8005238:	d05b      	beq.n	80052f2 <UART_SetConfig+0x1362>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b02      	cmp	r3, #2
 8005240:	d052      	beq.n	80052e8 <UART_SetConfig+0x1358>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b03      	cmp	r3, #3
 8005248:	d04a      	beq.n	80052e0 <UART_SetConfig+0x1350>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b04      	cmp	r3, #4
 8005250:	d041      	beq.n	80052d6 <UART_SetConfig+0x1346>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b05      	cmp	r3, #5
 8005258:	d039      	beq.n	80052ce <UART_SetConfig+0x133e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2b06      	cmp	r3, #6
 8005260:	d031      	beq.n	80052c6 <UART_SetConfig+0x1336>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b07      	cmp	r3, #7
 8005268:	d028      	beq.n	80052bc <UART_SetConfig+0x132c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b08      	cmp	r3, #8
 8005270:	d01f      	beq.n	80052b2 <UART_SetConfig+0x1322>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b09      	cmp	r3, #9
 8005278:	d016      	beq.n	80052a8 <UART_SetConfig+0x1318>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b0a      	cmp	r3, #10
 8005280:	d00d      	beq.n	800529e <UART_SetConfig+0x130e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b0b      	cmp	r3, #11
 8005288:	d104      	bne.n	8005294 <UART_SetConfig+0x1304>
 800528a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	e037      	b.n	8005304 <UART_SetConfig+0x1374>
 8005294:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005298:	f04f 0400 	mov.w	r4, #0
 800529c:	e032      	b.n	8005304 <UART_SetConfig+0x1374>
 800529e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052a2:	f04f 0400 	mov.w	r4, #0
 80052a6:	e02d      	b.n	8005304 <UART_SetConfig+0x1374>
 80052a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ac:	f04f 0400 	mov.w	r4, #0
 80052b0:	e028      	b.n	8005304 <UART_SetConfig+0x1374>
 80052b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	e023      	b.n	8005304 <UART_SetConfig+0x1374>
 80052bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	e01e      	b.n	8005304 <UART_SetConfig+0x1374>
 80052c6:	4b7e      	ldr	r3, [pc, #504]	; (80054c0 <UART_SetConfig+0x1530>)
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	e01a      	b.n	8005304 <UART_SetConfig+0x1374>
 80052ce:	4b7d      	ldr	r3, [pc, #500]	; (80054c4 <UART_SetConfig+0x1534>)
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e016      	b.n	8005304 <UART_SetConfig+0x1374>
 80052d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80052da:	f04f 0400 	mov.w	r4, #0
 80052de:	e011      	b.n	8005304 <UART_SetConfig+0x1374>
 80052e0:	4b79      	ldr	r3, [pc, #484]	; (80054c8 <UART_SetConfig+0x1538>)
 80052e2:	f04f 0400 	mov.w	r4, #0
 80052e6:	e00d      	b.n	8005304 <UART_SetConfig+0x1374>
 80052e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052ec:	f04f 0400 	mov.w	r4, #0
 80052f0:	e008      	b.n	8005304 <UART_SetConfig+0x1374>
 80052f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80052f6:	f04f 0400 	mov.w	r4, #0
 80052fa:	e003      	b.n	8005304 <UART_SetConfig+0x1374>
 80052fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6852      	ldr	r2, [r2, #4]
 8005308:	0852      	lsrs	r2, r2, #1
 800530a:	4611      	mov	r1, r2
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	eb13 0b01 	adds.w	fp, r3, r1
 8005314:	eb44 0c02 	adc.w	ip, r4, r2
 8005318:	4658      	mov	r0, fp
 800531a:	4661      	mov	r1, ip
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f04f 0400 	mov.w	r4, #0
 8005324:	461a      	mov	r2, r3
 8005326:	4623      	mov	r3, r4
 8005328:	f7fa ffde 	bl	80002e8 <__aeabi_uldivmod>
 800532c:	4603      	mov	r3, r0
 800532e:	460c      	mov	r4, r1
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005332:	e003      	b.n	800533c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800533a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005342:	d309      	bcc.n	8005358 <UART_SetConfig+0x13c8>
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534a:	d205      	bcs.n	8005358 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	f000 bf85 	b.w	8006262 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535e:	f000 bf80 	b.w	8006262 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536a:	f040 83da 	bne.w	8005b22 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800536e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	f200 83b3 	bhi.w	8005ade <UART_SetConfig+0x1b4e>
 8005378:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <UART_SetConfig+0x13f0>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	080054cd 	.word	0x080054cd
 8005384:	08005585 	.word	0x08005585
 8005388:	08005adf 	.word	0x08005adf
 800538c:	08005adf 	.word	0x08005adf
 8005390:	0800563d 	.word	0x0800563d
 8005394:	08005adf 	.word	0x08005adf
 8005398:	08005adf 	.word	0x08005adf
 800539c:	08005adf 	.word	0x08005adf
 80053a0:	080056f9 	.word	0x080056f9
 80053a4:	08005adf 	.word	0x08005adf
 80053a8:	08005adf 	.word	0x08005adf
 80053ac:	08005adf 	.word	0x08005adf
 80053b0:	08005adf 	.word	0x08005adf
 80053b4:	08005adf 	.word	0x08005adf
 80053b8:	08005adf 	.word	0x08005adf
 80053bc:	08005adf 	.word	0x08005adf
 80053c0:	080057b5 	.word	0x080057b5
 80053c4:	08005adf 	.word	0x08005adf
 80053c8:	08005adf 	.word	0x08005adf
 80053cc:	08005adf 	.word	0x08005adf
 80053d0:	08005adf 	.word	0x08005adf
 80053d4:	08005adf 	.word	0x08005adf
 80053d8:	08005adf 	.word	0x08005adf
 80053dc:	08005adf 	.word	0x08005adf
 80053e0:	08005adf 	.word	0x08005adf
 80053e4:	08005adf 	.word	0x08005adf
 80053e8:	08005adf 	.word	0x08005adf
 80053ec:	08005adf 	.word	0x08005adf
 80053f0:	08005adf 	.word	0x08005adf
 80053f4:	08005adf 	.word	0x08005adf
 80053f8:	08005adf 	.word	0x08005adf
 80053fc:	08005adf 	.word	0x08005adf
 8005400:	08005927 	.word	0x08005927
 8005404:	08005adf 	.word	0x08005adf
 8005408:	08005adf 	.word	0x08005adf
 800540c:	08005adf 	.word	0x08005adf
 8005410:	08005adf 	.word	0x08005adf
 8005414:	08005adf 	.word	0x08005adf
 8005418:	08005adf 	.word	0x08005adf
 800541c:	08005adf 	.word	0x08005adf
 8005420:	08005adf 	.word	0x08005adf
 8005424:	08005adf 	.word	0x08005adf
 8005428:	08005adf 	.word	0x08005adf
 800542c:	08005adf 	.word	0x08005adf
 8005430:	08005adf 	.word	0x08005adf
 8005434:	08005adf 	.word	0x08005adf
 8005438:	08005adf 	.word	0x08005adf
 800543c:	08005adf 	.word	0x08005adf
 8005440:	08005adf 	.word	0x08005adf
 8005444:	08005adf 	.word	0x08005adf
 8005448:	08005adf 	.word	0x08005adf
 800544c:	08005adf 	.word	0x08005adf
 8005450:	08005adf 	.word	0x08005adf
 8005454:	08005adf 	.word	0x08005adf
 8005458:	08005adf 	.word	0x08005adf
 800545c:	08005adf 	.word	0x08005adf
 8005460:	08005adf 	.word	0x08005adf
 8005464:	08005adf 	.word	0x08005adf
 8005468:	08005adf 	.word	0x08005adf
 800546c:	08005adf 	.word	0x08005adf
 8005470:	08005adf 	.word	0x08005adf
 8005474:	08005adf 	.word	0x08005adf
 8005478:	08005adf 	.word	0x08005adf
 800547c:	08005adf 	.word	0x08005adf
 8005480:	08005a1d 	.word	0x08005a1d
 8005484:	f3af 8000 	nop.w
 8005488:	05161500 	.word	0x05161500
 800548c:	00000000 	.word	0x00000000
 8005490:	0a2c2a00 	.word	0x0a2c2a00
 8005494:	00000000 	.word	0x00000000
 8005498:	003d0900 	.word	0x003d0900
 800549c:	3d090000 	.word	0x3d090000
 80054a0:	007a1200 	.word	0x007a1200
 80054a4:	00f42400 	.word	0x00f42400
 80054a8:	01e84800 	.word	0x01e84800
 80054ac:	03d09000 	.word	0x03d09000
 80054b0:	061a8000 	.word	0x061a8000
 80054b4:	07a12000 	.word	0x07a12000
 80054b8:	0f424000 	.word	0x0f424000
 80054bc:	1e848000 	.word	0x1e848000
 80054c0:	000aaa00 	.word	0x000aaa00
 80054c4:	000ccc00 	.word	0x000ccc00
 80054c8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054cc:	f7fd f930 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 80054d0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d044      	beq.n	8005564 <UART_SetConfig+0x15d4>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d03e      	beq.n	8005560 <UART_SetConfig+0x15d0>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d038      	beq.n	800555c <UART_SetConfig+0x15cc>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d032      	beq.n	8005558 <UART_SetConfig+0x15c8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d02c      	beq.n	8005554 <UART_SetConfig+0x15c4>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d026      	beq.n	8005550 <UART_SetConfig+0x15c0>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b06      	cmp	r3, #6
 8005508:	d020      	beq.n	800554c <UART_SetConfig+0x15bc>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b07      	cmp	r3, #7
 8005510:	d01a      	beq.n	8005548 <UART_SetConfig+0x15b8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b08      	cmp	r3, #8
 8005518:	d014      	beq.n	8005544 <UART_SetConfig+0x15b4>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b09      	cmp	r3, #9
 8005520:	d00e      	beq.n	8005540 <UART_SetConfig+0x15b0>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b0a      	cmp	r3, #10
 8005528:	d008      	beq.n	800553c <UART_SetConfig+0x15ac>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b0b      	cmp	r3, #11
 8005530:	d102      	bne.n	8005538 <UART_SetConfig+0x15a8>
 8005532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005536:	e016      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005538:	2301      	movs	r3, #1
 800553a:	e014      	b.n	8005566 <UART_SetConfig+0x15d6>
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	e012      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005540:	2340      	movs	r3, #64	; 0x40
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005544:	2320      	movs	r3, #32
 8005546:	e00e      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005548:	2310      	movs	r3, #16
 800554a:	e00c      	b.n	8005566 <UART_SetConfig+0x15d6>
 800554c:	230c      	movs	r3, #12
 800554e:	e00a      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005550:	230a      	movs	r3, #10
 8005552:	e008      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005554:	2308      	movs	r3, #8
 8005556:	e006      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005558:	2306      	movs	r3, #6
 800555a:	e004      	b.n	8005566 <UART_SetConfig+0x15d6>
 800555c:	2304      	movs	r3, #4
 800555e:	e002      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005560:	2302      	movs	r3, #2
 8005562:	e000      	b.n	8005566 <UART_SetConfig+0x15d6>
 8005564:	2301      	movs	r3, #1
 8005566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	005a      	lsls	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	b29b      	uxth	r3, r3
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005582:	e2b0      	b.n	8005ae6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005584:	f7fd f8ea 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8005588:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d044      	beq.n	800561c <UART_SetConfig+0x168c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b01      	cmp	r3, #1
 8005598:	d03e      	beq.n	8005618 <UART_SetConfig+0x1688>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d038      	beq.n	8005614 <UART_SetConfig+0x1684>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d032      	beq.n	8005610 <UART_SetConfig+0x1680>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d02c      	beq.n	800560c <UART_SetConfig+0x167c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d026      	beq.n	8005608 <UART_SetConfig+0x1678>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d020      	beq.n	8005604 <UART_SetConfig+0x1674>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b07      	cmp	r3, #7
 80055c8:	d01a      	beq.n	8005600 <UART_SetConfig+0x1670>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d014      	beq.n	80055fc <UART_SetConfig+0x166c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b09      	cmp	r3, #9
 80055d8:	d00e      	beq.n	80055f8 <UART_SetConfig+0x1668>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b0a      	cmp	r3, #10
 80055e0:	d008      	beq.n	80055f4 <UART_SetConfig+0x1664>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b0b      	cmp	r3, #11
 80055e8:	d102      	bne.n	80055f0 <UART_SetConfig+0x1660>
 80055ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ee:	e016      	b.n	800561e <UART_SetConfig+0x168e>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e014      	b.n	800561e <UART_SetConfig+0x168e>
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	e012      	b.n	800561e <UART_SetConfig+0x168e>
 80055f8:	2340      	movs	r3, #64	; 0x40
 80055fa:	e010      	b.n	800561e <UART_SetConfig+0x168e>
 80055fc:	2320      	movs	r3, #32
 80055fe:	e00e      	b.n	800561e <UART_SetConfig+0x168e>
 8005600:	2310      	movs	r3, #16
 8005602:	e00c      	b.n	800561e <UART_SetConfig+0x168e>
 8005604:	230c      	movs	r3, #12
 8005606:	e00a      	b.n	800561e <UART_SetConfig+0x168e>
 8005608:	230a      	movs	r3, #10
 800560a:	e008      	b.n	800561e <UART_SetConfig+0x168e>
 800560c:	2308      	movs	r3, #8
 800560e:	e006      	b.n	800561e <UART_SetConfig+0x168e>
 8005610:	2306      	movs	r3, #6
 8005612:	e004      	b.n	800561e <UART_SetConfig+0x168e>
 8005614:	2304      	movs	r3, #4
 8005616:	e002      	b.n	800561e <UART_SetConfig+0x168e>
 8005618:	2302      	movs	r3, #2
 800561a:	e000      	b.n	800561e <UART_SetConfig+0x168e>
 800561c:	2301      	movs	r3, #1
 800561e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	005a      	lsls	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	441a      	add	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	fbb2 f3f3 	udiv	r3, r2, r3
 8005636:	b29b      	uxth	r3, r3
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800563a:	e254      	b.n	8005ae6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800563c:	f107 0318 	add.w	r3, r7, #24
 8005640:	4618      	mov	r0, r3
 8005642:	f7fd ffc1 	bl	80035c8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d044      	beq.n	80056da <UART_SetConfig+0x174a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b01      	cmp	r3, #1
 8005656:	d03e      	beq.n	80056d6 <UART_SetConfig+0x1746>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2b02      	cmp	r3, #2
 800565e:	d038      	beq.n	80056d2 <UART_SetConfig+0x1742>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b03      	cmp	r3, #3
 8005666:	d032      	beq.n	80056ce <UART_SetConfig+0x173e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	2b04      	cmp	r3, #4
 800566e:	d02c      	beq.n	80056ca <UART_SetConfig+0x173a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b05      	cmp	r3, #5
 8005676:	d026      	beq.n	80056c6 <UART_SetConfig+0x1736>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	2b06      	cmp	r3, #6
 800567e:	d020      	beq.n	80056c2 <UART_SetConfig+0x1732>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2b07      	cmp	r3, #7
 8005686:	d01a      	beq.n	80056be <UART_SetConfig+0x172e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	2b08      	cmp	r3, #8
 800568e:	d014      	beq.n	80056ba <UART_SetConfig+0x172a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2b09      	cmp	r3, #9
 8005696:	d00e      	beq.n	80056b6 <UART_SetConfig+0x1726>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b0a      	cmp	r3, #10
 800569e:	d008      	beq.n	80056b2 <UART_SetConfig+0x1722>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	2b0b      	cmp	r3, #11
 80056a6:	d102      	bne.n	80056ae <UART_SetConfig+0x171e>
 80056a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056ac:	e016      	b.n	80056dc <UART_SetConfig+0x174c>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e014      	b.n	80056dc <UART_SetConfig+0x174c>
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	e012      	b.n	80056dc <UART_SetConfig+0x174c>
 80056b6:	2340      	movs	r3, #64	; 0x40
 80056b8:	e010      	b.n	80056dc <UART_SetConfig+0x174c>
 80056ba:	2320      	movs	r3, #32
 80056bc:	e00e      	b.n	80056dc <UART_SetConfig+0x174c>
 80056be:	2310      	movs	r3, #16
 80056c0:	e00c      	b.n	80056dc <UART_SetConfig+0x174c>
 80056c2:	230c      	movs	r3, #12
 80056c4:	e00a      	b.n	80056dc <UART_SetConfig+0x174c>
 80056c6:	230a      	movs	r3, #10
 80056c8:	e008      	b.n	80056dc <UART_SetConfig+0x174c>
 80056ca:	2308      	movs	r3, #8
 80056cc:	e006      	b.n	80056dc <UART_SetConfig+0x174c>
 80056ce:	2306      	movs	r3, #6
 80056d0:	e004      	b.n	80056dc <UART_SetConfig+0x174c>
 80056d2:	2304      	movs	r3, #4
 80056d4:	e002      	b.n	80056dc <UART_SetConfig+0x174c>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e000      	b.n	80056dc <UART_SetConfig+0x174c>
 80056da:	2301      	movs	r3, #1
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	005a      	lsls	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	441a      	add	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056f6:	e1f6      	b.n	8005ae6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056f8:	f107 030c 	add.w	r3, r7, #12
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe f8af 	bl	8003860 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d044      	beq.n	8005796 <UART_SetConfig+0x1806>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b01      	cmp	r3, #1
 8005712:	d03e      	beq.n	8005792 <UART_SetConfig+0x1802>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b02      	cmp	r3, #2
 800571a:	d038      	beq.n	800578e <UART_SetConfig+0x17fe>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b03      	cmp	r3, #3
 8005722:	d032      	beq.n	800578a <UART_SetConfig+0x17fa>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b04      	cmp	r3, #4
 800572a:	d02c      	beq.n	8005786 <UART_SetConfig+0x17f6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b05      	cmp	r3, #5
 8005732:	d026      	beq.n	8005782 <UART_SetConfig+0x17f2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b06      	cmp	r3, #6
 800573a:	d020      	beq.n	800577e <UART_SetConfig+0x17ee>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	2b07      	cmp	r3, #7
 8005742:	d01a      	beq.n	800577a <UART_SetConfig+0x17ea>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b08      	cmp	r3, #8
 800574a:	d014      	beq.n	8005776 <UART_SetConfig+0x17e6>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b09      	cmp	r3, #9
 8005752:	d00e      	beq.n	8005772 <UART_SetConfig+0x17e2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b0a      	cmp	r3, #10
 800575a:	d008      	beq.n	800576e <UART_SetConfig+0x17de>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b0b      	cmp	r3, #11
 8005762:	d102      	bne.n	800576a <UART_SetConfig+0x17da>
 8005764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005768:	e016      	b.n	8005798 <UART_SetConfig+0x1808>
 800576a:	2301      	movs	r3, #1
 800576c:	e014      	b.n	8005798 <UART_SetConfig+0x1808>
 800576e:	2380      	movs	r3, #128	; 0x80
 8005770:	e012      	b.n	8005798 <UART_SetConfig+0x1808>
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	e010      	b.n	8005798 <UART_SetConfig+0x1808>
 8005776:	2320      	movs	r3, #32
 8005778:	e00e      	b.n	8005798 <UART_SetConfig+0x1808>
 800577a:	2310      	movs	r3, #16
 800577c:	e00c      	b.n	8005798 <UART_SetConfig+0x1808>
 800577e:	230c      	movs	r3, #12
 8005780:	e00a      	b.n	8005798 <UART_SetConfig+0x1808>
 8005782:	230a      	movs	r3, #10
 8005784:	e008      	b.n	8005798 <UART_SetConfig+0x1808>
 8005786:	2308      	movs	r3, #8
 8005788:	e006      	b.n	8005798 <UART_SetConfig+0x1808>
 800578a:	2306      	movs	r3, #6
 800578c:	e004      	b.n	8005798 <UART_SetConfig+0x1808>
 800578e:	2304      	movs	r3, #4
 8005790:	e002      	b.n	8005798 <UART_SetConfig+0x1808>
 8005792:	2302      	movs	r3, #2
 8005794:	e000      	b.n	8005798 <UART_SetConfig+0x1808>
 8005796:	2301      	movs	r3, #1
 8005798:	fbb2 f3f3 	udiv	r3, r2, r3
 800579c:	005a      	lsls	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	441a      	add	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057b2:	e198      	b.n	8005ae6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b4:	4b87      	ldr	r3, [pc, #540]	; (80059d4 <UART_SetConfig+0x1a44>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d05e      	beq.n	800587e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c0:	4b84      	ldr	r3, [pc, #528]	; (80059d4 <UART_SetConfig+0x1a44>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	4a83      	ldr	r2, [pc, #524]	; (80059d8 <UART_SetConfig+0x1a48>)
 80057cc:	40da      	lsrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d044      	beq.n	8005860 <UART_SetConfig+0x18d0>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d03e      	beq.n	800585c <UART_SetConfig+0x18cc>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d038      	beq.n	8005858 <UART_SetConfig+0x18c8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d032      	beq.n	8005854 <UART_SetConfig+0x18c4>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d02c      	beq.n	8005850 <UART_SetConfig+0x18c0>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d026      	beq.n	800584c <UART_SetConfig+0x18bc>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b06      	cmp	r3, #6
 8005804:	d020      	beq.n	8005848 <UART_SetConfig+0x18b8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b07      	cmp	r3, #7
 800580c:	d01a      	beq.n	8005844 <UART_SetConfig+0x18b4>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b08      	cmp	r3, #8
 8005814:	d014      	beq.n	8005840 <UART_SetConfig+0x18b0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b09      	cmp	r3, #9
 800581c:	d00e      	beq.n	800583c <UART_SetConfig+0x18ac>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b0a      	cmp	r3, #10
 8005824:	d008      	beq.n	8005838 <UART_SetConfig+0x18a8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b0b      	cmp	r3, #11
 800582c:	d102      	bne.n	8005834 <UART_SetConfig+0x18a4>
 800582e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005832:	e016      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005834:	2301      	movs	r3, #1
 8005836:	e014      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	e012      	b.n	8005862 <UART_SetConfig+0x18d2>
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	e010      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005840:	2320      	movs	r3, #32
 8005842:	e00e      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005844:	2310      	movs	r3, #16
 8005846:	e00c      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005848:	230c      	movs	r3, #12
 800584a:	e00a      	b.n	8005862 <UART_SetConfig+0x18d2>
 800584c:	230a      	movs	r3, #10
 800584e:	e008      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005850:	2308      	movs	r3, #8
 8005852:	e006      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005854:	2306      	movs	r3, #6
 8005856:	e004      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005858:	2304      	movs	r3, #4
 800585a:	e002      	b.n	8005862 <UART_SetConfig+0x18d2>
 800585c:	2302      	movs	r3, #2
 800585e:	e000      	b.n	8005862 <UART_SetConfig+0x18d2>
 8005860:	2301      	movs	r3, #1
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	005a      	lsls	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	441a      	add	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	b29b      	uxth	r3, r3
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800587c:	e133      	b.n	8005ae6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d043      	beq.n	800590e <UART_SetConfig+0x197e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b01      	cmp	r3, #1
 800588c:	d03d      	beq.n	800590a <UART_SetConfig+0x197a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b02      	cmp	r3, #2
 8005894:	d037      	beq.n	8005906 <UART_SetConfig+0x1976>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b03      	cmp	r3, #3
 800589c:	d031      	beq.n	8005902 <UART_SetConfig+0x1972>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d02b      	beq.n	80058fe <UART_SetConfig+0x196e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d025      	beq.n	80058fa <UART_SetConfig+0x196a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d01f      	beq.n	80058f6 <UART_SetConfig+0x1966>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b07      	cmp	r3, #7
 80058bc:	d019      	beq.n	80058f2 <UART_SetConfig+0x1962>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d013      	beq.n	80058ee <UART_SetConfig+0x195e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b09      	cmp	r3, #9
 80058cc:	d00d      	beq.n	80058ea <UART_SetConfig+0x195a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b0a      	cmp	r3, #10
 80058d4:	d007      	beq.n	80058e6 <UART_SetConfig+0x1956>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b0b      	cmp	r3, #11
 80058dc:	d101      	bne.n	80058e2 <UART_SetConfig+0x1952>
 80058de:	4b3f      	ldr	r3, [pc, #252]	; (80059dc <UART_SetConfig+0x1a4c>)
 80058e0:	e016      	b.n	8005910 <UART_SetConfig+0x1980>
 80058e2:	4b3f      	ldr	r3, [pc, #252]	; (80059e0 <UART_SetConfig+0x1a50>)
 80058e4:	e014      	b.n	8005910 <UART_SetConfig+0x1980>
 80058e6:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <UART_SetConfig+0x1a54>)
 80058e8:	e012      	b.n	8005910 <UART_SetConfig+0x1980>
 80058ea:	4b3f      	ldr	r3, [pc, #252]	; (80059e8 <UART_SetConfig+0x1a58>)
 80058ec:	e010      	b.n	8005910 <UART_SetConfig+0x1980>
 80058ee:	4b3f      	ldr	r3, [pc, #252]	; (80059ec <UART_SetConfig+0x1a5c>)
 80058f0:	e00e      	b.n	8005910 <UART_SetConfig+0x1980>
 80058f2:	4b3f      	ldr	r3, [pc, #252]	; (80059f0 <UART_SetConfig+0x1a60>)
 80058f4:	e00c      	b.n	8005910 <UART_SetConfig+0x1980>
 80058f6:	4b3f      	ldr	r3, [pc, #252]	; (80059f4 <UART_SetConfig+0x1a64>)
 80058f8:	e00a      	b.n	8005910 <UART_SetConfig+0x1980>
 80058fa:	4b3f      	ldr	r3, [pc, #252]	; (80059f8 <UART_SetConfig+0x1a68>)
 80058fc:	e008      	b.n	8005910 <UART_SetConfig+0x1980>
 80058fe:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <UART_SetConfig+0x1a6c>)
 8005900:	e006      	b.n	8005910 <UART_SetConfig+0x1980>
 8005902:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <UART_SetConfig+0x1a70>)
 8005904:	e004      	b.n	8005910 <UART_SetConfig+0x1980>
 8005906:	4b3f      	ldr	r3, [pc, #252]	; (8005a04 <UART_SetConfig+0x1a74>)
 8005908:	e002      	b.n	8005910 <UART_SetConfig+0x1980>
 800590a:	4b33      	ldr	r3, [pc, #204]	; (80059d8 <UART_SetConfig+0x1a48>)
 800590c:	e000      	b.n	8005910 <UART_SetConfig+0x1980>
 800590e:	4b34      	ldr	r3, [pc, #208]	; (80059e0 <UART_SetConfig+0x1a50>)
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6852      	ldr	r2, [r2, #4]
 8005914:	0852      	lsrs	r2, r2, #1
 8005916:	441a      	add	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	b29b      	uxth	r3, r3
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005924:	e0df      	b.n	8005ae6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d045      	beq.n	80059ba <UART_SetConfig+0x1a2a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	2b01      	cmp	r3, #1
 8005934:	d03f      	beq.n	80059b6 <UART_SetConfig+0x1a26>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	2b02      	cmp	r3, #2
 800593c:	d039      	beq.n	80059b2 <UART_SetConfig+0x1a22>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2b03      	cmp	r3, #3
 8005944:	d033      	beq.n	80059ae <UART_SetConfig+0x1a1e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2b04      	cmp	r3, #4
 800594c:	d02d      	beq.n	80059aa <UART_SetConfig+0x1a1a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b05      	cmp	r3, #5
 8005954:	d027      	beq.n	80059a6 <UART_SetConfig+0x1a16>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b06      	cmp	r3, #6
 800595c:	d021      	beq.n	80059a2 <UART_SetConfig+0x1a12>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b07      	cmp	r3, #7
 8005964:	d01b      	beq.n	800599e <UART_SetConfig+0x1a0e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b08      	cmp	r3, #8
 800596c:	d015      	beq.n	800599a <UART_SetConfig+0x1a0a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b09      	cmp	r3, #9
 8005974:	d00f      	beq.n	8005996 <UART_SetConfig+0x1a06>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b0a      	cmp	r3, #10
 800597c:	d008      	beq.n	8005990 <UART_SetConfig+0x1a00>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b0b      	cmp	r3, #11
 8005984:	d102      	bne.n	800598c <UART_SetConfig+0x19fc>
 8005986:	f647 2312 	movw	r3, #31250	; 0x7a12
 800598a:	e017      	b.n	80059bc <UART_SetConfig+0x1a2c>
 800598c:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <UART_SetConfig+0x1a60>)
 800598e:	e015      	b.n	80059bc <UART_SetConfig+0x1a2c>
 8005990:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005994:	e012      	b.n	80059bc <UART_SetConfig+0x1a2c>
 8005996:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <UART_SetConfig+0x1a78>)
 8005998:	e010      	b.n	80059bc <UART_SetConfig+0x1a2c>
 800599a:	4b1c      	ldr	r3, [pc, #112]	; (8005a0c <UART_SetConfig+0x1a7c>)
 800599c:	e00e      	b.n	80059bc <UART_SetConfig+0x1a2c>
 800599e:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <UART_SetConfig+0x1a4c>)
 80059a0:	e00c      	b.n	80059bc <UART_SetConfig+0x1a2c>
 80059a2:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <UART_SetConfig+0x1a80>)
 80059a4:	e00a      	b.n	80059bc <UART_SetConfig+0x1a2c>
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <UART_SetConfig+0x1a84>)
 80059a8:	e008      	b.n	80059bc <UART_SetConfig+0x1a2c>
 80059aa:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <UART_SetConfig+0x1a54>)
 80059ac:	e006      	b.n	80059bc <UART_SetConfig+0x1a2c>
 80059ae:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <UART_SetConfig+0x1a88>)
 80059b0:	e004      	b.n	80059bc <UART_SetConfig+0x1a2c>
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <UART_SetConfig+0x1a58>)
 80059b4:	e002      	b.n	80059bc <UART_SetConfig+0x1a2c>
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <UART_SetConfig+0x1a5c>)
 80059b8:	e000      	b.n	80059bc <UART_SetConfig+0x1a2c>
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <UART_SetConfig+0x1a60>)
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6852      	ldr	r2, [r2, #4]
 80059c0:	0852      	lsrs	r2, r2, #1
 80059c2:	441a      	add	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059d0:	e089      	b.n	8005ae6 <UART_SetConfig+0x1b56>
 80059d2:	bf00      	nop
 80059d4:	58024400 	.word	0x58024400
 80059d8:	03d09000 	.word	0x03d09000
 80059dc:	0007a120 	.word	0x0007a120
 80059e0:	07a12000 	.word	0x07a12000
 80059e4:	000f4240 	.word	0x000f4240
 80059e8:	001e8480 	.word	0x001e8480
 80059ec:	003d0900 	.word	0x003d0900
 80059f0:	007a1200 	.word	0x007a1200
 80059f4:	00a2c2aa 	.word	0x00a2c2aa
 80059f8:	00c35000 	.word	0x00c35000
 80059fc:	00f42400 	.word	0x00f42400
 8005a00:	01458554 	.word	0x01458554
 8005a04:	01e84800 	.word	0x01e84800
 8005a08:	0001e848 	.word	0x0001e848
 8005a0c:	0003d090 	.word	0x0003d090
 8005a10:	000a2c2a 	.word	0x000a2c2a
 8005a14:	000c3500 	.word	0x000c3500
 8005a18:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d04f      	beq.n	8005ac4 <UART_SetConfig+0x1b34>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d048      	beq.n	8005abe <UART_SetConfig+0x1b2e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d041      	beq.n	8005ab8 <UART_SetConfig+0x1b28>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d03a      	beq.n	8005ab2 <UART_SetConfig+0x1b22>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d033      	beq.n	8005aac <UART_SetConfig+0x1b1c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d02c      	beq.n	8005aa6 <UART_SetConfig+0x1b16>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d025      	beq.n	8005aa0 <UART_SetConfig+0x1b10>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b07      	cmp	r3, #7
 8005a5a:	d01e      	beq.n	8005a9a <UART_SetConfig+0x1b0a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d017      	beq.n	8005a94 <UART_SetConfig+0x1b04>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d010      	beq.n	8005a8e <UART_SetConfig+0x1afe>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	2b0a      	cmp	r3, #10
 8005a72:	d009      	beq.n	8005a88 <UART_SetConfig+0x1af8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2b0b      	cmp	r3, #11
 8005a7a:	d102      	bne.n	8005a82 <UART_SetConfig+0x1af2>
 8005a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a80:	e022      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a86:	e01f      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a8c:	e01c      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a92:	e019      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a98:	e016      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a9e:	e013      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005aa0:	f241 5354 	movw	r3, #5460	; 0x1554
 8005aa4:	e010      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005aa6:	f641 1398 	movw	r3, #6552	; 0x1998
 8005aaa:	e00d      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ab0:	e00a      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005ab2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005ab6:	e007      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005ab8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005abc:	e004      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac2:	e001      	b.n	8005ac8 <UART_SetConfig+0x1b38>
 8005ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6852      	ldr	r2, [r2, #4]
 8005acc:	0852      	lsrs	r2, r2, #1
 8005ace:	441a      	add	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005adc:	e003      	b.n	8005ae6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	2b0f      	cmp	r3, #15
 8005aea:	d916      	bls.n	8005b1a <UART_SetConfig+0x1b8a>
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af2:	d212      	bcs.n	8005b1a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f023 030f 	bic.w	r3, r3, #15
 8005afc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	e3a3      	b.n	8006262 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b20:	e39f      	b.n	8006262 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8005b22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	f200 8388 	bhi.w	800623c <UART_SetConfig+0x22ac>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0x1ba4>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005c39 	.word	0x08005c39
 8005b38:	08005cef 	.word	0x08005cef
 8005b3c:	0800623d 	.word	0x0800623d
 8005b40:	0800623d 	.word	0x0800623d
 8005b44:	08005da5 	.word	0x08005da5
 8005b48:	0800623d 	.word	0x0800623d
 8005b4c:	0800623d 	.word	0x0800623d
 8005b50:	0800623d 	.word	0x0800623d
 8005b54:	08005e5f 	.word	0x08005e5f
 8005b58:	0800623d 	.word	0x0800623d
 8005b5c:	0800623d 	.word	0x0800623d
 8005b60:	0800623d 	.word	0x0800623d
 8005b64:	0800623d 	.word	0x0800623d
 8005b68:	0800623d 	.word	0x0800623d
 8005b6c:	0800623d 	.word	0x0800623d
 8005b70:	0800623d 	.word	0x0800623d
 8005b74:	08005f19 	.word	0x08005f19
 8005b78:	0800623d 	.word	0x0800623d
 8005b7c:	0800623d 	.word	0x0800623d
 8005b80:	0800623d 	.word	0x0800623d
 8005b84:	0800623d 	.word	0x0800623d
 8005b88:	0800623d 	.word	0x0800623d
 8005b8c:	0800623d 	.word	0x0800623d
 8005b90:	0800623d 	.word	0x0800623d
 8005b94:	0800623d 	.word	0x0800623d
 8005b98:	0800623d 	.word	0x0800623d
 8005b9c:	0800623d 	.word	0x0800623d
 8005ba0:	0800623d 	.word	0x0800623d
 8005ba4:	0800623d 	.word	0x0800623d
 8005ba8:	0800623d 	.word	0x0800623d
 8005bac:	0800623d 	.word	0x0800623d
 8005bb0:	0800623d 	.word	0x0800623d
 8005bb4:	08006089 	.word	0x08006089
 8005bb8:	0800623d 	.word	0x0800623d
 8005bbc:	0800623d 	.word	0x0800623d
 8005bc0:	0800623d 	.word	0x0800623d
 8005bc4:	0800623d 	.word	0x0800623d
 8005bc8:	0800623d 	.word	0x0800623d
 8005bcc:	0800623d 	.word	0x0800623d
 8005bd0:	0800623d 	.word	0x0800623d
 8005bd4:	0800623d 	.word	0x0800623d
 8005bd8:	0800623d 	.word	0x0800623d
 8005bdc:	0800623d 	.word	0x0800623d
 8005be0:	0800623d 	.word	0x0800623d
 8005be4:	0800623d 	.word	0x0800623d
 8005be8:	0800623d 	.word	0x0800623d
 8005bec:	0800623d 	.word	0x0800623d
 8005bf0:	0800623d 	.word	0x0800623d
 8005bf4:	0800623d 	.word	0x0800623d
 8005bf8:	0800623d 	.word	0x0800623d
 8005bfc:	0800623d 	.word	0x0800623d
 8005c00:	0800623d 	.word	0x0800623d
 8005c04:	0800623d 	.word	0x0800623d
 8005c08:	0800623d 	.word	0x0800623d
 8005c0c:	0800623d 	.word	0x0800623d
 8005c10:	0800623d 	.word	0x0800623d
 8005c14:	0800623d 	.word	0x0800623d
 8005c18:	0800623d 	.word	0x0800623d
 8005c1c:	0800623d 	.word	0x0800623d
 8005c20:	0800623d 	.word	0x0800623d
 8005c24:	0800623d 	.word	0x0800623d
 8005c28:	0800623d 	.word	0x0800623d
 8005c2c:	0800623d 	.word	0x0800623d
 8005c30:	0800623d 	.word	0x0800623d
 8005c34:	0800617d 	.word	0x0800617d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c38:	f7fc fd7a 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8005c3c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d044      	beq.n	8005cd0 <UART_SetConfig+0x1d40>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d03e      	beq.n	8005ccc <UART_SetConfig+0x1d3c>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d038      	beq.n	8005cc8 <UART_SetConfig+0x1d38>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d032      	beq.n	8005cc4 <UART_SetConfig+0x1d34>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d02c      	beq.n	8005cc0 <UART_SetConfig+0x1d30>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b05      	cmp	r3, #5
 8005c6c:	d026      	beq.n	8005cbc <UART_SetConfig+0x1d2c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b06      	cmp	r3, #6
 8005c74:	d020      	beq.n	8005cb8 <UART_SetConfig+0x1d28>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b07      	cmp	r3, #7
 8005c7c:	d01a      	beq.n	8005cb4 <UART_SetConfig+0x1d24>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d014      	beq.n	8005cb0 <UART_SetConfig+0x1d20>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d00e      	beq.n	8005cac <UART_SetConfig+0x1d1c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b0a      	cmp	r3, #10
 8005c94:	d008      	beq.n	8005ca8 <UART_SetConfig+0x1d18>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b0b      	cmp	r3, #11
 8005c9c:	d102      	bne.n	8005ca4 <UART_SetConfig+0x1d14>
 8005c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca2:	e016      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e014      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	e012      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cac:	2340      	movs	r3, #64	; 0x40
 8005cae:	e010      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	e00e      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	e00c      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	e00a      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cbc:	230a      	movs	r3, #10
 8005cbe:	e008      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	e006      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cc4:	2306      	movs	r3, #6
 8005cc6:	e004      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	e002      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e000      	b.n	8005cd2 <UART_SetConfig+0x1d42>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	441a      	add	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cec:	e2aa      	b.n	8006244 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cee:	f7fc fd35 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8005cf2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d044      	beq.n	8005d86 <UART_SetConfig+0x1df6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d03e      	beq.n	8005d82 <UART_SetConfig+0x1df2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d038      	beq.n	8005d7e <UART_SetConfig+0x1dee>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d032      	beq.n	8005d7a <UART_SetConfig+0x1dea>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d02c      	beq.n	8005d76 <UART_SetConfig+0x1de6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	d026      	beq.n	8005d72 <UART_SetConfig+0x1de2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b06      	cmp	r3, #6
 8005d2a:	d020      	beq.n	8005d6e <UART_SetConfig+0x1dde>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b07      	cmp	r3, #7
 8005d32:	d01a      	beq.n	8005d6a <UART_SetConfig+0x1dda>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d014      	beq.n	8005d66 <UART_SetConfig+0x1dd6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d00e      	beq.n	8005d62 <UART_SetConfig+0x1dd2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b0a      	cmp	r3, #10
 8005d4a:	d008      	beq.n	8005d5e <UART_SetConfig+0x1dce>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b0b      	cmp	r3, #11
 8005d52:	d102      	bne.n	8005d5a <UART_SetConfig+0x1dca>
 8005d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d58:	e016      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e014      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	e012      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d62:	2340      	movs	r3, #64	; 0x40
 8005d64:	e010      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d66:	2320      	movs	r3, #32
 8005d68:	e00e      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d6a:	2310      	movs	r3, #16
 8005d6c:	e00c      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	e00a      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d72:	230a      	movs	r3, #10
 8005d74:	e008      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d76:	2308      	movs	r3, #8
 8005d78:	e006      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d7a:	2306      	movs	r3, #6
 8005d7c:	e004      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d7e:	2304      	movs	r3, #4
 8005d80:	e002      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e000      	b.n	8005d88 <UART_SetConfig+0x1df8>
 8005d86:	2301      	movs	r3, #1
 8005d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	441a      	add	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005da2:	e24f      	b.n	8006244 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da4:	f107 0318 	add.w	r3, r7, #24
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fd fc0d 	bl	80035c8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d044      	beq.n	8005e42 <UART_SetConfig+0x1eb2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d03e      	beq.n	8005e3e <UART_SetConfig+0x1eae>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d038      	beq.n	8005e3a <UART_SetConfig+0x1eaa>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d032      	beq.n	8005e36 <UART_SetConfig+0x1ea6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d02c      	beq.n	8005e32 <UART_SetConfig+0x1ea2>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b05      	cmp	r3, #5
 8005dde:	d026      	beq.n	8005e2e <UART_SetConfig+0x1e9e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b06      	cmp	r3, #6
 8005de6:	d020      	beq.n	8005e2a <UART_SetConfig+0x1e9a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b07      	cmp	r3, #7
 8005dee:	d01a      	beq.n	8005e26 <UART_SetConfig+0x1e96>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d014      	beq.n	8005e22 <UART_SetConfig+0x1e92>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b09      	cmp	r3, #9
 8005dfe:	d00e      	beq.n	8005e1e <UART_SetConfig+0x1e8e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b0a      	cmp	r3, #10
 8005e06:	d008      	beq.n	8005e1a <UART_SetConfig+0x1e8a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b0b      	cmp	r3, #11
 8005e0e:	d102      	bne.n	8005e16 <UART_SetConfig+0x1e86>
 8005e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e14:	e016      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e014      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e1a:	2380      	movs	r3, #128	; 0x80
 8005e1c:	e012      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	e010      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e22:	2320      	movs	r3, #32
 8005e24:	e00e      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e26:	2310      	movs	r3, #16
 8005e28:	e00c      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	e00a      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e2e:	230a      	movs	r3, #10
 8005e30:	e008      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e32:	2308      	movs	r3, #8
 8005e34:	e006      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e36:	2306      	movs	r3, #6
 8005e38:	e004      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e3a:	2304      	movs	r3, #4
 8005e3c:	e002      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e000      	b.n	8005e44 <UART_SetConfig+0x1eb4>
 8005e42:	2301      	movs	r3, #1
 8005e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	441a      	add	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e5c:	e1f2      	b.n	8006244 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fd fcfc 	bl	8003860 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d044      	beq.n	8005efc <UART_SetConfig+0x1f6c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d03e      	beq.n	8005ef8 <UART_SetConfig+0x1f68>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d038      	beq.n	8005ef4 <UART_SetConfig+0x1f64>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d032      	beq.n	8005ef0 <UART_SetConfig+0x1f60>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d02c      	beq.n	8005eec <UART_SetConfig+0x1f5c>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d026      	beq.n	8005ee8 <UART_SetConfig+0x1f58>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d020      	beq.n	8005ee4 <UART_SetConfig+0x1f54>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b07      	cmp	r3, #7
 8005ea8:	d01a      	beq.n	8005ee0 <UART_SetConfig+0x1f50>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d014      	beq.n	8005edc <UART_SetConfig+0x1f4c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b09      	cmp	r3, #9
 8005eb8:	d00e      	beq.n	8005ed8 <UART_SetConfig+0x1f48>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	2b0a      	cmp	r3, #10
 8005ec0:	d008      	beq.n	8005ed4 <UART_SetConfig+0x1f44>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b0b      	cmp	r3, #11
 8005ec8:	d102      	bne.n	8005ed0 <UART_SetConfig+0x1f40>
 8005eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ece:	e016      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e014      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	e012      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	e010      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005edc:	2320      	movs	r3, #32
 8005ede:	e00e      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	e00c      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ee4:	230c      	movs	r3, #12
 8005ee6:	e00a      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ee8:	230a      	movs	r3, #10
 8005eea:	e008      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005eec:	2308      	movs	r3, #8
 8005eee:	e006      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ef0:	2306      	movs	r3, #6
 8005ef2:	e004      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	e002      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e000      	b.n	8005efe <UART_SetConfig+0x1f6e>
 8005efc:	2301      	movs	r3, #1
 8005efe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	441a      	add	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f16:	e195      	b.n	8006244 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f18:	4b87      	ldr	r3, [pc, #540]	; (8006138 <UART_SetConfig+0x21a8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d05d      	beq.n	8005fe0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f24:	4b84      	ldr	r3, [pc, #528]	; (8006138 <UART_SetConfig+0x21a8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	4a83      	ldr	r2, [pc, #524]	; (800613c <UART_SetConfig+0x21ac>)
 8005f30:	40da      	lsrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d044      	beq.n	8005fc4 <UART_SetConfig+0x2034>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d03e      	beq.n	8005fc0 <UART_SetConfig+0x2030>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d038      	beq.n	8005fbc <UART_SetConfig+0x202c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d032      	beq.n	8005fb8 <UART_SetConfig+0x2028>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d02c      	beq.n	8005fb4 <UART_SetConfig+0x2024>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b05      	cmp	r3, #5
 8005f60:	d026      	beq.n	8005fb0 <UART_SetConfig+0x2020>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d020      	beq.n	8005fac <UART_SetConfig+0x201c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b07      	cmp	r3, #7
 8005f70:	d01a      	beq.n	8005fa8 <UART_SetConfig+0x2018>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d014      	beq.n	8005fa4 <UART_SetConfig+0x2014>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d00e      	beq.n	8005fa0 <UART_SetConfig+0x2010>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b0a      	cmp	r3, #10
 8005f88:	d008      	beq.n	8005f9c <UART_SetConfig+0x200c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	2b0b      	cmp	r3, #11
 8005f90:	d102      	bne.n	8005f98 <UART_SetConfig+0x2008>
 8005f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f96:	e016      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e014      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	e012      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	e010      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fa4:	2320      	movs	r3, #32
 8005fa6:	e00e      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	e00c      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fac:	230c      	movs	r3, #12
 8005fae:	e00a      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fb0:	230a      	movs	r3, #10
 8005fb2:	e008      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	e006      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fb8:	2306      	movs	r3, #6
 8005fba:	e004      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	e002      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e000      	b.n	8005fc6 <UART_SetConfig+0x2036>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	441a      	add	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005fde:	e131      	b.n	8006244 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d043      	beq.n	8006070 <UART_SetConfig+0x20e0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d03d      	beq.n	800606c <UART_SetConfig+0x20dc>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d037      	beq.n	8006068 <UART_SetConfig+0x20d8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d031      	beq.n	8006064 <UART_SetConfig+0x20d4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	2b04      	cmp	r3, #4
 8006006:	d02b      	beq.n	8006060 <UART_SetConfig+0x20d0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b05      	cmp	r3, #5
 800600e:	d025      	beq.n	800605c <UART_SetConfig+0x20cc>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	2b06      	cmp	r3, #6
 8006016:	d01f      	beq.n	8006058 <UART_SetConfig+0x20c8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	2b07      	cmp	r3, #7
 800601e:	d019      	beq.n	8006054 <UART_SetConfig+0x20c4>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	2b08      	cmp	r3, #8
 8006026:	d013      	beq.n	8006050 <UART_SetConfig+0x20c0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	2b09      	cmp	r3, #9
 800602e:	d00d      	beq.n	800604c <UART_SetConfig+0x20bc>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2b0a      	cmp	r3, #10
 8006036:	d007      	beq.n	8006048 <UART_SetConfig+0x20b8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	2b0b      	cmp	r3, #11
 800603e:	d101      	bne.n	8006044 <UART_SetConfig+0x20b4>
 8006040:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <UART_SetConfig+0x21b0>)
 8006042:	e016      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006044:	4b3d      	ldr	r3, [pc, #244]	; (800613c <UART_SetConfig+0x21ac>)
 8006046:	e014      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006048:	4b3e      	ldr	r3, [pc, #248]	; (8006144 <UART_SetConfig+0x21b4>)
 800604a:	e012      	b.n	8006072 <UART_SetConfig+0x20e2>
 800604c:	4b3e      	ldr	r3, [pc, #248]	; (8006148 <UART_SetConfig+0x21b8>)
 800604e:	e010      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006050:	4b3e      	ldr	r3, [pc, #248]	; (800614c <UART_SetConfig+0x21bc>)
 8006052:	e00e      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006054:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <UART_SetConfig+0x21c0>)
 8006056:	e00c      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006058:	4b3e      	ldr	r3, [pc, #248]	; (8006154 <UART_SetConfig+0x21c4>)
 800605a:	e00a      	b.n	8006072 <UART_SetConfig+0x20e2>
 800605c:	4b3e      	ldr	r3, [pc, #248]	; (8006158 <UART_SetConfig+0x21c8>)
 800605e:	e008      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006060:	4b3e      	ldr	r3, [pc, #248]	; (800615c <UART_SetConfig+0x21cc>)
 8006062:	e006      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006064:	4b3e      	ldr	r3, [pc, #248]	; (8006160 <UART_SetConfig+0x21d0>)
 8006066:	e004      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006068:	4b3e      	ldr	r3, [pc, #248]	; (8006164 <UART_SetConfig+0x21d4>)
 800606a:	e002      	b.n	8006072 <UART_SetConfig+0x20e2>
 800606c:	4b3e      	ldr	r3, [pc, #248]	; (8006168 <UART_SetConfig+0x21d8>)
 800606e:	e000      	b.n	8006072 <UART_SetConfig+0x20e2>
 8006070:	4b32      	ldr	r3, [pc, #200]	; (800613c <UART_SetConfig+0x21ac>)
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6852      	ldr	r2, [r2, #4]
 8006076:	0852      	lsrs	r2, r2, #1
 8006078:	441a      	add	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	b29b      	uxth	r3, r3
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006086:	e0dd      	b.n	8006244 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d046      	beq.n	800611e <UART_SetConfig+0x218e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	2b01      	cmp	r3, #1
 8006096:	d040      	beq.n	800611a <UART_SetConfig+0x218a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	2b02      	cmp	r3, #2
 800609e:	d03a      	beq.n	8006116 <UART_SetConfig+0x2186>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d034      	beq.n	8006112 <UART_SetConfig+0x2182>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d02e      	beq.n	800610e <UART_SetConfig+0x217e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	2b05      	cmp	r3, #5
 80060b6:	d028      	beq.n	800610a <UART_SetConfig+0x217a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	2b06      	cmp	r3, #6
 80060be:	d022      	beq.n	8006106 <UART_SetConfig+0x2176>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	2b07      	cmp	r3, #7
 80060c6:	d01c      	beq.n	8006102 <UART_SetConfig+0x2172>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d016      	beq.n	80060fe <UART_SetConfig+0x216e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d00f      	beq.n	80060f8 <UART_SetConfig+0x2168>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	2b0a      	cmp	r3, #10
 80060de:	d008      	beq.n	80060f2 <UART_SetConfig+0x2162>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	2b0b      	cmp	r3, #11
 80060e6:	d102      	bne.n	80060ee <UART_SetConfig+0x215e>
 80060e8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80060ec:	e018      	b.n	8006120 <UART_SetConfig+0x2190>
 80060ee:	4b18      	ldr	r3, [pc, #96]	; (8006150 <UART_SetConfig+0x21c0>)
 80060f0:	e016      	b.n	8006120 <UART_SetConfig+0x2190>
 80060f2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80060f6:	e013      	b.n	8006120 <UART_SetConfig+0x2190>
 80060f8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80060fc:	e010      	b.n	8006120 <UART_SetConfig+0x2190>
 80060fe:	4b1b      	ldr	r3, [pc, #108]	; (800616c <UART_SetConfig+0x21dc>)
 8006100:	e00e      	b.n	8006120 <UART_SetConfig+0x2190>
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <UART_SetConfig+0x21b0>)
 8006104:	e00c      	b.n	8006120 <UART_SetConfig+0x2190>
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <UART_SetConfig+0x21e0>)
 8006108:	e00a      	b.n	8006120 <UART_SetConfig+0x2190>
 800610a:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <UART_SetConfig+0x21e4>)
 800610c:	e008      	b.n	8006120 <UART_SetConfig+0x2190>
 800610e:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <UART_SetConfig+0x21b4>)
 8006110:	e006      	b.n	8006120 <UART_SetConfig+0x2190>
 8006112:	4b19      	ldr	r3, [pc, #100]	; (8006178 <UART_SetConfig+0x21e8>)
 8006114:	e004      	b.n	8006120 <UART_SetConfig+0x2190>
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <UART_SetConfig+0x21b8>)
 8006118:	e002      	b.n	8006120 <UART_SetConfig+0x2190>
 800611a:	4b0c      	ldr	r3, [pc, #48]	; (800614c <UART_SetConfig+0x21bc>)
 800611c:	e000      	b.n	8006120 <UART_SetConfig+0x2190>
 800611e:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <UART_SetConfig+0x21c0>)
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6852      	ldr	r2, [r2, #4]
 8006124:	0852      	lsrs	r2, r2, #1
 8006126:	441a      	add	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	b29b      	uxth	r3, r3
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006134:	e086      	b.n	8006244 <UART_SetConfig+0x22b4>
 8006136:	bf00      	nop
 8006138:	58024400 	.word	0x58024400
 800613c:	03d09000 	.word	0x03d09000
 8006140:	0003d090 	.word	0x0003d090
 8006144:	0007a120 	.word	0x0007a120
 8006148:	000f4240 	.word	0x000f4240
 800614c:	001e8480 	.word	0x001e8480
 8006150:	003d0900 	.word	0x003d0900
 8006154:	00516155 	.word	0x00516155
 8006158:	0061a800 	.word	0x0061a800
 800615c:	007a1200 	.word	0x007a1200
 8006160:	00a2c2aa 	.word	0x00a2c2aa
 8006164:	00f42400 	.word	0x00f42400
 8006168:	01e84800 	.word	0x01e84800
 800616c:	0001e848 	.word	0x0001e848
 8006170:	00051615 	.word	0x00051615
 8006174:	00061a80 	.word	0x00061a80
 8006178:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	d04e      	beq.n	8006222 <UART_SetConfig+0x2292>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	2b01      	cmp	r3, #1
 800618a:	d047      	beq.n	800621c <UART_SetConfig+0x228c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b02      	cmp	r3, #2
 8006192:	d040      	beq.n	8006216 <UART_SetConfig+0x2286>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b03      	cmp	r3, #3
 800619a:	d039      	beq.n	8006210 <UART_SetConfig+0x2280>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d032      	beq.n	800620a <UART_SetConfig+0x227a>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b05      	cmp	r3, #5
 80061aa:	d02b      	beq.n	8006204 <UART_SetConfig+0x2274>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b06      	cmp	r3, #6
 80061b2:	d024      	beq.n	80061fe <UART_SetConfig+0x226e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b07      	cmp	r3, #7
 80061ba:	d01d      	beq.n	80061f8 <UART_SetConfig+0x2268>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d016      	beq.n	80061f2 <UART_SetConfig+0x2262>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b09      	cmp	r3, #9
 80061ca:	d00f      	beq.n	80061ec <UART_SetConfig+0x225c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b0a      	cmp	r3, #10
 80061d2:	d008      	beq.n	80061e6 <UART_SetConfig+0x2256>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b0b      	cmp	r3, #11
 80061da:	d101      	bne.n	80061e0 <UART_SetConfig+0x2250>
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	e022      	b.n	8006226 <UART_SetConfig+0x2296>
 80061e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e4:	e01f      	b.n	8006226 <UART_SetConfig+0x2296>
 80061e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ea:	e01c      	b.n	8006226 <UART_SetConfig+0x2296>
 80061ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061f0:	e019      	b.n	8006226 <UART_SetConfig+0x2296>
 80061f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f6:	e016      	b.n	8006226 <UART_SetConfig+0x2296>
 80061f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061fc:	e013      	b.n	8006226 <UART_SetConfig+0x2296>
 80061fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006202:	e010      	b.n	8006226 <UART_SetConfig+0x2296>
 8006204:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006208:	e00d      	b.n	8006226 <UART_SetConfig+0x2296>
 800620a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800620e:	e00a      	b.n	8006226 <UART_SetConfig+0x2296>
 8006210:	f241 5355 	movw	r3, #5461	; 0x1555
 8006214:	e007      	b.n	8006226 <UART_SetConfig+0x2296>
 8006216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800621a:	e004      	b.n	8006226 <UART_SetConfig+0x2296>
 800621c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006220:	e001      	b.n	8006226 <UART_SetConfig+0x2296>
 8006222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6852      	ldr	r2, [r2, #4]
 800622a:	0852      	lsrs	r2, r2, #1
 800622c:	441a      	add	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	fbb2 f3f3 	udiv	r3, r2, r3
 8006236:	b29b      	uxth	r3, r3
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800623a:	e003      	b.n	8006244 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	2b0f      	cmp	r3, #15
 8006248:	d908      	bls.n	800625c <UART_SetConfig+0x22cc>
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006250:	d204      	bcs.n	800625c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006258:	60da      	str	r2, [r3, #12]
 800625a:	e002      	b.n	8006262 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800627e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006282:	4618      	mov	r0, r3
 8006284:	3740      	adds	r7, #64	; 0x40
 8006286:	46bd      	mov	sp, r7
 8006288:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800628c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638a:	d10a      	bne.n	80063a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80063e0:	f7fa fd8e 	bl	8000f00 <HAL_GetTick>
 80063e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d10e      	bne.n	8006412 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f82c 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e022      	b.n	8006458 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b04      	cmp	r3, #4
 800641e:	d10e      	bne.n	800643e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f816 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e00c      	b.n	8006458 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006470:	e062      	b.n	8006538 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d05e      	beq.n	8006538 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fa fd41 	bl	8000f00 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <UART_WaitOnFlagUntilTimeout+0x30>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11d      	bne.n	80064cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800649e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e045      	b.n	8006558 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d02e      	beq.n	8006538 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e8:	d126      	bne.n	8006538 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006502:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e00f      	b.n	8006558 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4013      	ands	r3, r2
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	429a      	cmp	r2, r3
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	429a      	cmp	r2, r3
 8006554:	d08d      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800656e:	2b01      	cmp	r3, #1
 8006570:	d101      	bne.n	8006576 <HAL_UARTEx_DisableFifoMode+0x16>
 8006572:	2302      	movs	r3, #2
 8006574:	e027      	b.n	80065c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2224      	movs	r2, #36	; 0x24
 8006582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0201 	bic.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e02d      	b.n	8006646 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2224      	movs	r2, #36	; 0x24
 80065f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0201 	bic.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f850 	bl	80066cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006662:	2302      	movs	r3, #2
 8006664:	e02d      	b.n	80066c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2224      	movs	r2, #36	; 0x24
 8006672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f812 	bl	80066cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b089      	sub	sp, #36	; 0x24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80066d4:	4a2f      	ldr	r2, [pc, #188]	; (8006794 <UARTEx_SetNbDataToProcess+0xc8>)
 80066d6:	f107 0314 	add.w	r3, r7, #20
 80066da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80066e2:	4a2d      	ldr	r2, [pc, #180]	; (8006798 <UARTEx_SetNbDataToProcess+0xcc>)
 80066e4:	f107 030c 	add.w	r3, r7, #12
 80066e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d108      	bne.n	800670a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006708:	e03d      	b.n	8006786 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800670a:	2308      	movs	r3, #8
 800670c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800670e:	2308      	movs	r3, #8
 8006710:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	0e5b      	lsrs	r3, r3, #25
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	0f5b      	lsrs	r3, r3, #29
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006732:	7fbb      	ldrb	r3, [r7, #30]
 8006734:	7f3a      	ldrb	r2, [r7, #28]
 8006736:	f107 0120 	add.w	r1, r7, #32
 800673a:	440a      	add	r2, r1
 800673c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	7f3a      	ldrb	r2, [r7, #28]
 8006746:	f107 0120 	add.w	r1, r7, #32
 800674a:	440a      	add	r2, r1
 800674c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006750:	fb93 f3f2 	sdiv	r3, r3, r2
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800675c:	7ffb      	ldrb	r3, [r7, #31]
 800675e:	7f7a      	ldrb	r2, [r7, #29]
 8006760:	f107 0120 	add.w	r1, r7, #32
 8006764:	440a      	add	r2, r1
 8006766:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	7f7a      	ldrb	r2, [r7, #29]
 8006770:	f107 0120 	add.w	r1, r7, #32
 8006774:	440a      	add	r2, r1
 8006776:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800677a:	fb93 f3f2 	sdiv	r3, r3, r2
 800677e:	b29a      	uxth	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006786:	bf00      	nop
 8006788:	3724      	adds	r7, #36	; 0x24
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	08006818 	.word	0x08006818
 8006798:	08006820 	.word	0x08006820

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4e0d      	ldr	r6, [pc, #52]	; (80067d4 <__libc_init_array+0x38>)
 80067a0:	4c0d      	ldr	r4, [pc, #52]	; (80067d8 <__libc_init_array+0x3c>)
 80067a2:	1ba4      	subs	r4, r4, r6
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	2500      	movs	r5, #0
 80067a8:	42a5      	cmp	r5, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	4e0b      	ldr	r6, [pc, #44]	; (80067dc <__libc_init_array+0x40>)
 80067ae:	4c0c      	ldr	r4, [pc, #48]	; (80067e0 <__libc_init_array+0x44>)
 80067b0:	f000 f820 	bl	80067f4 <_init>
 80067b4:	1ba4      	subs	r4, r4, r6
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	2500      	movs	r5, #0
 80067ba:	42a5      	cmp	r5, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067c4:	4798      	blx	r3
 80067c6:	3501      	adds	r5, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ce:	4798      	blx	r3
 80067d0:	3501      	adds	r5, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	08006840 	.word	0x08006840
 80067d8:	08006840 	.word	0x08006840
 80067dc:	08006840 	.word	0x08006840
 80067e0:	08006844 	.word	0x08006844

080067e4 <memset>:
 80067e4:	4402      	add	r2, r0
 80067e6:	4603      	mov	r3, r0
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d100      	bne.n	80067ee <memset+0xa>
 80067ec:	4770      	bx	lr
 80067ee:	f803 1b01 	strb.w	r1, [r3], #1
 80067f2:	e7f9      	b.n	80067e8 <memset+0x4>

080067f4 <_init>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr

08006800 <_fini>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr
