
Testing Dual Core_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000701c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080072b4  080072b4  000172b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080072e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000012c  20000010  080072f4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000013c  080072f4  0002013c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019106  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028a5  00000000  00000000  00039144  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001038  00000000  00000000  0003b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f40  00000000  00000000  0003ca28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f000  00000000  00000000  0003d968  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d87e  00000000  00000000  0007c968  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019d49b  00000000  00000000  0008a1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00227681  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000044a0  00000000  00000000  002276fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800729c 	.word	0x0800729c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800729c 	.word	0x0800729c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <SystemInit+0xc4>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <SystemInit+0xc4>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemInit+0xc4>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemInit+0xc4>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemInit+0xc8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <SystemInit+0xc8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemInit+0xc8>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemInit+0xc8>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4924      	ldr	r1, [pc, #144]	; (80006a0 <SystemInit+0xc8>)
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SystemInit+0xcc>)
 8000612:	4013      	ands	r3, r2
 8000614:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemInit+0xc8>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <SystemInit+0xc8>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemInit+0xc8>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemInit+0xc8>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <SystemInit+0xc8>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SystemInit+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemInit+0xc8>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <SystemInit+0xc8>)
 8000642:	2200      	movs	r2, #0
 8000644:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <SystemInit+0xc8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <SystemInit+0xc8>)
 800064e:	2200      	movs	r2, #0
 8000650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <SystemInit+0xc8>)
 8000654:	2200      	movs	r2, #0
 8000656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <SystemInit+0xc8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <SystemInit+0xc8>)
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <SystemInit+0xc8>)
 8000666:	2200      	movs	r2, #0
 8000668:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <SystemInit+0xd0>)
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <SystemInit+0xd0>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <SystemInit+0xd4>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <SystemInit+0xd8>)
 800067c:	4013      	ands	r3, r2
 800067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000682:	d202      	bcs.n	800068a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <SystemInit+0xdc>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SystemInit+0xc4>)
 800068c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000690:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	58024400 	.word	0x58024400
 80006a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006a8:	580000c0 	.word	0x580000c0
 80006ac:	5c001000 	.word	0x5c001000
 80006b0:	ffff0000 	.word	0xffff0000
 80006b4:	51008108 	.word	0x51008108

080006b8 <Led_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Led_init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <Led_init+0x54>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <Led_init+0x54>)
 80006d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <Led_init+0x54>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <Led_init+0x58>)
 8000700:	f000 fd7a 	bl	80011f8 <HAL_GPIO_Init>
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	58024400 	.word	0x58024400
 8000710:	58022400 	.word	0x58022400
 8000714:	00000000 	.word	0x00000000

08000718 <Timer1_init>:


void Timer1_init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  // Setting time base
  htimer1.Instance = TIM1;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <Timer1_init+0x80>)
 8000720:	4a1e      	ldr	r2, [pc, #120]	; (800079c <Timer1_init+0x84>)
 8000722:	601a      	str	r2, [r3, #0]
  htimer1.Init.Period = 7-1;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <Timer1_init+0x80>)
 8000726:	2206      	movs	r2, #6
 8000728:	60da      	str	r2, [r3, #12]
  htimer1.Init.Prescaler = 0;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <Timer1_init+0x80>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]


  if(HAL_TIM_PWM_Init(&htimer1)!= HAL_OK)
 8000730:	4819      	ldr	r0, [pc, #100]	; (8000798 <Timer1_init+0x80>)
 8000732:	f003 fa95 	bl	8003c60 <HAL_TIM_PWM_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <Timer1_init+0x28>
  {
	  Error_Handler();
 800073c:	f000 faea 	bl	8000d14 <Error_Handler>
  }

  TIM_OC_InitTypeDef tim1PWM_init;
  memset(&tim1PWM_init,0,sizeof(tim1PWM_init));
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	221c      	movs	r2, #28
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f006 fda0 	bl	800728c <memset>
  tim1PWM_init.OCMode = TIM_OCMODE_PWM1;
 800074c:	2360      	movs	r3, #96	; 0x60
 800074e:	607b      	str	r3, [r7, #4]
  tim1PWM_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  tim1PWM_init.Pulse = htimer1.Init.Period * 0.9;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <Timer1_init+0x80>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000760:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000790 <Timer1_init+0x78>
 8000764:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800076c:	ee17 3a90 	vmov	r3, s15
 8000770:	60bb      	str	r3, [r7, #8]
  if(HAL_TIM_PWM_ConfigChannel(&htimer1, &tim1PWM_init, TIM_CHANNEL_1) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <Timer1_init+0x80>)
 800077a:	f003 fc15 	bl	8003fa8 <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <Timer1_init+0x70>
  {
	Error_Handler();
 8000784:	f000 fac6 	bl	8000d14 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	cccccccd 	.word	0xcccccccd
 8000794:	3feccccc 	.word	0x3feccccc
 8000798:	200000f8 	.word	0x200000f8
 800079c:	40010000 	.word	0x40010000

080007a0 <Timer8_init>:


void Timer8_init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0

	  // Setting time base
	  htimer8.Instance = TIM8;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <Timer8_init+0x78>)
 80007a8:	4a1c      	ldr	r2, [pc, #112]	; (800081c <Timer8_init+0x7c>)
 80007aa:	601a      	str	r2, [r3, #0]
	  htimer8.Init.Period = 7-1;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <Timer8_init+0x78>)
 80007ae:	2206      	movs	r2, #6
 80007b0:	60da      	str	r2, [r3, #12]
	  htimer8.Init.Prescaler = 0;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <Timer8_init+0x78>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]


	  if(HAL_TIM_PWM_Init(&htimer8)!= HAL_OK)
 80007b8:	4817      	ldr	r0, [pc, #92]	; (8000818 <Timer8_init+0x78>)
 80007ba:	f003 fa51 	bl	8003c60 <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <Timer8_init+0x28>
	  {
		  Error_Handler();
 80007c4:	f000 faa6 	bl	8000d14 <Error_Handler>
	  }

	  TIM_OC_InitTypeDef tim8PWM_init;
	  memset(&tim8PWM_init,0,sizeof(tim8PWM_init));
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	221c      	movs	r2, #28
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f006 fd5c 	bl	800728c <memset>
	  tim8PWM_init.OCMode = TIM_OCMODE_PWM1;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	607b      	str	r3, [r7, #4]
	  tim8PWM_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
	  tim8PWM_init.Pulse = htimer8.Init.Period * 0.5;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <Timer8_init+0x78>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007e8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80007ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007f4:	ee17 3a90 	vmov	r3, s15
 80007f8:	60bb      	str	r3, [r7, #8]
	  if(HAL_TIM_PWM_ConfigChannel(&htimer8, &tim8PWM_init, TIM_CHANNEL_2) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2204      	movs	r2, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <Timer8_init+0x78>)
 8000802:	f003 fbd1 	bl	8003fa8 <HAL_TIM_PWM_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <Timer8_init+0x70>
	  {
		Error_Handler();
 800080c:	f000 fa82 	bl	8000d14 <Error_Handler>
	  }


}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000b8 	.word	0x200000b8
 800081c:	40010400 	.word	0x40010400

08000820 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b090      	sub	sp, #64	; 0x40
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim1OC_ch_GPIOs;
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000828:	4b30      	ldr	r3, [pc, #192]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 800082a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800082e:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 800083a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]

	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	4a27      	ldr	r2, [pc, #156]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]
	tim1OC_ch_GPIOs.Pin = GPIO_PIN_1;
 8000864:	2302      	movs	r3, #2
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
	tim1OC_ch_GPIOs.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
	tim1OC_ch_GPIOs.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
	tim1OC_ch_GPIOs.Speed = GPIO_SPEED_FREQ_HIGH;
 8000870:	2302      	movs	r3, #2
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
	tim1OC_ch_GPIOs.Alternate = GPIO_AF1_TIM1;
 8000874:	2301      	movs	r3, #1
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOK, &tim1OC_ch_GPIOs);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <HAL_TIM_PWM_MspInit+0xd0>)
 8000880:	f000 fcba 	bl	80011f8 <HAL_GPIO_Init>
//	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);



	GPIO_InitTypeDef tim8OC_ch_GPIOs;
	__HAL_RCC_TIM8_CLK_ENABLE();
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 8000886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 8000896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 80008aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_TIM_PWM_MspInit+0xcc>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
	tim8OC_ch_GPIOs.Pin = GPIO_PIN_10;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61bb      	str	r3, [r7, #24]
	tim8OC_ch_GPIOs.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61fb      	str	r3, [r7, #28]
	tim8OC_ch_GPIOs.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
	tim8OC_ch_GPIOs.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	2302      	movs	r3, #2
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	tim8OC_ch_GPIOs.Alternate = GPIO_AF3_TIM8;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOJ, &tim8OC_ch_GPIOs);
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_TIM_PWM_MspInit+0xd4>)
 80008de:	f000 fc8b 	bl	80011f8 <HAL_GPIO_Init>
//	HAL_NVIC_SetPriority(TIM1_CC_IRQn, 15, 0);
//	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);


}
 80008e2:	bf00      	nop
 80008e4:	3740      	adds	r7, #64	; 0x40
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58022800 	.word	0x58022800
 80008f4:	58022400 	.word	0x58022400

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000902:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000904:	bf00      	nop
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <main+0xd4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d004      	beq.n	800091c <main+0x24>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	dcf4      	bgt.n	8000906 <main+0xe>
  if ( timeout < 0 )
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	da01      	bge.n	8000926 <main+0x2e>
  {
  Error_Handler();
 8000922:	f000 f9f7 	bl	8000d14 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f000 fac3 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f857 	bl	80009dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <main+0xd4>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	4a25      	ldr	r2, [pc, #148]	; (80009cc <main+0xd4>)
 8000936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <main+0xd4>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800094c:	2000      	movs	r0, #0
 800094e:	f000 fe1d 	bl	800158c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000952:	2100      	movs	r1, #0
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fe33 	bl	80015c0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800095a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000960:	bf00      	nop
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <main+0xd4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d104      	bne.n	8000978 <main+0x80>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	dcf4      	bgt.n	8000962 <main+0x6a>
if ( timeout < 0 )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da01      	bge.n	8000982 <main+0x8a>
{
Error_Handler();
 800097e:	f000 f9c9 	bl	8000d14 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 f975 	bl	8000c70 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000986:	f000 f927 	bl	8000bd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Led_init();
 800098a:	f7ff fe95 	bl	80006b8 <Led_init>
  /* USER CODE END 2 */
  Timer1_init();
 800098e:	f7ff fec3 	bl	8000718 <Timer1_init>
 Timer8_init();
 8000992:	f7ff ff05 	bl	80007a0 <Timer8_init>
  HAL_TIM_PWM_Start(&htimer1, TIM_CHANNEL_1);
 8000996:	2100      	movs	r1, #0
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <main+0xd8>)
 800099a:	f003 f98d 	bl	8003cb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htimer8, TIM_CHANNEL_2);
 800099e:	2104      	movs	r1, #4
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <main+0xdc>)
 80009a2:	f003 f989 	bl	8003cb8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_0, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2101      	movs	r1, #1
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <main+0xe0>)
 80009ac:	f000 fdd4 	bl	8001558 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80009b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b4:	f000 fb0e 	bl	8000fd4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_0, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <main+0xe0>)
 80009be:	f000 fdcb 	bl	8001558 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80009c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c6:	f000 fb05 	bl	8000fd4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_0, GPIO_PIN_SET);
 80009ca:	e7ec      	b.n	80009a6 <main+0xae>
 80009cc:	58024400 	.word	0x58024400
 80009d0:	200000f8 	.word	0x200000f8
 80009d4:	200000b8 	.word	0x200000b8
 80009d8:	58022400 	.word	0x58022400

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0cc      	sub	sp, #304	; 0x130
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009e6:	224c      	movs	r2, #76	; 0x4c
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f006 fc4e 	bl	800728c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009f4:	2220      	movs	r2, #32
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f006 fc47 	bl	800728c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4618      	mov	r0, r3
 8000a02:	23c0      	movs	r3, #192	; 0xc0
 8000a04:	461a      	mov	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f006 fc40 	bl	800728c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	f000 fdeb 	bl	80015e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	4b6b      	ldr	r3, [pc, #428]	; (8000bc8 <SystemClock_Config+0x1ec>)
 8000a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1c:	4a6a      	ldr	r2, [pc, #424]	; (8000bc8 <SystemClock_Config+0x1ec>)
 8000a1e:	f023 0301 	bic.w	r3, r3, #1
 8000a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a24:	4b68      	ldr	r3, [pc, #416]	; (8000bc8 <SystemClock_Config+0x1ec>)
 8000a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a28:	f003 0201 	and.w	r2, r3, #1
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	4b66      	ldr	r3, [pc, #408]	; (8000bcc <SystemClock_Config+0x1f0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a65      	ldr	r2, [pc, #404]	; (8000bcc <SystemClock_Config+0x1f0>)
 8000a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b63      	ldr	r3, [pc, #396]	; (8000bcc <SystemClock_Config+0x1f0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a44:	463b      	mov	r3, r7
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	463b      	mov	r3, r7
 8000a4a:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4c:	bf00      	nop
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <SystemClock_Config+0x1f0>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a5a:	d1f8      	bne.n	8000a4e <SystemClock_Config+0x72>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000a5c:	4b5c      	ldr	r3, [pc, #368]	; (8000bd0 <SystemClock_Config+0x1f4>)
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	4a5b      	ldr	r2, [pc, #364]	; (8000bd0 <SystemClock_Config+0x1f4>)
 8000a62:	f023 0303 	bic.w	r3, r3, #3
 8000a66:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a68:	230a      	movs	r3, #10
 8000a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000a92:	2381      	movs	r3, #129	; 0x81
 8000a94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fdeb 	bl	800169c <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000acc:	f000 f922 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	233f      	movs	r3, #63	; 0x3f
 8000ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f9a0 	bl	8001e4c <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000b12:	f000 f8ff 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <SystemClock_Config+0x1f8>)
 8000b1a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPDIFRX
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CEC
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2220      	movs	r2, #32
 8000b20:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2281      	movs	r2, #129	; 0x81
 8000b26:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2202      	movs	r2, #2
 8000b32:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2202      	movs	r2, #2
 8000b38:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2240      	movs	r2, #64	; 0x40
 8000b3e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	665a      	str	r2, [r3, #100]	; 0x64
  PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fd41 	bl	8002628 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x1d4>
  {
    Error_Handler();
 8000bac:	f000 f8b2 	bl	8000d14 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000bb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f001 fafe 	bl	80021b8 <HAL_RCC_MCOConfig>
}
 8000bbc:	bf00      	nop
 8000bbe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58000400 	.word	0x58000400
 8000bcc:	58024800 	.word	0x58024800
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	0bc93103 	.word	0x0bc93103

08000bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <MX_USART1_UART_Init+0x94>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c22:	f003 feb6 	bl	8004992 <HAL_UART_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 f872 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c34:	f006 fa21 	bl	800707a <HAL_UARTEx_SetTxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 f869 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c46:	f006 fa56 	bl	80070f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 f860 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c56:	f006 f9d7 	bl	8007008 <HAL_UARTEx_DisableFifoMode>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f858 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000002c 	.word	0x2000002c
 8000c6c:	40011000 	.word	0x40011000

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000cfe:	f000 fa7b 	bl	80011f8 <HAL_GPIO_Init>

}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58020000 	.word	0x58020000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_MspInit+0x30>)
 8000d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x30>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x30>)
 8000d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	58024400 	.word	0x58024400

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <HAL_UART_MspInit+0x88>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12e      	bne.n	8000dd8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_UART_MspInit+0x8c>)
 8000d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d80:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0x8c>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_UART_MspInit+0x8c>)
 8000d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_UART_MspInit+0x8c>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0x8c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_UART_MspInit+0x8c>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000db6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_UART_MspInit+0x90>)
 8000dd4:	f000 fa10 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40011000 	.word	0x40011000
 8000de4:	58024400 	.word	0x58024400
 8000de8:	58020000 	.word	0x58020000

08000dec <TIM1_CC_IRQHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void TIM1_CC_IRQHandler()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

HAL_TIM_IRQHandler(&htimer1);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM1_CC_IRQHandler+0x10>)
 8000df2:	f002 ffb9 	bl	8003d68 <HAL_TIM_IRQHandler>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000f8 	.word	0x200000f8

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 f89e 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e62:	e003      	b.n	8000e6c <LoopCopyDataInit>

08000e64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e6a:	3104      	adds	r1, #4

08000e6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e6c:	480b      	ldr	r0, [pc, #44]	; (8000e9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e74:	d3f6      	bcc.n	8000e64 <CopyDataInit>
  ldr  r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e78:	e002      	b.n	8000e80 <LoopFillZerobss>

08000e7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e7c:	f842 3b04 	str.w	r3, [r2], #4

08000e80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e84:	d3f9      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e86:	f7ff fba7 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f006 f9db 	bl	8007244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fd33 	bl	80008f8 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e98:	080072e4 	.word	0x080072e4
  ldr  r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ea0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000ea4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ea8:	2000013c 	.word	0x2000013c

08000eac <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC3_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f96c 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ebc:	f001 f9e6 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_Init+0x68>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	f003 030f 	and.w	r3, r3, #15
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <HAL_Init+0x6c>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_Init+0x68>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_Init+0x6c>)
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_Init+0x70>)
 8000ef2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <HAL_Init+0x74>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f814 	bl	8000f28 <HAL_InitTick>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e002      	b.n	8000f10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0a:	f7ff ff0b 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	080072c4 	.word	0x080072c4
 8000f20:	20000004 	.word	0x20000004
 8000f24:	20000000 	.word	0x20000000

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_InitTick+0x60>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e021      	b.n	8000f80 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_InitTick+0x64>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_InitTick+0x60>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f943 	bl	80011de <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f91b 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x68>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000008 	.word	0x20000008

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	20000138 	.word	0x20000138

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000138 	.word	0x20000138

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_Delay+0x40>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000000c 	.word	0x2000000c

08001018 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetREVID+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0c1b      	lsrs	r3, r3, #16
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	5c001000 	.word	0x5c001000

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	4313      	orrs	r3, r2
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0000 	.word	0x05fa0000

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff47 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff90 	bl	80010e8 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb2 	bl	8001150 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001206:	4b89      	ldr	r3, [pc, #548]	; (800142c <HAL_GPIO_Init+0x234>)
 8001208:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800120a:	e194      	b.n	8001536 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8186 	beq.w	8001530 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d00b      	beq.n	8001244 <HAL_GPIO_Init+0x4c>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001238:	2b11      	cmp	r3, #17
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b12      	cmp	r3, #18
 8001242:	d130      	bne.n	80012a6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127a:	2201      	movs	r2, #1
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	f003 0201 	and.w	r2, r3, #1
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0xee>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d123      	bne.n	800132e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	69b9      	ldr	r1, [r7, #24]
 800132a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0203 	and.w	r2, r3, #3
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 80e0 	beq.w	8001530 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x238>)
 8001372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001376:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <HAL_GPIO_Init+0x238>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_GPIO_Init+0x238>)
 8001382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138e:	4a29      	ldr	r2, [pc, #164]	; (8001434 <HAL_GPIO_Init+0x23c>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a20      	ldr	r2, [pc, #128]	; (8001438 <HAL_GPIO_Init+0x240>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d052      	beq.n	8001460 <HAL_GPIO_Init+0x268>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_GPIO_Init+0x244>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d031      	beq.n	8001426 <HAL_GPIO_Init+0x22e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_GPIO_Init+0x248>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x22a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <HAL_GPIO_Init+0x24c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x226>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <HAL_GPIO_Init+0x250>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x222>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <HAL_GPIO_Init+0x254>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x21e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <HAL_GPIO_Init+0x258>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x21a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_GPIO_Init+0x25c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x216>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_GPIO_Init+0x260>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x212>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_GPIO_Init+0x264>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x20e>
 8001402:	2309      	movs	r3, #9
 8001404:	e02d      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 8001406:	230a      	movs	r3, #10
 8001408:	e02b      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 800140a:	2308      	movs	r3, #8
 800140c:	e029      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 800140e:	2307      	movs	r3, #7
 8001410:	e027      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 8001412:	2306      	movs	r3, #6
 8001414:	e025      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 8001416:	2305      	movs	r3, #5
 8001418:	e023      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 800141a:	2304      	movs	r3, #4
 800141c:	e021      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 800141e:	2303      	movs	r3, #3
 8001420:	e01f      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 8001422:	2302      	movs	r3, #2
 8001424:	e01d      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 8001426:	2301      	movs	r3, #1
 8001428:	e01b      	b.n	8001462 <HAL_GPIO_Init+0x26a>
 800142a:	bf00      	nop
 800142c:	58000080 	.word	0x58000080
 8001430:	58024400 	.word	0x58024400
 8001434:	58000400 	.word	0x58000400
 8001438:	58020000 	.word	0x58020000
 800143c:	58020400 	.word	0x58020400
 8001440:	58020800 	.word	0x58020800
 8001444:	58020c00 	.word	0x58020c00
 8001448:	58021000 	.word	0x58021000
 800144c:	58021400 	.word	0x58021400
 8001450:	58021800 	.word	0x58021800
 8001454:	58021c00 	.word	0x58021c00
 8001458:	58022000 	.word	0x58022000
 800145c:	58022400 	.word	0x58022400
 8001460:	2300      	movs	r3, #0
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	f002 0203 	and.w	r2, r2, #3
 8001468:	0092      	lsls	r2, r2, #2
 800146a:	4093      	lsls	r3, r2
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001472:	4938      	ldr	r1, [pc, #224]	; (8001554 <HAL_GPIO_Init+0x35c>)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	3301      	adds	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	f47f ae63 	bne.w	800120c <HAL_GPIO_Init+0x14>
  }
}
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	58000400 	.word	0x58000400

08001558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
 8001564:	4613      	mov	r3, r2
 8001566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001574:	e003      	b.n	800157e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	041a      	lsls	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	619a      	str	r2, [r3, #24]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001594:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_HSEM_FastTake+0x2c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3320      	adds	r3, #32
 800159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_HSEM_FastTake+0x30>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d101      	bne.n	80015a8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e000      	b.n	80015aa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	58026400 	.word	0x58026400
 80015bc:	80000300 	.word	0x80000300

080015c0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80015ca:	4906      	ldr	r1, [pc, #24]	; (80015e4 <HAL_HSEM_Release+0x24>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	58026400 	.word	0x58026400

080015e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d00a      	beq.n	8001612 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	d001      	beq.n	800160e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e040      	b.n	8001690 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e03e      	b.n	8001690 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800161a:	491f      	ldr	r1, [pc, #124]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4313      	orrs	r3, r2
 8001620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001622:	f7ff fccb 	bl	8000fbc <HAL_GetTick>
 8001626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001628:	e009      	b.n	800163e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800162a:	f7ff fcc7 	bl	8000fbc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001638:	d901      	bls.n	800163e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e028      	b.n	8001690 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164a:	d1ee      	bne.n	800162a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b1e      	cmp	r3, #30
 8001650:	d008      	beq.n	8001664 <HAL_PWREx_ConfigSupply+0x7c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b2e      	cmp	r3, #46	; 0x2e
 8001656:	d005      	beq.n	8001664 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b1d      	cmp	r3, #29
 800165c:	d002      	beq.n	8001664 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b2d      	cmp	r3, #45	; 0x2d
 8001662:	d114      	bne.n	800168e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001664:	f7ff fcaa 	bl	8000fbc <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800166a:	e009      	b.n	8001680 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800166c:	f7ff fca6 	bl	8000fbc <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167a:	d901      	bls.n	8001680 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e007      	b.n	8001690 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_PWREx_ConfigSupply+0xb0>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d1ee      	bne.n	800166c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	58024800 	.word	0x58024800

0800169c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e3c4      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8087 	beq.w	80017ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016bc:	4ba2      	ldr	r3, [pc, #648]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016c6:	4ba0      	ldr	r3, [pc, #640]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d007      	beq.n	80016e2 <HAL_RCC_OscConfig+0x46>
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	2b18      	cmp	r3, #24
 80016d6:	d110      	bne.n	80016fa <HAL_RCC_OscConfig+0x5e>
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d10b      	bne.n	80016fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	4b99      	ldr	r3, [pc, #612]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d06c      	beq.n	80017c8 <HAL_RCC_OscConfig+0x12c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d168      	bne.n	80017c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e39e      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x76>
 8001704:	4b90      	ldr	r3, [pc, #576]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a8f      	ldr	r2, [pc, #572]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e02e      	b.n	8001770 <HAL_RCC_OscConfig+0xd4>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x98>
 800171a:	4b8b      	ldr	r3, [pc, #556]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a8a      	ldr	r2, [pc, #552]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a87      	ldr	r2, [pc, #540]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e01d      	b.n	8001770 <HAL_RCC_OscConfig+0xd4>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0xbc>
 800173e:	4b82      	ldr	r3, [pc, #520]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a81      	ldr	r2, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7e      	ldr	r2, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0xd4>
 8001758:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a7a      	ldr	r2, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b78      	ldr	r3, [pc, #480]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a77      	ldr	r2, [pc, #476]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fc20 	bl	8000fbc <HAL_GetTick>
 800177c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc1c 	bl	8000fbc <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e352      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001792:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0xe4>
 800179e:	e014      	b.n	80017ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fc0c 	bl	8000fbc <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fc08 	bl	8000fbc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e33e      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x10c>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8092 	beq.w	80018fc <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_RCC_OscConfig+0x162>
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	2b18      	cmp	r3, #24
 80017f2:	d12d      	bne.n	8001850 <HAL_RCC_OscConfig+0x1b4>
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d128      	bne.n	8001850 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fe:	4b52      	ldr	r3, [pc, #328]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x17a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e310      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	f7ff fbff 	bl	8001018 <HAL_GetREVID>
 800181a:	4602      	mov	r2, r0
 800181c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001820:	429a      	cmp	r2, r3
 8001822:	d80a      	bhi.n	800183a <HAL_RCC_OscConfig+0x19e>
 8001824:	4b48      	ldr	r3, [pc, #288]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	031b      	lsls	r3, r3, #12
 8001832:	4945      	ldr	r1, [pc, #276]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	e060      	b.n	80018fc <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	061b      	lsls	r3, r3, #24
 8001848:	493f      	ldr	r1, [pc, #252]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800184e:	e055      	b.n	80018fc <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d038      	beq.n	80018ca <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001858:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 0219 	bic.w	r2, r3, #25
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4938      	ldr	r1, [pc, #224]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff fba7 	bl	8000fbc <HAL_GetTick>
 800186e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fba3 	bl	8000fbc <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e2d9      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	f7ff fbc2 	bl	8001018 <HAL_GetREVID>
 8001894:	4602      	mov	r2, r0
 8001896:	f241 0303 	movw	r3, #4099	; 0x1003
 800189a:	429a      	cmp	r2, r3
 800189c:	d80a      	bhi.n	80018b4 <HAL_RCC_OscConfig+0x218>
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	031b      	lsls	r3, r3, #12
 80018ac:	4926      	ldr	r1, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
 80018b2:	e023      	b.n	80018fc <HAL_RCC_OscConfig+0x260>
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	4921      	ldr	r1, [pc, #132]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
 80018c8:	e018      	b.n	80018fc <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff fb71 	bl	8000fbc <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fb6d 	bl	8000fbc <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e2a3      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8091 	beq.w	8001a2c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001912:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d007      	beq.n	8001930 <HAL_RCC_OscConfig+0x294>
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b18      	cmp	r3, #24
 8001924:	d12f      	bne.n	8001986 <HAL_RCC_OscConfig+0x2ea>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d12a      	bne.n	8001986 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_OscConfig+0x2ac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_RCC_OscConfig+0x2b0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b80      	cmp	r3, #128	; 0x80
 8001942:	d003      	beq.n	800194c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e277      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
 8001948:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800194c:	f7ff fb64 	bl	8001018 <HAL_GetREVID>
 8001950:	4602      	mov	r2, r0
 8001952:	f241 0303 	movw	r3, #4099	; 0x1003
 8001956:	429a      	cmp	r2, r3
 8001958:	d80a      	bhi.n	8001970 <HAL_RCC_OscConfig+0x2d4>
 800195a:	4ba2      	ldr	r3, [pc, #648]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	069b      	lsls	r3, r3, #26
 8001968:	499e      	ldr	r1, [pc, #632]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800196e:	e05d      	b.n	8001a2c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001970:	4b9c      	ldr	r3, [pc, #624]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	4999      	ldr	r1, [pc, #612]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001980:	4313      	orrs	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001984:	e052      	b.n	8001a2c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d035      	beq.n	80019fa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800198e:	4b95      	ldr	r3, [pc, #596]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a94      	ldr	r2, [pc, #592]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fb0f 	bl	8000fbc <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019a2:	f7ff fb0b 	bl	8000fbc <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e241      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019b4:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019c0:	f7ff fb2a 	bl	8001018 <HAL_GetREVID>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d80a      	bhi.n	80019e4 <HAL_RCC_OscConfig+0x348>
 80019ce:	4b85      	ldr	r3, [pc, #532]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	069b      	lsls	r3, r3, #26
 80019dc:	4981      	ldr	r1, [pc, #516]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
 80019e2:	e023      	b.n	8001a2c <HAL_RCC_OscConfig+0x390>
 80019e4:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	497c      	ldr	r1, [pc, #496]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
 80019f8:	e018      	b.n	8001a2c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019fa:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a79      	ldr	r2, [pc, #484]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff fad9 	bl	8000fbc <HAL_GetTick>
 8001a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fad5 	bl	8000fbc <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e20b      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a20:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d036      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d019      	beq.n	8001a74 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a40:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a44:	4a67      	ldr	r2, [pc, #412]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fab6 	bl	8000fbc <HAL_GetTick>
 8001a50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fab2 	bl	8000fbc <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1e8      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x3b8>
 8001a72:	e018      	b.n	8001aa6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a74:	4b5b      	ldr	r3, [pc, #364]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fa9c 	bl	8000fbc <HAL_GetTick>
 8001a84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fa98 	bl	8000fbc <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1ce      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a9a:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d036      	beq.n	8001b20 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d019      	beq.n	8001aee <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aba:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a49      	ldr	r2, [pc, #292]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fa79 	bl	8000fbc <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ace:	f7ff fa75 	bl	8000fbc <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1ab      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ae0:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x432>
 8001aec:	e018      	b.n	8001b20 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aee:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a3c      	ldr	r2, [pc, #240]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001afa:	f7ff fa5f 	bl	8000fbc <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b02:	f7ff fa5b 	bl	8000fbc <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e191      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8086 	beq.w	8001c3a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_RCC_OscConfig+0x54c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <HAL_RCC_OscConfig+0x54c>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b3a:	f7ff fa3f 	bl	8000fbc <HAL_GetTick>
 8001b3e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7ff fa3b 	bl	8000fbc <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e171      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCC_OscConfig+0x54c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4da>
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	e02d      	b.n	8001bd2 <HAL_RCC_OscConfig+0x536>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4fc>
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b82:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	e01c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x536>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCC_OscConfig+0x51e>
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x536>
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x548>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01a      	beq.n	8001c10 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bda:	f7ff f9ef 	bl	8000fbc <HAL_GetTick>
 8001bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001be0:	e00f      	b.n	8001c02 <HAL_RCC_OscConfig+0x566>
 8001be2:	bf00      	nop
 8001be4:	58024400 	.word	0x58024400
 8001be8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff f9e6 	bl	8000fbc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e11a      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c02:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0ee      	beq.n	8001bec <HAL_RCC_OscConfig+0x550>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f9d4 	bl	8000fbc <HAL_GetTick>
 8001c14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f9d0 	bl	8000fbc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e104      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c2e:	4b84      	ldr	r3, [pc, #528]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80f9 	beq.w	8001e36 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c44:	4b7e      	ldr	r3, [pc, #504]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c4c:	2b18      	cmp	r3, #24
 8001c4e:	f000 80b4 	beq.w	8001dba <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f040 8095 	bne.w	8001d86 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f9a8 	bl	8000fbc <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f9a4 	bl	8000fbc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e0da      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c82:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8e:	4b6c      	ldr	r3, [pc, #432]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c92:	4b6c      	ldr	r3, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x7a8>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	4967      	ldr	r1, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	628b      	str	r3, [r1, #40]	; 0x28
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	3b01      	subs	r3, #1
 8001cae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	025b      	lsls	r3, r3, #9
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	061b      	lsls	r3, r3, #24
 8001cd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001cd8:	4959      	ldr	r1, [pc, #356]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001cde:	4b58      	ldr	r3, [pc, #352]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	4a57      	ldr	r2, [pc, #348]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cea:	4b55      	ldr	r3, [pc, #340]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <HAL_RCC_OscConfig+0x7ac>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cf6:	00d2      	lsls	r2, r2, #3
 8001cf8:	4951      	ldr	r1, [pc, #324]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	f023 020c 	bic.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	494d      	ldr	r1, [pc, #308]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d10:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f023 0202 	bic.w	r2, r3, #2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	4948      	ldr	r1, [pc, #288]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	4a46      	ldr	r2, [pc, #280]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	4a43      	ldr	r2, [pc, #268]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	4a40      	ldr	r2, [pc, #256]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	4a3d      	ldr	r2, [pc, #244]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a3a      	ldr	r2, [pc, #232]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7ff f92d 	bl	8000fbc <HAL_GetTick>
 8001d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d66:	f7ff f929 	bl	8000fbc <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e05f      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x6ca>
 8001d84:	e057      	b.n	8001e36 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff f913 	bl	8000fbc <HAL_GetTick>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff f90f 	bl	8000fbc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e045      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x6fe>
 8001db8:	e03d      	b.n	8001e36 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_RCC_OscConfig+0x7a4>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d031      	beq.n	8001e32 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d12a      	bne.n	8001e32 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d122      	bne.n	8001e32 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d11a      	bne.n	8001e32 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	0a5b      	lsrs	r3, r3, #9
 8001e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e08:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d111      	bne.n	8001e32 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d108      	bne.n	8001e32 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	0e1b      	lsrs	r3, r3, #24
 8001e24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3730      	adds	r7, #48	; 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	58024400 	.word	0x58024400
 8001e44:	fffffc0c 	.word	0xfffffc0c
 8001e48:	ffff0007 	.word	0xffff0007

08001e4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e19c      	b.n	800219a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b8a      	ldr	r3, [pc, #552]	; (800208c <HAL_RCC_ClockConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d910      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b87      	ldr	r3, [pc, #540]	; (800208c <HAL_RCC_ClockConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 020f 	bic.w	r2, r3, #15
 8001e76:	4985      	ldr	r1, [pc, #532]	; (800208c <HAL_RCC_ClockConfig+0x240>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b83      	ldr	r3, [pc, #524]	; (800208c <HAL_RCC_ClockConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e184      	b.n	800219a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	4b7b      	ldr	r3, [pc, #492]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d908      	bls.n	8001ebe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001eac:	4b78      	ldr	r3, [pc, #480]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4975      	ldr	r1, [pc, #468]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	496a      	ldr	r1, [pc, #424]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d010      	beq.n	8001f1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	4b64      	ldr	r3, [pc, #400]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d908      	bls.n	8001f1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	495e      	ldr	r1, [pc, #376]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d010      	beq.n	8001f48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d908      	bls.n	8001f48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f36:	4b56      	ldr	r3, [pc, #344]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4953      	ldr	r1, [pc, #332]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d010      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d908      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f023 020f 	bic.w	r2, r3, #15
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4947      	ldr	r1, [pc, #284]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d055      	beq.n	800202e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f82:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4940      	ldr	r1, [pc, #256]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d121      	bne.n	8001fec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0f6      	b.n	800219a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d115      	bne.n	8001fec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0ea      	b.n	800219a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0de      	b.n	800219a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d6      	b.n	800219a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f023 0207 	bic.w	r2, r3, #7
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4925      	ldr	r1, [pc, #148]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffe:	f7fe ffdd 	bl	8000fbc <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002004:	e00a      	b.n	800201c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7fe ffd9 	bl	8000fbc <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0be      	b.n	800219a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	429a      	cmp	r2, r3
 800202c:	d1eb      	bne.n	8002006 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d010      	beq.n	800205c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	429a      	cmp	r2, r3
 8002048:	d208      	bcs.n	800205c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f023 020f 	bic.w	r2, r3, #15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_RCC_ClockConfig+0x244>)
 8002058:	4313      	orrs	r3, r2
 800205a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d214      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_RCC_ClockConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 020f 	bic.w	r2, r3, #15
 8002072:	4906      	ldr	r1, [pc, #24]	; (800208c <HAL_RCC_ClockConfig+0x240>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_RCC_ClockConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e086      	b.n	800219a <HAL_RCC_ClockConfig+0x34e>
 800208c:	52002000 	.word	0x52002000
 8002090:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d010      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d208      	bcs.n	80020c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b0:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	4939      	ldr	r1, [pc, #228]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d010      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020da:	429a      	cmp	r2, r3
 80020dc:	d208      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	492e      	ldr	r1, [pc, #184]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002108:	429a      	cmp	r2, r3
 800210a:	d208      	bcs.n	800211e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4922      	ldr	r1, [pc, #136]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 800211a:	4313      	orrs	r3, r2
 800211c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002136:	429a      	cmp	r2, r3
 8002138:	d208      	bcs.n	800214c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4917      	ldr	r1, [pc, #92]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 8002148:	4313      	orrs	r3, r2
 800214a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800214c:	f000 f89e 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8002150:	4601      	mov	r1, r0
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <HAL_RCC_ClockConfig+0x35c>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa21 f303 	lsr.w	r3, r1, r3
 8002168:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_ClockConfig+0x358>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_RCC_ClockConfig+0x35c>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x360>)
 8002182:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x364>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x368>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe feca 	bl	8000f28 <HAL_InitTick>
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	58024400 	.word	0x58024400
 80021a8:	080072c4 	.word	0x080072c4
 80021ac:	20000004 	.word	0x20000004
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000008 	.word	0x20000008

080021b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d12a      	bne.n	8002220 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d0:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	481f      	ldr	r0, [pc, #124]	; (8002284 <HAL_RCC_MCOConfig+0xcc>)
 8002206:	f7fe fff7 	bl	80011f8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	430b      	orrs	r3, r1
 8002218:	4919      	ldr	r1, [pc, #100]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800221e:	e02a      	b.n	8002276 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 8002222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800223e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	480b      	ldr	r0, [pc, #44]	; (8002288 <HAL_RCC_MCOConfig+0xd0>)
 800225c:	f7fe ffcc 	bl	80011f8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	01d9      	lsls	r1, r3, #7
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	430b      	orrs	r3, r1
 8002270:	4903      	ldr	r1, [pc, #12]	; (8002280 <HAL_RCC_MCOConfig+0xc8>)
 8002272:	4313      	orrs	r3, r2
 8002274:	610b      	str	r3, [r1, #16]
}
 8002276:	bf00      	nop
 8002278:	3730      	adds	r7, #48	; 0x30
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	58024400 	.word	0x58024400
 8002284:	58020000 	.word	0x58020000
 8002288:	58020800 	.word	0x58020800

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002292:	4baf      	ldr	r3, [pc, #700]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229a:	2b18      	cmp	r3, #24
 800229c:	f200 814e 	bhi.w	800253c <HAL_RCC_GetSysClockFreq+0x2b0>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	0800230d 	.word	0x0800230d
 80022ac:	0800253d 	.word	0x0800253d
 80022b0:	0800253d 	.word	0x0800253d
 80022b4:	0800253d 	.word	0x0800253d
 80022b8:	0800253d 	.word	0x0800253d
 80022bc:	0800253d 	.word	0x0800253d
 80022c0:	0800253d 	.word	0x0800253d
 80022c4:	0800253d 	.word	0x0800253d
 80022c8:	08002333 	.word	0x08002333
 80022cc:	0800253d 	.word	0x0800253d
 80022d0:	0800253d 	.word	0x0800253d
 80022d4:	0800253d 	.word	0x0800253d
 80022d8:	0800253d 	.word	0x0800253d
 80022dc:	0800253d 	.word	0x0800253d
 80022e0:	0800253d 	.word	0x0800253d
 80022e4:	0800253d 	.word	0x0800253d
 80022e8:	08002339 	.word	0x08002339
 80022ec:	0800253d 	.word	0x0800253d
 80022f0:	0800253d 	.word	0x0800253d
 80022f4:	0800253d 	.word	0x0800253d
 80022f8:	0800253d 	.word	0x0800253d
 80022fc:	0800253d 	.word	0x0800253d
 8002300:	0800253d 	.word	0x0800253d
 8002304:	0800253d 	.word	0x0800253d
 8002308:	0800233f 	.word	0x0800233f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800230c:	4b90      	ldr	r3, [pc, #576]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002318:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	4a8c      	ldr	r2, [pc, #560]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800232a:	e10a      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800232c:	4b89      	ldr	r3, [pc, #548]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800232e:	61bb      	str	r3, [r7, #24]
    break;
 8002330:	e107      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002334:	61bb      	str	r3, [r7, #24]
    break;
 8002336:	e104      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002338:	4b88      	ldr	r3, [pc, #544]	; (800255c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800233a:	61bb      	str	r3, [r7, #24]
    break;
 800233c:	e101      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800233e:	4b84      	ldr	r3, [pc, #528]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002348:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002352:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002354:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800235e:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002376:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80da 	beq.w	8002536 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d05a      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x1b2>
 8002388:	2b01      	cmp	r3, #1
 800238a:	d302      	bcc.n	8002392 <HAL_RCC_GetSysClockFreq+0x106>
 800238c:	2b02      	cmp	r3, #2
 800238e:	d078      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002390:	e099      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002392:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d02d      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	08db      	lsrs	r3, r3, #3
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	4a6a      	ldr	r2, [pc, #424]	; (8002554 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d0:	ee07 3a90 	vmov	s15, r3
 80023d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80023dc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002560 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023f8:	e087      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002404:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002564 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800240c:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800241c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002420:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002560 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800242c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800243c:	e065      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002448:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002568 <HAL_RCC_GetSysClockFreq+0x2dc>
 800244c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002460:	ed97 6a02 	vldr	s12, [r7, #8]
 8002464:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002560 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800246c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002480:	e043      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800256c <HAL_RCC_GetSysClockFreq+0x2e0>
 8002490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80024a8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002560 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024c4:	e021      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002568 <HAL_RCC_GetSysClockFreq+0x2dc>
 80024d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ec:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002560 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002508:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	0a5b      	lsrs	r3, r3, #9
 8002510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002514:	3301      	adds	r3, #1
 8002516:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002522:	edd7 6a07 	vldr	s13, [r7, #28]
 8002526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800252a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252e:	ee17 3a90 	vmov	r3, s15
 8002532:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002534:	e005      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
    break;
 800253a:	e002      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800253e:	61bb      	str	r3, [r7, #24]
    break;
 8002540:	bf00      	nop
  }

  return sysclockfreq;
 8002542:	69bb      	ldr	r3, [r7, #24]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3724      	adds	r7, #36	; 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	58024400 	.word	0x58024400
 8002554:	03d09000 	.word	0x03d09000
 8002558:	003d0900 	.word	0x003d0900
 800255c:	017d7840 	.word	0x017d7840
 8002560:	46000000 	.word	0x46000000
 8002564:	4c742400 	.word	0x4c742400
 8002568:	4a742400 	.word	0x4a742400
 800256c:	4bbebc20 	.word	0x4bbebc20

08002570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002576:	f7ff fe89 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800257a:	4601      	mov	r1, r0
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	fa21 f303 	lsr.w	r3, r1, r3
 8002592:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80025ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58024400 	.word	0x58024400
 80025c4:	080072c4 	.word	0x080072c4
 80025c8:	20000004 	.word	0x20000004
 80025cc:	20000000 	.word	0x20000000

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025d4:	f7ff ffcc 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025d8:	4601      	mov	r1, r0
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	58024400 	.word	0x58024400
 80025f8:	080072c4 	.word	0x080072c4

080025fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002600:	f7ff ffb6 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8002604:	4601      	mov	r1, r0
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	58024400 	.word	0x58024400
 8002624:	080072c4 	.word	0x080072c4

08002628 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002630:	2300      	movs	r3, #0
 8002632:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002634:	2300      	movs	r3, #0
 8002636:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d03d      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800264c:	d013      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800264e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002652:	d802      	bhi.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002658:	e01f      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800265a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800265e:	d013      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002664:	d01c      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002666:	e018      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002668:	4baf      	ldr	r3, [pc, #700]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	4aae      	ldr	r2, [pc, #696]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800266e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002672:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002674:	e015      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	2102      	movs	r1, #2
 800267c:	4618      	mov	r0, r3
 800267e:	f001 f98b 	bl	8003998 <RCCEx_PLL2_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002686:	e00c      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3324      	adds	r3, #36	; 0x24
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fa34 	bl	8003afc <RCCEx_PLL3_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002698:	e003      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
      break;
 800269e:	e000      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80026a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026a8:	4b9f      	ldr	r3, [pc, #636]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b4:	499c      	ldr	r1, [pc, #624]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	650b      	str	r3, [r1, #80]	; 0x50
 80026ba:	e001      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d03d      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d826      	bhi.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80026d4:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	080026f1 	.word	0x080026f1
 80026e0:	080026ff 	.word	0x080026ff
 80026e4:	08002711 	.word	0x08002711
 80026e8:	08002729 	.word	0x08002729
 80026ec:	08002729 	.word	0x08002729
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f0:	4b8d      	ldr	r3, [pc, #564]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	4a8c      	ldr	r2, [pc, #560]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026fc:	e015      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f001 f947 	bl	8003998 <RCCEx_PLL2_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800270e:	e00c      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3324      	adds	r3, #36	; 0x24
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f001 f9f0 	bl	8003afc <RCCEx_PLL3_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002720:	e003      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
      break;
 8002726:	e000      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002730:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002734:	f023 0207 	bic.w	r2, r3, #7
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	497a      	ldr	r1, [pc, #488]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800273e:	4313      	orrs	r3, r2
 8002740:	650b      	str	r3, [r1, #80]	; 0x50
 8002742:	e001      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03e      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d01c      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800275c:	2b80      	cmp	r3, #128	; 0x80
 800275e:	d804      	bhi.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d00d      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002768:	e01e      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800276a:	2bc0      	cmp	r3, #192	; 0xc0
 800276c:	d01f      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x186>
 800276e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002772:	d01e      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002774:	e018      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002776:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002782:	e017      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f001 f904 	bl	8003998 <RCCEx_PLL2_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002794:	e00e      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3324      	adds	r3, #36	; 0x24
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f001 f9ad 	bl	8003afc <RCCEx_PLL3_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027a6:	e005      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	75fb      	strb	r3, [r7, #23]
      break;
 80027ac:	e002      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80027ae:	bf00      	nop
 80027b0:	e000      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80027b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	4958      	ldr	r1, [pc, #352]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	650b      	str	r3, [r1, #80]	; 0x50
 80027cc:	e001      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d044      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e8:	d01f      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80027ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ee:	d805      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f8:	d00e      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80027fa:	e01f      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80027fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002800:	d01f      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002802:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002806:	d01e      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002808:	e018      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	4a46      	ldr	r2, [pc, #280]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002816:	e017      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f001 f8ba 	bl	8003998 <RCCEx_PLL2_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002828:	e00e      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3324      	adds	r3, #36	; 0x24
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f001 f963 	bl	8003afc <RCCEx_PLL3_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800283a:	e005      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	75fb      	strb	r3, [r7, #23]
      break;
 8002840:	e002      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002842:	bf00      	nop
 8002844:	e000      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800285c:	4932      	ldr	r1, [pc, #200]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800285e:	4313      	orrs	r3, r2
 8002860:	658b      	str	r3, [r1, #88]	; 0x58
 8002862:	e001      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002870:	2b00      	cmp	r3, #0
 8002872:	d044      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800287a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800287e:	d01f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002884:	d805      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800288a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288e:	d00e      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002890:	e01f      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002896:	d01f      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800289c:	d01e      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800289e:	e018      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028ac:	e017      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f86f 	bl	8003998 <RCCEx_PLL2_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028be:	e00e      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3324      	adds	r3, #36	; 0x24
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 f918 	bl	8003afc <RCCEx_PLL3_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028d0:	e005      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
      break;
 80028d6:	e002      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80028d8:	bf00      	nop
 80028da:	e000      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80028dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028f2:	490d      	ldr	r1, [pc, #52]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	658b      	str	r3, [r1, #88]	; 0x58
 80028f8:	e001      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d035      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290e:	2b10      	cmp	r3, #16
 8002910:	d00c      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002912:	2b10      	cmp	r3, #16
 8002914:	d802      	bhi.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01b      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800291a:	e017      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d00c      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d018      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002924:	e012      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002926:	bf00      	nop
 8002928:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800292c:	4bae      	ldr	r3, [pc, #696]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	4aad      	ldr	r2, [pc, #692]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002938:	e00e      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	2102      	movs	r1, #2
 8002940:	4618      	mov	r0, r3
 8002942:	f001 f829 	bl	8003998 <RCCEx_PLL2_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800294a:	e005      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
      break;
 8002950:	e002      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800295e:	4ba2      	ldr	r3, [pc, #648]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296a:	499f      	ldr	r1, [pc, #636]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002970:	e001      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d042      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298a:	d01f      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002990:	d805      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299a:	d00e      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x392>
 800299c:	e01f      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800299e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029a2:	d01f      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a8:	d01e      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80029aa:	e018      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ac:	4b8e      	ldr	r3, [pc, #568]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	4a8d      	ldr	r2, [pc, #564]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029b8:	e017      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 ffe9 	bl	8003998 <RCCEx_PLL2_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029ca:	e00e      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3324      	adds	r3, #36	; 0x24
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f892 	bl	8003afc <RCCEx_PLL3_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029dc:	e005      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
      break;
 80029e2:	e002      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80029e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029f0:	4b7d      	ldr	r3, [pc, #500]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80029f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fc:	497a      	ldr	r1, [pc, #488]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	650b      	str	r3, [r1, #80]	; 0x50
 8002a02:	e001      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d042      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a1c:	d01b      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a22:	d805      	bhi.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d022      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a2e:	e01b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a34:	d01d      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3a:	d01c      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002a3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a40:	d01b      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002a42:	e011      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 ffa4 	bl	8003998 <RCCEx_PLL2_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a54:	e012      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3324      	adds	r3, #36	; 0x24
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 f84d 	bl	8003afc <RCCEx_PLL3_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a66:	e009      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a6c:	e006      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e004      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a72:	bf00      	nop
 8002a74:	e002      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a82:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a86:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8e:	4956      	ldr	r1, [pc, #344]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	650b      	str	r3, [r1, #80]	; 0x50
 8002a94:	e001      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab0:	d01b      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab6:	d805      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d022      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ac2:	e01b      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac8:	d01d      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ace:	d01c      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002ad0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ad4:	d01b      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ad6:	e011      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	2101      	movs	r1, #1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 ff5a 	bl	8003998 <RCCEx_PLL2_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ae8:	e012      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3324      	adds	r3, #36	; 0x24
 8002aee:	2101      	movs	r1, #1
 8002af0:	4618      	mov	r0, r3
 8002af2:	f001 f803 	bl	8003afc <RCCEx_PLL3_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002afa:	e009      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
      break;
 8002b00:	e006      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e004      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e002      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b16:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b24:	4930      	ldr	r1, [pc, #192]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	658b      	str	r3, [r1, #88]	; 0x58
 8002b2a:	e001      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d022      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8002b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b48:	d108      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 ff21 	bl	8003998 <RCCEx_PLL2_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002b5a:	e003      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b60:	e000      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 8002b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	491c      	ldr	r1, [pc, #112]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b7c:	e001      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d030      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002ba2:	e00f      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	4a0f      	ldr	r2, [pc, #60]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 feed 	bl	8003998 <RCCEx_PLL2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bc2:	e003      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc8:	e000      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 8002bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4902      	ldr	r1, [pc, #8]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	650b      	str	r3, [r1, #80]	; 0x50
 8002be4:	e004      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002be6:	bf00      	nop
 8002be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d032      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d81b      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c43 	.word	0x08002c43
 8002c10:	08002c1d 	.word	0x08002c1d
 8002c14:	08002c2b 	.word	0x08002c2b
 8002c18:	08002c43 	.word	0x08002c43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c1c:	4bb8      	ldr	r3, [pc, #736]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	4ab7      	ldr	r2, [pc, #732]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c28:	e00c      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 feb1 	bl	8003998 <RCCEx_PLL2_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c3a:	e003      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 8002c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c4a:	4bad      	ldr	r3, [pc, #692]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	49aa      	ldr	r1, [pc, #680]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c5c:	e001      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8086 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4ba4      	ldr	r3, [pc, #656]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4aa3      	ldr	r2, [pc, #652]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe f99e 	bl	8000fbc <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe f99a 	bl	8000fbc <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d902      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	75fb      	strb	r3, [r7, #23]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c98:	4b9a      	ldr	r3, [pc, #616]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d166      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002caa:	4b95      	ldr	r3, [pc, #596]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cb4:	4053      	eors	r3, r2
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cbe:	4b90      	ldr	r3, [pc, #576]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc8:	4b8d      	ldr	r3, [pc, #564]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a8c      	ldr	r2, [pc, #560]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd4:	4b8a      	ldr	r3, [pc, #552]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a89      	ldr	r2, [pc, #548]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ce0:	4a87      	ldr	r2, [pc, #540]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d115      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f963 	bl	8000fbc <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f95f 	bl	8000fbc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d902      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8002d10:	e005      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d12:	4b7b      	ldr	r3, [pc, #492]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ed      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d126      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002d34:	4b72      	ldr	r3, [pc, #456]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d42:	0919      	lsrs	r1, r3, #4
 8002d44:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002d46:	400b      	ands	r3, r1
 8002d48:	496d      	ldr	r1, [pc, #436]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	610b      	str	r3, [r1, #16]
 8002d4e:	e005      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002d50:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4a6a      	ldr	r2, [pc, #424]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d5a:	6113      	str	r3, [r2, #16]
 8002d5c:	4b68      	ldr	r3, [pc, #416]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	4965      	ldr	r1, [pc, #404]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	670b      	str	r3, [r1, #112]	; 0x70
 8002d70:	e004      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	75bb      	strb	r3, [r7, #22]
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d07e      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8c:	2b28      	cmp	r3, #40	; 0x28
 8002d8e:	d867      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002e67 	.word	0x08002e67
 8002d9c:	08002e61 	.word	0x08002e61
 8002da0:	08002e61 	.word	0x08002e61
 8002da4:	08002e61 	.word	0x08002e61
 8002da8:	08002e61 	.word	0x08002e61
 8002dac:	08002e61 	.word	0x08002e61
 8002db0:	08002e61 	.word	0x08002e61
 8002db4:	08002e61 	.word	0x08002e61
 8002db8:	08002e3d 	.word	0x08002e3d
 8002dbc:	08002e61 	.word	0x08002e61
 8002dc0:	08002e61 	.word	0x08002e61
 8002dc4:	08002e61 	.word	0x08002e61
 8002dc8:	08002e61 	.word	0x08002e61
 8002dcc:	08002e61 	.word	0x08002e61
 8002dd0:	08002e61 	.word	0x08002e61
 8002dd4:	08002e61 	.word	0x08002e61
 8002dd8:	08002e4f 	.word	0x08002e4f
 8002ddc:	08002e61 	.word	0x08002e61
 8002de0:	08002e61 	.word	0x08002e61
 8002de4:	08002e61 	.word	0x08002e61
 8002de8:	08002e61 	.word	0x08002e61
 8002dec:	08002e61 	.word	0x08002e61
 8002df0:	08002e61 	.word	0x08002e61
 8002df4:	08002e61 	.word	0x08002e61
 8002df8:	08002e67 	.word	0x08002e67
 8002dfc:	08002e61 	.word	0x08002e61
 8002e00:	08002e61 	.word	0x08002e61
 8002e04:	08002e61 	.word	0x08002e61
 8002e08:	08002e61 	.word	0x08002e61
 8002e0c:	08002e61 	.word	0x08002e61
 8002e10:	08002e61 	.word	0x08002e61
 8002e14:	08002e61 	.word	0x08002e61
 8002e18:	08002e67 	.word	0x08002e67
 8002e1c:	08002e61 	.word	0x08002e61
 8002e20:	08002e61 	.word	0x08002e61
 8002e24:	08002e61 	.word	0x08002e61
 8002e28:	08002e61 	.word	0x08002e61
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002e61 	.word	0x08002e61
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e67 	.word	0x08002e67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fda8 	bl	8003998 <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e4c:	e00c      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3324      	adds	r3, #36	; 0x24
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fe51 	bl	8003afc <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e5e:	e003      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
      break;
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 8002e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7a:	4921      	ldr	r1, [pc, #132]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	654b      	str	r3, [r1, #84]	; 0x54
 8002e80:	e001      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03e      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d820      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x878>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ee3 	.word	0x08002ee3
 8002ea4:	08002eb9 	.word	0x08002eb9
 8002ea8:	08002ecb 	.word	0x08002ecb
 8002eac:	08002ee3 	.word	0x08002ee3
 8002eb0:	08002ee3 	.word	0x08002ee3
 8002eb4:	08002ee3 	.word	0x08002ee3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fd6a 	bl	8003998 <RCCEx_PLL2_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ec8:	e00c      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3324      	adds	r3, #36	; 0x24
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fe13 	bl	8003afc <RCCEx_PLL3_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002eda:	e003      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 8002ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d110      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef6:	4902      	ldr	r1, [pc, #8]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	654b      	str	r3, [r1, #84]	; 0x54
 8002efc:	e008      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8002efe:	bf00      	nop
 8002f00:	58024400 	.word	0x58024400
 8002f04:	58024800 	.word	0x58024800
 8002f08:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d039      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d820      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f6f 	.word	0x08002f6f
 8002f30:	08002f45 	.word	0x08002f45
 8002f34:	08002f57 	.word	0x08002f57
 8002f38:	08002f6f 	.word	0x08002f6f
 8002f3c:	08002f6f 	.word	0x08002f6f
 8002f40:	08002f6f 	.word	0x08002f6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fd24 	bl	8003998 <RCCEx_PLL2_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f54:	e00c      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3324      	adds	r3, #36	; 0x24
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fdcd 	bl	8003afc <RCCEx_PLL3_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f66:	e003      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 8002f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f76:	4bb2      	ldr	r3, [pc, #712]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	49ae      	ldr	r1, [pc, #696]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	658b      	str	r3, [r1, #88]	; 0x58
 8002f8a:	e001      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d044      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa6:	d01b      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8002fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fac:	d805      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x992>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d022      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8002fb8:	e01b      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d01d      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc4:	d01c      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8002fc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fca:	d01b      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8002fcc:	e011      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fcdf 	bl	8003998 <RCCEx_PLL2_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fde:	e012      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3324      	adds	r3, #36	; 0x24
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fd88 	bl	8003afc <RCCEx_PLL3_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ff0:	e009      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff6:	e006      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002ff8:	bf00      	nop
 8002ffa:	e004      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002ffc:	bf00      	nop
 8002ffe:	e002      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300c:	4b8c      	ldr	r3, [pc, #560]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	4989      	ldr	r1, [pc, #548]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800301c:	4313      	orrs	r3, r2
 800301e:	654b      	str	r3, [r1, #84]	; 0x54
 8003020:	e001      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d044      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303c:	d01b      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 800303e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003042:	d805      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d022      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800304e:	e01b      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003054:	d01d      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003056:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800305a:	d01c      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 800305c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003060:	d01b      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xa72>
 8003062:	e011      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fc94 	bl	8003998 <RCCEx_PLL2_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003074:	e012      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3324      	adds	r3, #36	; 0x24
 800307a:	2102      	movs	r1, #2
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fd3d 	bl	8003afc <RCCEx_PLL3_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003086:	e009      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
      break;
 800308c:	e006      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 800308e:	bf00      	nop
 8003090:	e004      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 800309a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030a2:	4b67      	ldr	r3, [pc, #412]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b0:	4963      	ldr	r1, [pc, #396]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	658b      	str	r3, [r1, #88]	; 0x58
 80030b6:	e001      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d044      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d2:	d01b      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xae4>
 80030d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d8:	d805      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d022      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80030de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xad2>
 80030e4:	e01b      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80030e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ea:	d01d      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80030ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030f0:	d01c      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xb04>
 80030f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030f6:	d01b      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 80030f8:	e011      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fc49 	bl	8003998 <RCCEx_PLL2_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800310a:	e012      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3324      	adds	r3, #36	; 0x24
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fcf2 	bl	8003afc <RCCEx_PLL3_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800311c:	e009      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
      break;
 8003122:	e006      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003124:	bf00      	nop
 8003126:	e004      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003128:	bf00      	nop
 800312a:	e002      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 800312c:	bf00      	nop
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003146:	493e      	ldr	r1, [pc, #248]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003148:	4313      	orrs	r3, r2
 800314a:	658b      	str	r3, [r1, #88]	; 0x58
 800314c:	e001      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003168:	d10a      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3324      	adds	r3, #36	; 0x24
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fcc3 	bl	8003afc <RCCEx_PLL3_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003180:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003184:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318e:	492c      	ldr	r1, [pc, #176]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003190:	4313      	orrs	r3, r2
 8003192:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031aa:	d10a      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3324      	adds	r3, #36	; 0x24
 80031b0:	2102      	movs	r1, #2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fca2 	bl	8003afc <RCCEx_PLL3_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d0:	491b      	ldr	r1, [pc, #108]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d032      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d00d      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 80031ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f2:	d016      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fbca 	bl	8003998 <RCCEx_PLL2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003208:	e00c      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3324      	adds	r3, #36	; 0x24
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fc73 	bl	8003afc <RCCEx_PLL3_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800321a:	e003      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	75fb      	strb	r3, [r7, #23]
      break;
 8003220:	e000      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 8003222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003238:	4901      	ldr	r1, [pc, #4]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800323a:	4313      	orrs	r3, r2
 800323c:	658b      	str	r3, [r1, #88]	; 0x58
 800323e:	e003      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d02f      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800325e:	d00c      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003260:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003264:	d015      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 8003266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326a:	d10f      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326c:	4b72      	ldr	r3, [pc, #456]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	4a71      	ldr	r2, [pc, #452]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003278:	e00c      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3324      	adds	r3, #36	; 0x24
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fc3b 	bl	8003afc <RCCEx_PLL3_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800328a:	e003      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
      break;
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 8003292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329a:	4b67      	ldr	r3, [pc, #412]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	4963      	ldr	r1, [pc, #396]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	654b      	str	r3, [r1, #84]	; 0x54
 80032ae:	e001      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d029      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d007      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 80032ce:	e00f      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d0:	4b59      	ldr	r3, [pc, #356]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80032d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032dc:	e00b      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fb57 	bl	8003998 <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	75fb      	strb	r3, [r7, #23]
      break;
 80032f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032fc:	4b4e      	ldr	r3, [pc, #312]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003308:	494b      	ldr	r1, [pc, #300]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800330a:	4313      	orrs	r3, r2
 800330c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800330e:	e001      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3324      	adds	r3, #36	; 0x24
 8003324:	2102      	movs	r1, #2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fbe8 	bl	8003afc <RCCEx_PLL3_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d031      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334c:	d00c      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 800334e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003352:	d802      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xd32>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d011      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd54>
 8003358:	e00d      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800335a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335e:	d00f      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8003360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003364:	d00e      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8003366:	e006      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003368:	4b33      	ldr	r3, [pc, #204]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	4a32      	ldr	r2, [pc, #200]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800336e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003374:	e007      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
      break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 800337c:	bf00      	nop
 800337e:	e002      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339a:	4927      	ldr	r1, [pc, #156]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800339c:	4313      	orrs	r3, r2
 800339e:	654b      	str	r3, [r1, #84]	; 0x54
 80033a0:	e001      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	491e      	ldr	r1, [pc, #120]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033dc:	4916      	ldr	r1, [pc, #88]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xde2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ee:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	4a11      	ldr	r2, [pc, #68]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033f8:	6113      	str	r3, [r2, #16]
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003404:	490c      	ldr	r1, [pc, #48]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003406:	4313      	orrs	r3, r2
 8003408:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	da08      	bge.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	4906      	ldr	r1, [pc, #24]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003420:	4313      	orrs	r3, r2
 8003422:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003424:	7dbb      	ldrb	r3, [r7, #22]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  }
  return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	58024400 	.word	0x58024400

0800343c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003440:	f7ff f896 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8003444:	4601      	mov	r1, r0
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	58024400 	.word	0x58024400
 8003464:	080072c4 	.word	0x080072c4

08003468 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003470:	4b9d      	ldr	r3, [pc, #628]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800347a:	4b9b      	ldr	r3, [pc, #620]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	0b1b      	lsrs	r3, r3, #12
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003486:	4b98      	ldr	r3, [pc, #608]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003492:	4b95      	ldr	r3, [pc, #596]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	08db      	lsrs	r3, r3, #3
 8003498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 810a 	beq.w	80036ca <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d05a      	beq.n	8003572 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d302      	bcc.n	80034c6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d078      	beq.n	80035b6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80034c4:	e099      	b.n	80035fa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034c6:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d02d      	beq.n	800352e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034d2:	4b85      	ldr	r3, [pc, #532]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	08db      	lsrs	r3, r3, #3
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	4a83      	ldr	r2, [pc, #524]	; (80036ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fc:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003510:	eddf 5a77 	vldr	s11, [pc, #476]	; 80036f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003528:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800352c:	e087      	b.n	800363e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003538:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800353c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003540:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003550:	ed97 6a03 	vldr	s12, [r7, #12]
 8003554:	eddf 5a66 	vldr	s11, [pc, #408]	; 80036f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003570:	e065      	b.n	800363e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003584:	4b58      	ldr	r3, [pc, #352]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003594:	ed97 6a03 	vldr	s12, [r7, #12]
 8003598:	eddf 5a55 	vldr	s11, [pc, #340]	; 80036f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800359c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035b4:	e043      	b.n	800363e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80036fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80035c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80035dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80036f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035f8:	e021      	b.n	800363e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003604:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003620:	eddf 5a33 	vldr	s11, [pc, #204]	; 80036f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003638:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800363c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	0a5b      	lsrs	r3, r3, #9
 8003644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003658:	edd7 6a07 	vldr	s13, [r7, #28]
 800365c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003664:	ee17 2a90 	vmov	r2, s15
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003686:	edd7 6a07 	vldr	s13, [r7, #28]
 800368a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800368e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003692:	ee17 2a90 	vmov	r2, s15
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	0e1b      	lsrs	r3, r3, #24
 80036a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80036b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c0:	ee17 2a90 	vmov	r2, s15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80036c8:	e008      	b.n	80036dc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3724      	adds	r7, #36	; 0x24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	58024400 	.word	0x58024400
 80036ec:	03d09000 	.word	0x03d09000
 80036f0:	46000000 	.word	0x46000000
 80036f4:	4c742400 	.word	0x4c742400
 80036f8:	4a742400 	.word	0x4a742400
 80036fc:	4bbebc20 	.word	0x4bbebc20

08003700 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	; 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003708:	4b9d      	ldr	r3, [pc, #628]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003712:	4b9b      	ldr	r3, [pc, #620]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	0d1b      	lsrs	r3, r3, #20
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800371e:	4b98      	ldr	r3, [pc, #608]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800372a:	4b95      	ldr	r3, [pc, #596]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	08db      	lsrs	r3, r3, #3
 8003730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 810a 	beq.w	8003962 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d05a      	beq.n	800380a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d302      	bcc.n	800375e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003758:	2b02      	cmp	r3, #2
 800375a:	d078      	beq.n	800384e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800375c:	e099      	b.n	8003892 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800375e:	4b88      	ldr	r3, [pc, #544]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02d      	beq.n	80037c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800376a:	4b85      	ldr	r3, [pc, #532]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	08db      	lsrs	r3, r3, #3
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	4a83      	ldr	r2, [pc, #524]	; (8003984 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003794:	4b7a      	ldr	r3, [pc, #488]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003988 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80037c4:	e087      	b.n	80038d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800398c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80037d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d8:	4b69      	ldr	r3, [pc, #420]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003988 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003804:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003808:	e065      	b.n	80038d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003814:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381c:	4b58      	ldr	r3, [pc, #352]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003830:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003988 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003848:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800384c:	e043      	b.n	80038d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003858:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003994 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800385c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003860:	4b47      	ldr	r3, [pc, #284]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003870:	ed97 6a03 	vldr	s12, [r7, #12]
 8003874:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003988 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003890:	e021      	b.n	80038d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80038a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003988 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038d4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80038d6:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	0a5b      	lsrs	r3, r3, #9
 80038dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e0:	ee07 3a90 	vmov	s15, r3
 80038e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038fc:	ee17 2a90 	vmov	r2, s15
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003904:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800391a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800391e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800392a:	ee17 2a90 	vmov	r2, s15
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	0e1b      	lsrs	r3, r3, #24
 8003938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800394c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003958:	ee17 2a90 	vmov	r2, s15
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003960:	e008      	b.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	3724      	adds	r7, #36	; 0x24
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	58024400 	.word	0x58024400
 8003984:	03d09000 	.word	0x03d09000
 8003988:	46000000 	.word	0x46000000
 800398c:	4c742400 	.word	0x4c742400
 8003990:	4a742400 	.word	0x4a742400
 8003994:	4bbebc20 	.word	0x4bbebc20

08003998 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039a6:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d101      	bne.n	80039b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e099      	b.n	8003aea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80039b6:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a4e      	ldr	r2, [pc, #312]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 80039bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c2:	f7fd fafb 	bl	8000fbc <HAL_GetTick>
 80039c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039c8:	e008      	b.n	80039dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039ca:	f7fd faf7 	bl	8000fbc <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e086      	b.n	8003aea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80039dc:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	031b      	lsls	r3, r3, #12
 80039f6:	493f      	ldr	r1, [pc, #252]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	628b      	str	r3, [r1, #40]	; 0x28
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	025b      	lsls	r3, r3, #9
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	061b      	lsls	r3, r3, #24
 8003a28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a2c:	4931      	ldr	r1, [pc, #196]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a32:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	492d      	ldr	r1, [pc, #180]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a44:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f023 0220 	bic.w	r2, r3, #32
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	4928      	ldr	r1, [pc, #160]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	4a26      	ldr	r2, [pc, #152]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a5c:	f023 0310 	bic.w	r3, r3, #16
 8003a60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <RCCEx_PLL2_Config+0x160>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	69d2      	ldr	r2, [r2, #28]
 8003a6e:	00d2      	lsls	r2, r2, #3
 8003a70:	4920      	ldr	r1, [pc, #128]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a76:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a7c:	f043 0310 	orr.w	r3, r3, #16
 8003a80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a94:	e00f      	b.n	8003ab6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d106      	bne.n	8003aaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a9c:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003aa8:	e005      	b.n	8003ab6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4a11      	ldr	r2, [pc, #68]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a0e      	ldr	r2, [pc, #56]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac2:	f7fd fa7b 	bl	8000fbc <HAL_GetTick>
 8003ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ac8:	e008      	b.n	8003adc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003aca:	f7fd fa77 	bl	8000fbc <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e006      	b.n	8003aea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <RCCEx_PLL2_Config+0x15c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	58024400 	.word	0x58024400
 8003af8:	ffff0007 	.word	0xffff0007

08003afc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b0a:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d101      	bne.n	8003b1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e099      	b.n	8003c4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b1a:	4b4f      	ldr	r3, [pc, #316]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4e      	ldr	r2, [pc, #312]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b26:	f7fd fa49 	bl	8000fbc <HAL_GetTick>
 8003b2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b2e:	f7fd fa45 	bl	8000fbc <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e086      	b.n	8003c4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b4c:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	051b      	lsls	r3, r3, #20
 8003b5a:	493f      	ldr	r1, [pc, #252]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	628b      	str	r3, [r1, #40]	; 0x28
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	025b      	lsls	r3, r3, #9
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	061b      	lsls	r3, r3, #24
 8003b8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b90:	4931      	ldr	r1, [pc, #196]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	492d      	ldr	r1, [pc, #180]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	4928      	ldr	r1, [pc, #160]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003bba:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <RCCEx_PLL3_Config+0x160>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	69d2      	ldr	r2, [r2, #28]
 8003bd2:	00d2      	lsls	r2, r2, #3
 8003bd4:	4920      	ldr	r1, [pc, #128]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003bec:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003bf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bf8:	e00f      	b.n	8003c1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d106      	bne.n	8003c0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c00:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003c06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c0c:	e005      	b.n	8003c1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4a11      	ldr	r2, [pc, #68]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c26:	f7fd f9c9 	bl	8000fbc <HAL_GetTick>
 8003c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c2c:	e008      	b.n	8003c40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c2e:	f7fd f9c5 	bl	8000fbc <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e006      	b.n	8003c4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <RCCEx_PLL3_Config+0x15c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	ffff0007 	.word	0xffff0007

08003c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e01d      	b.n	8003cae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fc fdca 	bl	8000820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f000 facc 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fe1e 	bl	800490c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <HAL_TIM_PWM_Start+0x98>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x4a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <HAL_TIM_PWM_Start+0x9c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x4a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_TIM_PWM_Start+0xa0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d009      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x4a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <HAL_TIM_PWM_Start+0xa4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x4a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <HAL_TIM_PWM_Start+0xa8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_PWM_Start+0x4e>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_TIM_PWM_Start+0x50>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_TIM_PWM_Start+0xac>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d00b      	beq.n	8003d46 <HAL_TIM_PWM_Start+0x8e>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d007      	beq.n	8003d46 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40010400 	.word	0x40010400
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40014800 	.word	0x40014800
 8003d64:	00010007 	.word	0x00010007

08003d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0202 	mvn.w	r2, #2
 8003d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa28 	bl	8004200 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa1a 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa2b 	bl	8004214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0204 	mvn.w	r2, #4
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9fe 	bl	8004200 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9f0 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa01 	bl	8004214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0208 	mvn.w	r2, #8
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2204      	movs	r2, #4
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9d4 	bl	8004200 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9c6 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f9d7 	bl	8004214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0210 	mvn.w	r2, #16
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2208      	movs	r2, #8
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9aa 	bl	8004200 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f99c 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f9ad 	bl	8004214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10e      	bne.n	8003eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0201 	mvn.w	r2, #1
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f976 	bl	80041d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fd29 	bl	800496a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d10e      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d107      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fd1c 	bl	800497e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f95b 	bl	8004228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0220 	mvn.w	r2, #32
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fcdc 	bl	8004956 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e105      	b.n	80041ce <HAL_TIM_PWM_ConfigChannel+0x226>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b14      	cmp	r3, #20
 8003fd6:	f200 80f0 	bhi.w	80041ba <HAL_TIM_PWM_ConfigChannel+0x212>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08004035 	.word	0x08004035
 8003fe4:	080041bb 	.word	0x080041bb
 8003fe8:	080041bb 	.word	0x080041bb
 8003fec:	080041bb 	.word	0x080041bb
 8003ff0:	08004075 	.word	0x08004075
 8003ff4:	080041bb 	.word	0x080041bb
 8003ff8:	080041bb 	.word	0x080041bb
 8003ffc:	080041bb 	.word	0x080041bb
 8004000:	080040b7 	.word	0x080040b7
 8004004:	080041bb 	.word	0x080041bb
 8004008:	080041bb 	.word	0x080041bb
 800400c:	080041bb 	.word	0x080041bb
 8004010:	080040f7 	.word	0x080040f7
 8004014:	080041bb 	.word	0x080041bb
 8004018:	080041bb 	.word	0x080041bb
 800401c:	080041bb 	.word	0x080041bb
 8004020:	08004139 	.word	0x08004139
 8004024:	080041bb 	.word	0x080041bb
 8004028:	080041bb 	.word	0x080041bb
 800402c:	080041bb 	.word	0x080041bb
 8004030:	08004179 	.word	0x08004179
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f998 	bl	8004370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0208 	orr.w	r2, r2, #8
 800404e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0204 	bic.w	r2, r2, #4
 800405e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6999      	ldr	r1, [r3, #24]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	619a      	str	r2, [r3, #24]
      break;
 8004072:	e0a3      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fa08 	bl	8004490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800408e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6999      	ldr	r1, [r3, #24]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	021a      	lsls	r2, r3, #8
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	619a      	str	r2, [r3, #24]
      break;
 80040b4:	e082      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fa71 	bl	80045a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0208 	orr.w	r2, r2, #8
 80040d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0204 	bic.w	r2, r2, #4
 80040e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69d9      	ldr	r1, [r3, #28]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	61da      	str	r2, [r3, #28]
      break;
 80040f4:	e062      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fad7 	bl	80046b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69d9      	ldr	r1, [r3, #28]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	021a      	lsls	r2, r3, #8
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	61da      	str	r2, [r3, #28]
      break;
 8004136:	e041      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fb1e 	bl	8004780 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0208 	orr.w	r2, r2, #8
 8004152:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0204 	bic.w	r2, r2, #4
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004176:	e021      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fb60 	bl	8004844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	021a      	lsls	r2, r3, #8
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041b8:	e000      	b.n	80041bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80041ba:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop

080041d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a40      	ldr	r2, [pc, #256]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425a:	d00f      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a3d      	ldr	r2, [pc, #244]	; (8004354 <TIM_Base_SetConfig+0x118>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00b      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a3c      	ldr	r2, [pc, #240]	; (8004358 <TIM_Base_SetConfig+0x11c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3b      	ldr	r2, [pc, #236]	; (800435c <TIM_Base_SetConfig+0x120>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <TIM_Base_SetConfig+0x124>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d108      	bne.n	800428e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2f      	ldr	r2, [pc, #188]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01f      	beq.n	80042d6 <TIM_Base_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429c:	d01b      	beq.n	80042d6 <TIM_Base_SetConfig+0x9a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <TIM_Base_SetConfig+0x118>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d017      	beq.n	80042d6 <TIM_Base_SetConfig+0x9a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <TIM_Base_SetConfig+0x11c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <TIM_Base_SetConfig+0x9a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2a      	ldr	r2, [pc, #168]	; (800435c <TIM_Base_SetConfig+0x120>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00f      	beq.n	80042d6 <TIM_Base_SetConfig+0x9a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a29      	ldr	r2, [pc, #164]	; (8004360 <TIM_Base_SetConfig+0x124>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <TIM_Base_SetConfig+0x9a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a28      	ldr	r2, [pc, #160]	; (8004364 <TIM_Base_SetConfig+0x128>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <TIM_Base_SetConfig+0x9a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <TIM_Base_SetConfig+0x12c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_Base_SetConfig+0x9a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <TIM_Base_SetConfig+0x130>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a10      	ldr	r2, [pc, #64]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00f      	beq.n	8004334 <TIM_Base_SetConfig+0xf8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <TIM_Base_SetConfig+0x124>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00b      	beq.n	8004334 <TIM_Base_SetConfig+0xf8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a11      	ldr	r2, [pc, #68]	; (8004364 <TIM_Base_SetConfig+0x128>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d007      	beq.n	8004334 <TIM_Base_SetConfig+0xf8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <TIM_Base_SetConfig+0x12c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d003      	beq.n	8004334 <TIM_Base_SetConfig+0xf8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a0f      	ldr	r2, [pc, #60]	; (800436c <TIM_Base_SetConfig+0x130>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d103      	bne.n	800433c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	615a      	str	r2, [r3, #20]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40010400 	.word	0x40010400
 8004364:	40014000 	.word	0x40014000
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800

08004370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4b37      	ldr	r3, [pc, #220]	; (8004478 <TIM_OC1_SetConfig+0x108>)
 800439c:	4013      	ands	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 0302 	bic.w	r3, r3, #2
 80043b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a2d      	ldr	r2, [pc, #180]	; (800447c <TIM_OC1_SetConfig+0x10c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00f      	beq.n	80043ec <TIM_OC1_SetConfig+0x7c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a2c      	ldr	r2, [pc, #176]	; (8004480 <TIM_OC1_SetConfig+0x110>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00b      	beq.n	80043ec <TIM_OC1_SetConfig+0x7c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a2b      	ldr	r2, [pc, #172]	; (8004484 <TIM_OC1_SetConfig+0x114>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_OC1_SetConfig+0x7c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a2a      	ldr	r2, [pc, #168]	; (8004488 <TIM_OC1_SetConfig+0x118>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC1_SetConfig+0x7c>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <TIM_OC1_SetConfig+0x11c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10c      	bne.n	8004406 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0308 	bic.w	r3, r3, #8
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1c      	ldr	r2, [pc, #112]	; (800447c <TIM_OC1_SetConfig+0x10c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00f      	beq.n	800442e <TIM_OC1_SetConfig+0xbe>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <TIM_OC1_SetConfig+0x110>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00b      	beq.n	800442e <TIM_OC1_SetConfig+0xbe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <TIM_OC1_SetConfig+0x114>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <TIM_OC1_SetConfig+0xbe>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a19      	ldr	r2, [pc, #100]	; (8004488 <TIM_OC1_SetConfig+0x118>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_OC1_SetConfig+0xbe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a18      	ldr	r2, [pc, #96]	; (800448c <TIM_OC1_SetConfig+0x11c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d111      	bne.n	8004452 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800443c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	621a      	str	r2, [r3, #32]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	fffeff8f 	.word	0xfffeff8f
 800447c:	40010000 	.word	0x40010000
 8004480:	40010400 	.word	0x40010400
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0210 	bic.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4b34      	ldr	r3, [pc, #208]	; (800458c <TIM_OC2_SetConfig+0xfc>)
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f023 0320 	bic.w	r3, r3, #32
 80044da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a29      	ldr	r2, [pc, #164]	; (8004590 <TIM_OC2_SetConfig+0x100>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_OC2_SetConfig+0x68>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a28      	ldr	r2, [pc, #160]	; (8004594 <TIM_OC2_SetConfig+0x104>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10d      	bne.n	8004514 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <TIM_OC2_SetConfig+0x100>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00f      	beq.n	800453c <TIM_OC2_SetConfig+0xac>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <TIM_OC2_SetConfig+0x104>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_OC2_SetConfig+0xac>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <TIM_OC2_SetConfig+0x108>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_OC2_SetConfig+0xac>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a1b      	ldr	r2, [pc, #108]	; (800459c <TIM_OC2_SetConfig+0x10c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_OC2_SetConfig+0xac>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a1a      	ldr	r2, [pc, #104]	; (80045a0 <TIM_OC2_SetConfig+0x110>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d113      	bne.n	8004564 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800454a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	feff8fff 	.word	0xfeff8fff
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800

080045a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a27      	ldr	r2, [pc, #156]	; (800469c <TIM_OC3_SetConfig+0xf8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d003      	beq.n	800460a <TIM_OC3_SetConfig+0x66>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <TIM_OC3_SetConfig+0xfc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d10d      	bne.n	8004626 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1c      	ldr	r2, [pc, #112]	; (800469c <TIM_OC3_SetConfig+0xf8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00f      	beq.n	800464e <TIM_OC3_SetConfig+0xaa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <TIM_OC3_SetConfig+0xfc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_OC3_SetConfig+0xaa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <TIM_OC3_SetConfig+0x100>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_OC3_SetConfig+0xaa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <TIM_OC3_SetConfig+0x104>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC3_SetConfig+0xaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a18      	ldr	r2, [pc, #96]	; (80046ac <TIM_OC3_SetConfig+0x108>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d113      	bne.n	8004676 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	621a      	str	r2, [r3, #32]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40010000 	.word	0x40010000
 80046a0:	40010400 	.word	0x40010400
 80046a4:	40014000 	.word	0x40014000
 80046a8:	40014400 	.word	0x40014400
 80046ac:	40014800 	.word	0x40014800

080046b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	031b      	lsls	r3, r3, #12
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a18      	ldr	r2, [pc, #96]	; (800476c <TIM_OC4_SetConfig+0xbc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00f      	beq.n	8004730 <TIM_OC4_SetConfig+0x80>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a17      	ldr	r2, [pc, #92]	; (8004770 <TIM_OC4_SetConfig+0xc0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00b      	beq.n	8004730 <TIM_OC4_SetConfig+0x80>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <TIM_OC4_SetConfig+0xc4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_OC4_SetConfig+0x80>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a15      	ldr	r2, [pc, #84]	; (8004778 <TIM_OC4_SetConfig+0xc8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC4_SetConfig+0x80>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a14      	ldr	r2, [pc, #80]	; (800477c <TIM_OC4_SetConfig+0xcc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d109      	bne.n	8004744 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800

08004780 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a17      	ldr	r2, [pc, #92]	; (8004830 <TIM_OC5_SetConfig+0xb0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_OC5_SetConfig+0x76>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a16      	ldr	r2, [pc, #88]	; (8004834 <TIM_OC5_SetConfig+0xb4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_OC5_SetConfig+0x76>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <TIM_OC5_SetConfig+0xb8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_OC5_SetConfig+0x76>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <TIM_OC5_SetConfig+0xbc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_OC5_SetConfig+0x76>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <TIM_OC5_SetConfig+0xc0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d109      	bne.n	800480a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	621a      	str	r2, [r3, #32]
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40010000 	.word	0x40010000
 8004834:	40010400 	.word	0x40010400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800

08004844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	051b      	lsls	r3, r3, #20
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <TIM_OC6_SetConfig+0xb4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00f      	beq.n	80048bc <TIM_OC6_SetConfig+0x78>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a17      	ldr	r2, [pc, #92]	; (80048fc <TIM_OC6_SetConfig+0xb8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00b      	beq.n	80048bc <TIM_OC6_SetConfig+0x78>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a16      	ldr	r2, [pc, #88]	; (8004900 <TIM_OC6_SetConfig+0xbc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_OC6_SetConfig+0x78>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <TIM_OC6_SetConfig+0xc0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_OC6_SetConfig+0x78>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a14      	ldr	r2, [pc, #80]	; (8004908 <TIM_OC6_SetConfig+0xc4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d109      	bne.n	80048d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	029b      	lsls	r3, r3, #10
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40010000 	.word	0x40010000
 80048fc:	40010400 	.word	0x40010400
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800

0800490c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2201      	movs	r2, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	43db      	mvns	r3, r3
 800492e:	401a      	ands	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e042      	b.n	8004a2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc f9ce 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2224      	movs	r2, #36	; 0x24
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f82f 	bl	8004a38 <UART_SetConfig>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e022      	b.n	8004a2a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f002 f9a1 	bl	8006d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f002 fa28 	bl	8006e78 <UART_CheckIdleState>
 8004a28:	4603      	mov	r3, r0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	0000      	movs	r0, r0
 8004a34:	0000      	movs	r0, r0
	...

08004a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a38:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a3c:	b090      	sub	sp, #64	; 0x40
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4bc1      	ldr	r3, [pc, #772]	; (8004d80 <UART_SetConfig+0x348>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a82:	430b      	orrs	r3, r1
 8004a84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4ab7      	ldr	r2, [pc, #732]	; (8004d84 <UART_SetConfig+0x34c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4bb2      	ldr	r3, [pc, #712]	; (8004d88 <UART_SetConfig+0x350>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f023 010f 	bic.w	r1, r3, #15
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4aa9      	ldr	r2, [pc, #676]	; (8004d8c <UART_SetConfig+0x354>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d177      	bne.n	8004bda <UART_SetConfig+0x1a2>
 8004aea:	4ba9      	ldr	r3, [pc, #676]	; (8004d90 <UART_SetConfig+0x358>)
 8004aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af2:	2b28      	cmp	r3, #40	; 0x28
 8004af4:	d86c      	bhi.n	8004bd0 <UART_SetConfig+0x198>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0xc4>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004ba1 	.word	0x08004ba1
 8004b00:	08004bd1 	.word	0x08004bd1
 8004b04:	08004bd1 	.word	0x08004bd1
 8004b08:	08004bd1 	.word	0x08004bd1
 8004b0c:	08004bd1 	.word	0x08004bd1
 8004b10:	08004bd1 	.word	0x08004bd1
 8004b14:	08004bd1 	.word	0x08004bd1
 8004b18:	08004bd1 	.word	0x08004bd1
 8004b1c:	08004ba9 	.word	0x08004ba9
 8004b20:	08004bd1 	.word	0x08004bd1
 8004b24:	08004bd1 	.word	0x08004bd1
 8004b28:	08004bd1 	.word	0x08004bd1
 8004b2c:	08004bd1 	.word	0x08004bd1
 8004b30:	08004bd1 	.word	0x08004bd1
 8004b34:	08004bd1 	.word	0x08004bd1
 8004b38:	08004bd1 	.word	0x08004bd1
 8004b3c:	08004bb1 	.word	0x08004bb1
 8004b40:	08004bd1 	.word	0x08004bd1
 8004b44:	08004bd1 	.word	0x08004bd1
 8004b48:	08004bd1 	.word	0x08004bd1
 8004b4c:	08004bd1 	.word	0x08004bd1
 8004b50:	08004bd1 	.word	0x08004bd1
 8004b54:	08004bd1 	.word	0x08004bd1
 8004b58:	08004bd1 	.word	0x08004bd1
 8004b5c:	08004bb9 	.word	0x08004bb9
 8004b60:	08004bd1 	.word	0x08004bd1
 8004b64:	08004bd1 	.word	0x08004bd1
 8004b68:	08004bd1 	.word	0x08004bd1
 8004b6c:	08004bd1 	.word	0x08004bd1
 8004b70:	08004bd1 	.word	0x08004bd1
 8004b74:	08004bd1 	.word	0x08004bd1
 8004b78:	08004bd1 	.word	0x08004bd1
 8004b7c:	08004bc1 	.word	0x08004bc1
 8004b80:	08004bd1 	.word	0x08004bd1
 8004b84:	08004bd1 	.word	0x08004bd1
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004bd1 	.word	0x08004bd1
 8004b90:	08004bd1 	.word	0x08004bd1
 8004b94:	08004bd1 	.word	0x08004bd1
 8004b98:	08004bd1 	.word	0x08004bd1
 8004b9c:	08004bc9 	.word	0x08004bc9
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ba6:	e233      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bae:	e22f      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bb6:	e22b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bbe:	e227      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bc6:	e223      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004bc8:	2340      	movs	r3, #64	; 0x40
 8004bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bce:	e21f      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bd6:	bf00      	nop
 8004bd8:	e21a      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6d      	ldr	r2, [pc, #436]	; (8004d94 <UART_SetConfig+0x35c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d132      	bne.n	8004c4a <UART_SetConfig+0x212>
 8004be4:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <UART_SetConfig+0x358>)
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	2b05      	cmp	r3, #5
 8004bee:	d827      	bhi.n	8004c40 <UART_SetConfig+0x208>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0x1c0>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c11 	.word	0x08004c11
 8004bfc:	08004c19 	.word	0x08004c19
 8004c00:	08004c21 	.word	0x08004c21
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c16:	e1fb      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c1e:	e1f7      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c26:	e1f3      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c2e:	e1ef      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c30:	2320      	movs	r3, #32
 8004c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c36:	e1eb      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c3e:	e1e7      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c46:	bf00      	nop
 8004c48:	e1e2      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <UART_SetConfig+0x360>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d132      	bne.n	8004cba <UART_SetConfig+0x282>
 8004c54:	4b4e      	ldr	r3, [pc, #312]	; (8004d90 <UART_SetConfig+0x358>)
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d827      	bhi.n	8004cb0 <UART_SetConfig+0x278>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x230>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c81 	.word	0x08004c81
 8004c6c:	08004c89 	.word	0x08004c89
 8004c70:	08004c91 	.word	0x08004c91
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c86:	e1c3      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c8e:	e1bf      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c90:	2308      	movs	r3, #8
 8004c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c96:	e1bb      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c9e:	e1b7      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004ca0:	2320      	movs	r3, #32
 8004ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ca6:	e1b3      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004ca8:	2340      	movs	r3, #64	; 0x40
 8004caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cae:	e1af      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cb6:	bf00      	nop
 8004cb8:	e1aa      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a37      	ldr	r2, [pc, #220]	; (8004d9c <UART_SetConfig+0x364>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d132      	bne.n	8004d2a <UART_SetConfig+0x2f2>
 8004cc4:	4b32      	ldr	r3, [pc, #200]	; (8004d90 <UART_SetConfig+0x358>)
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	d827      	bhi.n	8004d20 <UART_SetConfig+0x2e8>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0x2a0>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004cf1 	.word	0x08004cf1
 8004cdc:	08004cf9 	.word	0x08004cf9
 8004ce0:	08004d01 	.word	0x08004d01
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d19 	.word	0x08004d19
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cf6:	e18b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cfe:	e187      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d06:	e183      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d0e:	e17f      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d10:	2320      	movs	r3, #32
 8004d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d16:	e17b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d18:	2340      	movs	r3, #64	; 0x40
 8004d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d1e:	e177      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d26:	bf00      	nop
 8004d28:	e172      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <UART_SetConfig+0x368>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d144      	bne.n	8004dbe <UART_SetConfig+0x386>
 8004d34:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <UART_SetConfig+0x358>)
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	2b05      	cmp	r3, #5
 8004d3e:	d839      	bhi.n	8004db4 <UART_SetConfig+0x37c>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x310>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d61 	.word	0x08004d61
 8004d4c:	08004d69 	.word	0x08004d69
 8004d50:	08004d71 	.word	0x08004d71
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004da5 	.word	0x08004da5
 8004d5c:	08004dad 	.word	0x08004dad
 8004d60:	2300      	movs	r3, #0
 8004d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d66:	e153      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d6e:	e14f      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d76:	e14b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d7e:	e147      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004d80:	cfff69f3 	.word	0xcfff69f3
 8004d84:	58000c00 	.word	0x58000c00
 8004d88:	11fff4ff 	.word	0x11fff4ff
 8004d8c:	40011000 	.word	0x40011000
 8004d90:	58024400 	.word	0x58024400
 8004d94:	40004400 	.word	0x40004400
 8004d98:	40004800 	.word	0x40004800
 8004d9c:	40004c00 	.word	0x40004c00
 8004da0:	40005000 	.word	0x40005000
 8004da4:	2320      	movs	r3, #32
 8004da6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004daa:	e131      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004dac:	2340      	movs	r3, #64	; 0x40
 8004dae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004db2:	e12d      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dba:	bf00      	nop
 8004dbc:	e128      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4ac3      	ldr	r2, [pc, #780]	; (80050d0 <UART_SetConfig+0x698>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d178      	bne.n	8004eba <UART_SetConfig+0x482>
 8004dc8:	4bc2      	ldr	r3, [pc, #776]	; (80050d4 <UART_SetConfig+0x69c>)
 8004dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd0:	2b28      	cmp	r3, #40	; 0x28
 8004dd2:	d86d      	bhi.n	8004eb0 <UART_SetConfig+0x478>
 8004dd4:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <UART_SetConfig+0x3a4>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004e81 	.word	0x08004e81
 8004de0:	08004eb1 	.word	0x08004eb1
 8004de4:	08004eb1 	.word	0x08004eb1
 8004de8:	08004eb1 	.word	0x08004eb1
 8004dec:	08004eb1 	.word	0x08004eb1
 8004df0:	08004eb1 	.word	0x08004eb1
 8004df4:	08004eb1 	.word	0x08004eb1
 8004df8:	08004eb1 	.word	0x08004eb1
 8004dfc:	08004e89 	.word	0x08004e89
 8004e00:	08004eb1 	.word	0x08004eb1
 8004e04:	08004eb1 	.word	0x08004eb1
 8004e08:	08004eb1 	.word	0x08004eb1
 8004e0c:	08004eb1 	.word	0x08004eb1
 8004e10:	08004eb1 	.word	0x08004eb1
 8004e14:	08004eb1 	.word	0x08004eb1
 8004e18:	08004eb1 	.word	0x08004eb1
 8004e1c:	08004e91 	.word	0x08004e91
 8004e20:	08004eb1 	.word	0x08004eb1
 8004e24:	08004eb1 	.word	0x08004eb1
 8004e28:	08004eb1 	.word	0x08004eb1
 8004e2c:	08004eb1 	.word	0x08004eb1
 8004e30:	08004eb1 	.word	0x08004eb1
 8004e34:	08004eb1 	.word	0x08004eb1
 8004e38:	08004eb1 	.word	0x08004eb1
 8004e3c:	08004e99 	.word	0x08004e99
 8004e40:	08004eb1 	.word	0x08004eb1
 8004e44:	08004eb1 	.word	0x08004eb1
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	08004eb1 	.word	0x08004eb1
 8004e50:	08004eb1 	.word	0x08004eb1
 8004e54:	08004eb1 	.word	0x08004eb1
 8004e58:	08004eb1 	.word	0x08004eb1
 8004e5c:	08004ea1 	.word	0x08004ea1
 8004e60:	08004eb1 	.word	0x08004eb1
 8004e64:	08004eb1 	.word	0x08004eb1
 8004e68:	08004eb1 	.word	0x08004eb1
 8004e6c:	08004eb1 	.word	0x08004eb1
 8004e70:	08004eb1 	.word	0x08004eb1
 8004e74:	08004eb1 	.word	0x08004eb1
 8004e78:	08004eb1 	.word	0x08004eb1
 8004e7c:	08004ea9 	.word	0x08004ea9
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e86:	e0c3      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e8e:	e0bf      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004e90:	2308      	movs	r3, #8
 8004e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e96:	e0bb      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e9e:	e0b7      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ea6:	e0b3      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004ea8:	2340      	movs	r3, #64	; 0x40
 8004eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004eae:	e0af      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004eb6:	bf00      	nop
 8004eb8:	e0aa      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a86      	ldr	r2, [pc, #536]	; (80050d8 <UART_SetConfig+0x6a0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d132      	bne.n	8004f2a <UART_SetConfig+0x4f2>
 8004ec4:	4b83      	ldr	r3, [pc, #524]	; (80050d4 <UART_SetConfig+0x69c>)
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	d827      	bhi.n	8004f20 <UART_SetConfig+0x4e8>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0x4a0>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004ef1 	.word	0x08004ef1
 8004edc:	08004ef9 	.word	0x08004ef9
 8004ee0:	08004f01 	.word	0x08004f01
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f11 	.word	0x08004f11
 8004eec:	08004f19 	.word	0x08004f19
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ef6:	e08b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004efe:	e087      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f06:	e083      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f0e:	e07f      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f10:	2320      	movs	r3, #32
 8004f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f16:	e07b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f1e:	e077      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f26:	bf00      	nop
 8004f28:	e072      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a6b      	ldr	r2, [pc, #428]	; (80050dc <UART_SetConfig+0x6a4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d132      	bne.n	8004f9a <UART_SetConfig+0x562>
 8004f34:	4b67      	ldr	r3, [pc, #412]	; (80050d4 <UART_SetConfig+0x69c>)
 8004f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d827      	bhi.n	8004f90 <UART_SetConfig+0x558>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0x510>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f61 	.word	0x08004f61
 8004f4c:	08004f69 	.word	0x08004f69
 8004f50:	08004f71 	.word	0x08004f71
 8004f54:	08004f79 	.word	0x08004f79
 8004f58:	08004f81 	.word	0x08004f81
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f66:	e053      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f6e:	e04f      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f70:	2308      	movs	r3, #8
 8004f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f76:	e04b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f7e:	e047      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f80:	2320      	movs	r3, #32
 8004f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f86:	e043      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f88:	2340      	movs	r3, #64	; 0x40
 8004f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f8e:	e03f      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f96:	bf00      	nop
 8004f98:	e03a      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a50      	ldr	r2, [pc, #320]	; (80050e0 <UART_SetConfig+0x6a8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d132      	bne.n	800500a <UART_SetConfig+0x5d2>
 8004fa4:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <UART_SetConfig+0x69c>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	2b05      	cmp	r3, #5
 8004fae:	d827      	bhi.n	8005000 <UART_SetConfig+0x5c8>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <UART_SetConfig+0x580>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08004fd1 	.word	0x08004fd1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004fe1 	.word	0x08004fe1
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fd6:	e01b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fde:	e017      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fe6:	e013      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fee:	e00f      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ff6:	e00b      	b.n	8005010 <UART_SetConfig+0x5d8>
 8004ff8:	2340      	movs	r3, #64	; 0x40
 8004ffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ffe:	e007      	b.n	8005010 <UART_SetConfig+0x5d8>
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <UART_SetConfig+0x5d8>
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a32      	ldr	r2, [pc, #200]	; (80050e0 <UART_SetConfig+0x6a8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	f040 86f7 	bne.w	8005e0a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800501c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005020:	2b08      	cmp	r3, #8
 8005022:	f000 80c0 	beq.w	80051a6 <UART_SetConfig+0x76e>
 8005026:	2b08      	cmp	r3, #8
 8005028:	dc04      	bgt.n	8005034 <UART_SetConfig+0x5fc>
 800502a:	2b02      	cmp	r3, #2
 800502c:	d00c      	beq.n	8005048 <UART_SetConfig+0x610>
 800502e:	2b04      	cmp	r3, #4
 8005030:	d065      	beq.n	80050fe <UART_SetConfig+0x6c6>
 8005032:	e27a      	b.n	800552a <UART_SetConfig+0xaf2>
 8005034:	2b20      	cmp	r3, #32
 8005036:	f000 81b0 	beq.w	800539a <UART_SetConfig+0x962>
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	f000 821e 	beq.w	800547c <UART_SetConfig+0xa44>
 8005040:	2b10      	cmp	r3, #16
 8005042:	f000 8104 	beq.w	800524e <UART_SetConfig+0x816>
 8005046:	e270      	b.n	800552a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005048:	f7fe f9f8 	bl	800343c <HAL_RCCEx_GetD3PCLK1Freq>
 800504c:	4602      	mov	r2, r0
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04e      	beq.n	80050f4 <UART_SetConfig+0x6bc>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	2b01      	cmp	r3, #1
 800505c:	d048      	beq.n	80050f0 <UART_SetConfig+0x6b8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b02      	cmp	r3, #2
 8005064:	d042      	beq.n	80050ec <UART_SetConfig+0x6b4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b03      	cmp	r3, #3
 800506c:	d03c      	beq.n	80050e8 <UART_SetConfig+0x6b0>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b04      	cmp	r3, #4
 8005074:	d036      	beq.n	80050e4 <UART_SetConfig+0x6ac>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	2b05      	cmp	r3, #5
 800507c:	d026      	beq.n	80050cc <UART_SetConfig+0x694>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2b06      	cmp	r3, #6
 8005084:	d020      	beq.n	80050c8 <UART_SetConfig+0x690>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b07      	cmp	r3, #7
 800508c:	d01a      	beq.n	80050c4 <UART_SetConfig+0x68c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	2b08      	cmp	r3, #8
 8005094:	d014      	beq.n	80050c0 <UART_SetConfig+0x688>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	2b09      	cmp	r3, #9
 800509c:	d00e      	beq.n	80050bc <UART_SetConfig+0x684>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2b0a      	cmp	r3, #10
 80050a4:	d008      	beq.n	80050b8 <UART_SetConfig+0x680>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2b0b      	cmp	r3, #11
 80050ac:	d102      	bne.n	80050b4 <UART_SetConfig+0x67c>
 80050ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b2:	e020      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e01e      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	e01c      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050bc:	2340      	movs	r3, #64	; 0x40
 80050be:	e01a      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050c0:	2320      	movs	r3, #32
 80050c2:	e018      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050c4:	2310      	movs	r3, #16
 80050c6:	e016      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050c8:	230c      	movs	r3, #12
 80050ca:	e014      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050cc:	230a      	movs	r3, #10
 80050ce:	e012      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050d0:	40011400 	.word	0x40011400
 80050d4:	58024400 	.word	0x58024400
 80050d8:	40007800 	.word	0x40007800
 80050dc:	40007c00 	.word	0x40007c00
 80050e0:	58000c00 	.word	0x58000c00
 80050e4:	2308      	movs	r3, #8
 80050e6:	e006      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050e8:	2306      	movs	r3, #6
 80050ea:	e004      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050ec:	2304      	movs	r3, #4
 80050ee:	e002      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e000      	b.n	80050f6 <UART_SetConfig+0x6be>
 80050f4:	2301      	movs	r3, #1
 80050f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050fc:	e219      	b.n	8005532 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050fe:	f107 0318 	add.w	r3, r7, #24
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe f9b0 	bl	8003468 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d044      	beq.n	800519c <UART_SetConfig+0x764>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	2b01      	cmp	r3, #1
 8005118:	d03e      	beq.n	8005198 <UART_SetConfig+0x760>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b02      	cmp	r3, #2
 8005120:	d038      	beq.n	8005194 <UART_SetConfig+0x75c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2b03      	cmp	r3, #3
 8005128:	d032      	beq.n	8005190 <UART_SetConfig+0x758>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b04      	cmp	r3, #4
 8005130:	d02c      	beq.n	800518c <UART_SetConfig+0x754>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2b05      	cmp	r3, #5
 8005138:	d026      	beq.n	8005188 <UART_SetConfig+0x750>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b06      	cmp	r3, #6
 8005140:	d020      	beq.n	8005184 <UART_SetConfig+0x74c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b07      	cmp	r3, #7
 8005148:	d01a      	beq.n	8005180 <UART_SetConfig+0x748>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	2b08      	cmp	r3, #8
 8005150:	d014      	beq.n	800517c <UART_SetConfig+0x744>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b09      	cmp	r3, #9
 8005158:	d00e      	beq.n	8005178 <UART_SetConfig+0x740>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b0a      	cmp	r3, #10
 8005160:	d008      	beq.n	8005174 <UART_SetConfig+0x73c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b0b      	cmp	r3, #11
 8005168:	d102      	bne.n	8005170 <UART_SetConfig+0x738>
 800516a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800516e:	e016      	b.n	800519e <UART_SetConfig+0x766>
 8005170:	2301      	movs	r3, #1
 8005172:	e014      	b.n	800519e <UART_SetConfig+0x766>
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	e012      	b.n	800519e <UART_SetConfig+0x766>
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	e010      	b.n	800519e <UART_SetConfig+0x766>
 800517c:	2320      	movs	r3, #32
 800517e:	e00e      	b.n	800519e <UART_SetConfig+0x766>
 8005180:	2310      	movs	r3, #16
 8005182:	e00c      	b.n	800519e <UART_SetConfig+0x766>
 8005184:	230c      	movs	r3, #12
 8005186:	e00a      	b.n	800519e <UART_SetConfig+0x766>
 8005188:	230a      	movs	r3, #10
 800518a:	e008      	b.n	800519e <UART_SetConfig+0x766>
 800518c:	2308      	movs	r3, #8
 800518e:	e006      	b.n	800519e <UART_SetConfig+0x766>
 8005190:	2306      	movs	r3, #6
 8005192:	e004      	b.n	800519e <UART_SetConfig+0x766>
 8005194:	2304      	movs	r3, #4
 8005196:	e002      	b.n	800519e <UART_SetConfig+0x766>
 8005198:	2302      	movs	r3, #2
 800519a:	e000      	b.n	800519e <UART_SetConfig+0x766>
 800519c:	2301      	movs	r3, #1
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051a4:	e1c5      	b.n	8005532 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051a6:	f107 030c 	add.w	r3, r7, #12
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe faa8 	bl	8003700 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d044      	beq.n	8005244 <UART_SetConfig+0x80c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d03e      	beq.n	8005240 <UART_SetConfig+0x808>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d038      	beq.n	800523c <UART_SetConfig+0x804>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d032      	beq.n	8005238 <UART_SetConfig+0x800>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d02c      	beq.n	8005234 <UART_SetConfig+0x7fc>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d026      	beq.n	8005230 <UART_SetConfig+0x7f8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d020      	beq.n	800522c <UART_SetConfig+0x7f4>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b07      	cmp	r3, #7
 80051f0:	d01a      	beq.n	8005228 <UART_SetConfig+0x7f0>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d014      	beq.n	8005224 <UART_SetConfig+0x7ec>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b09      	cmp	r3, #9
 8005200:	d00e      	beq.n	8005220 <UART_SetConfig+0x7e8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	2b0a      	cmp	r3, #10
 8005208:	d008      	beq.n	800521c <UART_SetConfig+0x7e4>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b0b      	cmp	r3, #11
 8005210:	d102      	bne.n	8005218 <UART_SetConfig+0x7e0>
 8005212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005216:	e016      	b.n	8005246 <UART_SetConfig+0x80e>
 8005218:	2301      	movs	r3, #1
 800521a:	e014      	b.n	8005246 <UART_SetConfig+0x80e>
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	e012      	b.n	8005246 <UART_SetConfig+0x80e>
 8005220:	2340      	movs	r3, #64	; 0x40
 8005222:	e010      	b.n	8005246 <UART_SetConfig+0x80e>
 8005224:	2320      	movs	r3, #32
 8005226:	e00e      	b.n	8005246 <UART_SetConfig+0x80e>
 8005228:	2310      	movs	r3, #16
 800522a:	e00c      	b.n	8005246 <UART_SetConfig+0x80e>
 800522c:	230c      	movs	r3, #12
 800522e:	e00a      	b.n	8005246 <UART_SetConfig+0x80e>
 8005230:	230a      	movs	r3, #10
 8005232:	e008      	b.n	8005246 <UART_SetConfig+0x80e>
 8005234:	2308      	movs	r3, #8
 8005236:	e006      	b.n	8005246 <UART_SetConfig+0x80e>
 8005238:	2306      	movs	r3, #6
 800523a:	e004      	b.n	8005246 <UART_SetConfig+0x80e>
 800523c:	2304      	movs	r3, #4
 800523e:	e002      	b.n	8005246 <UART_SetConfig+0x80e>
 8005240:	2302      	movs	r3, #2
 8005242:	e000      	b.n	8005246 <UART_SetConfig+0x80e>
 8005244:	2301      	movs	r3, #1
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800524c:	e171      	b.n	8005532 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800524e:	4b7a      	ldr	r3, [pc, #488]	; (8005438 <UART_SetConfig+0xa00>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d054      	beq.n	8005304 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800525a:	4b77      	ldr	r3, [pc, #476]	; (8005438 <UART_SetConfig+0xa00>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	08db      	lsrs	r3, r3, #3
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	4a75      	ldr	r2, [pc, #468]	; (800543c <UART_SetConfig+0xa04>)
 8005266:	40da      	lsrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2b00      	cmp	r3, #0
 800526e:	d044      	beq.n	80052fa <UART_SetConfig+0x8c2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2b01      	cmp	r3, #1
 8005276:	d03e      	beq.n	80052f6 <UART_SetConfig+0x8be>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	2b02      	cmp	r3, #2
 800527e:	d038      	beq.n	80052f2 <UART_SetConfig+0x8ba>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	2b03      	cmp	r3, #3
 8005286:	d032      	beq.n	80052ee <UART_SetConfig+0x8b6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2b04      	cmp	r3, #4
 800528e:	d02c      	beq.n	80052ea <UART_SetConfig+0x8b2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	2b05      	cmp	r3, #5
 8005296:	d026      	beq.n	80052e6 <UART_SetConfig+0x8ae>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	2b06      	cmp	r3, #6
 800529e:	d020      	beq.n	80052e2 <UART_SetConfig+0x8aa>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	2b07      	cmp	r3, #7
 80052a6:	d01a      	beq.n	80052de <UART_SetConfig+0x8a6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d014      	beq.n	80052da <UART_SetConfig+0x8a2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	2b09      	cmp	r3, #9
 80052b6:	d00e      	beq.n	80052d6 <UART_SetConfig+0x89e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b0a      	cmp	r3, #10
 80052be:	d008      	beq.n	80052d2 <UART_SetConfig+0x89a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b0b      	cmp	r3, #11
 80052c6:	d102      	bne.n	80052ce <UART_SetConfig+0x896>
 80052c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052cc:	e016      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e014      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	e012      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052d6:	2340      	movs	r3, #64	; 0x40
 80052d8:	e010      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052da:	2320      	movs	r3, #32
 80052dc:	e00e      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052de:	2310      	movs	r3, #16
 80052e0:	e00c      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052e2:	230c      	movs	r3, #12
 80052e4:	e00a      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052e6:	230a      	movs	r3, #10
 80052e8:	e008      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052ea:	2308      	movs	r3, #8
 80052ec:	e006      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052ee:	2306      	movs	r3, #6
 80052f0:	e004      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052f2:	2304      	movs	r3, #4
 80052f4:	e002      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e000      	b.n	80052fc <UART_SetConfig+0x8c4>
 80052fa:	2301      	movs	r3, #1
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8005302:	e116      	b.n	8005532 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d043      	beq.n	8005394 <UART_SetConfig+0x95c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b01      	cmp	r3, #1
 8005312:	d03d      	beq.n	8005390 <UART_SetConfig+0x958>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b02      	cmp	r3, #2
 800531a:	d037      	beq.n	800538c <UART_SetConfig+0x954>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2b03      	cmp	r3, #3
 8005322:	d031      	beq.n	8005388 <UART_SetConfig+0x950>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2b04      	cmp	r3, #4
 800532a:	d02b      	beq.n	8005384 <UART_SetConfig+0x94c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b05      	cmp	r3, #5
 8005332:	d025      	beq.n	8005380 <UART_SetConfig+0x948>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2b06      	cmp	r3, #6
 800533a:	d01f      	beq.n	800537c <UART_SetConfig+0x944>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b07      	cmp	r3, #7
 8005342:	d019      	beq.n	8005378 <UART_SetConfig+0x940>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b08      	cmp	r3, #8
 800534a:	d013      	beq.n	8005374 <UART_SetConfig+0x93c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2b09      	cmp	r3, #9
 8005352:	d00d      	beq.n	8005370 <UART_SetConfig+0x938>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b0a      	cmp	r3, #10
 800535a:	d007      	beq.n	800536c <UART_SetConfig+0x934>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b0b      	cmp	r3, #11
 8005362:	d101      	bne.n	8005368 <UART_SetConfig+0x930>
 8005364:	4b36      	ldr	r3, [pc, #216]	; (8005440 <UART_SetConfig+0xa08>)
 8005366:	e016      	b.n	8005396 <UART_SetConfig+0x95e>
 8005368:	4b34      	ldr	r3, [pc, #208]	; (800543c <UART_SetConfig+0xa04>)
 800536a:	e014      	b.n	8005396 <UART_SetConfig+0x95e>
 800536c:	4b35      	ldr	r3, [pc, #212]	; (8005444 <UART_SetConfig+0xa0c>)
 800536e:	e012      	b.n	8005396 <UART_SetConfig+0x95e>
 8005370:	4b35      	ldr	r3, [pc, #212]	; (8005448 <UART_SetConfig+0xa10>)
 8005372:	e010      	b.n	8005396 <UART_SetConfig+0x95e>
 8005374:	4b35      	ldr	r3, [pc, #212]	; (800544c <UART_SetConfig+0xa14>)
 8005376:	e00e      	b.n	8005396 <UART_SetConfig+0x95e>
 8005378:	4b35      	ldr	r3, [pc, #212]	; (8005450 <UART_SetConfig+0xa18>)
 800537a:	e00c      	b.n	8005396 <UART_SetConfig+0x95e>
 800537c:	4b35      	ldr	r3, [pc, #212]	; (8005454 <UART_SetConfig+0xa1c>)
 800537e:	e00a      	b.n	8005396 <UART_SetConfig+0x95e>
 8005380:	4b35      	ldr	r3, [pc, #212]	; (8005458 <UART_SetConfig+0xa20>)
 8005382:	e008      	b.n	8005396 <UART_SetConfig+0x95e>
 8005384:	4b35      	ldr	r3, [pc, #212]	; (800545c <UART_SetConfig+0xa24>)
 8005386:	e006      	b.n	8005396 <UART_SetConfig+0x95e>
 8005388:	4b35      	ldr	r3, [pc, #212]	; (8005460 <UART_SetConfig+0xa28>)
 800538a:	e004      	b.n	8005396 <UART_SetConfig+0x95e>
 800538c:	4b35      	ldr	r3, [pc, #212]	; (8005464 <UART_SetConfig+0xa2c>)
 800538e:	e002      	b.n	8005396 <UART_SetConfig+0x95e>
 8005390:	4b35      	ldr	r3, [pc, #212]	; (8005468 <UART_SetConfig+0xa30>)
 8005392:	e000      	b.n	8005396 <UART_SetConfig+0x95e>
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <UART_SetConfig+0xa04>)
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005398:	e0cb      	b.n	8005532 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d046      	beq.n	8005430 <UART_SetConfig+0x9f8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d040      	beq.n	800542c <UART_SetConfig+0x9f4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d03a      	beq.n	8005428 <UART_SetConfig+0x9f0>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d034      	beq.n	8005424 <UART_SetConfig+0x9ec>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d02e      	beq.n	8005420 <UART_SetConfig+0x9e8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b05      	cmp	r3, #5
 80053c8:	d028      	beq.n	800541c <UART_SetConfig+0x9e4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2b06      	cmp	r3, #6
 80053d0:	d022      	beq.n	8005418 <UART_SetConfig+0x9e0>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	2b07      	cmp	r3, #7
 80053d8:	d01c      	beq.n	8005414 <UART_SetConfig+0x9dc>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d016      	beq.n	8005410 <UART_SetConfig+0x9d8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	2b09      	cmp	r3, #9
 80053e8:	d00f      	beq.n	800540a <UART_SetConfig+0x9d2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	2b0a      	cmp	r3, #10
 80053f0:	d008      	beq.n	8005404 <UART_SetConfig+0x9cc>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b0b      	cmp	r3, #11
 80053f8:	d102      	bne.n	8005400 <UART_SetConfig+0x9c8>
 80053fa:	f643 5309 	movw	r3, #15625	; 0x3d09
 80053fe:	e018      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005400:	4b13      	ldr	r3, [pc, #76]	; (8005450 <UART_SetConfig+0xa18>)
 8005402:	e016      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005404:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005408:	e013      	b.n	8005432 <UART_SetConfig+0x9fa>
 800540a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800540e:	e010      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <UART_SetConfig+0xa34>)
 8005412:	e00e      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <UART_SetConfig+0xa08>)
 8005416:	e00c      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005418:	4b15      	ldr	r3, [pc, #84]	; (8005470 <UART_SetConfig+0xa38>)
 800541a:	e00a      	b.n	8005432 <UART_SetConfig+0x9fa>
 800541c:	4b15      	ldr	r3, [pc, #84]	; (8005474 <UART_SetConfig+0xa3c>)
 800541e:	e008      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005420:	4b08      	ldr	r3, [pc, #32]	; (8005444 <UART_SetConfig+0xa0c>)
 8005422:	e006      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005424:	4b14      	ldr	r3, [pc, #80]	; (8005478 <UART_SetConfig+0xa40>)
 8005426:	e004      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <UART_SetConfig+0xa10>)
 800542a:	e002      	b.n	8005432 <UART_SetConfig+0x9fa>
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <UART_SetConfig+0xa14>)
 800542e:	e000      	b.n	8005432 <UART_SetConfig+0x9fa>
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <UART_SetConfig+0xa18>)
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005434:	e07d      	b.n	8005532 <UART_SetConfig+0xafa>
 8005436:	bf00      	nop
 8005438:	58024400 	.word	0x58024400
 800543c:	03d09000 	.word	0x03d09000
 8005440:	0003d090 	.word	0x0003d090
 8005444:	0007a120 	.word	0x0007a120
 8005448:	000f4240 	.word	0x000f4240
 800544c:	001e8480 	.word	0x001e8480
 8005450:	003d0900 	.word	0x003d0900
 8005454:	00516155 	.word	0x00516155
 8005458:	0061a800 	.word	0x0061a800
 800545c:	007a1200 	.word	0x007a1200
 8005460:	00a2c2aa 	.word	0x00a2c2aa
 8005464:	00f42400 	.word	0x00f42400
 8005468:	01e84800 	.word	0x01e84800
 800546c:	0001e848 	.word	0x0001e848
 8005470:	00051615 	.word	0x00051615
 8005474:	00061a80 	.word	0x00061a80
 8005478:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d04e      	beq.n	8005522 <UART_SetConfig+0xaea>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b01      	cmp	r3, #1
 800548a:	d047      	beq.n	800551c <UART_SetConfig+0xae4>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b02      	cmp	r3, #2
 8005492:	d040      	beq.n	8005516 <UART_SetConfig+0xade>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b03      	cmp	r3, #3
 800549a:	d039      	beq.n	8005510 <UART_SetConfig+0xad8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d032      	beq.n	800550a <UART_SetConfig+0xad2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d02b      	beq.n	8005504 <UART_SetConfig+0xacc>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	d024      	beq.n	80054fe <UART_SetConfig+0xac6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b07      	cmp	r3, #7
 80054ba:	d01d      	beq.n	80054f8 <UART_SetConfig+0xac0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d016      	beq.n	80054f2 <UART_SetConfig+0xaba>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b09      	cmp	r3, #9
 80054ca:	d00f      	beq.n	80054ec <UART_SetConfig+0xab4>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b0a      	cmp	r3, #10
 80054d2:	d008      	beq.n	80054e6 <UART_SetConfig+0xaae>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b0b      	cmp	r3, #11
 80054da:	d101      	bne.n	80054e0 <UART_SetConfig+0xaa8>
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	e022      	b.n	8005526 <UART_SetConfig+0xaee>
 80054e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e4:	e01f      	b.n	8005526 <UART_SetConfig+0xaee>
 80054e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ea:	e01c      	b.n	8005526 <UART_SetConfig+0xaee>
 80054ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054f0:	e019      	b.n	8005526 <UART_SetConfig+0xaee>
 80054f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f6:	e016      	b.n	8005526 <UART_SetConfig+0xaee>
 80054f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054fc:	e013      	b.n	8005526 <UART_SetConfig+0xaee>
 80054fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005502:	e010      	b.n	8005526 <UART_SetConfig+0xaee>
 8005504:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005508:	e00d      	b.n	8005526 <UART_SetConfig+0xaee>
 800550a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800550e:	e00a      	b.n	8005526 <UART_SetConfig+0xaee>
 8005510:	f241 5355 	movw	r3, #5461	; 0x1555
 8005514:	e007      	b.n	8005526 <UART_SetConfig+0xaee>
 8005516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800551a:	e004      	b.n	8005526 <UART_SetConfig+0xaee>
 800551c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005520:	e001      	b.n	8005526 <UART_SetConfig+0xaee>
 8005522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005528:	e003      	b.n	8005532 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005530:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	f001 83e8 	beq.w	8006d0a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005546:	429a      	cmp	r2, r3
 8005548:	d305      	bcc.n	8005556 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005552:	429a      	cmp	r2, r3
 8005554:	d904      	bls.n	8005560 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555c:	f001 bbd5 	b.w	8006d0a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8005560:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005564:	2b08      	cmp	r3, #8
 8005566:	f000 8154 	beq.w	8005812 <UART_SetConfig+0xdda>
 800556a:	2b08      	cmp	r3, #8
 800556c:	dc06      	bgt.n	800557c <UART_SetConfig+0xb44>
 800556e:	2b02      	cmp	r3, #2
 8005570:	d00f      	beq.n	8005592 <UART_SetConfig+0xb5a>
 8005572:	2b04      	cmp	r3, #4
 8005574:	f000 80ac 	beq.w	80056d0 <UART_SetConfig+0xc98>
 8005578:	f000 bc30 	b.w	8005ddc <UART_SetConfig+0x13a4>
 800557c:	2b20      	cmp	r3, #32
 800557e:	f000 832d 	beq.w	8005bdc <UART_SetConfig+0x11a4>
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	f000 83a5 	beq.w	8005cd2 <UART_SetConfig+0x129a>
 8005588:	2b10      	cmp	r3, #16
 800558a:	f000 81e3 	beq.w	8005954 <UART_SetConfig+0xf1c>
 800558e:	f000 bc25 	b.w	8005ddc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005592:	f7fd ff53 	bl	800343c <HAL_RCCEx_GetD3PCLK1Freq>
 8005596:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	4618      	mov	r0, r3
 800559c:	f04f 0100 	mov.w	r1, #0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d067      	beq.n	8005678 <UART_SetConfig+0xc40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d05e      	beq.n	800566e <UART_SetConfig+0xc36>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d055      	beq.n	8005664 <UART_SetConfig+0xc2c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d04c      	beq.n	800565a <UART_SetConfig+0xc22>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d043      	beq.n	8005650 <UART_SetConfig+0xc18>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d03a      	beq.n	8005646 <UART_SetConfig+0xc0e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b06      	cmp	r3, #6
 80055d6:	d031      	beq.n	800563c <UART_SetConfig+0xc04>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b07      	cmp	r3, #7
 80055de:	d028      	beq.n	8005632 <UART_SetConfig+0xbfa>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d01f      	beq.n	8005628 <UART_SetConfig+0xbf0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b09      	cmp	r3, #9
 80055ee:	d016      	beq.n	800561e <UART_SetConfig+0xbe6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2b0a      	cmp	r3, #10
 80055f6:	d00d      	beq.n	8005614 <UART_SetConfig+0xbdc>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b0b      	cmp	r3, #11
 80055fe:	d104      	bne.n	800560a <UART_SetConfig+0xbd2>
 8005600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	e03a      	b.n	8005680 <UART_SetConfig+0xc48>
 800560a:	f04f 0301 	mov.w	r3, #1
 800560e:	f04f 0400 	mov.w	r4, #0
 8005612:	e035      	b.n	8005680 <UART_SetConfig+0xc48>
 8005614:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	e030      	b.n	8005680 <UART_SetConfig+0xc48>
 800561e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005622:	f04f 0400 	mov.w	r4, #0
 8005626:	e02b      	b.n	8005680 <UART_SetConfig+0xc48>
 8005628:	f04f 0320 	mov.w	r3, #32
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	e026      	b.n	8005680 <UART_SetConfig+0xc48>
 8005632:	f04f 0310 	mov.w	r3, #16
 8005636:	f04f 0400 	mov.w	r4, #0
 800563a:	e021      	b.n	8005680 <UART_SetConfig+0xc48>
 800563c:	f04f 030c 	mov.w	r3, #12
 8005640:	f04f 0400 	mov.w	r4, #0
 8005644:	e01c      	b.n	8005680 <UART_SetConfig+0xc48>
 8005646:	f04f 030a 	mov.w	r3, #10
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	e017      	b.n	8005680 <UART_SetConfig+0xc48>
 8005650:	f04f 0308 	mov.w	r3, #8
 8005654:	f04f 0400 	mov.w	r4, #0
 8005658:	e012      	b.n	8005680 <UART_SetConfig+0xc48>
 800565a:	f04f 0306 	mov.w	r3, #6
 800565e:	f04f 0400 	mov.w	r4, #0
 8005662:	e00d      	b.n	8005680 <UART_SetConfig+0xc48>
 8005664:	f04f 0304 	mov.w	r3, #4
 8005668:	f04f 0400 	mov.w	r4, #0
 800566c:	e008      	b.n	8005680 <UART_SetConfig+0xc48>
 800566e:	f04f 0302 	mov.w	r3, #2
 8005672:	f04f 0400 	mov.w	r4, #0
 8005676:	e003      	b.n	8005680 <UART_SetConfig+0xc48>
 8005678:	f04f 0301 	mov.w	r3, #1
 800567c:	f04f 0400 	mov.w	r4, #0
 8005680:	461a      	mov	r2, r3
 8005682:	4623      	mov	r3, r4
 8005684:	f7fa fe28 	bl	80002d8 <__aeabi_uldivmod>
 8005688:	4603      	mov	r3, r0
 800568a:	460c      	mov	r4, r1
 800568c:	4619      	mov	r1, r3
 800568e:	4622      	mov	r2, r4
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	0214      	lsls	r4, r2, #8
 800569a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800569e:	020b      	lsls	r3, r1, #8
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6852      	ldr	r2, [r2, #4]
 80056a4:	0852      	lsrs	r2, r2, #1
 80056a6:	4611      	mov	r1, r2
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	eb13 0b01 	adds.w	fp, r3, r1
 80056b0:	eb44 0c02 	adc.w	ip, r4, r2
 80056b4:	4658      	mov	r0, fp
 80056b6:	4661      	mov	r1, ip
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f04f 0400 	mov.w	r4, #0
 80056c0:	461a      	mov	r2, r3
 80056c2:	4623      	mov	r3, r4
 80056c4:	f7fa fe08 	bl	80002d8 <__aeabi_uldivmod>
 80056c8:	4603      	mov	r3, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80056ce:	e389      	b.n	8005de4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d0:	f107 0318 	add.w	r3, r7, #24
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fd fec7 	bl	8003468 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4618      	mov	r0, r3
 80056de:	f04f 0100 	mov.w	r1, #0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d067      	beq.n	80057ba <UART_SetConfig+0xd82>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d05e      	beq.n	80057b0 <UART_SetConfig+0xd78>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d055      	beq.n	80057a6 <UART_SetConfig+0xd6e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d04c      	beq.n	800579c <UART_SetConfig+0xd64>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	2b04      	cmp	r3, #4
 8005708:	d043      	beq.n	8005792 <UART_SetConfig+0xd5a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	2b05      	cmp	r3, #5
 8005710:	d03a      	beq.n	8005788 <UART_SetConfig+0xd50>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	2b06      	cmp	r3, #6
 8005718:	d031      	beq.n	800577e <UART_SetConfig+0xd46>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	2b07      	cmp	r3, #7
 8005720:	d028      	beq.n	8005774 <UART_SetConfig+0xd3c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b08      	cmp	r3, #8
 8005728:	d01f      	beq.n	800576a <UART_SetConfig+0xd32>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	2b09      	cmp	r3, #9
 8005730:	d016      	beq.n	8005760 <UART_SetConfig+0xd28>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	2b0a      	cmp	r3, #10
 8005738:	d00d      	beq.n	8005756 <UART_SetConfig+0xd1e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	2b0b      	cmp	r3, #11
 8005740:	d104      	bne.n	800574c <UART_SetConfig+0xd14>
 8005742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005746:	f04f 0400 	mov.w	r4, #0
 800574a:	e03a      	b.n	80057c2 <UART_SetConfig+0xd8a>
 800574c:	f04f 0301 	mov.w	r3, #1
 8005750:	f04f 0400 	mov.w	r4, #0
 8005754:	e035      	b.n	80057c2 <UART_SetConfig+0xd8a>
 8005756:	f04f 0380 	mov.w	r3, #128	; 0x80
 800575a:	f04f 0400 	mov.w	r4, #0
 800575e:	e030      	b.n	80057c2 <UART_SetConfig+0xd8a>
 8005760:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005764:	f04f 0400 	mov.w	r4, #0
 8005768:	e02b      	b.n	80057c2 <UART_SetConfig+0xd8a>
 800576a:	f04f 0320 	mov.w	r3, #32
 800576e:	f04f 0400 	mov.w	r4, #0
 8005772:	e026      	b.n	80057c2 <UART_SetConfig+0xd8a>
 8005774:	f04f 0310 	mov.w	r3, #16
 8005778:	f04f 0400 	mov.w	r4, #0
 800577c:	e021      	b.n	80057c2 <UART_SetConfig+0xd8a>
 800577e:	f04f 030c 	mov.w	r3, #12
 8005782:	f04f 0400 	mov.w	r4, #0
 8005786:	e01c      	b.n	80057c2 <UART_SetConfig+0xd8a>
 8005788:	f04f 030a 	mov.w	r3, #10
 800578c:	f04f 0400 	mov.w	r4, #0
 8005790:	e017      	b.n	80057c2 <UART_SetConfig+0xd8a>
 8005792:	f04f 0308 	mov.w	r3, #8
 8005796:	f04f 0400 	mov.w	r4, #0
 800579a:	e012      	b.n	80057c2 <UART_SetConfig+0xd8a>
 800579c:	f04f 0306 	mov.w	r3, #6
 80057a0:	f04f 0400 	mov.w	r4, #0
 80057a4:	e00d      	b.n	80057c2 <UART_SetConfig+0xd8a>
 80057a6:	f04f 0304 	mov.w	r3, #4
 80057aa:	f04f 0400 	mov.w	r4, #0
 80057ae:	e008      	b.n	80057c2 <UART_SetConfig+0xd8a>
 80057b0:	f04f 0302 	mov.w	r3, #2
 80057b4:	f04f 0400 	mov.w	r4, #0
 80057b8:	e003      	b.n	80057c2 <UART_SetConfig+0xd8a>
 80057ba:	f04f 0301 	mov.w	r3, #1
 80057be:	f04f 0400 	mov.w	r4, #0
 80057c2:	461a      	mov	r2, r3
 80057c4:	4623      	mov	r3, r4
 80057c6:	f7fa fd87 	bl	80002d8 <__aeabi_uldivmod>
 80057ca:	4603      	mov	r3, r0
 80057cc:	460c      	mov	r4, r1
 80057ce:	4619      	mov	r1, r3
 80057d0:	4622      	mov	r2, r4
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	f04f 0400 	mov.w	r4, #0
 80057da:	0214      	lsls	r4, r2, #8
 80057dc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80057e0:	020b      	lsls	r3, r1, #8
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6852      	ldr	r2, [r2, #4]
 80057e6:	0852      	lsrs	r2, r2, #1
 80057e8:	4611      	mov	r1, r2
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	eb13 0b01 	adds.w	fp, r3, r1
 80057f2:	eb44 0c02 	adc.w	ip, r4, r2
 80057f6:	4658      	mov	r0, fp
 80057f8:	4661      	mov	r1, ip
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f04f 0400 	mov.w	r4, #0
 8005802:	461a      	mov	r2, r3
 8005804:	4623      	mov	r3, r4
 8005806:	f7fa fd67 	bl	80002d8 <__aeabi_uldivmod>
 800580a:	4603      	mov	r3, r0
 800580c:	460c      	mov	r4, r1
 800580e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005810:	e2e8      	b.n	8005de4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005812:	f107 030c 	add.w	r3, r7, #12
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd ff72 	bl	8003700 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4618      	mov	r0, r3
 8005820:	f04f 0100 	mov.w	r1, #0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d067      	beq.n	80058fc <UART_SetConfig+0xec4>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	2b01      	cmp	r3, #1
 8005832:	d05e      	beq.n	80058f2 <UART_SetConfig+0xeba>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	2b02      	cmp	r3, #2
 800583a:	d055      	beq.n	80058e8 <UART_SetConfig+0xeb0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	2b03      	cmp	r3, #3
 8005842:	d04c      	beq.n	80058de <UART_SetConfig+0xea6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2b04      	cmp	r3, #4
 800584a:	d043      	beq.n	80058d4 <UART_SetConfig+0xe9c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2b05      	cmp	r3, #5
 8005852:	d03a      	beq.n	80058ca <UART_SetConfig+0xe92>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	2b06      	cmp	r3, #6
 800585a:	d031      	beq.n	80058c0 <UART_SetConfig+0xe88>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	2b07      	cmp	r3, #7
 8005862:	d028      	beq.n	80058b6 <UART_SetConfig+0xe7e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	2b08      	cmp	r3, #8
 800586a:	d01f      	beq.n	80058ac <UART_SetConfig+0xe74>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	2b09      	cmp	r3, #9
 8005872:	d016      	beq.n	80058a2 <UART_SetConfig+0xe6a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2b0a      	cmp	r3, #10
 800587a:	d00d      	beq.n	8005898 <UART_SetConfig+0xe60>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b0b      	cmp	r3, #11
 8005882:	d104      	bne.n	800588e <UART_SetConfig+0xe56>
 8005884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005888:	f04f 0400 	mov.w	r4, #0
 800588c:	e03a      	b.n	8005904 <UART_SetConfig+0xecc>
 800588e:	f04f 0301 	mov.w	r3, #1
 8005892:	f04f 0400 	mov.w	r4, #0
 8005896:	e035      	b.n	8005904 <UART_SetConfig+0xecc>
 8005898:	f04f 0380 	mov.w	r3, #128	; 0x80
 800589c:	f04f 0400 	mov.w	r4, #0
 80058a0:	e030      	b.n	8005904 <UART_SetConfig+0xecc>
 80058a2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80058a6:	f04f 0400 	mov.w	r4, #0
 80058aa:	e02b      	b.n	8005904 <UART_SetConfig+0xecc>
 80058ac:	f04f 0320 	mov.w	r3, #32
 80058b0:	f04f 0400 	mov.w	r4, #0
 80058b4:	e026      	b.n	8005904 <UART_SetConfig+0xecc>
 80058b6:	f04f 0310 	mov.w	r3, #16
 80058ba:	f04f 0400 	mov.w	r4, #0
 80058be:	e021      	b.n	8005904 <UART_SetConfig+0xecc>
 80058c0:	f04f 030c 	mov.w	r3, #12
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	e01c      	b.n	8005904 <UART_SetConfig+0xecc>
 80058ca:	f04f 030a 	mov.w	r3, #10
 80058ce:	f04f 0400 	mov.w	r4, #0
 80058d2:	e017      	b.n	8005904 <UART_SetConfig+0xecc>
 80058d4:	f04f 0308 	mov.w	r3, #8
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	e012      	b.n	8005904 <UART_SetConfig+0xecc>
 80058de:	f04f 0306 	mov.w	r3, #6
 80058e2:	f04f 0400 	mov.w	r4, #0
 80058e6:	e00d      	b.n	8005904 <UART_SetConfig+0xecc>
 80058e8:	f04f 0304 	mov.w	r3, #4
 80058ec:	f04f 0400 	mov.w	r4, #0
 80058f0:	e008      	b.n	8005904 <UART_SetConfig+0xecc>
 80058f2:	f04f 0302 	mov.w	r3, #2
 80058f6:	f04f 0400 	mov.w	r4, #0
 80058fa:	e003      	b.n	8005904 <UART_SetConfig+0xecc>
 80058fc:	f04f 0301 	mov.w	r3, #1
 8005900:	f04f 0400 	mov.w	r4, #0
 8005904:	461a      	mov	r2, r3
 8005906:	4623      	mov	r3, r4
 8005908:	f7fa fce6 	bl	80002d8 <__aeabi_uldivmod>
 800590c:	4603      	mov	r3, r0
 800590e:	460c      	mov	r4, r1
 8005910:	4619      	mov	r1, r3
 8005912:	4622      	mov	r2, r4
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	f04f 0400 	mov.w	r4, #0
 800591c:	0214      	lsls	r4, r2, #8
 800591e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005922:	020b      	lsls	r3, r1, #8
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6852      	ldr	r2, [r2, #4]
 8005928:	0852      	lsrs	r2, r2, #1
 800592a:	4611      	mov	r1, r2
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	eb13 0b01 	adds.w	fp, r3, r1
 8005934:	eb44 0c02 	adc.w	ip, r4, r2
 8005938:	4658      	mov	r0, fp
 800593a:	4661      	mov	r1, ip
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f04f 0400 	mov.w	r4, #0
 8005944:	461a      	mov	r2, r3
 8005946:	4623      	mov	r3, r4
 8005948:	f7fa fcc6 	bl	80002d8 <__aeabi_uldivmod>
 800594c:	4603      	mov	r3, r0
 800594e:	460c      	mov	r4, r1
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005952:	e247      	b.n	8005de4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005954:	4b96      	ldr	r3, [pc, #600]	; (8005bb0 <UART_SetConfig+0x1178>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80a3 	beq.w	8005aa8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005962:	4b93      	ldr	r3, [pc, #588]	; (8005bb0 <UART_SetConfig+0x1178>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	08db      	lsrs	r3, r3, #3
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	4a91      	ldr	r2, [pc, #580]	; (8005bb4 <UART_SetConfig+0x117c>)
 800596e:	fa22 f303 	lsr.w	r3, r2, r3
 8005972:	4618      	mov	r0, r3
 8005974:	f04f 0100 	mov.w	r1, #0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d067      	beq.n	8005a50 <UART_SetConfig+0x1018>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b01      	cmp	r3, #1
 8005986:	d05e      	beq.n	8005a46 <UART_SetConfig+0x100e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	2b02      	cmp	r3, #2
 800598e:	d055      	beq.n	8005a3c <UART_SetConfig+0x1004>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b03      	cmp	r3, #3
 8005996:	d04c      	beq.n	8005a32 <UART_SetConfig+0xffa>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b04      	cmp	r3, #4
 800599e:	d043      	beq.n	8005a28 <UART_SetConfig+0xff0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b05      	cmp	r3, #5
 80059a6:	d03a      	beq.n	8005a1e <UART_SetConfig+0xfe6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	d031      	beq.n	8005a14 <UART_SetConfig+0xfdc>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2b07      	cmp	r3, #7
 80059b6:	d028      	beq.n	8005a0a <UART_SetConfig+0xfd2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d01f      	beq.n	8005a00 <UART_SetConfig+0xfc8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	d016      	beq.n	80059f6 <UART_SetConfig+0xfbe>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b0a      	cmp	r3, #10
 80059ce:	d00d      	beq.n	80059ec <UART_SetConfig+0xfb4>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b0b      	cmp	r3, #11
 80059d6:	d104      	bne.n	80059e2 <UART_SetConfig+0xfaa>
 80059d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059dc:	f04f 0400 	mov.w	r4, #0
 80059e0:	e03a      	b.n	8005a58 <UART_SetConfig+0x1020>
 80059e2:	f04f 0301 	mov.w	r3, #1
 80059e6:	f04f 0400 	mov.w	r4, #0
 80059ea:	e035      	b.n	8005a58 <UART_SetConfig+0x1020>
 80059ec:	f04f 0380 	mov.w	r3, #128	; 0x80
 80059f0:	f04f 0400 	mov.w	r4, #0
 80059f4:	e030      	b.n	8005a58 <UART_SetConfig+0x1020>
 80059f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80059fa:	f04f 0400 	mov.w	r4, #0
 80059fe:	e02b      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a00:	f04f 0320 	mov.w	r3, #32
 8005a04:	f04f 0400 	mov.w	r4, #0
 8005a08:	e026      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a0a:	f04f 0310 	mov.w	r3, #16
 8005a0e:	f04f 0400 	mov.w	r4, #0
 8005a12:	e021      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a14:	f04f 030c 	mov.w	r3, #12
 8005a18:	f04f 0400 	mov.w	r4, #0
 8005a1c:	e01c      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a1e:	f04f 030a 	mov.w	r3, #10
 8005a22:	f04f 0400 	mov.w	r4, #0
 8005a26:	e017      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a28:	f04f 0308 	mov.w	r3, #8
 8005a2c:	f04f 0400 	mov.w	r4, #0
 8005a30:	e012      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a32:	f04f 0306 	mov.w	r3, #6
 8005a36:	f04f 0400 	mov.w	r4, #0
 8005a3a:	e00d      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a3c:	f04f 0304 	mov.w	r3, #4
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	e008      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a46:	f04f 0302 	mov.w	r3, #2
 8005a4a:	f04f 0400 	mov.w	r4, #0
 8005a4e:	e003      	b.n	8005a58 <UART_SetConfig+0x1020>
 8005a50:	f04f 0301 	mov.w	r3, #1
 8005a54:	f04f 0400 	mov.w	r4, #0
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4623      	mov	r3, r4
 8005a5c:	f7fa fc3c 	bl	80002d8 <__aeabi_uldivmod>
 8005a60:	4603      	mov	r3, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4619      	mov	r1, r3
 8005a66:	4622      	mov	r2, r4
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	f04f 0400 	mov.w	r4, #0
 8005a70:	0214      	lsls	r4, r2, #8
 8005a72:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a76:	020b      	lsls	r3, r1, #8
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6852      	ldr	r2, [r2, #4]
 8005a7c:	0852      	lsrs	r2, r2, #1
 8005a7e:	4611      	mov	r1, r2
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	eb13 0b01 	adds.w	fp, r3, r1
 8005a88:	eb44 0c02 	adc.w	ip, r4, r2
 8005a8c:	4658      	mov	r0, fp
 8005a8e:	4661      	mov	r1, ip
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4623      	mov	r3, r4
 8005a9c:	f7fa fc1c 	bl	80002d8 <__aeabi_uldivmod>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8005aa6:	e19d      	b.n	8005de4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d05b      	beq.n	8005b68 <UART_SetConfig+0x1130>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d053      	beq.n	8005b60 <UART_SetConfig+0x1128>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d04b      	beq.n	8005b58 <UART_SetConfig+0x1120>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d043      	beq.n	8005b50 <UART_SetConfig+0x1118>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d03b      	beq.n	8005b48 <UART_SetConfig+0x1110>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2b05      	cmp	r3, #5
 8005ad6:	d033      	beq.n	8005b40 <UART_SetConfig+0x1108>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	2b06      	cmp	r3, #6
 8005ade:	d02b      	beq.n	8005b38 <UART_SetConfig+0x1100>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	2b07      	cmp	r3, #7
 8005ae6:	d023      	beq.n	8005b30 <UART_SetConfig+0x10f8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d01b      	beq.n	8005b28 <UART_SetConfig+0x10f0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	d013      	beq.n	8005b20 <UART_SetConfig+0x10e8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b0a      	cmp	r3, #10
 8005afe:	d00b      	beq.n	8005b18 <UART_SetConfig+0x10e0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b0b      	cmp	r3, #11
 8005b06:	d103      	bne.n	8005b10 <UART_SetConfig+0x10d8>
 8005b08:	4b2a      	ldr	r3, [pc, #168]	; (8005bb4 <UART_SetConfig+0x117c>)
 8005b0a:	f04f 0400 	mov.w	r4, #0
 8005b0e:	e02e      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b10:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <UART_SetConfig+0x1180>)
 8005b12:	f04f 0403 	mov.w	r4, #3
 8005b16:	e02a      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b18:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <UART_SetConfig+0x1184>)
 8005b1a:	f04f 0400 	mov.w	r4, #0
 8005b1e:	e026      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b20:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <UART_SetConfig+0x1188>)
 8005b22:	f04f 0400 	mov.w	r4, #0
 8005b26:	e022      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b28:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <UART_SetConfig+0x118c>)
 8005b2a:	f04f 0400 	mov.w	r4, #0
 8005b2e:	e01e      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b30:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <UART_SetConfig+0x1190>)
 8005b32:	f04f 0400 	mov.w	r4, #0
 8005b36:	e01a      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b38:	a419      	add	r4, pc, #100	; (adr r4, 8005ba0 <UART_SetConfig+0x1168>)
 8005b3a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005b3e:	e016      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b40:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <UART_SetConfig+0x1194>)
 8005b42:	f04f 0400 	mov.w	r4, #0
 8005b46:	e012      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b48:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <UART_SetConfig+0x1198>)
 8005b4a:	f04f 0400 	mov.w	r4, #0
 8005b4e:	e00e      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b50:	a415      	add	r4, pc, #84	; (adr r4, 8005ba8 <UART_SetConfig+0x1170>)
 8005b52:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005b56:	e00a      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b58:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <UART_SetConfig+0x119c>)
 8005b5a:	f04f 0400 	mov.w	r4, #0
 8005b5e:	e006      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b60:	4b1d      	ldr	r3, [pc, #116]	; (8005bd8 <UART_SetConfig+0x11a0>)
 8005b62:	f04f 0401 	mov.w	r4, #1
 8005b66:	e002      	b.n	8005b6e <UART_SetConfig+0x1136>
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <UART_SetConfig+0x1180>)
 8005b6a:	f04f 0403 	mov.w	r4, #3
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6852      	ldr	r2, [r2, #4]
 8005b72:	0852      	lsrs	r2, r2, #1
 8005b74:	4611      	mov	r1, r2
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	eb13 0b01 	adds.w	fp, r3, r1
 8005b7e:	eb44 0c02 	adc.w	ip, r4, r2
 8005b82:	4658      	mov	r0, fp
 8005b84:	4661      	mov	r1, ip
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4623      	mov	r3, r4
 8005b92:	f7fa fba1 	bl	80002d8 <__aeabi_uldivmod>
 8005b96:	4603      	mov	r3, r0
 8005b98:	460c      	mov	r4, r1
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b9c:	e122      	b.n	8005de4 <UART_SetConfig+0x13ac>
 8005b9e:	bf00      	nop
 8005ba0:	51615500 	.word	0x51615500
 8005ba4:	00000000 	.word	0x00000000
 8005ba8:	a2c2aa00 	.word	0xa2c2aa00
 8005bac:	00000000 	.word	0x00000000
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	03d09000 	.word	0x03d09000
 8005bb8:	d0900000 	.word	0xd0900000
 8005bbc:	07a12000 	.word	0x07a12000
 8005bc0:	0f424000 	.word	0x0f424000
 8005bc4:	1e848000 	.word	0x1e848000
 8005bc8:	3d090000 	.word	0x3d090000
 8005bcc:	61a80000 	.word	0x61a80000
 8005bd0:	7a120000 	.word	0x7a120000
 8005bd4:	f4240000 	.word	0xf4240000
 8005bd8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d05b      	beq.n	8005c9c <UART_SetConfig+0x1264>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d053      	beq.n	8005c94 <UART_SetConfig+0x125c>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d04b      	beq.n	8005c8c <UART_SetConfig+0x1254>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d043      	beq.n	8005c84 <UART_SetConfig+0x124c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d03b      	beq.n	8005c7c <UART_SetConfig+0x1244>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b05      	cmp	r3, #5
 8005c0a:	d033      	beq.n	8005c74 <UART_SetConfig+0x123c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d02b      	beq.n	8005c6c <UART_SetConfig+0x1234>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b07      	cmp	r3, #7
 8005c1a:	d023      	beq.n	8005c64 <UART_SetConfig+0x122c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d01b      	beq.n	8005c5c <UART_SetConfig+0x1224>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b09      	cmp	r3, #9
 8005c2a:	d013      	beq.n	8005c54 <UART_SetConfig+0x121c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b0a      	cmp	r3, #10
 8005c32:	d00b      	beq.n	8005c4c <UART_SetConfig+0x1214>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b0b      	cmp	r3, #11
 8005c3a:	d103      	bne.n	8005c44 <UART_SetConfig+0x120c>
 8005c3c:	4bc0      	ldr	r3, [pc, #768]	; (8005f40 <UART_SetConfig+0x1508>)
 8005c3e:	f04f 0400 	mov.w	r4, #0
 8005c42:	e02e      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c44:	4bbf      	ldr	r3, [pc, #764]	; (8005f44 <UART_SetConfig+0x150c>)
 8005c46:	f04f 0400 	mov.w	r4, #0
 8005c4a:	e02a      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c4c:	4bbe      	ldr	r3, [pc, #760]	; (8005f48 <UART_SetConfig+0x1510>)
 8005c4e:	f04f 0400 	mov.w	r4, #0
 8005c52:	e026      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c54:	4bbd      	ldr	r3, [pc, #756]	; (8005f4c <UART_SetConfig+0x1514>)
 8005c56:	f04f 0400 	mov.w	r4, #0
 8005c5a:	e022      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c5c:	4bbc      	ldr	r3, [pc, #752]	; (8005f50 <UART_SetConfig+0x1518>)
 8005c5e:	f04f 0400 	mov.w	r4, #0
 8005c62:	e01e      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c64:	4bbb      	ldr	r3, [pc, #748]	; (8005f54 <UART_SetConfig+0x151c>)
 8005c66:	f04f 0400 	mov.w	r4, #0
 8005c6a:	e01a      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c6c:	a4b0      	add	r4, pc, #704	; (adr r4, 8005f30 <UART_SetConfig+0x14f8>)
 8005c6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005c72:	e016      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c74:	4bb8      	ldr	r3, [pc, #736]	; (8005f58 <UART_SetConfig+0x1520>)
 8005c76:	f04f 0400 	mov.w	r4, #0
 8005c7a:	e012      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c7c:	4bb7      	ldr	r3, [pc, #732]	; (8005f5c <UART_SetConfig+0x1524>)
 8005c7e:	f04f 0400 	mov.w	r4, #0
 8005c82:	e00e      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c84:	a4ac      	add	r4, pc, #688	; (adr r4, 8005f38 <UART_SetConfig+0x1500>)
 8005c86:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005c8a:	e00a      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c8c:	4bb4      	ldr	r3, [pc, #720]	; (8005f60 <UART_SetConfig+0x1528>)
 8005c8e:	f04f 0400 	mov.w	r4, #0
 8005c92:	e006      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c94:	4bb3      	ldr	r3, [pc, #716]	; (8005f64 <UART_SetConfig+0x152c>)
 8005c96:	f04f 0400 	mov.w	r4, #0
 8005c9a:	e002      	b.n	8005ca2 <UART_SetConfig+0x126a>
 8005c9c:	4ba9      	ldr	r3, [pc, #676]	; (8005f44 <UART_SetConfig+0x150c>)
 8005c9e:	f04f 0400 	mov.w	r4, #0
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6852      	ldr	r2, [r2, #4]
 8005ca6:	0852      	lsrs	r2, r2, #1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	eb13 0b01 	adds.w	fp, r3, r1
 8005cb2:	eb44 0c02 	adc.w	ip, r4, r2
 8005cb6:	4658      	mov	r0, fp
 8005cb8:	4661      	mov	r1, ip
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f04f 0400 	mov.w	r4, #0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	4623      	mov	r3, r4
 8005cc6:	f7fa fb07 	bl	80002d8 <__aeabi_uldivmod>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005cd0:	e088      	b.n	8005de4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d064      	beq.n	8005da4 <UART_SetConfig+0x136c>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d05b      	beq.n	8005d9a <UART_SetConfig+0x1362>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d052      	beq.n	8005d90 <UART_SetConfig+0x1358>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d04a      	beq.n	8005d88 <UART_SetConfig+0x1350>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d041      	beq.n	8005d7e <UART_SetConfig+0x1346>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	d039      	beq.n	8005d76 <UART_SetConfig+0x133e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d031      	beq.n	8005d6e <UART_SetConfig+0x1336>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2b07      	cmp	r3, #7
 8005d10:	d028      	beq.n	8005d64 <UART_SetConfig+0x132c>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d01f      	beq.n	8005d5a <UART_SetConfig+0x1322>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	2b09      	cmp	r3, #9
 8005d20:	d016      	beq.n	8005d50 <UART_SetConfig+0x1318>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b0a      	cmp	r3, #10
 8005d28:	d00d      	beq.n	8005d46 <UART_SetConfig+0x130e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b0b      	cmp	r3, #11
 8005d30:	d104      	bne.n	8005d3c <UART_SetConfig+0x1304>
 8005d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d36:	f04f 0400 	mov.w	r4, #0
 8005d3a:	e037      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005d40:	f04f 0400 	mov.w	r4, #0
 8005d44:	e032      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d4a:	f04f 0400 	mov.w	r4, #0
 8005d4e:	e02d      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d54:	f04f 0400 	mov.w	r4, #0
 8005d58:	e028      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d5e:	f04f 0400 	mov.w	r4, #0
 8005d62:	e023      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d68:	f04f 0400 	mov.w	r4, #0
 8005d6c:	e01e      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d6e:	4b7e      	ldr	r3, [pc, #504]	; (8005f68 <UART_SetConfig+0x1530>)
 8005d70:	f04f 0400 	mov.w	r4, #0
 8005d74:	e01a      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d76:	4b7d      	ldr	r3, [pc, #500]	; (8005f6c <UART_SetConfig+0x1534>)
 8005d78:	f04f 0400 	mov.w	r4, #0
 8005d7c:	e016      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d82:	f04f 0400 	mov.w	r4, #0
 8005d86:	e011      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d88:	4b79      	ldr	r3, [pc, #484]	; (8005f70 <UART_SetConfig+0x1538>)
 8005d8a:	f04f 0400 	mov.w	r4, #0
 8005d8e:	e00d      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d94:	f04f 0400 	mov.w	r4, #0
 8005d98:	e008      	b.n	8005dac <UART_SetConfig+0x1374>
 8005d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d9e:	f04f 0400 	mov.w	r4, #0
 8005da2:	e003      	b.n	8005dac <UART_SetConfig+0x1374>
 8005da4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005da8:	f04f 0400 	mov.w	r4, #0
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6852      	ldr	r2, [r2, #4]
 8005db0:	0852      	lsrs	r2, r2, #1
 8005db2:	4611      	mov	r1, r2
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	eb13 0b01 	adds.w	fp, r3, r1
 8005dbc:	eb44 0c02 	adc.w	ip, r4, r2
 8005dc0:	4658      	mov	r0, fp
 8005dc2:	4661      	mov	r1, ip
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f04f 0400 	mov.w	r4, #0
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	f7fa fa82 	bl	80002d8 <__aeabi_uldivmod>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005dda:	e003      	b.n	8005de4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8005de2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dea:	d309      	bcc.n	8005e00 <UART_SetConfig+0x13c8>
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df2:	d205      	bcs.n	8005e00 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dfa:	60da      	str	r2, [r3, #12]
 8005dfc:	f000 bf85 	b.w	8006d0a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e06:	f000 bf80 	b.w	8006d0a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e12:	f040 83da 	bne.w	80065ca <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8005e16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005e1a:	2b40      	cmp	r3, #64	; 0x40
 8005e1c:	f200 83b3 	bhi.w	8006586 <UART_SetConfig+0x1b4e>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0x13f0>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005f75 	.word	0x08005f75
 8005e2c:	0800602d 	.word	0x0800602d
 8005e30:	08006587 	.word	0x08006587
 8005e34:	08006587 	.word	0x08006587
 8005e38:	080060e5 	.word	0x080060e5
 8005e3c:	08006587 	.word	0x08006587
 8005e40:	08006587 	.word	0x08006587
 8005e44:	08006587 	.word	0x08006587
 8005e48:	080061a1 	.word	0x080061a1
 8005e4c:	08006587 	.word	0x08006587
 8005e50:	08006587 	.word	0x08006587
 8005e54:	08006587 	.word	0x08006587
 8005e58:	08006587 	.word	0x08006587
 8005e5c:	08006587 	.word	0x08006587
 8005e60:	08006587 	.word	0x08006587
 8005e64:	08006587 	.word	0x08006587
 8005e68:	0800625d 	.word	0x0800625d
 8005e6c:	08006587 	.word	0x08006587
 8005e70:	08006587 	.word	0x08006587
 8005e74:	08006587 	.word	0x08006587
 8005e78:	08006587 	.word	0x08006587
 8005e7c:	08006587 	.word	0x08006587
 8005e80:	08006587 	.word	0x08006587
 8005e84:	08006587 	.word	0x08006587
 8005e88:	08006587 	.word	0x08006587
 8005e8c:	08006587 	.word	0x08006587
 8005e90:	08006587 	.word	0x08006587
 8005e94:	08006587 	.word	0x08006587
 8005e98:	08006587 	.word	0x08006587
 8005e9c:	08006587 	.word	0x08006587
 8005ea0:	08006587 	.word	0x08006587
 8005ea4:	08006587 	.word	0x08006587
 8005ea8:	080063cf 	.word	0x080063cf
 8005eac:	08006587 	.word	0x08006587
 8005eb0:	08006587 	.word	0x08006587
 8005eb4:	08006587 	.word	0x08006587
 8005eb8:	08006587 	.word	0x08006587
 8005ebc:	08006587 	.word	0x08006587
 8005ec0:	08006587 	.word	0x08006587
 8005ec4:	08006587 	.word	0x08006587
 8005ec8:	08006587 	.word	0x08006587
 8005ecc:	08006587 	.word	0x08006587
 8005ed0:	08006587 	.word	0x08006587
 8005ed4:	08006587 	.word	0x08006587
 8005ed8:	08006587 	.word	0x08006587
 8005edc:	08006587 	.word	0x08006587
 8005ee0:	08006587 	.word	0x08006587
 8005ee4:	08006587 	.word	0x08006587
 8005ee8:	08006587 	.word	0x08006587
 8005eec:	08006587 	.word	0x08006587
 8005ef0:	08006587 	.word	0x08006587
 8005ef4:	08006587 	.word	0x08006587
 8005ef8:	08006587 	.word	0x08006587
 8005efc:	08006587 	.word	0x08006587
 8005f00:	08006587 	.word	0x08006587
 8005f04:	08006587 	.word	0x08006587
 8005f08:	08006587 	.word	0x08006587
 8005f0c:	08006587 	.word	0x08006587
 8005f10:	08006587 	.word	0x08006587
 8005f14:	08006587 	.word	0x08006587
 8005f18:	08006587 	.word	0x08006587
 8005f1c:	08006587 	.word	0x08006587
 8005f20:	08006587 	.word	0x08006587
 8005f24:	08006587 	.word	0x08006587
 8005f28:	080064c5 	.word	0x080064c5
 8005f2c:	f3af 8000 	nop.w
 8005f30:	05161500 	.word	0x05161500
 8005f34:	00000000 	.word	0x00000000
 8005f38:	0a2c2a00 	.word	0x0a2c2a00
 8005f3c:	00000000 	.word	0x00000000
 8005f40:	003d0900 	.word	0x003d0900
 8005f44:	3d090000 	.word	0x3d090000
 8005f48:	007a1200 	.word	0x007a1200
 8005f4c:	00f42400 	.word	0x00f42400
 8005f50:	01e84800 	.word	0x01e84800
 8005f54:	03d09000 	.word	0x03d09000
 8005f58:	061a8000 	.word	0x061a8000
 8005f5c:	07a12000 	.word	0x07a12000
 8005f60:	0f424000 	.word	0x0f424000
 8005f64:	1e848000 	.word	0x1e848000
 8005f68:	000aaa00 	.word	0x000aaa00
 8005f6c:	000ccc00 	.word	0x000ccc00
 8005f70:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f74:	f7fc fb2c 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8005f78:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d044      	beq.n	800600c <UART_SetConfig+0x15d4>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d03e      	beq.n	8006008 <UART_SetConfig+0x15d0>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d038      	beq.n	8006004 <UART_SetConfig+0x15cc>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d032      	beq.n	8006000 <UART_SetConfig+0x15c8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d02c      	beq.n	8005ffc <UART_SetConfig+0x15c4>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d026      	beq.n	8005ff8 <UART_SetConfig+0x15c0>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d020      	beq.n	8005ff4 <UART_SetConfig+0x15bc>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	2b07      	cmp	r3, #7
 8005fb8:	d01a      	beq.n	8005ff0 <UART_SetConfig+0x15b8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d014      	beq.n	8005fec <UART_SetConfig+0x15b4>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	2b09      	cmp	r3, #9
 8005fc8:	d00e      	beq.n	8005fe8 <UART_SetConfig+0x15b0>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b0a      	cmp	r3, #10
 8005fd0:	d008      	beq.n	8005fe4 <UART_SetConfig+0x15ac>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	2b0b      	cmp	r3, #11
 8005fd8:	d102      	bne.n	8005fe0 <UART_SetConfig+0x15a8>
 8005fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fde:	e016      	b.n	800600e <UART_SetConfig+0x15d6>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e014      	b.n	800600e <UART_SetConfig+0x15d6>
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	e012      	b.n	800600e <UART_SetConfig+0x15d6>
 8005fe8:	2340      	movs	r3, #64	; 0x40
 8005fea:	e010      	b.n	800600e <UART_SetConfig+0x15d6>
 8005fec:	2320      	movs	r3, #32
 8005fee:	e00e      	b.n	800600e <UART_SetConfig+0x15d6>
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	e00c      	b.n	800600e <UART_SetConfig+0x15d6>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	e00a      	b.n	800600e <UART_SetConfig+0x15d6>
 8005ff8:	230a      	movs	r3, #10
 8005ffa:	e008      	b.n	800600e <UART_SetConfig+0x15d6>
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	e006      	b.n	800600e <UART_SetConfig+0x15d6>
 8006000:	2306      	movs	r3, #6
 8006002:	e004      	b.n	800600e <UART_SetConfig+0x15d6>
 8006004:	2304      	movs	r3, #4
 8006006:	e002      	b.n	800600e <UART_SetConfig+0x15d6>
 8006008:	2302      	movs	r3, #2
 800600a:	e000      	b.n	800600e <UART_SetConfig+0x15d6>
 800600c:	2301      	movs	r3, #1
 800600e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	005a      	lsls	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	441a      	add	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	fbb2 f3f3 	udiv	r3, r2, r3
 8006026:	b29b      	uxth	r3, r3
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800602a:	e2b0      	b.n	800658e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800602c:	f7fc fae6 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 8006030:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d044      	beq.n	80060c4 <UART_SetConfig+0x168c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b01      	cmp	r3, #1
 8006040:	d03e      	beq.n	80060c0 <UART_SetConfig+0x1688>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b02      	cmp	r3, #2
 8006048:	d038      	beq.n	80060bc <UART_SetConfig+0x1684>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b03      	cmp	r3, #3
 8006050:	d032      	beq.n	80060b8 <UART_SetConfig+0x1680>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b04      	cmp	r3, #4
 8006058:	d02c      	beq.n	80060b4 <UART_SetConfig+0x167c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b05      	cmp	r3, #5
 8006060:	d026      	beq.n	80060b0 <UART_SetConfig+0x1678>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b06      	cmp	r3, #6
 8006068:	d020      	beq.n	80060ac <UART_SetConfig+0x1674>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	2b07      	cmp	r3, #7
 8006070:	d01a      	beq.n	80060a8 <UART_SetConfig+0x1670>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	2b08      	cmp	r3, #8
 8006078:	d014      	beq.n	80060a4 <UART_SetConfig+0x166c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	2b09      	cmp	r3, #9
 8006080:	d00e      	beq.n	80060a0 <UART_SetConfig+0x1668>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	2b0a      	cmp	r3, #10
 8006088:	d008      	beq.n	800609c <UART_SetConfig+0x1664>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2b0b      	cmp	r3, #11
 8006090:	d102      	bne.n	8006098 <UART_SetConfig+0x1660>
 8006092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006096:	e016      	b.n	80060c6 <UART_SetConfig+0x168e>
 8006098:	2301      	movs	r3, #1
 800609a:	e014      	b.n	80060c6 <UART_SetConfig+0x168e>
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	e012      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	e010      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060a4:	2320      	movs	r3, #32
 80060a6:	e00e      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060a8:	2310      	movs	r3, #16
 80060aa:	e00c      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060ac:	230c      	movs	r3, #12
 80060ae:	e00a      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060b0:	230a      	movs	r3, #10
 80060b2:	e008      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060b4:	2308      	movs	r3, #8
 80060b6:	e006      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060b8:	2306      	movs	r3, #6
 80060ba:	e004      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060bc:	2304      	movs	r3, #4
 80060be:	e002      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e000      	b.n	80060c6 <UART_SetConfig+0x168e>
 80060c4:	2301      	movs	r3, #1
 80060c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	005a      	lsls	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060e2:	e254      	b.n	800658e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060e4:	f107 0318 	add.w	r3, r7, #24
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fd f9bd 	bl	8003468 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d044      	beq.n	8006182 <UART_SetConfig+0x174a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d03e      	beq.n	800617e <UART_SetConfig+0x1746>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	2b02      	cmp	r3, #2
 8006106:	d038      	beq.n	800617a <UART_SetConfig+0x1742>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	2b03      	cmp	r3, #3
 800610e:	d032      	beq.n	8006176 <UART_SetConfig+0x173e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b04      	cmp	r3, #4
 8006116:	d02c      	beq.n	8006172 <UART_SetConfig+0x173a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	2b05      	cmp	r3, #5
 800611e:	d026      	beq.n	800616e <UART_SetConfig+0x1736>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	2b06      	cmp	r3, #6
 8006126:	d020      	beq.n	800616a <UART_SetConfig+0x1732>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	2b07      	cmp	r3, #7
 800612e:	d01a      	beq.n	8006166 <UART_SetConfig+0x172e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	2b08      	cmp	r3, #8
 8006136:	d014      	beq.n	8006162 <UART_SetConfig+0x172a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2b09      	cmp	r3, #9
 800613e:	d00e      	beq.n	800615e <UART_SetConfig+0x1726>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b0a      	cmp	r3, #10
 8006146:	d008      	beq.n	800615a <UART_SetConfig+0x1722>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	2b0b      	cmp	r3, #11
 800614e:	d102      	bne.n	8006156 <UART_SetConfig+0x171e>
 8006150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006154:	e016      	b.n	8006184 <UART_SetConfig+0x174c>
 8006156:	2301      	movs	r3, #1
 8006158:	e014      	b.n	8006184 <UART_SetConfig+0x174c>
 800615a:	2380      	movs	r3, #128	; 0x80
 800615c:	e012      	b.n	8006184 <UART_SetConfig+0x174c>
 800615e:	2340      	movs	r3, #64	; 0x40
 8006160:	e010      	b.n	8006184 <UART_SetConfig+0x174c>
 8006162:	2320      	movs	r3, #32
 8006164:	e00e      	b.n	8006184 <UART_SetConfig+0x174c>
 8006166:	2310      	movs	r3, #16
 8006168:	e00c      	b.n	8006184 <UART_SetConfig+0x174c>
 800616a:	230c      	movs	r3, #12
 800616c:	e00a      	b.n	8006184 <UART_SetConfig+0x174c>
 800616e:	230a      	movs	r3, #10
 8006170:	e008      	b.n	8006184 <UART_SetConfig+0x174c>
 8006172:	2308      	movs	r3, #8
 8006174:	e006      	b.n	8006184 <UART_SetConfig+0x174c>
 8006176:	2306      	movs	r3, #6
 8006178:	e004      	b.n	8006184 <UART_SetConfig+0x174c>
 800617a:	2304      	movs	r3, #4
 800617c:	e002      	b.n	8006184 <UART_SetConfig+0x174c>
 800617e:	2302      	movs	r3, #2
 8006180:	e000      	b.n	8006184 <UART_SetConfig+0x174c>
 8006182:	2301      	movs	r3, #1
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	005a      	lsls	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	441a      	add	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	fbb2 f3f3 	udiv	r3, r2, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800619e:	e1f6      	b.n	800658e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a0:	f107 030c 	add.w	r3, r7, #12
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fd faab 	bl	8003700 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d044      	beq.n	800623e <UART_SetConfig+0x1806>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d03e      	beq.n	800623a <UART_SetConfig+0x1802>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d038      	beq.n	8006236 <UART_SetConfig+0x17fe>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d032      	beq.n	8006232 <UART_SetConfig+0x17fa>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d02c      	beq.n	800622e <UART_SetConfig+0x17f6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2b05      	cmp	r3, #5
 80061da:	d026      	beq.n	800622a <UART_SetConfig+0x17f2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b06      	cmp	r3, #6
 80061e2:	d020      	beq.n	8006226 <UART_SetConfig+0x17ee>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	2b07      	cmp	r3, #7
 80061ea:	d01a      	beq.n	8006222 <UART_SetConfig+0x17ea>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d014      	beq.n	800621e <UART_SetConfig+0x17e6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	2b09      	cmp	r3, #9
 80061fa:	d00e      	beq.n	800621a <UART_SetConfig+0x17e2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	2b0a      	cmp	r3, #10
 8006202:	d008      	beq.n	8006216 <UART_SetConfig+0x17de>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	2b0b      	cmp	r3, #11
 800620a:	d102      	bne.n	8006212 <UART_SetConfig+0x17da>
 800620c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006210:	e016      	b.n	8006240 <UART_SetConfig+0x1808>
 8006212:	2301      	movs	r3, #1
 8006214:	e014      	b.n	8006240 <UART_SetConfig+0x1808>
 8006216:	2380      	movs	r3, #128	; 0x80
 8006218:	e012      	b.n	8006240 <UART_SetConfig+0x1808>
 800621a:	2340      	movs	r3, #64	; 0x40
 800621c:	e010      	b.n	8006240 <UART_SetConfig+0x1808>
 800621e:	2320      	movs	r3, #32
 8006220:	e00e      	b.n	8006240 <UART_SetConfig+0x1808>
 8006222:	2310      	movs	r3, #16
 8006224:	e00c      	b.n	8006240 <UART_SetConfig+0x1808>
 8006226:	230c      	movs	r3, #12
 8006228:	e00a      	b.n	8006240 <UART_SetConfig+0x1808>
 800622a:	230a      	movs	r3, #10
 800622c:	e008      	b.n	8006240 <UART_SetConfig+0x1808>
 800622e:	2308      	movs	r3, #8
 8006230:	e006      	b.n	8006240 <UART_SetConfig+0x1808>
 8006232:	2306      	movs	r3, #6
 8006234:	e004      	b.n	8006240 <UART_SetConfig+0x1808>
 8006236:	2304      	movs	r3, #4
 8006238:	e002      	b.n	8006240 <UART_SetConfig+0x1808>
 800623a:	2302      	movs	r3, #2
 800623c:	e000      	b.n	8006240 <UART_SetConfig+0x1808>
 800623e:	2301      	movs	r3, #1
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	005a      	lsls	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	441a      	add	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	b29b      	uxth	r3, r3
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800625a:	e198      	b.n	800658e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625c:	4b87      	ldr	r3, [pc, #540]	; (800647c <UART_SetConfig+0x1a44>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d05e      	beq.n	8006326 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006268:	4b84      	ldr	r3, [pc, #528]	; (800647c <UART_SetConfig+0x1a44>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	08db      	lsrs	r3, r3, #3
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	4a83      	ldr	r2, [pc, #524]	; (8006480 <UART_SetConfig+0x1a48>)
 8006274:	40da      	lsrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	d044      	beq.n	8006308 <UART_SetConfig+0x18d0>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b01      	cmp	r3, #1
 8006284:	d03e      	beq.n	8006304 <UART_SetConfig+0x18cc>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	2b02      	cmp	r3, #2
 800628c:	d038      	beq.n	8006300 <UART_SetConfig+0x18c8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	2b03      	cmp	r3, #3
 8006294:	d032      	beq.n	80062fc <UART_SetConfig+0x18c4>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	2b04      	cmp	r3, #4
 800629c:	d02c      	beq.n	80062f8 <UART_SetConfig+0x18c0>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	d026      	beq.n	80062f4 <UART_SetConfig+0x18bc>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d020      	beq.n	80062f0 <UART_SetConfig+0x18b8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	2b07      	cmp	r3, #7
 80062b4:	d01a      	beq.n	80062ec <UART_SetConfig+0x18b4>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d014      	beq.n	80062e8 <UART_SetConfig+0x18b0>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	d00e      	beq.n	80062e4 <UART_SetConfig+0x18ac>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	2b0a      	cmp	r3, #10
 80062cc:	d008      	beq.n	80062e0 <UART_SetConfig+0x18a8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	2b0b      	cmp	r3, #11
 80062d4:	d102      	bne.n	80062dc <UART_SetConfig+0x18a4>
 80062d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062da:	e016      	b.n	800630a <UART_SetConfig+0x18d2>
 80062dc:	2301      	movs	r3, #1
 80062de:	e014      	b.n	800630a <UART_SetConfig+0x18d2>
 80062e0:	2380      	movs	r3, #128	; 0x80
 80062e2:	e012      	b.n	800630a <UART_SetConfig+0x18d2>
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	e010      	b.n	800630a <UART_SetConfig+0x18d2>
 80062e8:	2320      	movs	r3, #32
 80062ea:	e00e      	b.n	800630a <UART_SetConfig+0x18d2>
 80062ec:	2310      	movs	r3, #16
 80062ee:	e00c      	b.n	800630a <UART_SetConfig+0x18d2>
 80062f0:	230c      	movs	r3, #12
 80062f2:	e00a      	b.n	800630a <UART_SetConfig+0x18d2>
 80062f4:	230a      	movs	r3, #10
 80062f6:	e008      	b.n	800630a <UART_SetConfig+0x18d2>
 80062f8:	2308      	movs	r3, #8
 80062fa:	e006      	b.n	800630a <UART_SetConfig+0x18d2>
 80062fc:	2306      	movs	r3, #6
 80062fe:	e004      	b.n	800630a <UART_SetConfig+0x18d2>
 8006300:	2304      	movs	r3, #4
 8006302:	e002      	b.n	800630a <UART_SetConfig+0x18d2>
 8006304:	2302      	movs	r3, #2
 8006306:	e000      	b.n	800630a <UART_SetConfig+0x18d2>
 8006308:	2301      	movs	r3, #1
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	005a      	lsls	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	085b      	lsrs	r3, r3, #1
 8006316:	441a      	add	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006320:	b29b      	uxth	r3, r3
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006324:	e133      	b.n	800658e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d043      	beq.n	80063b6 <UART_SetConfig+0x197e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b01      	cmp	r3, #1
 8006334:	d03d      	beq.n	80063b2 <UART_SetConfig+0x197a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2b02      	cmp	r3, #2
 800633c:	d037      	beq.n	80063ae <UART_SetConfig+0x1976>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b03      	cmp	r3, #3
 8006344:	d031      	beq.n	80063aa <UART_SetConfig+0x1972>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b04      	cmp	r3, #4
 800634c:	d02b      	beq.n	80063a6 <UART_SetConfig+0x196e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	2b05      	cmp	r3, #5
 8006354:	d025      	beq.n	80063a2 <UART_SetConfig+0x196a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2b06      	cmp	r3, #6
 800635c:	d01f      	beq.n	800639e <UART_SetConfig+0x1966>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2b07      	cmp	r3, #7
 8006364:	d019      	beq.n	800639a <UART_SetConfig+0x1962>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	2b08      	cmp	r3, #8
 800636c:	d013      	beq.n	8006396 <UART_SetConfig+0x195e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b09      	cmp	r3, #9
 8006374:	d00d      	beq.n	8006392 <UART_SetConfig+0x195a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b0a      	cmp	r3, #10
 800637c:	d007      	beq.n	800638e <UART_SetConfig+0x1956>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2b0b      	cmp	r3, #11
 8006384:	d101      	bne.n	800638a <UART_SetConfig+0x1952>
 8006386:	4b3f      	ldr	r3, [pc, #252]	; (8006484 <UART_SetConfig+0x1a4c>)
 8006388:	e016      	b.n	80063b8 <UART_SetConfig+0x1980>
 800638a:	4b3f      	ldr	r3, [pc, #252]	; (8006488 <UART_SetConfig+0x1a50>)
 800638c:	e014      	b.n	80063b8 <UART_SetConfig+0x1980>
 800638e:	4b3f      	ldr	r3, [pc, #252]	; (800648c <UART_SetConfig+0x1a54>)
 8006390:	e012      	b.n	80063b8 <UART_SetConfig+0x1980>
 8006392:	4b3f      	ldr	r3, [pc, #252]	; (8006490 <UART_SetConfig+0x1a58>)
 8006394:	e010      	b.n	80063b8 <UART_SetConfig+0x1980>
 8006396:	4b3f      	ldr	r3, [pc, #252]	; (8006494 <UART_SetConfig+0x1a5c>)
 8006398:	e00e      	b.n	80063b8 <UART_SetConfig+0x1980>
 800639a:	4b3f      	ldr	r3, [pc, #252]	; (8006498 <UART_SetConfig+0x1a60>)
 800639c:	e00c      	b.n	80063b8 <UART_SetConfig+0x1980>
 800639e:	4b3f      	ldr	r3, [pc, #252]	; (800649c <UART_SetConfig+0x1a64>)
 80063a0:	e00a      	b.n	80063b8 <UART_SetConfig+0x1980>
 80063a2:	4b3f      	ldr	r3, [pc, #252]	; (80064a0 <UART_SetConfig+0x1a68>)
 80063a4:	e008      	b.n	80063b8 <UART_SetConfig+0x1980>
 80063a6:	4b3f      	ldr	r3, [pc, #252]	; (80064a4 <UART_SetConfig+0x1a6c>)
 80063a8:	e006      	b.n	80063b8 <UART_SetConfig+0x1980>
 80063aa:	4b3f      	ldr	r3, [pc, #252]	; (80064a8 <UART_SetConfig+0x1a70>)
 80063ac:	e004      	b.n	80063b8 <UART_SetConfig+0x1980>
 80063ae:	4b3f      	ldr	r3, [pc, #252]	; (80064ac <UART_SetConfig+0x1a74>)
 80063b0:	e002      	b.n	80063b8 <UART_SetConfig+0x1980>
 80063b2:	4b33      	ldr	r3, [pc, #204]	; (8006480 <UART_SetConfig+0x1a48>)
 80063b4:	e000      	b.n	80063b8 <UART_SetConfig+0x1980>
 80063b6:	4b34      	ldr	r3, [pc, #208]	; (8006488 <UART_SetConfig+0x1a50>)
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6852      	ldr	r2, [r2, #4]
 80063bc:	0852      	lsrs	r2, r2, #1
 80063be:	441a      	add	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063cc:	e0df      	b.n	800658e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d045      	beq.n	8006462 <UART_SetConfig+0x1a2a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d03f      	beq.n	800645e <UART_SetConfig+0x1a26>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d039      	beq.n	800645a <UART_SetConfig+0x1a22>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d033      	beq.n	8006456 <UART_SetConfig+0x1a1e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d02d      	beq.n	8006452 <UART_SetConfig+0x1a1a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d027      	beq.n	800644e <UART_SetConfig+0x1a16>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b06      	cmp	r3, #6
 8006404:	d021      	beq.n	800644a <UART_SetConfig+0x1a12>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	2b07      	cmp	r3, #7
 800640c:	d01b      	beq.n	8006446 <UART_SetConfig+0x1a0e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	2b08      	cmp	r3, #8
 8006414:	d015      	beq.n	8006442 <UART_SetConfig+0x1a0a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	2b09      	cmp	r3, #9
 800641c:	d00f      	beq.n	800643e <UART_SetConfig+0x1a06>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	2b0a      	cmp	r3, #10
 8006424:	d008      	beq.n	8006438 <UART_SetConfig+0x1a00>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	2b0b      	cmp	r3, #11
 800642c:	d102      	bne.n	8006434 <UART_SetConfig+0x19fc>
 800642e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006432:	e017      	b.n	8006464 <UART_SetConfig+0x1a2c>
 8006434:	4b18      	ldr	r3, [pc, #96]	; (8006498 <UART_SetConfig+0x1a60>)
 8006436:	e015      	b.n	8006464 <UART_SetConfig+0x1a2c>
 8006438:	f24f 4324 	movw	r3, #62500	; 0xf424
 800643c:	e012      	b.n	8006464 <UART_SetConfig+0x1a2c>
 800643e:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <UART_SetConfig+0x1a78>)
 8006440:	e010      	b.n	8006464 <UART_SetConfig+0x1a2c>
 8006442:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <UART_SetConfig+0x1a7c>)
 8006444:	e00e      	b.n	8006464 <UART_SetConfig+0x1a2c>
 8006446:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <UART_SetConfig+0x1a4c>)
 8006448:	e00c      	b.n	8006464 <UART_SetConfig+0x1a2c>
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <UART_SetConfig+0x1a80>)
 800644c:	e00a      	b.n	8006464 <UART_SetConfig+0x1a2c>
 800644e:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <UART_SetConfig+0x1a84>)
 8006450:	e008      	b.n	8006464 <UART_SetConfig+0x1a2c>
 8006452:	4b0e      	ldr	r3, [pc, #56]	; (800648c <UART_SetConfig+0x1a54>)
 8006454:	e006      	b.n	8006464 <UART_SetConfig+0x1a2c>
 8006456:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <UART_SetConfig+0x1a88>)
 8006458:	e004      	b.n	8006464 <UART_SetConfig+0x1a2c>
 800645a:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <UART_SetConfig+0x1a58>)
 800645c:	e002      	b.n	8006464 <UART_SetConfig+0x1a2c>
 800645e:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <UART_SetConfig+0x1a5c>)
 8006460:	e000      	b.n	8006464 <UART_SetConfig+0x1a2c>
 8006462:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <UART_SetConfig+0x1a60>)
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6852      	ldr	r2, [r2, #4]
 8006468:	0852      	lsrs	r2, r2, #1
 800646a:	441a      	add	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	fbb2 f3f3 	udiv	r3, r2, r3
 8006474:	b29b      	uxth	r3, r3
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006478:	e089      	b.n	800658e <UART_SetConfig+0x1b56>
 800647a:	bf00      	nop
 800647c:	58024400 	.word	0x58024400
 8006480:	03d09000 	.word	0x03d09000
 8006484:	0007a120 	.word	0x0007a120
 8006488:	07a12000 	.word	0x07a12000
 800648c:	000f4240 	.word	0x000f4240
 8006490:	001e8480 	.word	0x001e8480
 8006494:	003d0900 	.word	0x003d0900
 8006498:	007a1200 	.word	0x007a1200
 800649c:	00a2c2aa 	.word	0x00a2c2aa
 80064a0:	00c35000 	.word	0x00c35000
 80064a4:	00f42400 	.word	0x00f42400
 80064a8:	01458554 	.word	0x01458554
 80064ac:	01e84800 	.word	0x01e84800
 80064b0:	0001e848 	.word	0x0001e848
 80064b4:	0003d090 	.word	0x0003d090
 80064b8:	000a2c2a 	.word	0x000a2c2a
 80064bc:	000c3500 	.word	0x000c3500
 80064c0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d04f      	beq.n	800656c <UART_SetConfig+0x1b34>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d048      	beq.n	8006566 <UART_SetConfig+0x1b2e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d041      	beq.n	8006560 <UART_SetConfig+0x1b28>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d03a      	beq.n	800655a <UART_SetConfig+0x1b22>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d033      	beq.n	8006554 <UART_SetConfig+0x1b1c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	2b05      	cmp	r3, #5
 80064f2:	d02c      	beq.n	800654e <UART_SetConfig+0x1b16>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d025      	beq.n	8006548 <UART_SetConfig+0x1b10>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	2b07      	cmp	r3, #7
 8006502:	d01e      	beq.n	8006542 <UART_SetConfig+0x1b0a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	2b08      	cmp	r3, #8
 800650a:	d017      	beq.n	800653c <UART_SetConfig+0x1b04>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	2b09      	cmp	r3, #9
 8006512:	d010      	beq.n	8006536 <UART_SetConfig+0x1afe>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2b0a      	cmp	r3, #10
 800651a:	d009      	beq.n	8006530 <UART_SetConfig+0x1af8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	2b0b      	cmp	r3, #11
 8006522:	d102      	bne.n	800652a <UART_SetConfig+0x1af2>
 8006524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006528:	e022      	b.n	8006570 <UART_SetConfig+0x1b38>
 800652a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800652e:	e01f      	b.n	8006570 <UART_SetConfig+0x1b38>
 8006530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006534:	e01c      	b.n	8006570 <UART_SetConfig+0x1b38>
 8006536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800653a:	e019      	b.n	8006570 <UART_SetConfig+0x1b38>
 800653c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006540:	e016      	b.n	8006570 <UART_SetConfig+0x1b38>
 8006542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006546:	e013      	b.n	8006570 <UART_SetConfig+0x1b38>
 8006548:	f241 5354 	movw	r3, #5460	; 0x1554
 800654c:	e010      	b.n	8006570 <UART_SetConfig+0x1b38>
 800654e:	f641 1398 	movw	r3, #6552	; 0x1998
 8006552:	e00d      	b.n	8006570 <UART_SetConfig+0x1b38>
 8006554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006558:	e00a      	b.n	8006570 <UART_SetConfig+0x1b38>
 800655a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800655e:	e007      	b.n	8006570 <UART_SetConfig+0x1b38>
 8006560:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006564:	e004      	b.n	8006570 <UART_SetConfig+0x1b38>
 8006566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656a:	e001      	b.n	8006570 <UART_SetConfig+0x1b38>
 800656c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6852      	ldr	r2, [r2, #4]
 8006574:	0852      	lsrs	r2, r2, #1
 8006576:	441a      	add	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006580:	b29b      	uxth	r3, r3
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006584:	e003      	b.n	800658e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800658c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d916      	bls.n	80065c2 <UART_SetConfig+0x1b8a>
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659a:	d212      	bcs.n	80065c2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f023 030f 	bic.w	r3, r3, #15
 80065a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065b4:	4313      	orrs	r3, r2
 80065b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80065be:	60da      	str	r2, [r3, #12]
 80065c0:	e3a3      	b.n	8006d0a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c8:	e39f      	b.n	8006d0a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 80065ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	f200 8388 	bhi.w	8006ce4 <UART_SetConfig+0x22ac>
 80065d4:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <UART_SetConfig+0x1ba4>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	080066e1 	.word	0x080066e1
 80065e0:	08006797 	.word	0x08006797
 80065e4:	08006ce5 	.word	0x08006ce5
 80065e8:	08006ce5 	.word	0x08006ce5
 80065ec:	0800684d 	.word	0x0800684d
 80065f0:	08006ce5 	.word	0x08006ce5
 80065f4:	08006ce5 	.word	0x08006ce5
 80065f8:	08006ce5 	.word	0x08006ce5
 80065fc:	08006907 	.word	0x08006907
 8006600:	08006ce5 	.word	0x08006ce5
 8006604:	08006ce5 	.word	0x08006ce5
 8006608:	08006ce5 	.word	0x08006ce5
 800660c:	08006ce5 	.word	0x08006ce5
 8006610:	08006ce5 	.word	0x08006ce5
 8006614:	08006ce5 	.word	0x08006ce5
 8006618:	08006ce5 	.word	0x08006ce5
 800661c:	080069c1 	.word	0x080069c1
 8006620:	08006ce5 	.word	0x08006ce5
 8006624:	08006ce5 	.word	0x08006ce5
 8006628:	08006ce5 	.word	0x08006ce5
 800662c:	08006ce5 	.word	0x08006ce5
 8006630:	08006ce5 	.word	0x08006ce5
 8006634:	08006ce5 	.word	0x08006ce5
 8006638:	08006ce5 	.word	0x08006ce5
 800663c:	08006ce5 	.word	0x08006ce5
 8006640:	08006ce5 	.word	0x08006ce5
 8006644:	08006ce5 	.word	0x08006ce5
 8006648:	08006ce5 	.word	0x08006ce5
 800664c:	08006ce5 	.word	0x08006ce5
 8006650:	08006ce5 	.word	0x08006ce5
 8006654:	08006ce5 	.word	0x08006ce5
 8006658:	08006ce5 	.word	0x08006ce5
 800665c:	08006b31 	.word	0x08006b31
 8006660:	08006ce5 	.word	0x08006ce5
 8006664:	08006ce5 	.word	0x08006ce5
 8006668:	08006ce5 	.word	0x08006ce5
 800666c:	08006ce5 	.word	0x08006ce5
 8006670:	08006ce5 	.word	0x08006ce5
 8006674:	08006ce5 	.word	0x08006ce5
 8006678:	08006ce5 	.word	0x08006ce5
 800667c:	08006ce5 	.word	0x08006ce5
 8006680:	08006ce5 	.word	0x08006ce5
 8006684:	08006ce5 	.word	0x08006ce5
 8006688:	08006ce5 	.word	0x08006ce5
 800668c:	08006ce5 	.word	0x08006ce5
 8006690:	08006ce5 	.word	0x08006ce5
 8006694:	08006ce5 	.word	0x08006ce5
 8006698:	08006ce5 	.word	0x08006ce5
 800669c:	08006ce5 	.word	0x08006ce5
 80066a0:	08006ce5 	.word	0x08006ce5
 80066a4:	08006ce5 	.word	0x08006ce5
 80066a8:	08006ce5 	.word	0x08006ce5
 80066ac:	08006ce5 	.word	0x08006ce5
 80066b0:	08006ce5 	.word	0x08006ce5
 80066b4:	08006ce5 	.word	0x08006ce5
 80066b8:	08006ce5 	.word	0x08006ce5
 80066bc:	08006ce5 	.word	0x08006ce5
 80066c0:	08006ce5 	.word	0x08006ce5
 80066c4:	08006ce5 	.word	0x08006ce5
 80066c8:	08006ce5 	.word	0x08006ce5
 80066cc:	08006ce5 	.word	0x08006ce5
 80066d0:	08006ce5 	.word	0x08006ce5
 80066d4:	08006ce5 	.word	0x08006ce5
 80066d8:	08006ce5 	.word	0x08006ce5
 80066dc:	08006c25 	.word	0x08006c25
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e0:	f7fb ff76 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80066e4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d044      	beq.n	8006778 <UART_SetConfig+0x1d40>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d03e      	beq.n	8006774 <UART_SetConfig+0x1d3c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d038      	beq.n	8006770 <UART_SetConfig+0x1d38>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	2b03      	cmp	r3, #3
 8006704:	d032      	beq.n	800676c <UART_SetConfig+0x1d34>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	2b04      	cmp	r3, #4
 800670c:	d02c      	beq.n	8006768 <UART_SetConfig+0x1d30>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	2b05      	cmp	r3, #5
 8006714:	d026      	beq.n	8006764 <UART_SetConfig+0x1d2c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	2b06      	cmp	r3, #6
 800671c:	d020      	beq.n	8006760 <UART_SetConfig+0x1d28>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	2b07      	cmp	r3, #7
 8006724:	d01a      	beq.n	800675c <UART_SetConfig+0x1d24>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	2b08      	cmp	r3, #8
 800672c:	d014      	beq.n	8006758 <UART_SetConfig+0x1d20>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	2b09      	cmp	r3, #9
 8006734:	d00e      	beq.n	8006754 <UART_SetConfig+0x1d1c>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	2b0a      	cmp	r3, #10
 800673c:	d008      	beq.n	8006750 <UART_SetConfig+0x1d18>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	2b0b      	cmp	r3, #11
 8006744:	d102      	bne.n	800674c <UART_SetConfig+0x1d14>
 8006746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800674a:	e016      	b.n	800677a <UART_SetConfig+0x1d42>
 800674c:	2301      	movs	r3, #1
 800674e:	e014      	b.n	800677a <UART_SetConfig+0x1d42>
 8006750:	2380      	movs	r3, #128	; 0x80
 8006752:	e012      	b.n	800677a <UART_SetConfig+0x1d42>
 8006754:	2340      	movs	r3, #64	; 0x40
 8006756:	e010      	b.n	800677a <UART_SetConfig+0x1d42>
 8006758:	2320      	movs	r3, #32
 800675a:	e00e      	b.n	800677a <UART_SetConfig+0x1d42>
 800675c:	2310      	movs	r3, #16
 800675e:	e00c      	b.n	800677a <UART_SetConfig+0x1d42>
 8006760:	230c      	movs	r3, #12
 8006762:	e00a      	b.n	800677a <UART_SetConfig+0x1d42>
 8006764:	230a      	movs	r3, #10
 8006766:	e008      	b.n	800677a <UART_SetConfig+0x1d42>
 8006768:	2308      	movs	r3, #8
 800676a:	e006      	b.n	800677a <UART_SetConfig+0x1d42>
 800676c:	2306      	movs	r3, #6
 800676e:	e004      	b.n	800677a <UART_SetConfig+0x1d42>
 8006770:	2304      	movs	r3, #4
 8006772:	e002      	b.n	800677a <UART_SetConfig+0x1d42>
 8006774:	2302      	movs	r3, #2
 8006776:	e000      	b.n	800677a <UART_SetConfig+0x1d42>
 8006778:	2301      	movs	r3, #1
 800677a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	441a      	add	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006790:	b29b      	uxth	r3, r3
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006794:	e2aa      	b.n	8006cec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006796:	f7fb ff31 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 800679a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d044      	beq.n	800682e <UART_SetConfig+0x1df6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d03e      	beq.n	800682a <UART_SetConfig+0x1df2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d038      	beq.n	8006826 <UART_SetConfig+0x1dee>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d032      	beq.n	8006822 <UART_SetConfig+0x1dea>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d02c      	beq.n	800681e <UART_SetConfig+0x1de6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	2b05      	cmp	r3, #5
 80067ca:	d026      	beq.n	800681a <UART_SetConfig+0x1de2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d020      	beq.n	8006816 <UART_SetConfig+0x1dde>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	2b07      	cmp	r3, #7
 80067da:	d01a      	beq.n	8006812 <UART_SetConfig+0x1dda>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d014      	beq.n	800680e <UART_SetConfig+0x1dd6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	2b09      	cmp	r3, #9
 80067ea:	d00e      	beq.n	800680a <UART_SetConfig+0x1dd2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	2b0a      	cmp	r3, #10
 80067f2:	d008      	beq.n	8006806 <UART_SetConfig+0x1dce>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	2b0b      	cmp	r3, #11
 80067fa:	d102      	bne.n	8006802 <UART_SetConfig+0x1dca>
 80067fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006800:	e016      	b.n	8006830 <UART_SetConfig+0x1df8>
 8006802:	2301      	movs	r3, #1
 8006804:	e014      	b.n	8006830 <UART_SetConfig+0x1df8>
 8006806:	2380      	movs	r3, #128	; 0x80
 8006808:	e012      	b.n	8006830 <UART_SetConfig+0x1df8>
 800680a:	2340      	movs	r3, #64	; 0x40
 800680c:	e010      	b.n	8006830 <UART_SetConfig+0x1df8>
 800680e:	2320      	movs	r3, #32
 8006810:	e00e      	b.n	8006830 <UART_SetConfig+0x1df8>
 8006812:	2310      	movs	r3, #16
 8006814:	e00c      	b.n	8006830 <UART_SetConfig+0x1df8>
 8006816:	230c      	movs	r3, #12
 8006818:	e00a      	b.n	8006830 <UART_SetConfig+0x1df8>
 800681a:	230a      	movs	r3, #10
 800681c:	e008      	b.n	8006830 <UART_SetConfig+0x1df8>
 800681e:	2308      	movs	r3, #8
 8006820:	e006      	b.n	8006830 <UART_SetConfig+0x1df8>
 8006822:	2306      	movs	r3, #6
 8006824:	e004      	b.n	8006830 <UART_SetConfig+0x1df8>
 8006826:	2304      	movs	r3, #4
 8006828:	e002      	b.n	8006830 <UART_SetConfig+0x1df8>
 800682a:	2302      	movs	r3, #2
 800682c:	e000      	b.n	8006830 <UART_SetConfig+0x1df8>
 800682e:	2301      	movs	r3, #1
 8006830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006832:	fbb2 f2f3 	udiv	r2, r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	441a      	add	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	fbb2 f3f3 	udiv	r3, r2, r3
 8006846:	b29b      	uxth	r3, r3
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800684a:	e24f      	b.n	8006cec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800684c:	f107 0318 	add.w	r3, r7, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f7fc fe09 	bl	8003468 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d044      	beq.n	80068ea <UART_SetConfig+0x1eb2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	2b01      	cmp	r3, #1
 8006866:	d03e      	beq.n	80068e6 <UART_SetConfig+0x1eae>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	2b02      	cmp	r3, #2
 800686e:	d038      	beq.n	80068e2 <UART_SetConfig+0x1eaa>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b03      	cmp	r3, #3
 8006876:	d032      	beq.n	80068de <UART_SetConfig+0x1ea6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b04      	cmp	r3, #4
 800687e:	d02c      	beq.n	80068da <UART_SetConfig+0x1ea2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	2b05      	cmp	r3, #5
 8006886:	d026      	beq.n	80068d6 <UART_SetConfig+0x1e9e>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	2b06      	cmp	r3, #6
 800688e:	d020      	beq.n	80068d2 <UART_SetConfig+0x1e9a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	2b07      	cmp	r3, #7
 8006896:	d01a      	beq.n	80068ce <UART_SetConfig+0x1e96>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	2b08      	cmp	r3, #8
 800689e:	d014      	beq.n	80068ca <UART_SetConfig+0x1e92>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	2b09      	cmp	r3, #9
 80068a6:	d00e      	beq.n	80068c6 <UART_SetConfig+0x1e8e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	2b0a      	cmp	r3, #10
 80068ae:	d008      	beq.n	80068c2 <UART_SetConfig+0x1e8a>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	2b0b      	cmp	r3, #11
 80068b6:	d102      	bne.n	80068be <UART_SetConfig+0x1e86>
 80068b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068bc:	e016      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068be:	2301      	movs	r3, #1
 80068c0:	e014      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068c2:	2380      	movs	r3, #128	; 0x80
 80068c4:	e012      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068c6:	2340      	movs	r3, #64	; 0x40
 80068c8:	e010      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068ca:	2320      	movs	r3, #32
 80068cc:	e00e      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068ce:	2310      	movs	r3, #16
 80068d0:	e00c      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068d2:	230c      	movs	r3, #12
 80068d4:	e00a      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068d6:	230a      	movs	r3, #10
 80068d8:	e008      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068da:	2308      	movs	r3, #8
 80068dc:	e006      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068de:	2306      	movs	r3, #6
 80068e0:	e004      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068e2:	2304      	movs	r3, #4
 80068e4:	e002      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e000      	b.n	80068ec <UART_SetConfig+0x1eb4>
 80068ea:	2301      	movs	r3, #1
 80068ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	441a      	add	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	b29b      	uxth	r3, r3
 8006902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006904:	e1f2      	b.n	8006cec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006906:	f107 030c 	add.w	r3, r7, #12
 800690a:	4618      	mov	r0, r3
 800690c:	f7fc fef8 	bl	8003700 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d044      	beq.n	80069a4 <UART_SetConfig+0x1f6c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2b01      	cmp	r3, #1
 8006920:	d03e      	beq.n	80069a0 <UART_SetConfig+0x1f68>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	2b02      	cmp	r3, #2
 8006928:	d038      	beq.n	800699c <UART_SetConfig+0x1f64>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b03      	cmp	r3, #3
 8006930:	d032      	beq.n	8006998 <UART_SetConfig+0x1f60>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	2b04      	cmp	r3, #4
 8006938:	d02c      	beq.n	8006994 <UART_SetConfig+0x1f5c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	2b05      	cmp	r3, #5
 8006940:	d026      	beq.n	8006990 <UART_SetConfig+0x1f58>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b06      	cmp	r3, #6
 8006948:	d020      	beq.n	800698c <UART_SetConfig+0x1f54>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	2b07      	cmp	r3, #7
 8006950:	d01a      	beq.n	8006988 <UART_SetConfig+0x1f50>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	2b08      	cmp	r3, #8
 8006958:	d014      	beq.n	8006984 <UART_SetConfig+0x1f4c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b09      	cmp	r3, #9
 8006960:	d00e      	beq.n	8006980 <UART_SetConfig+0x1f48>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	2b0a      	cmp	r3, #10
 8006968:	d008      	beq.n	800697c <UART_SetConfig+0x1f44>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	2b0b      	cmp	r3, #11
 8006970:	d102      	bne.n	8006978 <UART_SetConfig+0x1f40>
 8006972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006976:	e016      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 8006978:	2301      	movs	r3, #1
 800697a:	e014      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 800697c:	2380      	movs	r3, #128	; 0x80
 800697e:	e012      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	e010      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 8006984:	2320      	movs	r3, #32
 8006986:	e00e      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 8006988:	2310      	movs	r3, #16
 800698a:	e00c      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 800698c:	230c      	movs	r3, #12
 800698e:	e00a      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 8006990:	230a      	movs	r3, #10
 8006992:	e008      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 8006994:	2308      	movs	r3, #8
 8006996:	e006      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 8006998:	2306      	movs	r3, #6
 800699a:	e004      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 800699c:	2304      	movs	r3, #4
 800699e:	e002      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e000      	b.n	80069a6 <UART_SetConfig+0x1f6e>
 80069a4:	2301      	movs	r3, #1
 80069a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	441a      	add	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069be:	e195      	b.n	8006cec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c0:	4b87      	ldr	r3, [pc, #540]	; (8006be0 <UART_SetConfig+0x21a8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d05d      	beq.n	8006a88 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069cc:	4b84      	ldr	r3, [pc, #528]	; (8006be0 <UART_SetConfig+0x21a8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	08db      	lsrs	r3, r3, #3
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	4a83      	ldr	r2, [pc, #524]	; (8006be4 <UART_SetConfig+0x21ac>)
 80069d8:	40da      	lsrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d044      	beq.n	8006a6c <UART_SetConfig+0x2034>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d03e      	beq.n	8006a68 <UART_SetConfig+0x2030>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d038      	beq.n	8006a64 <UART_SetConfig+0x202c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d032      	beq.n	8006a60 <UART_SetConfig+0x2028>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d02c      	beq.n	8006a5c <UART_SetConfig+0x2024>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	2b05      	cmp	r3, #5
 8006a08:	d026      	beq.n	8006a58 <UART_SetConfig+0x2020>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b06      	cmp	r3, #6
 8006a10:	d020      	beq.n	8006a54 <UART_SetConfig+0x201c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2b07      	cmp	r3, #7
 8006a18:	d01a      	beq.n	8006a50 <UART_SetConfig+0x2018>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d014      	beq.n	8006a4c <UART_SetConfig+0x2014>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	2b09      	cmp	r3, #9
 8006a28:	d00e      	beq.n	8006a48 <UART_SetConfig+0x2010>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	2b0a      	cmp	r3, #10
 8006a30:	d008      	beq.n	8006a44 <UART_SetConfig+0x200c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	2b0b      	cmp	r3, #11
 8006a38:	d102      	bne.n	8006a40 <UART_SetConfig+0x2008>
 8006a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a3e:	e016      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e014      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a44:	2380      	movs	r3, #128	; 0x80
 8006a46:	e012      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a48:	2340      	movs	r3, #64	; 0x40
 8006a4a:	e010      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a4c:	2320      	movs	r3, #32
 8006a4e:	e00e      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a50:	2310      	movs	r3, #16
 8006a52:	e00c      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a54:	230c      	movs	r3, #12
 8006a56:	e00a      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a58:	230a      	movs	r3, #10
 8006a5a:	e008      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	e006      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a60:	2306      	movs	r3, #6
 8006a62:	e004      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a64:	2304      	movs	r3, #4
 8006a66:	e002      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e000      	b.n	8006a6e <UART_SetConfig+0x2036>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	441a      	add	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006a86:	e131      	b.n	8006cec <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d043      	beq.n	8006b18 <UART_SetConfig+0x20e0>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d03d      	beq.n	8006b14 <UART_SetConfig+0x20dc>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d037      	beq.n	8006b10 <UART_SetConfig+0x20d8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d031      	beq.n	8006b0c <UART_SetConfig+0x20d4>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d02b      	beq.n	8006b08 <UART_SetConfig+0x20d0>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	2b05      	cmp	r3, #5
 8006ab6:	d025      	beq.n	8006b04 <UART_SetConfig+0x20cc>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d01f      	beq.n	8006b00 <UART_SetConfig+0x20c8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	2b07      	cmp	r3, #7
 8006ac6:	d019      	beq.n	8006afc <UART_SetConfig+0x20c4>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d013      	beq.n	8006af8 <UART_SetConfig+0x20c0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d00d      	beq.n	8006af4 <UART_SetConfig+0x20bc>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	2b0a      	cmp	r3, #10
 8006ade:	d007      	beq.n	8006af0 <UART_SetConfig+0x20b8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	2b0b      	cmp	r3, #11
 8006ae6:	d101      	bne.n	8006aec <UART_SetConfig+0x20b4>
 8006ae8:	4b3f      	ldr	r3, [pc, #252]	; (8006be8 <UART_SetConfig+0x21b0>)
 8006aea:	e016      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006aec:	4b3d      	ldr	r3, [pc, #244]	; (8006be4 <UART_SetConfig+0x21ac>)
 8006aee:	e014      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006af0:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <UART_SetConfig+0x21b4>)
 8006af2:	e012      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006af4:	4b3e      	ldr	r3, [pc, #248]	; (8006bf0 <UART_SetConfig+0x21b8>)
 8006af6:	e010      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006af8:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <UART_SetConfig+0x21bc>)
 8006afa:	e00e      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006afc:	4b3e      	ldr	r3, [pc, #248]	; (8006bf8 <UART_SetConfig+0x21c0>)
 8006afe:	e00c      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006b00:	4b3e      	ldr	r3, [pc, #248]	; (8006bfc <UART_SetConfig+0x21c4>)
 8006b02:	e00a      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006b04:	4b3e      	ldr	r3, [pc, #248]	; (8006c00 <UART_SetConfig+0x21c8>)
 8006b06:	e008      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006b08:	4b3e      	ldr	r3, [pc, #248]	; (8006c04 <UART_SetConfig+0x21cc>)
 8006b0a:	e006      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006b0c:	4b3e      	ldr	r3, [pc, #248]	; (8006c08 <UART_SetConfig+0x21d0>)
 8006b0e:	e004      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006b10:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <UART_SetConfig+0x21d4>)
 8006b12:	e002      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006b14:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <UART_SetConfig+0x21d8>)
 8006b16:	e000      	b.n	8006b1a <UART_SetConfig+0x20e2>
 8006b18:	4b32      	ldr	r3, [pc, #200]	; (8006be4 <UART_SetConfig+0x21ac>)
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6852      	ldr	r2, [r2, #4]
 8006b1e:	0852      	lsrs	r2, r2, #1
 8006b20:	441a      	add	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b2e:	e0dd      	b.n	8006cec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d046      	beq.n	8006bc6 <UART_SetConfig+0x218e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d040      	beq.n	8006bc2 <UART_SetConfig+0x218a>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d03a      	beq.n	8006bbe <UART_SetConfig+0x2186>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d034      	beq.n	8006bba <UART_SetConfig+0x2182>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d02e      	beq.n	8006bb6 <UART_SetConfig+0x217e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	2b05      	cmp	r3, #5
 8006b5e:	d028      	beq.n	8006bb2 <UART_SetConfig+0x217a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	2b06      	cmp	r3, #6
 8006b66:	d022      	beq.n	8006bae <UART_SetConfig+0x2176>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2b07      	cmp	r3, #7
 8006b6e:	d01c      	beq.n	8006baa <UART_SetConfig+0x2172>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d016      	beq.n	8006ba6 <UART_SetConfig+0x216e>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	2b09      	cmp	r3, #9
 8006b7e:	d00f      	beq.n	8006ba0 <UART_SetConfig+0x2168>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	2b0a      	cmp	r3, #10
 8006b86:	d008      	beq.n	8006b9a <UART_SetConfig+0x2162>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b0b      	cmp	r3, #11
 8006b8e:	d102      	bne.n	8006b96 <UART_SetConfig+0x215e>
 8006b90:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006b94:	e018      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <UART_SetConfig+0x21c0>)
 8006b98:	e016      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006b9a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006b9e:	e013      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006ba0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006ba4:	e010      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006ba6:	4b1b      	ldr	r3, [pc, #108]	; (8006c14 <UART_SetConfig+0x21dc>)
 8006ba8:	e00e      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <UART_SetConfig+0x21b0>)
 8006bac:	e00c      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006bae:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <UART_SetConfig+0x21e0>)
 8006bb0:	e00a      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <UART_SetConfig+0x21e4>)
 8006bb4:	e008      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006bb6:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <UART_SetConfig+0x21b4>)
 8006bb8:	e006      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006bba:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <UART_SetConfig+0x21e8>)
 8006bbc:	e004      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <UART_SetConfig+0x21b8>)
 8006bc0:	e002      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <UART_SetConfig+0x21bc>)
 8006bc4:	e000      	b.n	8006bc8 <UART_SetConfig+0x2190>
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <UART_SetConfig+0x21c0>)
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6852      	ldr	r2, [r2, #4]
 8006bcc:	0852      	lsrs	r2, r2, #1
 8006bce:	441a      	add	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bdc:	e086      	b.n	8006cec <UART_SetConfig+0x22b4>
 8006bde:	bf00      	nop
 8006be0:	58024400 	.word	0x58024400
 8006be4:	03d09000 	.word	0x03d09000
 8006be8:	0003d090 	.word	0x0003d090
 8006bec:	0007a120 	.word	0x0007a120
 8006bf0:	000f4240 	.word	0x000f4240
 8006bf4:	001e8480 	.word	0x001e8480
 8006bf8:	003d0900 	.word	0x003d0900
 8006bfc:	00516155 	.word	0x00516155
 8006c00:	0061a800 	.word	0x0061a800
 8006c04:	007a1200 	.word	0x007a1200
 8006c08:	00a2c2aa 	.word	0x00a2c2aa
 8006c0c:	00f42400 	.word	0x00f42400
 8006c10:	01e84800 	.word	0x01e84800
 8006c14:	0001e848 	.word	0x0001e848
 8006c18:	00051615 	.word	0x00051615
 8006c1c:	00061a80 	.word	0x00061a80
 8006c20:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d04e      	beq.n	8006cca <UART_SetConfig+0x2292>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d047      	beq.n	8006cc4 <UART_SetConfig+0x228c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d040      	beq.n	8006cbe <UART_SetConfig+0x2286>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d039      	beq.n	8006cb8 <UART_SetConfig+0x2280>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d032      	beq.n	8006cb2 <UART_SetConfig+0x227a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	2b05      	cmp	r3, #5
 8006c52:	d02b      	beq.n	8006cac <UART_SetConfig+0x2274>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	2b06      	cmp	r3, #6
 8006c5a:	d024      	beq.n	8006ca6 <UART_SetConfig+0x226e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	2b07      	cmp	r3, #7
 8006c62:	d01d      	beq.n	8006ca0 <UART_SetConfig+0x2268>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d016      	beq.n	8006c9a <UART_SetConfig+0x2262>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	2b09      	cmp	r3, #9
 8006c72:	d00f      	beq.n	8006c94 <UART_SetConfig+0x225c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	2b0a      	cmp	r3, #10
 8006c7a:	d008      	beq.n	8006c8e <UART_SetConfig+0x2256>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	2b0b      	cmp	r3, #11
 8006c82:	d101      	bne.n	8006c88 <UART_SetConfig+0x2250>
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	e022      	b.n	8006cce <UART_SetConfig+0x2296>
 8006c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c8c:	e01f      	b.n	8006cce <UART_SetConfig+0x2296>
 8006c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c92:	e01c      	b.n	8006cce <UART_SetConfig+0x2296>
 8006c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c98:	e019      	b.n	8006cce <UART_SetConfig+0x2296>
 8006c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c9e:	e016      	b.n	8006cce <UART_SetConfig+0x2296>
 8006ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ca4:	e013      	b.n	8006cce <UART_SetConfig+0x2296>
 8006ca6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006caa:	e010      	b.n	8006cce <UART_SetConfig+0x2296>
 8006cac:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006cb0:	e00d      	b.n	8006cce <UART_SetConfig+0x2296>
 8006cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cb6:	e00a      	b.n	8006cce <UART_SetConfig+0x2296>
 8006cb8:	f241 5355 	movw	r3, #5461	; 0x1555
 8006cbc:	e007      	b.n	8006cce <UART_SetConfig+0x2296>
 8006cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cc2:	e004      	b.n	8006cce <UART_SetConfig+0x2296>
 8006cc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cc8:	e001      	b.n	8006cce <UART_SetConfig+0x2296>
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6852      	ldr	r2, [r2, #4]
 8006cd2:	0852      	lsrs	r2, r2, #1
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ce2:	e003      	b.n	8006cec <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006cea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cee:	2b0f      	cmp	r3, #15
 8006cf0:	d908      	bls.n	8006d04 <UART_SetConfig+0x22cc>
 8006cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf8:	d204      	bcs.n	8006d04 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	e002      	b.n	8006d0a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006d26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3740      	adds	r7, #64	; 0x40
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01a      	beq.n	8006e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e32:	d10a      	bne.n	8006e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	605a      	str	r2, [r3, #4]
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e88:	f7fa f898 	bl	8000fbc <HAL_GetTick>
 8006e8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d10e      	bne.n	8006eba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f82c 	bl	8006f08 <UART_WaitOnFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e022      	b.n	8006f00 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d10e      	bne.n	8006ee6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f816 	bl	8006f08 <UART_WaitOnFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e00c      	b.n	8006f00 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f18:	e062      	b.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d05e      	beq.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f22:	f7fa f84b 	bl	8000fbc <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d302      	bcc.n	8006f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d11d      	bne.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f46:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0201 	bic.w	r2, r2, #1
 8006f56:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e045      	b.n	8007000 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d02e      	beq.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f90:	d126      	bne.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006faa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e00f      	b.n	8007000 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69da      	ldr	r2, [r3, #28]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	bf0c      	ite	eq
 8006ff0:	2301      	moveq	r3, #1
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d08d      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_UARTEx_DisableFifoMode+0x16>
 800701a:	2302      	movs	r3, #2
 800701c:	e027      	b.n	800706e <HAL_UARTEx_DisableFifoMode+0x66>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2224      	movs	r2, #36	; 0x24
 800702a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800704c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2220      	movs	r2, #32
 8007060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800708e:	2302      	movs	r3, #2
 8007090:	e02d      	b.n	80070ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2224      	movs	r2, #36	; 0x24
 800709e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f850 	bl	8007174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800710a:	2302      	movs	r3, #2
 800710c:	e02d      	b.n	800716a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2224      	movs	r2, #36	; 0x24
 800711a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 0201 	bic.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f812 	bl	8007174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b089      	sub	sp, #36	; 0x24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800717c:	4a2f      	ldr	r2, [pc, #188]	; (800723c <UARTEx_SetNbDataToProcess+0xc8>)
 800717e:	f107 0314 	add.w	r3, r7, #20
 8007182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007186:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800718a:	4a2d      	ldr	r2, [pc, #180]	; (8007240 <UARTEx_SetNbDataToProcess+0xcc>)
 800718c:	f107 030c 	add.w	r3, r7, #12
 8007190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007194:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071b0:	e03d      	b.n	800722e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071b2:	2308      	movs	r3, #8
 80071b4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071b6:	2308      	movs	r3, #8
 80071b8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	0e5b      	lsrs	r3, r3, #25
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	0f5b      	lsrs	r3, r3, #29
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80071da:	7fbb      	ldrb	r3, [r7, #30]
 80071dc:	7f3a      	ldrb	r2, [r7, #28]
 80071de:	f107 0120 	add.w	r1, r7, #32
 80071e2:	440a      	add	r2, r1
 80071e4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80071e8:	fb02 f303 	mul.w	r3, r2, r3
 80071ec:	7f3a      	ldrb	r2, [r7, #28]
 80071ee:	f107 0120 	add.w	r1, r7, #32
 80071f2:	440a      	add	r2, r1
 80071f4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80071f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007204:	7ffb      	ldrb	r3, [r7, #31]
 8007206:	7f7a      	ldrb	r2, [r7, #29]
 8007208:	f107 0120 	add.w	r1, r7, #32
 800720c:	440a      	add	r2, r1
 800720e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007212:	fb02 f303 	mul.w	r3, r2, r3
 8007216:	7f7a      	ldrb	r2, [r7, #29]
 8007218:	f107 0120 	add.w	r1, r7, #32
 800721c:	440a      	add	r2, r1
 800721e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007222:	fb93 f3f2 	sdiv	r3, r3, r2
 8007226:	b29a      	uxth	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800722e:	bf00      	nop
 8007230:	3724      	adds	r7, #36	; 0x24
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	080072b4 	.word	0x080072b4
 8007240:	080072bc 	.word	0x080072bc

08007244 <__libc_init_array>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	4e0d      	ldr	r6, [pc, #52]	; (800727c <__libc_init_array+0x38>)
 8007248:	4c0d      	ldr	r4, [pc, #52]	; (8007280 <__libc_init_array+0x3c>)
 800724a:	1ba4      	subs	r4, r4, r6
 800724c:	10a4      	asrs	r4, r4, #2
 800724e:	2500      	movs	r5, #0
 8007250:	42a5      	cmp	r5, r4
 8007252:	d109      	bne.n	8007268 <__libc_init_array+0x24>
 8007254:	4e0b      	ldr	r6, [pc, #44]	; (8007284 <__libc_init_array+0x40>)
 8007256:	4c0c      	ldr	r4, [pc, #48]	; (8007288 <__libc_init_array+0x44>)
 8007258:	f000 f820 	bl	800729c <_init>
 800725c:	1ba4      	subs	r4, r4, r6
 800725e:	10a4      	asrs	r4, r4, #2
 8007260:	2500      	movs	r5, #0
 8007262:	42a5      	cmp	r5, r4
 8007264:	d105      	bne.n	8007272 <__libc_init_array+0x2e>
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800726c:	4798      	blx	r3
 800726e:	3501      	adds	r5, #1
 8007270:	e7ee      	b.n	8007250 <__libc_init_array+0xc>
 8007272:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007276:	4798      	blx	r3
 8007278:	3501      	adds	r5, #1
 800727a:	e7f2      	b.n	8007262 <__libc_init_array+0x1e>
 800727c:	080072dc 	.word	0x080072dc
 8007280:	080072dc 	.word	0x080072dc
 8007284:	080072dc 	.word	0x080072dc
 8007288:	080072e0 	.word	0x080072e0

0800728c <memset>:
 800728c:	4402      	add	r2, r0
 800728e:	4603      	mov	r3, r0
 8007290:	4293      	cmp	r3, r2
 8007292:	d100      	bne.n	8007296 <memset+0xa>
 8007294:	4770      	bx	lr
 8007296:	f803 1b01 	strb.w	r1, [r3], #1
 800729a:	e7f9      	b.n	8007290 <memset+0x4>

0800729c <_init>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	bf00      	nop
 80072a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a2:	bc08      	pop	{r3}
 80072a4:	469e      	mov	lr, r3
 80072a6:	4770      	bx	lr

080072a8 <_fini>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	bf00      	nop
 80072ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ae:	bc08      	pop	{r3}
 80072b0:	469e      	mov	lr, r3
 80072b2:	4770      	bx	lr
