
Testing Dual Core_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007474  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08007794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e0  20000074  08007808  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000354  08007808  00020354  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001953e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a01  00000000  00000000  000395e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e10  00000000  00000000  0003bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d08  00000000  00000000  0003cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f529  00000000  00000000  0003db00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d94b  00000000  00000000  0007d029  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019d67f  00000000  00000000  0008a974  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00227ff3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d80  00000000  00000000  00228070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080076fc 	.word	0x080076fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	080076fc 	.word	0x080076fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <Led_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Led_init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <Led_init+0x54>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <Led_init+0x54>)
 800078c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <Led_init+0x54>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <Led_init+0x58>)
 80007b8:	f000 fdd0 	bl	800135c <HAL_GPIO_Init>
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	58024400 	.word	0x58024400
 80007c8:	58022400 	.word	0x58022400
 80007cc:	00000000 	.word	0x00000000

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af02      	add	r7, sp, #8
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007dc:	bf00      	nop
 80007de:	4b5a      	ldr	r3, [pc, #360]	; (8000948 <main+0x178>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d004      	beq.n	80007f4 <main+0x24>
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	60fa      	str	r2, [r7, #12]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dcf4      	bgt.n	80007de <main+0xe>
  if ( timeout < 0 )
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da01      	bge.n	80007fe <main+0x2e>
  {
  Error_Handler();
 80007fa:	f000 faf3 	bl	8000de4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fc2b 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f8b5 	bl	8000970 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000806:	4b50      	ldr	r3, [pc, #320]	; (8000948 <main+0x178>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	4a4e      	ldr	r2, [pc, #312]	; (8000948 <main+0x178>)
 800080e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000816:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <main+0x178>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 ff49 	bl	80016bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f000 ff5f 	bl	80016f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000836:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000838:	bf00      	nop
 800083a:	4b43      	ldr	r3, [pc, #268]	; (8000948 <main+0x178>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <main+0x80>
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	60fa      	str	r2, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	dcf4      	bgt.n	800083a <main+0x6a>
if ( timeout < 0 )
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	da01      	bge.n	800085a <main+0x8a>
{
Error_Handler();
 8000856:	f000 fac5 	bl	8000de4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 fa63 	bl	8000d24 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800085e:	f000 f9c9 	bl	8000bf4 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  Led_init();
 8000862:	f7ff ff85 	bl	8000770 <Led_init>
  UART8_Init();
 8000866:	f000 fa11 	bl	8000c8c <UART8_Init>
  MX_I2C4_Init();
 800086a:	f000 f983 	bl	8000b74 <MX_I2C4_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  buf1[0] = Commandbyte;
 800086e:	2200      	movs	r2, #0
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <main+0x17c>)
 8000872:	701a      	strb	r2, [r3, #0]
	  buf1[1] = Databyte;
 8000874:	2264      	movs	r2, #100	; 0x64
 8000876:	4b35      	ldr	r3, [pc, #212]	; (800094c <main+0x17c>)
 8000878:	705a      	strb	r2, [r3, #1]

	  ret = HAL_I2C_Master_Transmit(&hi2c4, Controlbyte, buf1, 2, HAL_MAX_DELAY);
 800087a:	2350      	movs	r3, #80	; 0x50
 800087c:	b299      	uxth	r1, r3
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2302      	movs	r3, #2
 8000886:	4a31      	ldr	r2, [pc, #196]	; (800094c <main+0x17c>)
 8000888:	4831      	ldr	r0, [pc, #196]	; (8000950 <main+0x180>)
 800088a:	f000 ffd5 	bl	8001838 <HAL_I2C_Master_Transmit>
 800088e:	4603      	mov	r3, r0
 8000890:	72fb      	strb	r3, [r7, #11]

	  	  if(ret!=HAL_OK)
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <main+0xd6>
	  	  {
	  		  strcpy((char*)buf, "Error Tx\r \n");
 8000898:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <main+0x184>)
 800089a:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <main+0x188>)
 800089c:	4614      	mov	r4, r2
 800089e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80008a0:	6020      	str	r0, [r4, #0]
 80008a2:	6061      	str	r1, [r4, #4]
 80008a4:	60a2      	str	r2, [r4, #8]
	  	  }

	  				 /* Conversion according to datasheet, temperature sensor TMP275±0.5°C */
	  				 Poti_WTOPOB = 5e3/255 * Databyte + 75;
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008b0:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000938 <main+0x168>
 80008b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008b8:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000940 <main+0x170>
 80008bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80008c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <main+0x18c>)
 80008c6:	edc3 7a00 	vstr	s15, [r3]

	  				 // Convert temperature to decimal format
	  				 Poti_WTOPOB *= 100;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <main+0x18c>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000960 <main+0x190>
 80008d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <main+0x18c>)
 80008da:	edc3 7a00 	vstr	s15, [r3]


	  				 sprintf((char*)buf,"%u.%02u C \r\n", ((unsigned int)Poti_WTOPOB / 100), ((unsigned int)Poti_WTOPOB % 100));
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <main+0x18c>)
 80008e0:	edd3 7a00 	vldr	s15, [r3]
 80008e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008e8:	ee17 2a90 	vmov	r2, s15
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <main+0x194>)
 80008ee:	fba3 2302 	umull	r2, r3, r3, r2
 80008f2:	0958      	lsrs	r0, r3, #5
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <main+0x18c>)
 80008f6:	edd3 7a00 	vldr	s15, [r3]
 80008fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008fe:	ee17 2a90 	vmov	r2, s15
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <main+0x194>)
 8000904:	fba3 1302 	umull	r1, r3, r3, r2
 8000908:	095b      	lsrs	r3, r3, #5
 800090a:	2164      	movs	r1, #100	; 0x64
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	4602      	mov	r2, r0
 8000914:	4914      	ldr	r1, [pc, #80]	; (8000968 <main+0x198>)
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <main+0x184>)
 8000918:	f006 faea 	bl	8006ef0 <siprintf>
	  				 HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <main+0x184>)
 800091e:	f7ff fcdf 	bl	80002e0 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	490a      	ldr	r1, [pc, #40]	; (8000954 <main+0x184>)
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <main+0x19c>)
 800092e:	f003 fe0f 	bl	8004550 <HAL_UART_Transmit>
	  buf1[0] = Commandbyte;
 8000932:	e79c      	b.n	800086e <main+0x9e>
 8000934:	f3af 8000 	nop.w
 8000938:	9b9b9b9c 	.word	0x9b9b9b9c
 800093c:	40339b9b 	.word	0x40339b9b
 8000940:	00000000 	.word	0x00000000
 8000944:	4052c000 	.word	0x4052c000
 8000948:	58024400 	.word	0x58024400
 800094c:	200000ec 	.word	0x200000ec
 8000950:	200000a0 	.word	0x200000a0
 8000954:	200002e8 	.word	0x200002e8
 8000958:	08007714 	.word	0x08007714
 800095c:	20000090 	.word	0x20000090
 8000960:	42c80000 	.word	0x42c80000
 8000964:	51eb851f 	.word	0x51eb851f
 8000968:	08007720 	.word	0x08007720
 800096c:	20000150 	.word	0x20000150

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0cc      	sub	sp, #304	; 0x130
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800097a:	224c      	movs	r2, #76	; 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f006 faae 	bl	8006ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000988:	2220      	movs	r2, #32
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f006 faa7 	bl	8006ee0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	23c0      	movs	r3, #192	; 0xc0
 8000998:	461a      	mov	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f006 faa0 	bl	8006ee0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009a0:	2004      	movs	r0, #4
 80009a2:	f001 fa49 	bl	8001e38 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a6:	463b      	mov	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	4b6d      	ldr	r3, [pc, #436]	; (8000b64 <SystemClock_Config+0x1f4>)
 80009ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b0:	4a6c      	ldr	r2, [pc, #432]	; (8000b64 <SystemClock_Config+0x1f4>)
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009b8:	4b6a      	ldr	r3, [pc, #424]	; (8000b64 <SystemClock_Config+0x1f4>)
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	f003 0201 	and.w	r2, r3, #1
 80009c0:	463b      	mov	r3, r7
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	4b68      	ldr	r3, [pc, #416]	; (8000b68 <SystemClock_Config+0x1f8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a67      	ldr	r2, [pc, #412]	; (8000b68 <SystemClock_Config+0x1f8>)
 80009ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b65      	ldr	r3, [pc, #404]	; (8000b68 <SystemClock_Config+0x1f8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009d8:	463b      	mov	r3, r7
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	463b      	mov	r3, r7
 80009de:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009e0:	bf00      	nop
 80009e2:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <SystemClock_Config+0x1f8>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ee:	d1f8      	bne.n	80009e2 <SystemClock_Config+0x72>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80009f0:	4b5e      	ldr	r3, [pc, #376]	; (8000b6c <SystemClock_Config+0x1fc>)
 80009f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f4:	4a5d      	ldr	r2, [pc, #372]	; (8000b6c <SystemClock_Config+0x1fc>)
 80009f6:	f023 0303 	bic.w	r3, r3, #3
 80009fa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009fc:	230a      	movs	r3, #10
 80009fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a14:	2302      	movs	r3, #2
 8000a16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000a20:	2320      	movs	r3, #32
 8000a22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000a26:	2381      	movs	r3, #129	; 0x81
 8000a28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fa49 	bl	8001eec <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a60:	f000 f9c0 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	233f      	movs	r3, #63	; 0x3f
 8000a66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fdfe 	bl	800269c <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000aa6:	f000 f99d 	bl	8000de4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <SystemClock_Config+0x200>)
 8000aae:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CEC|RCC_PERIPHCLK_QSPI
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2281      	movs	r2, #129	; 0x81
 8000aba:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2202      	movs	r2, #2
 8000ac0:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2202      	movs	r2, #2
 8000acc:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2240      	movs	r2, #64	; 0x40
 8000ad2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	665a      	str	r2, [r3, #100]	; 0x64
  PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 f99b 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x1dc>
  {
    Error_Handler();
 8000b48:	f000 f94c 	bl	8000de4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b50:	2100      	movs	r1, #0
 8000b52:	2000      	movs	r0, #0
 8000b54:	f001 ff58 	bl	8002a08 <HAL_RCC_MCOConfig>
}
 8000b58:	bf00      	nop
 8000b5a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58000400 	.word	0x58000400
 8000b68:	58024800 	.word	0x58024800
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	0bc93113 	.word	0x0bc93113

08000b74 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C4_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C4_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000bb0:	f000 fdb2 	bl	8001718 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 f913 	bl	8000de4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000bc2:	f001 f8a1 	bl	8001d08 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 f90a 	bl	8000de4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2C4_Init+0x74>)
 8000bd4:	f001 f8e3 	bl	8001d9e <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 f901 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000a0 	.word	0x200000a0
 8000bec:	58001c00 	.word	0x58001c00
 8000bf0:	10707dbc 	.word	0x10707dbc

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c3e:	f003 fc37 	bl	80044b0 <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c48:	f000 f8cc 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c50:	f006 f837 	bl	8006cc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 f8c3 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c62:	f006 f86c 	bl	8006d3e <HAL_UARTEx_SetRxFifoThreshold>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f000 f8ba 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c72:	f005 ffed 	bl	8006c50 <HAL_UARTEx_DisableFifoMode>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f8b2 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000150 	.word	0x20000150
 8000c88:	40011000 	.word	0x40011000

08000c8c <UART8_Init>:



static void UART8_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart8.Instance = UART8;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <UART8_Init+0x90>)
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <UART8_Init+0x94>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <UART8_Init+0x90>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <UART8_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <UART8_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <UART8_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <UART8_Init+0x90>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <UART8_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <UART8_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <UART8_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <UART8_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <UART8_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <UART8_Init+0x90>)
 8000cd6:	f003 fbeb 	bl	80044b0 <HAL_UART_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <UART8_Init+0x58>
  {
    Error_Handler();
 8000ce0:	f000 f880 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <UART8_Init+0x90>)
 8000ce8:	f005 ffeb 	bl	8006cc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <UART8_Init+0x6a>
  {
    Error_Handler();
 8000cf2:	f000 f877 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <UART8_Init+0x90>)
 8000cfa:	f006 f820 	bl	8006d3e <HAL_UARTEx_SetRxFifoThreshold>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <UART8_Init+0x7c>
  {
    Error_Handler();
 8000d04:	f000 f86e 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <UART8_Init+0x90>)
 8000d0a:	f005 ffa1 	bl	8006c50 <HAL_UARTEx_DisableFifoMode>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <UART8_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 f866 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000025c 	.word	0x2000025c
 8000d20:	40007c00 	.word	0x40007c00

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_GPIO_Init+0xb8>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_GPIO_Init+0xbc>)
 8000dd0:	f000 fac4 	bl	800135c <HAL_GPIO_Init>

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020000 	.word	0x58020000

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_MspInit+0x30>)
 8000dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x30>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	58024400 	.word	0x58024400

08000e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <HAL_I2C_MspInit+0x88>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d12e      	bne.n	8000ea8 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_I2C_MspInit+0x8c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <HAL_I2C_MspInit+0x8c>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_I2C_MspInit+0x8c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e68:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6e:	2312      	movs	r3, #18
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <HAL_I2C_MspInit+0x90>)
 8000e86:	f000 fa69 	bl	800135c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_I2C_MspInit+0x8c>)
 8000e8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e90:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_I2C_MspInit+0x8c>)
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_I2C_MspInit+0x8c>)
 8000e9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	58001c00 	.word	0x58001c00
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020c00 	.word	0x58020c00

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <HAL_UART_MspInit+0x88>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d12e      	bne.n	8000f3c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_UART_MspInit+0x8c>)
 8000ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ee4:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <HAL_UART_MspInit+0x8c>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_UART_MspInit+0x8c>)
 8000ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_UART_MspInit+0x8c>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <HAL_UART_MspInit+0x8c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_UART_MspInit+0x8c>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000f1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_UART_MspInit+0x90>)
 8000f38:	f000 fa10 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	; 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40011000 	.word	0x40011000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020000 	.word	0x58020000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f8ca 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x50>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x16>
		heap_end = &end;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <_sbrk+0x50>)
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <_sbrk+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <_sbrk+0x50>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <_sbrk+0x50>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	466a      	mov	r2, sp
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d907      	bls.n	8000fe6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fd6:	f005 ff59 	bl	8006e8c <__errno>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	230c      	movs	r3, #12
 8000fde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <_sbrk+0x50>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <_sbrk+0x50>)
 8000ff0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000094 	.word	0x20000094
 8001000:	20000358 	.word	0x20000358

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800100a:	e003      	b.n	8001014 <LoopCopyDataInit>

0800100c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800100e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001012:	3104      	adds	r1, #4

08001014 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800101a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800101c:	d3f6      	bcc.n	800100c <CopyDataInit>
  ldr  r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001020:	e002      	b.n	8001028 <LoopFillZerobss>

08001022 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001022:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001024:	f842 3b04 	str.w	r3, [r2], #4

08001028 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800102c:	d3f9      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102e:	f7ff fb2f 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f005 ff31 	bl	8006e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fbcb 	bl	80007d0 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001040:	08007794 	.word	0x08007794
  ldr  r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001048:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800104c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001050:	20000354 	.word	0x20000354

08001054 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC3_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f94a 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001064:	f001 fd3a 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8001068:	4601      	mov	r1, r0
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_Init+0x68>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <HAL_Init+0x6c>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	fa21 f303 	lsr.w	r3, r1, r3
 8001080:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_Init+0x68>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_Init+0x6c>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_Init+0x70>)
 800109a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800109c:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_Init+0x74>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f814 	bl	80010d0 <HAL_InitTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e002      	b.n	80010b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b2:	f7ff fe9f 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	58024400 	.word	0x58024400
 80010c4:	08007740 	.word	0x08007740
 80010c8:	20000004 	.word	0x20000004
 80010cc:	20000000 	.word	0x20000000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_InitTick+0x60>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e021      	b.n	8001128 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_InitTick+0x64>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_InitTick+0x60>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f921 	bl	8001342 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f8f9 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_InitTick+0x68>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000000c 	.word	0x2000000c
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000000c 	.word	0x2000000c
 8001160:	2000034c 	.word	0x2000034c

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000034c 	.word	0x2000034c

0800117c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_GetREVID+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0c1b      	lsrs	r3, r3, #16
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	5c001000 	.word	0x5c001000

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	05fa0000 	.word	0x05fa0000

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff47 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff5e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff90 	bl	800124c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5f 	bl	80011f8 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb2 	bl	80012b4 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_GPIO_Init+0x234>)
 800136c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800136e:	e194      	b.n	800169a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8186 	beq.w	8001694 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d00b      	beq.n	80013a8 <HAL_GPIO_Init+0x4c>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d007      	beq.n	80013a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800139c:	2b11      	cmp	r3, #17
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0xee>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b12      	cmp	r3, #18
 8001448:	d123      	bne.n	8001492 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	69b9      	ldr	r1, [r7, #24]
 800148e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0203 	and.w	r2, r3, #3
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80e0 	beq.w	8001694 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_GPIO_Init+0x238>)
 80014d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014da:	4a2e      	ldr	r2, [pc, #184]	; (8001594 <HAL_GPIO_Init+0x238>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_GPIO_Init+0x238>)
 80014e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_GPIO_Init+0x23c>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_GPIO_Init+0x240>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d052      	beq.n	80015c4 <HAL_GPIO_Init+0x268>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_GPIO_Init+0x244>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d031      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_GPIO_Init+0x248>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d02b      	beq.n	8001586 <HAL_GPIO_Init+0x22a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_GPIO_Init+0x24c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_Init+0x226>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <HAL_GPIO_Init+0x250>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_Init+0x222>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <HAL_GPIO_Init+0x254>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_Init+0x21e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <HAL_GPIO_Init+0x258>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <HAL_GPIO_Init+0x25c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_GPIO_Init+0x260>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_GPIO_Init+0x264>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x20e>
 8001566:	2309      	movs	r3, #9
 8001568:	e02d      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800156a:	230a      	movs	r3, #10
 800156c:	e02b      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800156e:	2308      	movs	r3, #8
 8001570:	e029      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 8001572:	2307      	movs	r3, #7
 8001574:	e027      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 8001576:	2306      	movs	r3, #6
 8001578:	e025      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800157a:	2305      	movs	r3, #5
 800157c:	e023      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800157e:	2304      	movs	r3, #4
 8001580:	e021      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 8001582:	2303      	movs	r3, #3
 8001584:	e01f      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 8001586:	2302      	movs	r3, #2
 8001588:	e01d      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800158a:	2301      	movs	r3, #1
 800158c:	e01b      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800158e:	bf00      	nop
 8001590:	58000080 	.word	0x58000080
 8001594:	58024400 	.word	0x58024400
 8001598:	58000400 	.word	0x58000400
 800159c:	58020000 	.word	0x58020000
 80015a0:	58020400 	.word	0x58020400
 80015a4:	58020800 	.word	0x58020800
 80015a8:	58020c00 	.word	0x58020c00
 80015ac:	58021000 	.word	0x58021000
 80015b0:	58021400 	.word	0x58021400
 80015b4:	58021800 	.word	0x58021800
 80015b8:	58021c00 	.word	0x58021c00
 80015bc:	58022000 	.word	0x58022000
 80015c0:	58022400 	.word	0x58022400
 80015c4:	2300      	movs	r3, #0
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	f002 0203 	and.w	r2, r2, #3
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4093      	lsls	r3, r2
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d6:	4938      	ldr	r1, [pc, #224]	; (80016b8 <HAL_GPIO_Init+0x35c>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800165e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800168c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3301      	adds	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f47f ae63 	bne.w	8001370 <HAL_GPIO_Init+0x14>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	58000400 	.word	0x58000400

080016bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80016c4:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_HSEM_FastTake+0x2c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3320      	adds	r3, #32
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_HSEM_FastTake+0x30>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	58026400 	.word	0x58026400
 80016ec:	80000300 	.word	0x80000300

080016f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016fa:	4906      	ldr	r1, [pc, #24]	; (8001714 <HAL_HSEM_Release+0x24>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	58026400 	.word	0x58026400

08001718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fb72 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2224      	movs	r2, #36	; 0x24
 8001748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001768:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001778:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	e006      	b.n	80017a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800179e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d104      	bne.n	80017b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_I2C_Init+0x11c>)
 80017be:	430b      	orrs	r3, r1
 80017c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	ea42 0103 	orr.w	r1, r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	021a      	lsls	r2, r3, #8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69d9      	ldr	r1, [r3, #28]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	02008000 	.word	0x02008000

08001838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af02      	add	r7, sp, #8
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	461a      	mov	r2, r3
 8001844:	460b      	mov	r3, r1
 8001846:	817b      	strh	r3, [r7, #10]
 8001848:	4613      	mov	r3, r2
 800184a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b20      	cmp	r3, #32
 8001856:	f040 80da 	bne.w	8001a0e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_I2C_Master_Transmit+0x30>
 8001864:	2302      	movs	r3, #2
 8001866:	e0d3      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x1d8>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001870:	f7ff fc78 	bl	8001164 <HAL_GetTick>
 8001874:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2319      	movs	r3, #25
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f8f0 	bl	8001a68 <I2C_WaitOnFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0be      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2221      	movs	r2, #33	; 0x21
 8001896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2210      	movs	r2, #16
 800189e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	893a      	ldrh	r2, [r7, #8]
 80018b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2bff      	cmp	r3, #255	; 0xff
 80018c2:	d90e      	bls.n	80018e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	22ff      	movs	r2, #255	; 0xff
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	4b51      	ldr	r3, [pc, #324]	; (8001a18 <HAL_I2C_Master_Transmit+0x1e0>)
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f9e6 	bl	8001cac <I2C_TransferConfig>
 80018e0:	e06c      	b.n	80019bc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	8979      	ldrh	r1, [r7, #10]
 80018f4:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <HAL_I2C_Master_Transmit+0x1e0>)
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f9d5 	bl	8001cac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001902:	e05b      	b.n	80019bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	6a39      	ldr	r1, [r7, #32]
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f8ed 	bl	8001ae8 <I2C_WaitOnTXISFlagUntilTimeout>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e07b      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d034      	beq.n	80019bc <HAL_I2C_Master_Transmit+0x184>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	2b00      	cmp	r3, #0
 8001958:	d130      	bne.n	80019bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	2200      	movs	r2, #0
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f87f 	bl	8001a68 <I2C_WaitOnFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e04d      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	d90e      	bls.n	800199c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	22ff      	movs	r2, #255	; 0xff
 8001982:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001988:	b2da      	uxtb	r2, r3
 800198a:	8979      	ldrh	r1, [r7, #10]
 800198c:	2300      	movs	r3, #0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f989 	bl	8001cac <I2C_TransferConfig>
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	8979      	ldrh	r1, [r7, #10]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f978 	bl	8001cac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d19e      	bne.n	8001904 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	6a39      	ldr	r1, [r7, #32]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f8cc 	bl	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e01a      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2220      	movs	r2, #32
 80019e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_I2C_Master_Transmit+0x1e4>)
 80019ee:	400b      	ands	r3, r1
 80019f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
  }
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	80002000 	.word	0x80002000
 8001a1c:	fe00e800 	.word	0xfe00e800

08001a20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d103      	bne.n	8001a3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d007      	beq.n	8001a5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	619a      	str	r2, [r3, #24]
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a78:	e022      	b.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d01e      	beq.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a82:	f7ff fb6f 	bl	8001164 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d302      	bcc.n	8001a98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d113      	bne.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e00f      	b.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d0cd      	beq.n	8001a7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001af4:	e02c      	b.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f870 	bl	8001be0 <I2C_IsAcknowledgeFailed>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e02a      	b.n	8001b60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d01e      	beq.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b12:	f7ff fb27 	bl	8001164 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d113      	bne.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e007      	b.n	8001b60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d1cb      	bne.n	8001af6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b74:	e028      	b.n	8001bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f830 	bl	8001be0 <I2C_IsAcknowledgeFailed>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e026      	b.n	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8a:	f7ff faeb 	bl	8001164 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d302      	bcc.n	8001ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d113      	bne.n	8001bc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	f043 0220 	orr.w	r2, r3, #32
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e007      	b.n	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d1cf      	bne.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d151      	bne.n	8001c9e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bfa:	e022      	b.n	8001c42 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c02:	d01e      	beq.n	8001c42 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c04:	f7ff faae 	bl	8001164 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d302      	bcc.n	8001c1a <I2C_IsAcknowledgeFailed+0x3a>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d113      	bne.n	8001c42 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f043 0220 	orr.w	r2, r3, #32
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e02e      	b.n	8001ca0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d1d5      	bne.n	8001bfc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2210      	movs	r2, #16
 8001c56:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff fedd 	bl	8001a20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c72:	400b      	ands	r3, r1
 8001c74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f043 0204 	orr.w	r2, r3, #4
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	fe00e800 	.word	0xfe00e800

08001cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	817b      	strh	r3, [r7, #10]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	0d5b      	lsrs	r3, r3, #21
 8001cc8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <I2C_TransferConfig+0x58>)
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	ea02 0103 	and.w	r1, r2, r3
 8001cd6:	897b      	ldrh	r3, [r7, #10]
 8001cd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cdc:	7a7b      	ldrb	r3, [r7, #9]
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	03ff63ff 	.word	0x03ff63ff

08001d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d138      	bne.n	8001d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e032      	b.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d139      	bne.n	8001e28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e033      	b.n	8001e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2224      	movs	r2, #36	; 0x24
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001df0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d00a      	beq.n	8001e62 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e040      	b.n	8001ee0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e03e      	b.n	8001ee0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e6a:	491f      	ldr	r1, [pc, #124]	; (8001ee8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e72:	f7ff f977 	bl	8001164 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e78:	e009      	b.n	8001e8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e7a:	f7ff f973 	bl	8001164 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e88:	d901      	bls.n	8001e8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e028      	b.n	8001ee0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b1e      	cmp	r3, #30
 8001ea0:	d008      	beq.n	8001eb4 <HAL_PWREx_ConfigSupply+0x7c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ea6:	d005      	beq.n	8001eb4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b1d      	cmp	r3, #29
 8001eac:	d002      	beq.n	8001eb4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b2d      	cmp	r3, #45	; 0x2d
 8001eb2:	d114      	bne.n	8001ede <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001eb4:	f7ff f956 	bl	8001164 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001eba:	e009      	b.n	8001ed0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ebc:	f7ff f952 	bl	8001164 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eca:	d901      	bls.n	8001ed0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e007      	b.n	8001ee0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d1ee      	bne.n	8001ebc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	58024800 	.word	0x58024800

08001eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e3c4      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8087 	beq.w	800201a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0c:	4ba2      	ldr	r3, [pc, #648]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f16:	4ba0      	ldr	r3, [pc, #640]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46>
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	2b18      	cmp	r3, #24
 8001f26:	d110      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5e>
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d10b      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f32:	4b99      	ldr	r3, [pc, #612]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d06c      	beq.n	8002018 <HAL_RCC_OscConfig+0x12c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d168      	bne.n	8002018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e39e      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x76>
 8001f54:	4b90      	ldr	r3, [pc, #576]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a8f      	ldr	r2, [pc, #572]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	e02e      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x98>
 8001f6a:	4b8b      	ldr	r3, [pc, #556]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a8a      	ldr	r2, [pc, #552]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a87      	ldr	r2, [pc, #540]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e01d      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xbc>
 8001f8e:	4b82      	ldr	r3, [pc, #520]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a81      	ldr	r2, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a7e      	ldr	r2, [pc, #504]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001fa8:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b78      	ldr	r3, [pc, #480]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f8cc 	bl	8001164 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f8c8 	bl	8001164 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e352      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fe2:	4b6d      	ldr	r3, [pc, #436]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xe4>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f8b8 	bl	8001164 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f8b4 	bl	8001164 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e33e      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x10c>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8092 	beq.w	800214c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002028:	4b5b      	ldr	r3, [pc, #364]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002030:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002032:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_RCC_OscConfig+0x162>
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	2b18      	cmp	r3, #24
 8002042:	d12d      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1b4>
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d128      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204e:	4b52      	ldr	r3, [pc, #328]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e310      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	f7ff f889 	bl	800117c <HAL_GetREVID>
 800206a:	4602      	mov	r2, r0
 800206c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002070:	429a      	cmp	r2, r3
 8002072:	d80a      	bhi.n	800208a <HAL_RCC_OscConfig+0x19e>
 8002074:	4b48      	ldr	r3, [pc, #288]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	031b      	lsls	r3, r3, #12
 8002082:	4945      	ldr	r1, [pc, #276]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002088:	e060      	b.n	800214c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	061b      	lsls	r3, r3, #24
 8002098:	493f      	ldr	r1, [pc, #252]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800209e:	e055      	b.n	800214c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d038      	beq.n	800211a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 0219 	bic.w	r2, r3, #25
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4938      	ldr	r1, [pc, #224]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7ff f853 	bl	8001164 <HAL_GetTick>
 80020be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7ff f84f 	bl	8001164 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e2d9      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	f7ff f84c 	bl	800117c <HAL_GetREVID>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d80a      	bhi.n	8002104 <HAL_RCC_OscConfig+0x218>
 80020ee:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	031b      	lsls	r3, r3, #12
 80020fc:	4926      	ldr	r1, [pc, #152]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
 8002102:	e023      	b.n	800214c <HAL_RCC_OscConfig+0x260>
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	4921      	ldr	r1, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
 8002118:	e018      	b.n	800214c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7ff f81d 	bl	8001164 <HAL_GetTick>
 800212a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212e:	f7ff f819 	bl	8001164 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e2a3      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8091 	beq.w	800227c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002162:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b08      	cmp	r3, #8
 800216e:	d007      	beq.n	8002180 <HAL_RCC_OscConfig+0x294>
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2b18      	cmp	r3, #24
 8002174:	d12f      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2ea>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d12a      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_RCC_OscConfig+0x2b0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d003      	beq.n	800219c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e277      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
 8002198:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800219c:	f7fe ffee 	bl	800117c <HAL_GetREVID>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d80a      	bhi.n	80021c0 <HAL_RCC_OscConfig+0x2d4>
 80021aa:	4ba2      	ldr	r3, [pc, #648]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	069b      	lsls	r3, r3, #26
 80021b8:	499e      	ldr	r1, [pc, #632]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021be:	e05d      	b.n	800227c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021c0:	4b9c      	ldr	r3, [pc, #624]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	4999      	ldr	r1, [pc, #612]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021d4:	e052      	b.n	800227c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d035      	beq.n	800224a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021de:	4b95      	ldr	r3, [pc, #596]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a94      	ldr	r2, [pc, #592]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7fe ffbb 	bl	8001164 <HAL_GetTick>
 80021ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021f2:	f7fe ffb7 	bl	8001164 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e241      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002204:	4b8b      	ldr	r3, [pc, #556]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002210:	f7fe ffb4 	bl	800117c <HAL_GetREVID>
 8002214:	4602      	mov	r2, r0
 8002216:	f241 0303 	movw	r3, #4099	; 0x1003
 800221a:	429a      	cmp	r2, r3
 800221c:	d80a      	bhi.n	8002234 <HAL_RCC_OscConfig+0x348>
 800221e:	4b85      	ldr	r3, [pc, #532]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	069b      	lsls	r3, r3, #26
 800222c:	4981      	ldr	r1, [pc, #516]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
 8002232:	e023      	b.n	800227c <HAL_RCC_OscConfig+0x390>
 8002234:	4b7f      	ldr	r3, [pc, #508]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	497c      	ldr	r1, [pc, #496]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002244:	4313      	orrs	r3, r2
 8002246:	60cb      	str	r3, [r1, #12]
 8002248:	e018      	b.n	800227c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800224a:	4b7a      	ldr	r3, [pc, #488]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a79      	ldr	r2, [pc, #484]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002256:	f7fe ff85 	bl	8001164 <HAL_GetTick>
 800225a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800225e:	f7fe ff81 	bl	8001164 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e20b      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002270:	4b70      	ldr	r3, [pc, #448]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d036      	beq.n	80022f6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d019      	beq.n	80022c4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002290:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002294:	4a67      	ldr	r2, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7fe ff62 	bl	8001164 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a4:	f7fe ff5e 	bl	8001164 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1e8      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022b6:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80022b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x3b8>
 80022c2:	e018      	b.n	80022f6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c4:	4b5b      	ldr	r3, [pc, #364]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c8:	4a5a      	ldr	r2, [pc, #360]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe ff48 	bl	8001164 <HAL_GetTick>
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe ff44 	bl	8001164 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1ce      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ea:	4b52      	ldr	r3, [pc, #328]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80022ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d036      	beq.n	8002370 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d019      	beq.n	800233e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a49      	ldr	r2, [pc, #292]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002314:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002316:	f7fe ff25 	bl	8001164 <HAL_GetTick>
 800231a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800231e:	f7fe ff21 	bl	8001164 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1ab      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002330:	4b40      	ldr	r3, [pc, #256]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x432>
 800233c:	e018      	b.n	8002370 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a3c      	ldr	r2, [pc, #240]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002348:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800234a:	f7fe ff0b 	bl	8001164 <HAL_GetTick>
 800234e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002352:	f7fe ff07 	bl	8001164 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e191      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002364:	4b33      	ldr	r3, [pc, #204]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8086 	beq.w	800248a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800237e:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_RCC_OscConfig+0x54c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <HAL_RCC_OscConfig+0x54c>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800238a:	f7fe feeb 	bl	8001164 <HAL_GetTick>
 800238e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7fe fee7 	bl	8001164 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e171      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x54c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4da>
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	e02d      	b.n	8002422 <HAL_RCC_OscConfig+0x536>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4fc>
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70
 80023e6:	e01c      	b.n	8002422 <HAL_RCC_OscConfig+0x536>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d10c      	bne.n	800240a <HAL_RCC_OscConfig+0x51e>
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x536>
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a06      	ldr	r2, [pc, #24]	; (8002434 <HAL_RCC_OscConfig+0x548>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d01a      	beq.n	8002460 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7fe fe9b 	bl	8001164 <HAL_GetTick>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002430:	e00f      	b.n	8002452 <HAL_RCC_OscConfig+0x566>
 8002432:	bf00      	nop
 8002434:	58024400 	.word	0x58024400
 8002438:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fe92 	bl	8001164 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e11a      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002452:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0ee      	beq.n	800243c <HAL_RCC_OscConfig+0x550>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe fe80 	bl	8001164 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fe7c 	bl	8001164 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e104      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800247e:	4b84      	ldr	r3, [pc, #528]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80f9 	beq.w	8002686 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002494:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800249c:	2b18      	cmp	r3, #24
 800249e:	f000 80b4 	beq.w	800260a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 8095 	bne.w	80025d6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a77      	ldr	r2, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80024b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe fe54 	bl	8001164 <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fe50 	bl	8001164 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e0da      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024de:	4b6c      	ldr	r3, [pc, #432]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80024e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e2:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <HAL_RCC_OscConfig+0x7a8>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	430a      	orrs	r2, r1
 80024f2:	4967      	ldr	r1, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	628b      	str	r3, [r1, #40]	; 0x28
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	3b01      	subs	r3, #1
 80024fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	3b01      	subs	r3, #1
 8002508:	025b      	lsls	r3, r3, #9
 800250a:	b29b      	uxth	r3, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	3b01      	subs	r3, #1
 8002514:	041b      	lsls	r3, r3, #16
 8002516:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	3b01      	subs	r3, #1
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002528:	4959      	ldr	r1, [pc, #356]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800252e:	4b58      	ldr	r3, [pc, #352]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	4a57      	ldr	r2, [pc, #348]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800253a:	4b55      	ldr	r3, [pc, #340]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 800253c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <HAL_RCC_OscConfig+0x7ac>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002546:	00d2      	lsls	r2, r2, #3
 8002548:	4951      	ldr	r1, [pc, #324]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800254e:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f023 020c 	bic.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	494d      	ldr	r1, [pc, #308]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002560:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f023 0202 	bic.w	r2, r3, #2
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	4948      	ldr	r1, [pc, #288]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	4a46      	ldr	r2, [pc, #280]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800257e:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	4a43      	ldr	r2, [pc, #268]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	4a40      	ldr	r2, [pc, #256]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002594:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002596:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	4a3d      	ldr	r2, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3a      	ldr	r2, [pc, #232]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80025a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fdd9 	bl	8001164 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b6:	f7fe fdd5 	bl	8001164 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e05f      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x6ca>
 80025d4:	e057      	b.n	8002686 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80025dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fdbf 	bl	8001164 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe fdbb 	bl	8001164 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e045      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x6fe>
 8002608:	e03d      	b.n	8002686 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_RCC_OscConfig+0x7a4>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2b01      	cmp	r3, #1
 800261c:	d031      	beq.n	8002682 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d12a      	bne.n	8002682 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d122      	bne.n	8002682 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d11a      	bne.n	8002682 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d111      	bne.n	8002682 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d108      	bne.n	8002682 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0e1b      	lsrs	r3, r3, #24
 8002674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3730      	adds	r7, #48	; 0x30
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	58024400 	.word	0x58024400
 8002694:	fffffc0c 	.word	0xfffffc0c
 8002698:	ffff0007 	.word	0xffff0007

0800269c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e19c      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b8a      	ldr	r3, [pc, #552]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d910      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b87      	ldr	r3, [pc, #540]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 020f 	bic.w	r2, r3, #15
 80026c6:	4985      	ldr	r1, [pc, #532]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b83      	ldr	r3, [pc, #524]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e184      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d908      	bls.n	800270e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026fc:	4b78      	ldr	r3, [pc, #480]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4975      	ldr	r1, [pc, #468]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800270a:	4313      	orrs	r3, r2
 800270c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d010      	beq.n	800273c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002726:	429a      	cmp	r2, r3
 8002728:	d908      	bls.n	800273c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800272a:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	496a      	ldr	r1, [pc, #424]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002738:	4313      	orrs	r3, r2
 800273a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002754:	429a      	cmp	r2, r3
 8002756:	d908      	bls.n	800276a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002758:	4b61      	ldr	r3, [pc, #388]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	495e      	ldr	r1, [pc, #376]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002766:	4313      	orrs	r3, r2
 8002768:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	4b59      	ldr	r3, [pc, #356]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002782:	429a      	cmp	r2, r3
 8002784:	d908      	bls.n	8002798 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002786:	4b56      	ldr	r3, [pc, #344]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4953      	ldr	r1, [pc, #332]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002794:	4313      	orrs	r3, r2
 8002796:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f023 020f 	bic.w	r2, r3, #15
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4947      	ldr	r1, [pc, #284]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d055      	beq.n	800287e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027d2:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4940      	ldr	r1, [pc, #256]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ec:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d121      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0f6      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d115      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0ea      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0de      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282c:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0d6      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f023 0207 	bic.w	r2, r3, #7
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4925      	ldr	r1, [pc, #148]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800284a:	4313      	orrs	r3, r2
 800284c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe fc89 	bl	8001164 <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002854:	e00a      	b.n	800286c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002856:	f7fe fc85 	bl	8001164 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0be      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	429a      	cmp	r2, r3
 800287c:	d1eb      	bne.n	8002856 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	429a      	cmp	r2, r3
 8002898:	d208      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f023 020f 	bic.w	r2, r3, #15
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	490e      	ldr	r1, [pc, #56]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d214      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 020f 	bic.w	r2, r3, #15
 80028c2:	4906      	ldr	r1, [pc, #24]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e086      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
 80028dc:	52002000 	.word	0x52002000
 80028e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d208      	bcs.n	8002912 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002900:	4b3c      	ldr	r3, [pc, #240]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4939      	ldr	r1, [pc, #228]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800290e:	4313      	orrs	r3, r2
 8002910:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	4b34      	ldr	r3, [pc, #208]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800292a:	429a      	cmp	r2, r3
 800292c:	d208      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	492e      	ldr	r1, [pc, #184]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800293c:	4313      	orrs	r3, r2
 800293e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d010      	beq.n	800296e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002958:	429a      	cmp	r2, r3
 800295a:	d208      	bcs.n	800296e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4922      	ldr	r1, [pc, #136]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800296a:	4313      	orrs	r3, r2
 800296c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d010      	beq.n	800299c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002986:	429a      	cmp	r2, r3
 8002988:	d208      	bcs.n	800299c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4917      	ldr	r1, [pc, #92]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002998:	4313      	orrs	r3, r2
 800299a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800299c:	f000 f89e 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 80029a0:	4601      	mov	r1, r0
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_RCC_ClockConfig+0x35c>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	fa21 f303 	lsr.w	r3, r1, r3
 80029b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_RCC_ClockConfig+0x35c>)
 80029c4:	5cd3      	ldrb	r3, [r2, r3]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <HAL_RCC_ClockConfig+0x360>)
 80029d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_RCC_ClockConfig+0x364>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_RCC_ClockConfig+0x368>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fb76 	bl	80010d0 <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
 80029e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	58024400 	.word	0x58024400
 80029f8:	08007740 	.word	0x08007740
 80029fc:	20000004 	.word	0x20000004
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000008 	.word	0x20000008

08002a08 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08c      	sub	sp, #48	; 0x30
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d12a      	bne.n	8002a70 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	481f      	ldr	r0, [pc, #124]	; (8002ad4 <HAL_RCC_MCOConfig+0xcc>)
 8002a56:	f7fe fc81 	bl	800135c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	430b      	orrs	r3, r1
 8002a68:	4919      	ldr	r1, [pc, #100]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002a6e:	e02a      	b.n	8002ac6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <HAL_RCC_MCOConfig+0xd0>)
 8002aac:	f7fe fc56 	bl	800135c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	01d9      	lsls	r1, r3, #7
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	4903      	ldr	r1, [pc, #12]	; (8002ad0 <HAL_RCC_MCOConfig+0xc8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	610b      	str	r3, [r1, #16]
}
 8002ac6:	bf00      	nop
 8002ac8:	3730      	adds	r7, #48	; 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	58020000 	.word	0x58020000
 8002ad8:	58020800 	.word	0x58020800

08002adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae2:	4baf      	ldr	r3, [pc, #700]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aea:	2b18      	cmp	r3, #24
 8002aec:	f200 814e 	bhi.w	8002d8c <HAL_RCC_GetSysClockFreq+0x2b0>
 8002af0:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b5d 	.word	0x08002b5d
 8002afc:	08002d8d 	.word	0x08002d8d
 8002b00:	08002d8d 	.word	0x08002d8d
 8002b04:	08002d8d 	.word	0x08002d8d
 8002b08:	08002d8d 	.word	0x08002d8d
 8002b0c:	08002d8d 	.word	0x08002d8d
 8002b10:	08002d8d 	.word	0x08002d8d
 8002b14:	08002d8d 	.word	0x08002d8d
 8002b18:	08002b83 	.word	0x08002b83
 8002b1c:	08002d8d 	.word	0x08002d8d
 8002b20:	08002d8d 	.word	0x08002d8d
 8002b24:	08002d8d 	.word	0x08002d8d
 8002b28:	08002d8d 	.word	0x08002d8d
 8002b2c:	08002d8d 	.word	0x08002d8d
 8002b30:	08002d8d 	.word	0x08002d8d
 8002b34:	08002d8d 	.word	0x08002d8d
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002d8d 	.word	0x08002d8d
 8002b40:	08002d8d 	.word	0x08002d8d
 8002b44:	08002d8d 	.word	0x08002d8d
 8002b48:	08002d8d 	.word	0x08002d8d
 8002b4c:	08002d8d 	.word	0x08002d8d
 8002b50:	08002d8d 	.word	0x08002d8d
 8002b54:	08002d8d 	.word	0x08002d8d
 8002b58:	08002b8f 	.word	0x08002b8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b5c:	4b90      	ldr	r3, [pc, #576]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b68:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	4a8c      	ldr	r2, [pc, #560]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002b7a:	e10a      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b7c:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b7e:	61bb      	str	r3, [r7, #24]
    break;
 8002b80:	e107      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b82:	4b89      	ldr	r3, [pc, #548]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002b84:	61bb      	str	r3, [r7, #24]
    break;
 8002b86:	e104      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002b88:	4b88      	ldr	r3, [pc, #544]	; (8002dac <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002b8a:	61bb      	str	r3, [r7, #24]
    break;
 8002b8c:	e101      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b8e:	4b84      	ldr	r3, [pc, #528]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b98:	4b81      	ldr	r3, [pc, #516]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ba4:	4b7e      	ldr	r3, [pc, #504]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002bae:	4b7c      	ldr	r3, [pc, #496]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	08db      	lsrs	r3, r3, #3
 8002bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80da 	beq.w	8002d86 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d05a      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x1b2>
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d302      	bcc.n	8002be2 <HAL_RCC_GetSysClockFreq+0x106>
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d078      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002be0:	e099      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d02d      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bee:	4b6c      	ldr	r3, [pc, #432]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	08db      	lsrs	r3, r3, #3
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	ee07 3a90 	vmov	s15, r3
 8002c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c28:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c2c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c44:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002c48:	e087      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c54:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002db4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c5c:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c64:	ee07 3a90 	vmov	s15, r3
 8002c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c70:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c8c:	e065      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c98:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002db8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca0:	4b3f      	ldr	r3, [pc, #252]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cb4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cd0:	e043      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002dbc <HAL_RCC_GetSysClockFreq+0x2e0>
 8002ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cf8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d14:	e021      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d20:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002db8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d30:	ee07 3a90 	vmov	s15, r3
 8002d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d38:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d3c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002db0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d58:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	0a5b      	lsrs	r3, r3, #9
 8002d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d64:	3301      	adds	r3, #1
 8002d66:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d7e:	ee17 3a90 	vmov	r3, s15
 8002d82:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002d84:	e005      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
    break;
 8002d8a:	e002      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002d8e:	61bb      	str	r3, [r7, #24]
    break;
 8002d90:	bf00      	nop
  }

  return sysclockfreq;
 8002d92:	69bb      	ldr	r3, [r7, #24]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3724      	adds	r7, #36	; 0x24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	58024400 	.word	0x58024400
 8002da4:	03d09000 	.word	0x03d09000
 8002da8:	003d0900 	.word	0x003d0900
 8002dac:	017d7840 	.word	0x017d7840
 8002db0:	46000000 	.word	0x46000000
 8002db4:	4c742400 	.word	0x4c742400
 8002db8:	4a742400 	.word	0x4a742400
 8002dbc:	4bbebc20 	.word	0x4bbebc20

08002dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002dc6:	f7ff fe89 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002dca:	4601      	mov	r1, r0
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x50>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	fa21 f303 	lsr.w	r3, r1, r3
 8002de2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x50>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x58>)
 8002dfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	58024400 	.word	0x58024400
 8002e14:	08007740 	.word	0x08007740
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	20000000 	.word	0x20000000

08002e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e24:	f7ff ffcc 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002e28:	4601      	mov	r1, r0
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	58024400 	.word	0x58024400
 8002e48:	08007740 	.word	0x08007740

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e50:	f7ff ffb6 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002e54:	4601      	mov	r1, r0
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	58024400 	.word	0x58024400
 8002e74:	08007740 	.word	0x08007740

08002e78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e80:	2300      	movs	r3, #0
 8002e82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e84:	2300      	movs	r3, #0
 8002e86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d03d      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9c:	d013      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea2:	d802      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ea8:	e01f      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002eb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eb4:	d01c      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002eb6:	e018      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb8:	4baf      	ldr	r3, [pc, #700]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	4aae      	ldr	r2, [pc, #696]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 f98b 	bl	80041e8 <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ed6:	e00c      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3324      	adds	r3, #36	; 0x24
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fa34 	bl	800434c <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
      break;
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ef8:	4b9f      	ldr	r3, [pc, #636]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f04:	499c      	ldr	r1, [pc, #624]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	650b      	str	r3, [r1, #80]	; 0x50
 8002f0a:	e001      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d03d      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d826      	bhi.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f41 	.word	0x08002f41
 8002f30:	08002f4f 	.word	0x08002f4f
 8002f34:	08002f61 	.word	0x08002f61
 8002f38:	08002f79 	.word	0x08002f79
 8002f3c:	08002f79 	.word	0x08002f79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f40:	4b8d      	ldr	r3, [pc, #564]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	4a8c      	ldr	r2, [pc, #560]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f4c:	e015      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 f947 	bl	80041e8 <RCCEx_PLL2_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f5e:	e00c      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 f9f0 	bl	800434c <RCCEx_PLL3_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f70:	e003      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
      break;
 8002f76:	e000      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f80:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f84:	f023 0207 	bic.w	r2, r3, #7
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	497a      	ldr	r1, [pc, #488]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	650b      	str	r3, [r1, #80]	; 0x50
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d03e      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d01c      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d804      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002fb8:	e01e      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002fba:	2bc0      	cmp	r3, #192	; 0xc0
 8002fbc:	d01f      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc2:	d01e      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002fc4:	e018      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc6:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	4a6b      	ldr	r2, [pc, #428]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002fd2:	e017      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 f904 	bl	80041e8 <RCCEx_PLL2_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002fe4:	e00e      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3324      	adds	r3, #36	; 0x24
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 f9ad 	bl	800434c <RCCEx_PLL3_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ff6:	e005      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	4958      	ldr	r1, [pc, #352]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003018:	4313      	orrs	r3, r2
 800301a:	650b      	str	r3, [r1, #80]	; 0x50
 800301c:	e001      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	2b00      	cmp	r3, #0
 800302c:	d044      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003038:	d01f      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800303a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800303e:	d805      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003048:	d00e      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800304a:	e01f      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800304c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003050:	d01f      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003056:	d01e      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003058:	e018      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	4a46      	ldr	r2, [pc, #280]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003066:	e017      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f001 f8ba 	bl	80041e8 <RCCEx_PLL2_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003078:	e00e      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3324      	adds	r3, #36	; 0x24
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f001 f963 	bl	800434c <RCCEx_PLL3_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800308a:	e005      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
      break;
 8003090:	e002      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800309e:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030ac:	4932      	ldr	r1, [pc, #200]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	658b      	str	r3, [r1, #88]	; 0x58
 80030b2:	e001      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d044      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80030ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ce:	d01f      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80030d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030d4:	d805      	bhi.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80030da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030de:	d00e      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80030e0:	e01f      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80030e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030e6:	d01f      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80030e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ec:	d01e      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80030ee:	e018      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	4a20      	ldr	r2, [pc, #128]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030fc:	e017      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3304      	adds	r3, #4
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f001 f86f 	bl	80041e8 <RCCEx_PLL2_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800310e:	e00e      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3324      	adds	r3, #36	; 0x24
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f918 	bl	800434c <RCCEx_PLL3_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003120:	e005      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	75fb      	strb	r3, [r7, #23]
      break;
 8003126:	e002      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003128:	bf00      	nop
 800312a:	e000      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800312c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003142:	490d      	ldr	r1, [pc, #52]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003144:	4313      	orrs	r3, r2
 8003146:	658b      	str	r3, [r1, #88]	; 0x58
 8003148:	e001      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d035      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	2b10      	cmp	r3, #16
 8003160:	d00c      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003162:	2b10      	cmp	r3, #16
 8003164:	d802      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01b      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800316a:	e017      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800316c:	2b20      	cmp	r3, #32
 800316e:	d00c      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003170:	2b30      	cmp	r3, #48	; 0x30
 8003172:	d018      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003174:	e012      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003176:	bf00      	nop
 8003178:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800317c:	4bae      	ldr	r3, [pc, #696]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	4aad      	ldr	r2, [pc, #692]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003188:	e00e      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f001 f829 	bl	80041e8 <RCCEx_PLL2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800319a:	e005      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	75fb      	strb	r3, [r7, #23]
      break;
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80031a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80031ae:	4ba2      	ldr	r3, [pc, #648]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ba:	499f      	ldr	r1, [pc, #636]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031c0:	e001      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d042      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031da:	d01f      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e0:	d805      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80031e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ea:	d00e      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80031ec:	e01f      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80031ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031f2:	d01f      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80031f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f8:	d01e      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80031fa:	e018      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fc:	4b8e      	ldr	r3, [pc, #568]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4a8d      	ldr	r2, [pc, #564]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003208:	e017      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f000 ffe9 	bl	80041e8 <RCCEx_PLL2_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800321a:	e00e      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3324      	adds	r3, #36	; 0x24
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f001 f892 	bl	800434c <RCCEx_PLL3_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800322c:	e005      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
      break;
 8003232:	e002      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003240:	4b7d      	ldr	r3, [pc, #500]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324c:	497a      	ldr	r1, [pc, #488]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800324e:	4313      	orrs	r3, r2
 8003250:	650b      	str	r3, [r1, #80]	; 0x50
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d042      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800326c:	d01b      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800326e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003272:	d805      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d022      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800327e:	e01b      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003280:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003284:	d01d      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800328a:	d01c      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800328c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003290:	d01b      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003292:	e011      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f000 ffa4 	bl	80041e8 <RCCEx_PLL2_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80032a4:	e012      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3324      	adds	r3, #36	; 0x24
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f84d 	bl	800434c <RCCEx_PLL3_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80032b6:	e009      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
      break;
 80032bc:	e006      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80032be:	bf00      	nop
 80032c0:	e004      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80032c2:	bf00      	nop
 80032c4:	e002      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80032ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032d2:	4b59      	ldr	r3, [pc, #356]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80032d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032de:	4956      	ldr	r1, [pc, #344]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	650b      	str	r3, [r1, #80]	; 0x50
 80032e4:	e001      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d044      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003300:	d01b      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003306:	d805      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d022      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800330c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003312:	e01b      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d01d      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800331a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800331e:	d01c      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003320:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003324:	d01b      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003326:	e011      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	2101      	movs	r1, #1
 800332e:	4618      	mov	r0, r3
 8003330:	f000 ff5a 	bl	80041e8 <RCCEx_PLL2_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003338:	e012      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3324      	adds	r3, #36	; 0x24
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f001 f803 	bl	800434c <RCCEx_PLL3_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800334a:	e009      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
      break;
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003352:	bf00      	nop
 8003354:	e004      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800335e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003374:	4930      	ldr	r1, [pc, #192]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	658b      	str	r3, [r1, #88]	; 0x58
 800337a:	e001      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d022      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00e      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8003394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003398:	d108      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	2101      	movs	r1, #1
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 ff21 	bl	80041e8 <RCCEx_PLL2_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80033aa:	e003      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
      break;
 80033b0:	e000      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 80033b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	491c      	ldr	r1, [pc, #112]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033cc:	e001      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d030      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033e6:	d005      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ec:	d009      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d013      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80033f2:	e00f      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003400:	e00c      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f000 feed 	bl	80041e8 <RCCEx_PLL2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
      break;
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 800341a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4902      	ldr	r1, [pc, #8]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	650b      	str	r3, [r1, #80]	; 0x50
 8003434:	e004      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003436:	bf00      	nop
 8003438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d032      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	2b03      	cmp	r3, #3
 8003452:	d81b      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003493 	.word	0x08003493
 8003460:	0800346d 	.word	0x0800346d
 8003464:	0800347b 	.word	0x0800347b
 8003468:	08003493 	.word	0x08003493
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346c:	4bb8      	ldr	r3, [pc, #736]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	4ab7      	ldr	r2, [pc, #732]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003478:	e00c      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 feb1 	bl	80041e8 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800348a:	e003      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	75fb      	strb	r3, [r7, #23]
      break;
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 8003492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003494:	7dfb      	ldrb	r3, [r7, #23]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800349a:	4bad      	ldr	r3, [pc, #692]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	49aa      	ldr	r1, [pc, #680]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034ac:	e001      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8086 	beq.w	80035cc <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c0:	4ba4      	ldr	r3, [pc, #656]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4aa3      	ldr	r2, [pc, #652]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034cc:	f7fd fe4a 	bl	8001164 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d2:	e009      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fd fe46 	bl	8001164 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d902      	bls.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	75fb      	strb	r3, [r7, #23]
        break;
 80034e6:	e005      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e8:	4b9a      	ldr	r3, [pc, #616]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d166      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034fa:	4b95      	ldr	r3, [pc, #596]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80034fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003504:	4053      	eors	r3, r2
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	2b00      	cmp	r3, #0
 800350c:	d013      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800350e:	4b90      	ldr	r3, [pc, #576]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003516:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003518:	4b8d      	ldr	r3, [pc, #564]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a8c      	ldr	r2, [pc, #560]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003524:	4b8a      	ldr	r3, [pc, #552]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a89      	ldr	r2, [pc, #548]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003530:	4a87      	ldr	r2, [pc, #540]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800353c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003540:	d115      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fd fe0f 	bl	8001164 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003548:	e00b      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fd fe0b 	bl	8001164 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d902      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	75fb      	strb	r3, [r7, #23]
            break;
 8003560:	e005      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003562:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ed      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d126      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003582:	d10d      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003584:	4b72      	ldr	r3, [pc, #456]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003592:	0919      	lsrs	r1, r3, #4
 8003594:	4b70      	ldr	r3, [pc, #448]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003596:	400b      	ands	r3, r1
 8003598:	496d      	ldr	r1, [pc, #436]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	610b      	str	r3, [r1, #16]
 800359e:	e005      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x734>
 80035a0:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4a6a      	ldr	r2, [pc, #424]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80035a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035aa:	6113      	str	r3, [r2, #16]
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80035ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ba:	4965      	ldr	r1, [pc, #404]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	670b      	str	r3, [r1, #112]	; 0x70
 80035c0:	e004      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	75bb      	strb	r3, [r7, #22]
 80035c6:	e001      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d07e      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035dc:	2b28      	cmp	r3, #40	; 0x28
 80035de:	d867      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	080036b7 	.word	0x080036b7
 80035ec:	080036b1 	.word	0x080036b1
 80035f0:	080036b1 	.word	0x080036b1
 80035f4:	080036b1 	.word	0x080036b1
 80035f8:	080036b1 	.word	0x080036b1
 80035fc:	080036b1 	.word	0x080036b1
 8003600:	080036b1 	.word	0x080036b1
 8003604:	080036b1 	.word	0x080036b1
 8003608:	0800368d 	.word	0x0800368d
 800360c:	080036b1 	.word	0x080036b1
 8003610:	080036b1 	.word	0x080036b1
 8003614:	080036b1 	.word	0x080036b1
 8003618:	080036b1 	.word	0x080036b1
 800361c:	080036b1 	.word	0x080036b1
 8003620:	080036b1 	.word	0x080036b1
 8003624:	080036b1 	.word	0x080036b1
 8003628:	0800369f 	.word	0x0800369f
 800362c:	080036b1 	.word	0x080036b1
 8003630:	080036b1 	.word	0x080036b1
 8003634:	080036b1 	.word	0x080036b1
 8003638:	080036b1 	.word	0x080036b1
 800363c:	080036b1 	.word	0x080036b1
 8003640:	080036b1 	.word	0x080036b1
 8003644:	080036b1 	.word	0x080036b1
 8003648:	080036b7 	.word	0x080036b7
 800364c:	080036b1 	.word	0x080036b1
 8003650:	080036b1 	.word	0x080036b1
 8003654:	080036b1 	.word	0x080036b1
 8003658:	080036b1 	.word	0x080036b1
 800365c:	080036b1 	.word	0x080036b1
 8003660:	080036b1 	.word	0x080036b1
 8003664:	080036b1 	.word	0x080036b1
 8003668:	080036b7 	.word	0x080036b7
 800366c:	080036b1 	.word	0x080036b1
 8003670:	080036b1 	.word	0x080036b1
 8003674:	080036b1 	.word	0x080036b1
 8003678:	080036b1 	.word	0x080036b1
 800367c:	080036b1 	.word	0x080036b1
 8003680:	080036b1 	.word	0x080036b1
 8003684:	080036b1 	.word	0x080036b1
 8003688:	080036b7 	.word	0x080036b7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fda8 	bl	80041e8 <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800369c:	e00c      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3324      	adds	r3, #36	; 0x24
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fe51 	bl	800434c <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80036ae:	e003      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
      break;
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 80036b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ca:	4921      	ldr	r1, [pc, #132]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	654b      	str	r3, [r1, #84]	; 0x54
 80036d0:	e001      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d03e      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d820      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <HAL_RCCEx_PeriphCLKConfig+0x878>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003733 	.word	0x08003733
 80036f4:	08003709 	.word	0x08003709
 80036f8:	0800371b 	.word	0x0800371b
 80036fc:	08003733 	.word	0x08003733
 8003700:	08003733 	.word	0x08003733
 8003704:	08003733 	.word	0x08003733
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fd6a 	bl	80041e8 <RCCEx_PLL2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003718:	e00c      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3324      	adds	r3, #36	; 0x24
 800371e:	2101      	movs	r1, #1
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fe13 	bl	800434c <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 8003732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d110      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	f023 0207 	bic.w	r2, r3, #7
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	4902      	ldr	r1, [pc, #8]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	654b      	str	r3, [r1, #84]	; 0x54
 800374c:	e008      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 800374e:	bf00      	nop
 8003750:	58024400 	.word	0x58024400
 8003754:	58024800 	.word	0x58024800
 8003758:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d039      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003772:	2b05      	cmp	r3, #5
 8003774:	d820      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	080037bf 	.word	0x080037bf
 8003780:	08003795 	.word	0x08003795
 8003784:	080037a7 	.word	0x080037a7
 8003788:	080037bf 	.word	0x080037bf
 800378c:	080037bf 	.word	0x080037bf
 8003790:	080037bf 	.word	0x080037bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fd24 	bl	80041e8 <RCCEx_PLL2_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80037a4:	e00c      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3324      	adds	r3, #36	; 0x24
 80037aa:	2101      	movs	r1, #1
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fdcd 	bl	800434c <RCCEx_PLL3_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80037b6:	e003      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
      break;
 80037bc:	e000      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 80037be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c6:	4bb2      	ldr	r3, [pc, #712]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	f023 0207 	bic.w	r2, r3, #7
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d4:	49ae      	ldr	r1, [pc, #696]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	658b      	str	r3, [r1, #88]	; 0x58
 80037da:	e001      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d044      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f6:	d01b      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 80037f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037fc:	d805      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x992>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d022      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003808:	e01b      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d01d      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003814:	d01c      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8003816:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800381a:	d01b      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800381c:	e011      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fcdf 	bl	80041e8 <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800382e:	e012      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3324      	adds	r3, #36	; 0x24
 8003834:	2102      	movs	r1, #2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fd88 	bl	800434c <RCCEx_PLL3_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003840:	e009      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
      break;
 8003846:	e006      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003848:	bf00      	nop
 800384a:	e004      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 800384c:	bf00      	nop
 800384e:	e002      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800385c:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	4989      	ldr	r1, [pc, #548]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800386c:	4313      	orrs	r3, r2
 800386e:	654b      	str	r3, [r1, #84]	; 0x54
 8003870:	e001      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388c:	d01b      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 800388e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003892:	d805      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800389e:	e01b      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a4:	d01d      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80038a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038aa:	d01c      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 80038ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038b0:	d01b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xa72>
 80038b2:	e011      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fc94 	bl	80041e8 <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80038c4:	e012      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3324      	adds	r3, #36	; 0x24
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fd3d 	bl	800434c <RCCEx_PLL3_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80038d6:	e009      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
      break;
 80038dc:	e006      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80038de:	bf00      	nop
 80038e0:	e004      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80038e2:	bf00      	nop
 80038e4:	e002      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80038ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038f2:	4b67      	ldr	r3, [pc, #412]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003900:	4963      	ldr	r1, [pc, #396]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003902:	4313      	orrs	r3, r2
 8003904:	658b      	str	r3, [r1, #88]	; 0x58
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d044      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800391e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003922:	d01b      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8003924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003928:	d805      	bhi.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d022      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003934:	e01b      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393a:	d01d      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800393c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003940:	d01c      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8003942:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003946:	d01b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8003948:	e011      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3304      	adds	r3, #4
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fc49 	bl	80041e8 <RCCEx_PLL2_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800395a:	e012      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3324      	adds	r3, #36	; 0x24
 8003960:	2102      	movs	r1, #2
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fcf2 	bl	800434c <RCCEx_PLL3_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800396c:	e009      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
      break;
 8003972:	e006      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003974:	bf00      	nop
 8003976:	e004      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003978:	bf00      	nop
 800397a:	e002      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003996:	493e      	ldr	r1, [pc, #248]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003998:	4313      	orrs	r3, r2
 800399a:	658b      	str	r3, [r1, #88]	; 0x58
 800399c:	e001      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3324      	adds	r3, #36	; 0x24
 80039be:	2102      	movs	r1, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fcc3 	bl	800434c <RCCEx_PLL3_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039d0:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039de:	492c      	ldr	r1, [pc, #176]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fa:	d10a      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fca2 	bl	800434c <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a12:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a20:	491b      	ldr	r1, [pc, #108]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d032      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d00d      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8003a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a42:	d016      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d111      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fbca 	bl	80041e8 <RCCEx_PLL2_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a58:	e00c      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3324      	adds	r3, #36	; 0x24
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fc73 	bl	800434c <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a6a:	e003      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 8003a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a88:	4901      	ldr	r1, [pc, #4]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a8e:	e003      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02f      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aae:	d00c      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003ab0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ab4:	d015      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 8003ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aba:	d10f      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003abc:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	4a71      	ldr	r2, [pc, #452]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ac8:	e00c      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3324      	adds	r3, #36	; 0x24
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fc3b 	bl	800434c <RCCEx_PLL3_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ada:	e003      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 8003ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aea:	4b67      	ldr	r3, [pc, #412]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	4963      	ldr	r1, [pc, #396]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	654b      	str	r3, [r1, #84]	; 0x54
 8003afe:	e001      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d029      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d007      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b20:	4b59      	ldr	r3, [pc, #356]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b2c:	e00b      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2102      	movs	r1, #2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fb57 	bl	80041e8 <RCCEx_PLL2_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003b3e:	e002      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
      break;
 8003b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b4c:	4b4e      	ldr	r3, [pc, #312]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	494b      	ldr	r1, [pc, #300]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b5e:	e001      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3324      	adds	r3, #36	; 0x24
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fbe8 	bl	800434c <RCCEx_PLL3_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d031      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8003b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba2:	d802      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd32>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d011      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xd54>
 8003ba8:	e00d      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bae:	d00f      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8003bb6:	e006      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb8:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003bc4:	e007      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bca:	e004      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003bcc:	bf00      	nop
 8003bce:	e002      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003bd0:	bf00      	nop
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bea:	4927      	ldr	r1, [pc, #156]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	654b      	str	r3, [r1, #84]	; 0x54
 8003bf0:	e001      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	491e      	ldr	r1, [pc, #120]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2c:	4916      	ldr	r1, [pc, #88]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00d      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xde2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c48:	6113      	str	r3, [r2, #16]
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003c54:	490c      	ldr	r1, [pc, #48]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da08      	bge.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	4906      	ldr	r1, [pc, #24]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003c74:	7dbb      	ldrb	r3, [r7, #22]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  }
  return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	58024400 	.word	0x58024400

08003c8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c90:	f7ff f896 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8003c94:	4601      	mov	r1, r0
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ca2:	5cd3      	ldrb	r3, [r2, r3]
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	08007740 	.word	0x08007740

08003cb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cc0:	4b9d      	ldr	r3, [pc, #628]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003cca:	4b9b      	ldr	r3, [pc, #620]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	0b1b      	lsrs	r3, r3, #12
 8003cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003cd6:	4b98      	ldr	r3, [pc, #608]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003ce2:	4b95      	ldr	r3, [pc, #596]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	08db      	lsrs	r3, r3, #3
 8003ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 810a 	beq.w	8003f1a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d05a      	beq.n	8003dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d302      	bcc.n	8003d16 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d078      	beq.n	8003e06 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003d14:	e099      	b.n	8003e4a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d16:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d02d      	beq.n	8003d7e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d22:	4b85      	ldr	r3, [pc, #532]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	08db      	lsrs	r3, r3, #3
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	4a83      	ldr	r2, [pc, #524]	; (8003f3c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4c:	4b7a      	ldr	r3, [pc, #488]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d60:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003d64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003d7c:	e087      	b.n	8003e8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d88:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003f44 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da0:	ed97 6a03 	vldr	s12, [r7, #12]
 8003da4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dc0:	e065      	b.n	8003e8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dcc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003f48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dd4:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ddc:	ee07 3a90 	vmov	s15, r3
 8003de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de4:	ed97 6a03 	vldr	s12, [r7, #12]
 8003de8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003df4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e04:	e043      	b.n	8003e8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	ee07 3a90 	vmov	s15, r3
 8003e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e10:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e18:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e28:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e2c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e48:	e021      	b.n	8003e8e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e54:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003f48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5c:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e70:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e8c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003e8e:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	0a5b      	lsrs	r3, r3, #9
 8003e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb4:	ee17 2a90 	vmov	r2, s15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee2:	ee17 2a90 	vmov	r2, s15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	0e1b      	lsrs	r3, r3, #24
 8003ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f10:	ee17 2a90 	vmov	r2, s15
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f18:	e008      	b.n	8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	3724      	adds	r7, #36	; 0x24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	03d09000 	.word	0x03d09000
 8003f40:	46000000 	.word	0x46000000
 8003f44:	4c742400 	.word	0x4c742400
 8003f48:	4a742400 	.word	0x4a742400
 8003f4c:	4bbebc20 	.word	0x4bbebc20

08003f50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f58:	4b9d      	ldr	r3, [pc, #628]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003f62:	4b9b      	ldr	r3, [pc, #620]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	0d1b      	lsrs	r3, r3, #20
 8003f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f6e:	4b98      	ldr	r3, [pc, #608]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003f7a:	4b95      	ldr	r3, [pc, #596]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	08db      	lsrs	r3, r3, #3
 8003f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 810a 	beq.w	80041b2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d05a      	beq.n	800405a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d302      	bcc.n	8003fae <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d078      	beq.n	800409e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003fac:	e099      	b.n	80040e2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fae:	4b88      	ldr	r3, [pc, #544]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d02d      	beq.n	8004016 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fba:	4b85      	ldr	r3, [pc, #532]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	08db      	lsrs	r3, r3, #3
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	4a83      	ldr	r2, [pc, #524]	; (80041d4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe4:	4b7a      	ldr	r3, [pc, #488]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff4:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004010:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004014:	e087      	b.n	8004126 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004020:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80041dc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004028:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004038:	ed97 6a03 	vldr	s12, [r7, #12]
 800403c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800404c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004054:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004058:	e065      	b.n	8004126 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004064:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80041e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406c:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004080:	eddf 5a55 	vldr	s11, [pc, #340]	; 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004098:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800409c:	e043      	b.n	8004126 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80041e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80040ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b0:	4b47      	ldr	r3, [pc, #284]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80040c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040e0:	e021      	b.n	8004126 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ec:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80041e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80040f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f4:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fc:	ee07 3a90 	vmov	s15, r3
 8004100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004104:	ed97 6a03 	vldr	s12, [r7, #12]
 8004108:	eddf 5a33 	vldr	s11, [pc, #204]	; 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800410c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004120:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004124:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	0a5b      	lsrs	r3, r3, #9
 800412c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800413c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004140:	edd7 6a07 	vldr	s13, [r7, #28]
 8004144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414c:	ee17 2a90 	vmov	r2, s15
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004154:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800416a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800416e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417a:	ee17 2a90 	vmov	r2, s15
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004182:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	0e1b      	lsrs	r3, r3, #24
 8004188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800419c:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a8:	ee17 2a90 	vmov	r2, s15
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80041b0:	e008      	b.n	80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	3724      	adds	r7, #36	; 0x24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	58024400 	.word	0x58024400
 80041d4:	03d09000 	.word	0x03d09000
 80041d8:	46000000 	.word	0x46000000
 80041dc:	4c742400 	.word	0x4c742400
 80041e0:	4a742400 	.word	0x4a742400
 80041e4:	4bbebc20 	.word	0x4bbebc20

080041e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041f6:	4b53      	ldr	r3, [pc, #332]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d101      	bne.n	8004206 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e099      	b.n	800433a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004206:	4b4f      	ldr	r3, [pc, #316]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a4e      	ldr	r2, [pc, #312]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 800420c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004212:	f7fc ffa7 	bl	8001164 <HAL_GetTick>
 8004216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004218:	e008      	b.n	800422c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800421a:	f7fc ffa3 	bl	8001164 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e086      	b.n	800433a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800422c:	4b45      	ldr	r3, [pc, #276]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004238:	4b42      	ldr	r3, [pc, #264]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	031b      	lsls	r3, r3, #12
 8004246:	493f      	ldr	r1, [pc, #252]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	628b      	str	r3, [r1, #40]	; 0x28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	3b01      	subs	r3, #1
 8004252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	3b01      	subs	r3, #1
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	b29b      	uxth	r3, r3
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	3b01      	subs	r3, #1
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	3b01      	subs	r3, #1
 8004276:	061b      	lsls	r3, r3, #24
 8004278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800427c:	4931      	ldr	r1, [pc, #196]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004282:	4b30      	ldr	r3, [pc, #192]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	492d      	ldr	r1, [pc, #180]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004294:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	f023 0220 	bic.w	r2, r3, #32
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	4928      	ldr	r1, [pc, #160]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042a6:	4b27      	ldr	r3, [pc, #156]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	4a26      	ldr	r2, [pc, #152]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	f023 0310 	bic.w	r3, r3, #16
 80042b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <RCCEx_PLL2_Config+0x160>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	69d2      	ldr	r2, [r2, #28]
 80042be:	00d2      	lsls	r2, r2, #3
 80042c0:	4920      	ldr	r1, [pc, #128]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042c6:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042cc:	f043 0310 	orr.w	r3, r3, #16
 80042d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042d8:	4b1a      	ldr	r3, [pc, #104]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4a19      	ldr	r2, [pc, #100]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042e4:	e00f      	b.n	8004306 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042ec:	4b15      	ldr	r3, [pc, #84]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4a14      	ldr	r2, [pc, #80]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042f8:	e005      	b.n	8004306 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	4a11      	ldr	r2, [pc, #68]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 800430c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004312:	f7fc ff27 	bl	8001164 <HAL_GetTick>
 8004316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004318:	e008      	b.n	800432c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800431a:	f7fc ff23 	bl	8001164 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e006      	b.n	800433a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <RCCEx_PLL2_Config+0x15c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004338:	7bfb      	ldrb	r3, [r7, #15]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	58024400 	.word	0x58024400
 8004348:	ffff0007 	.word	0xffff0007

0800434c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800435a:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b03      	cmp	r3, #3
 8004364:	d101      	bne.n	800436a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e099      	b.n	800449e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800436a:	4b4f      	ldr	r3, [pc, #316]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a4e      	ldr	r2, [pc, #312]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004376:	f7fc fef5 	bl	8001164 <HAL_GetTick>
 800437a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800437c:	e008      	b.n	8004390 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800437e:	f7fc fef1 	bl	8001164 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e086      	b.n	800449e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004390:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800439c:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	051b      	lsls	r3, r3, #20
 80043aa:	493f      	ldr	r1, [pc, #252]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	628b      	str	r3, [r1, #40]	; 0x28
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	3b01      	subs	r3, #1
 80043c0:	025b      	lsls	r3, r3, #9
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	3b01      	subs	r3, #1
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043e0:	4931      	ldr	r1, [pc, #196]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043e6:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	492d      	ldr	r1, [pc, #180]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	4928      	ldr	r1, [pc, #160]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800440a:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004416:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <RCCEx_PLL3_Config+0x160>)
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	69d2      	ldr	r2, [r2, #28]
 8004422:	00d2      	lsls	r2, r2, #3
 8004424:	4920      	ldr	r1, [pc, #128]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004442:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004446:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004448:	e00f      	b.n	800446a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004450:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800445a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800445c:	e005      	b.n	800446a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	4a11      	ldr	r2, [pc, #68]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004468:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004476:	f7fc fe75 	bl	8001164 <HAL_GetTick>
 800447a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800447c:	e008      	b.n	8004490 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800447e:	f7fc fe71 	bl	8001164 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e006      	b.n	800449e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <RCCEx_PLL3_Config+0x15c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
 80044ac:	ffff0007 	.word	0xffff0007

080044b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e042      	b.n	8004548 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fc fcf1 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2224      	movs	r2, #36	; 0x24
 80044de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f8c4 	bl	8004680 <UART_SetConfig>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e022      	b.n	8004548 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f002 fa36 	bl	800697c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800451e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800452e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f002 fabd 	bl	8006ac0 <UART_CheckIdleState>
 8004546:	4603      	mov	r3, r0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004566:	2b20      	cmp	r3, #32
 8004568:	f040 8083 	bne.w	8004672 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_UART_Transmit+0x28>
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e07b      	b.n	8004674 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_UART_Transmit+0x3a>
 8004586:	2302      	movs	r3, #2
 8004588:	e074      	b.n	8004674 <HAL_UART_Transmit+0x124>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2221      	movs	r2, #33	; 0x21
 800459e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80045a2:	f7fc fddf 	bl	8001164 <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d108      	bne.n	80045d4 <HAL_UART_Transmit+0x84>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	e003      	b.n	80045dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045dc:	e02c      	b.n	8004638 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2200      	movs	r2, #0
 80045e6:	2180      	movs	r1, #128	; 0x80
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f002 fab1 	bl	8006b50 <UART_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e03d      	b.n	8004674 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3302      	adds	r3, #2
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	e007      	b.n	8004626 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3301      	adds	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1cc      	bne.n	80045de <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2200      	movs	r2, #0
 800464c:	2140      	movs	r1, #64	; 0x40
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f002 fa7e 	bl	8006b50 <UART_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e00a      	b.n	8004674 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	0000      	movs	r0, r0
	...

08004680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004684:	b090      	sub	sp, #64	; 0x40
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800468a:	2300      	movs	r3, #0
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046b6:	4313      	orrs	r3, r2
 80046b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4bc1      	ldr	r3, [pc, #772]	; (80049c8 <UART_SetConfig+0x348>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4ab7      	ldr	r2, [pc, #732]	; (80049cc <UART_SetConfig+0x34c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046fa:	4313      	orrs	r3, r2
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	4bb2      	ldr	r3, [pc, #712]	; (80049d0 <UART_SetConfig+0x350>)
 8004706:	4013      	ands	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800470e:	430b      	orrs	r3, r1
 8004710:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	f023 010f 	bic.w	r1, r3, #15
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4aa9      	ldr	r2, [pc, #676]	; (80049d4 <UART_SetConfig+0x354>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d177      	bne.n	8004822 <UART_SetConfig+0x1a2>
 8004732:	4ba9      	ldr	r3, [pc, #676]	; (80049d8 <UART_SetConfig+0x358>)
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800473a:	2b28      	cmp	r3, #40	; 0x28
 800473c:	d86c      	bhi.n	8004818 <UART_SetConfig+0x198>
 800473e:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <UART_SetConfig+0xc4>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	080047e9 	.word	0x080047e9
 8004748:	08004819 	.word	0x08004819
 800474c:	08004819 	.word	0x08004819
 8004750:	08004819 	.word	0x08004819
 8004754:	08004819 	.word	0x08004819
 8004758:	08004819 	.word	0x08004819
 800475c:	08004819 	.word	0x08004819
 8004760:	08004819 	.word	0x08004819
 8004764:	080047f1 	.word	0x080047f1
 8004768:	08004819 	.word	0x08004819
 800476c:	08004819 	.word	0x08004819
 8004770:	08004819 	.word	0x08004819
 8004774:	08004819 	.word	0x08004819
 8004778:	08004819 	.word	0x08004819
 800477c:	08004819 	.word	0x08004819
 8004780:	08004819 	.word	0x08004819
 8004784:	080047f9 	.word	0x080047f9
 8004788:	08004819 	.word	0x08004819
 800478c:	08004819 	.word	0x08004819
 8004790:	08004819 	.word	0x08004819
 8004794:	08004819 	.word	0x08004819
 8004798:	08004819 	.word	0x08004819
 800479c:	08004819 	.word	0x08004819
 80047a0:	08004819 	.word	0x08004819
 80047a4:	08004801 	.word	0x08004801
 80047a8:	08004819 	.word	0x08004819
 80047ac:	08004819 	.word	0x08004819
 80047b0:	08004819 	.word	0x08004819
 80047b4:	08004819 	.word	0x08004819
 80047b8:	08004819 	.word	0x08004819
 80047bc:	08004819 	.word	0x08004819
 80047c0:	08004819 	.word	0x08004819
 80047c4:	08004809 	.word	0x08004809
 80047c8:	08004819 	.word	0x08004819
 80047cc:	08004819 	.word	0x08004819
 80047d0:	08004819 	.word	0x08004819
 80047d4:	08004819 	.word	0x08004819
 80047d8:	08004819 	.word	0x08004819
 80047dc:	08004819 	.word	0x08004819
 80047e0:	08004819 	.word	0x08004819
 80047e4:	08004811 	.word	0x08004811
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047ee:	e233      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80047f0:	2304      	movs	r3, #4
 80047f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047f6:	e22f      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80047f8:	2308      	movs	r3, #8
 80047fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047fe:	e22b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004800:	2310      	movs	r3, #16
 8004802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004806:	e227      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004808:	2320      	movs	r3, #32
 800480a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800480e:	e223      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004810:	2340      	movs	r3, #64	; 0x40
 8004812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004816:	e21f      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800481e:	bf00      	nop
 8004820:	e21a      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a6d      	ldr	r2, [pc, #436]	; (80049dc <UART_SetConfig+0x35c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d132      	bne.n	8004892 <UART_SetConfig+0x212>
 800482c:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <UART_SetConfig+0x358>)
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	2b05      	cmp	r3, #5
 8004836:	d827      	bhi.n	8004888 <UART_SetConfig+0x208>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0x1c0>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004859 	.word	0x08004859
 8004844:	08004861 	.word	0x08004861
 8004848:	08004869 	.word	0x08004869
 800484c:	08004871 	.word	0x08004871
 8004850:	08004879 	.word	0x08004879
 8004854:	08004881 	.word	0x08004881
 8004858:	2300      	movs	r3, #0
 800485a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800485e:	e1fb      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004866:	e1f7      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800486e:	e1f3      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004876:	e1ef      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004878:	2320      	movs	r3, #32
 800487a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800487e:	e1eb      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004880:	2340      	movs	r3, #64	; 0x40
 8004882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004886:	e1e7      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800488e:	bf00      	nop
 8004890:	e1e2      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <UART_SetConfig+0x360>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d132      	bne.n	8004902 <UART_SetConfig+0x282>
 800489c:	4b4e      	ldr	r3, [pc, #312]	; (80049d8 <UART_SetConfig+0x358>)
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d827      	bhi.n	80048f8 <UART_SetConfig+0x278>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0x230>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048c9 	.word	0x080048c9
 80048b4:	080048d1 	.word	0x080048d1
 80048b8:	080048d9 	.word	0x080048d9
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048e9 	.word	0x080048e9
 80048c4:	080048f1 	.word	0x080048f1
 80048c8:	2300      	movs	r3, #0
 80048ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048ce:	e1c3      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80048d0:	2304      	movs	r3, #4
 80048d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048d6:	e1bf      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80048d8:	2308      	movs	r3, #8
 80048da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048de:	e1bb      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80048e0:	2310      	movs	r3, #16
 80048e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048e6:	e1b7      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80048e8:	2320      	movs	r3, #32
 80048ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048ee:	e1b3      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80048f0:	2340      	movs	r3, #64	; 0x40
 80048f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048f6:	e1af      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048fe:	bf00      	nop
 8004900:	e1aa      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a37      	ldr	r2, [pc, #220]	; (80049e4 <UART_SetConfig+0x364>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d132      	bne.n	8004972 <UART_SetConfig+0x2f2>
 800490c:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <UART_SetConfig+0x358>)
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	2b05      	cmp	r3, #5
 8004916:	d827      	bhi.n	8004968 <UART_SetConfig+0x2e8>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0x2a0>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004939 	.word	0x08004939
 8004924:	08004941 	.word	0x08004941
 8004928:	08004949 	.word	0x08004949
 800492c:	08004951 	.word	0x08004951
 8004930:	08004959 	.word	0x08004959
 8004934:	08004961 	.word	0x08004961
 8004938:	2300      	movs	r3, #0
 800493a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800493e:	e18b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004946:	e187      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800494e:	e183      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004956:	e17f      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004958:	2320      	movs	r3, #32
 800495a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800495e:	e17b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004966:	e177      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800496e:	bf00      	nop
 8004970:	e172      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <UART_SetConfig+0x368>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d144      	bne.n	8004a06 <UART_SetConfig+0x386>
 800497c:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <UART_SetConfig+0x358>)
 800497e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	2b05      	cmp	r3, #5
 8004986:	d839      	bhi.n	80049fc <UART_SetConfig+0x37c>
 8004988:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <UART_SetConfig+0x310>)
 800498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498e:	bf00      	nop
 8004990:	080049a9 	.word	0x080049a9
 8004994:	080049b1 	.word	0x080049b1
 8004998:	080049b9 	.word	0x080049b9
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049ed 	.word	0x080049ed
 80049a4:	080049f5 	.word	0x080049f5
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80049ae:	e153      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80049b0:	2304      	movs	r3, #4
 80049b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80049b6:	e14f      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80049b8:	2308      	movs	r3, #8
 80049ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80049be:	e14b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80049c0:	2310      	movs	r3, #16
 80049c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80049c6:	e147      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80049c8:	cfff69f3 	.word	0xcfff69f3
 80049cc:	58000c00 	.word	0x58000c00
 80049d0:	11fff4ff 	.word	0x11fff4ff
 80049d4:	40011000 	.word	0x40011000
 80049d8:	58024400 	.word	0x58024400
 80049dc:	40004400 	.word	0x40004400
 80049e0:	40004800 	.word	0x40004800
 80049e4:	40004c00 	.word	0x40004c00
 80049e8:	40005000 	.word	0x40005000
 80049ec:	2320      	movs	r3, #32
 80049ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80049f2:	e131      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80049f4:	2340      	movs	r3, #64	; 0x40
 80049f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80049fa:	e12d      	b.n	8004c58 <UART_SetConfig+0x5d8>
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004a02:	bf00      	nop
 8004a04:	e128      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4ac3      	ldr	r2, [pc, #780]	; (8004d18 <UART_SetConfig+0x698>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d178      	bne.n	8004b02 <UART_SetConfig+0x482>
 8004a10:	4bc2      	ldr	r3, [pc, #776]	; (8004d1c <UART_SetConfig+0x69c>)
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a18:	2b28      	cmp	r3, #40	; 0x28
 8004a1a:	d86d      	bhi.n	8004af8 <UART_SetConfig+0x478>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x3a4>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004ac9 	.word	0x08004ac9
 8004a28:	08004af9 	.word	0x08004af9
 8004a2c:	08004af9 	.word	0x08004af9
 8004a30:	08004af9 	.word	0x08004af9
 8004a34:	08004af9 	.word	0x08004af9
 8004a38:	08004af9 	.word	0x08004af9
 8004a3c:	08004af9 	.word	0x08004af9
 8004a40:	08004af9 	.word	0x08004af9
 8004a44:	08004ad1 	.word	0x08004ad1
 8004a48:	08004af9 	.word	0x08004af9
 8004a4c:	08004af9 	.word	0x08004af9
 8004a50:	08004af9 	.word	0x08004af9
 8004a54:	08004af9 	.word	0x08004af9
 8004a58:	08004af9 	.word	0x08004af9
 8004a5c:	08004af9 	.word	0x08004af9
 8004a60:	08004af9 	.word	0x08004af9
 8004a64:	08004ad9 	.word	0x08004ad9
 8004a68:	08004af9 	.word	0x08004af9
 8004a6c:	08004af9 	.word	0x08004af9
 8004a70:	08004af9 	.word	0x08004af9
 8004a74:	08004af9 	.word	0x08004af9
 8004a78:	08004af9 	.word	0x08004af9
 8004a7c:	08004af9 	.word	0x08004af9
 8004a80:	08004af9 	.word	0x08004af9
 8004a84:	08004ae1 	.word	0x08004ae1
 8004a88:	08004af9 	.word	0x08004af9
 8004a8c:	08004af9 	.word	0x08004af9
 8004a90:	08004af9 	.word	0x08004af9
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004af9 	.word	0x08004af9
 8004a9c:	08004af9 	.word	0x08004af9
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004ae9 	.word	0x08004ae9
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004af9 	.word	0x08004af9
 8004ab0:	08004af9 	.word	0x08004af9
 8004ab4:	08004af9 	.word	0x08004af9
 8004ab8:	08004af9 	.word	0x08004af9
 8004abc:	08004af9 	.word	0x08004af9
 8004ac0:	08004af9 	.word	0x08004af9
 8004ac4:	08004af1 	.word	0x08004af1
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ace:	e0c3      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ad6:	e0bf      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ade:	e0bb      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ae6:	e0b7      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004aee:	e0b3      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004af0:	2340      	movs	r3, #64	; 0x40
 8004af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004af6:	e0af      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004afe:	bf00      	nop
 8004b00:	e0aa      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a86      	ldr	r2, [pc, #536]	; (8004d20 <UART_SetConfig+0x6a0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d132      	bne.n	8004b72 <UART_SetConfig+0x4f2>
 8004b0c:	4b83      	ldr	r3, [pc, #524]	; (8004d1c <UART_SetConfig+0x69c>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	2b05      	cmp	r3, #5
 8004b16:	d827      	bhi.n	8004b68 <UART_SetConfig+0x4e8>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <UART_SetConfig+0x4a0>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b39 	.word	0x08004b39
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	08004b49 	.word	0x08004b49
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b3e:	e08b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b46:	e087      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b4e:	e083      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b56:	e07f      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004b58:	2320      	movs	r3, #32
 8004b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b5e:	e07b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004b60:	2340      	movs	r3, #64	; 0x40
 8004b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b66:	e077      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004b6e:	bf00      	nop
 8004b70:	e072      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6b      	ldr	r2, [pc, #428]	; (8004d24 <UART_SetConfig+0x6a4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d132      	bne.n	8004be2 <UART_SetConfig+0x562>
 8004b7c:	4b67      	ldr	r3, [pc, #412]	; (8004d1c <UART_SetConfig+0x69c>)
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d827      	bhi.n	8004bd8 <UART_SetConfig+0x558>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x510>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba9 	.word	0x08004ba9
 8004b94:	08004bb1 	.word	0x08004bb1
 8004b98:	08004bb9 	.word	0x08004bb9
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bae:	e053      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bb6:	e04f      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bbe:	e04b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bc6:	e047      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004bc8:	2320      	movs	r3, #32
 8004bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bce:	e043      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004bd0:	2340      	movs	r3, #64	; 0x40
 8004bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bd6:	e03f      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004bde:	bf00      	nop
 8004be0:	e03a      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a50      	ldr	r2, [pc, #320]	; (8004d28 <UART_SetConfig+0x6a8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d132      	bne.n	8004c52 <UART_SetConfig+0x5d2>
 8004bec:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <UART_SetConfig+0x69c>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d827      	bhi.n	8004c48 <UART_SetConfig+0x5c8>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0x580>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c19 	.word	0x08004c19
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	08004c29 	.word	0x08004c29
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c1e:	e01b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c26:	e017      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c2e:	e013      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c36:	e00f      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004c38:	2320      	movs	r3, #32
 8004c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c3e:	e00b      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004c40:	2340      	movs	r3, #64	; 0x40
 8004c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c46:	e007      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <UART_SetConfig+0x5d8>
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a32      	ldr	r2, [pc, #200]	; (8004d28 <UART_SetConfig+0x6a8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f040 86f7 	bne.w	8005a52 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	f000 80c0 	beq.w	8004dee <UART_SetConfig+0x76e>
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	dc04      	bgt.n	8004c7c <UART_SetConfig+0x5fc>
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d00c      	beq.n	8004c90 <UART_SetConfig+0x610>
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d065      	beq.n	8004d46 <UART_SetConfig+0x6c6>
 8004c7a:	e27a      	b.n	8005172 <UART_SetConfig+0xaf2>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	f000 81b0 	beq.w	8004fe2 <UART_SetConfig+0x962>
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	f000 821e 	beq.w	80050c4 <UART_SetConfig+0xa44>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	f000 8104 	beq.w	8004e96 <UART_SetConfig+0x816>
 8004c8e:	e270      	b.n	8005172 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004c90:	f7fe fffc 	bl	8003c8c <HAL_RCCEx_GetD3PCLK1Freq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d04e      	beq.n	8004d3c <UART_SetConfig+0x6bc>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d048      	beq.n	8004d38 <UART_SetConfig+0x6b8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d042      	beq.n	8004d34 <UART_SetConfig+0x6b4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d03c      	beq.n	8004d30 <UART_SetConfig+0x6b0>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d036      	beq.n	8004d2c <UART_SetConfig+0x6ac>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d026      	beq.n	8004d14 <UART_SetConfig+0x694>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d020      	beq.n	8004d10 <UART_SetConfig+0x690>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	2b07      	cmp	r3, #7
 8004cd4:	d01a      	beq.n	8004d0c <UART_SetConfig+0x68c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d014      	beq.n	8004d08 <UART_SetConfig+0x688>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d00e      	beq.n	8004d04 <UART_SetConfig+0x684>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	2b0a      	cmp	r3, #10
 8004cec:	d008      	beq.n	8004d00 <UART_SetConfig+0x680>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b0b      	cmp	r3, #11
 8004cf4:	d102      	bne.n	8004cfc <UART_SetConfig+0x67c>
 8004cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cfa:	e020      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e01e      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	e01c      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	e01a      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d08:	2320      	movs	r3, #32
 8004d0a:	e018      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	e016      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d10:	230c      	movs	r3, #12
 8004d12:	e014      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d14:	230a      	movs	r3, #10
 8004d16:	e012      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d18:	40011400 	.word	0x40011400
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	40007800 	.word	0x40007800
 8004d24:	40007c00 	.word	0x40007c00
 8004d28:	58000c00 	.word	0x58000c00
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	e006      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d30:	2306      	movs	r3, #6
 8004d32:	e004      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d34:	2304      	movs	r3, #4
 8004d36:	e002      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e000      	b.n	8004d3e <UART_SetConfig+0x6be>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d44:	e219      	b.n	800517a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d46:	f107 0318 	add.w	r3, r7, #24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe ffb4 	bl	8003cb8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d044      	beq.n	8004de4 <UART_SetConfig+0x764>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d03e      	beq.n	8004de0 <UART_SetConfig+0x760>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d038      	beq.n	8004ddc <UART_SetConfig+0x75c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d032      	beq.n	8004dd8 <UART_SetConfig+0x758>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d02c      	beq.n	8004dd4 <UART_SetConfig+0x754>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d026      	beq.n	8004dd0 <UART_SetConfig+0x750>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d020      	beq.n	8004dcc <UART_SetConfig+0x74c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b07      	cmp	r3, #7
 8004d90:	d01a      	beq.n	8004dc8 <UART_SetConfig+0x748>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d014      	beq.n	8004dc4 <UART_SetConfig+0x744>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b09      	cmp	r3, #9
 8004da0:	d00e      	beq.n	8004dc0 <UART_SetConfig+0x740>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b0a      	cmp	r3, #10
 8004da8:	d008      	beq.n	8004dbc <UART_SetConfig+0x73c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b0b      	cmp	r3, #11
 8004db0:	d102      	bne.n	8004db8 <UART_SetConfig+0x738>
 8004db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004db6:	e016      	b.n	8004de6 <UART_SetConfig+0x766>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e014      	b.n	8004de6 <UART_SetConfig+0x766>
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	e012      	b.n	8004de6 <UART_SetConfig+0x766>
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	e010      	b.n	8004de6 <UART_SetConfig+0x766>
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	e00e      	b.n	8004de6 <UART_SetConfig+0x766>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	e00c      	b.n	8004de6 <UART_SetConfig+0x766>
 8004dcc:	230c      	movs	r3, #12
 8004dce:	e00a      	b.n	8004de6 <UART_SetConfig+0x766>
 8004dd0:	230a      	movs	r3, #10
 8004dd2:	e008      	b.n	8004de6 <UART_SetConfig+0x766>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	e006      	b.n	8004de6 <UART_SetConfig+0x766>
 8004dd8:	2306      	movs	r3, #6
 8004dda:	e004      	b.n	8004de6 <UART_SetConfig+0x766>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	e002      	b.n	8004de6 <UART_SetConfig+0x766>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e000      	b.n	8004de6 <UART_SetConfig+0x766>
 8004de4:	2301      	movs	r3, #1
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dec:	e1c5      	b.n	800517a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dee:	f107 030c 	add.w	r3, r7, #12
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff f8ac 	bl	8003f50 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d044      	beq.n	8004e8c <UART_SetConfig+0x80c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d03e      	beq.n	8004e88 <UART_SetConfig+0x808>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d038      	beq.n	8004e84 <UART_SetConfig+0x804>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d032      	beq.n	8004e80 <UART_SetConfig+0x800>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d02c      	beq.n	8004e7c <UART_SetConfig+0x7fc>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	d026      	beq.n	8004e78 <UART_SetConfig+0x7f8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d020      	beq.n	8004e74 <UART_SetConfig+0x7f4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	d01a      	beq.n	8004e70 <UART_SetConfig+0x7f0>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d014      	beq.n	8004e6c <UART_SetConfig+0x7ec>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b09      	cmp	r3, #9
 8004e48:	d00e      	beq.n	8004e68 <UART_SetConfig+0x7e8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b0a      	cmp	r3, #10
 8004e50:	d008      	beq.n	8004e64 <UART_SetConfig+0x7e4>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	2b0b      	cmp	r3, #11
 8004e58:	d102      	bne.n	8004e60 <UART_SetConfig+0x7e0>
 8004e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e5e:	e016      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e014      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	e012      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e68:	2340      	movs	r3, #64	; 0x40
 8004e6a:	e010      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	e00e      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e70:	2310      	movs	r3, #16
 8004e72:	e00c      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e74:	230c      	movs	r3, #12
 8004e76:	e00a      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e78:	230a      	movs	r3, #10
 8004e7a:	e008      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	e006      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e80:	2306      	movs	r3, #6
 8004e82:	e004      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e84:	2304      	movs	r3, #4
 8004e86:	e002      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e000      	b.n	8004e8e <UART_SetConfig+0x80e>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e94:	e171      	b.n	800517a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e96:	4b7a      	ldr	r3, [pc, #488]	; (8005080 <UART_SetConfig+0xa00>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d054      	beq.n	8004f4c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ea2:	4b77      	ldr	r3, [pc, #476]	; (8005080 <UART_SetConfig+0xa00>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	08db      	lsrs	r3, r3, #3
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	4a75      	ldr	r2, [pc, #468]	; (8005084 <UART_SetConfig+0xa04>)
 8004eae:	40da      	lsrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d044      	beq.n	8004f42 <UART_SetConfig+0x8c2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d03e      	beq.n	8004f3e <UART_SetConfig+0x8be>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d038      	beq.n	8004f3a <UART_SetConfig+0x8ba>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d032      	beq.n	8004f36 <UART_SetConfig+0x8b6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d02c      	beq.n	8004f32 <UART_SetConfig+0x8b2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	2b05      	cmp	r3, #5
 8004ede:	d026      	beq.n	8004f2e <UART_SetConfig+0x8ae>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	2b06      	cmp	r3, #6
 8004ee6:	d020      	beq.n	8004f2a <UART_SetConfig+0x8aa>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2b07      	cmp	r3, #7
 8004eee:	d01a      	beq.n	8004f26 <UART_SetConfig+0x8a6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d014      	beq.n	8004f22 <UART_SetConfig+0x8a2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2b09      	cmp	r3, #9
 8004efe:	d00e      	beq.n	8004f1e <UART_SetConfig+0x89e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b0a      	cmp	r3, #10
 8004f06:	d008      	beq.n	8004f1a <UART_SetConfig+0x89a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b0b      	cmp	r3, #11
 8004f0e:	d102      	bne.n	8004f16 <UART_SetConfig+0x896>
 8004f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f14:	e016      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e014      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	e012      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f1e:	2340      	movs	r3, #64	; 0x40
 8004f20:	e010      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f22:	2320      	movs	r3, #32
 8004f24:	e00e      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f26:	2310      	movs	r3, #16
 8004f28:	e00c      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	e00a      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f2e:	230a      	movs	r3, #10
 8004f30:	e008      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f32:	2308      	movs	r3, #8
 8004f34:	e006      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f36:	2306      	movs	r3, #6
 8004f38:	e004      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	e002      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e000      	b.n	8004f44 <UART_SetConfig+0x8c4>
 8004f42:	2301      	movs	r3, #1
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8004f4a:	e116      	b.n	800517a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d043      	beq.n	8004fdc <UART_SetConfig+0x95c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d03d      	beq.n	8004fd8 <UART_SetConfig+0x958>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d037      	beq.n	8004fd4 <UART_SetConfig+0x954>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d031      	beq.n	8004fd0 <UART_SetConfig+0x950>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d02b      	beq.n	8004fcc <UART_SetConfig+0x94c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	d025      	beq.n	8004fc8 <UART_SetConfig+0x948>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b06      	cmp	r3, #6
 8004f82:	d01f      	beq.n	8004fc4 <UART_SetConfig+0x944>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b07      	cmp	r3, #7
 8004f8a:	d019      	beq.n	8004fc0 <UART_SetConfig+0x940>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d013      	beq.n	8004fbc <UART_SetConfig+0x93c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b09      	cmp	r3, #9
 8004f9a:	d00d      	beq.n	8004fb8 <UART_SetConfig+0x938>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b0a      	cmp	r3, #10
 8004fa2:	d007      	beq.n	8004fb4 <UART_SetConfig+0x934>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b0b      	cmp	r3, #11
 8004faa:	d101      	bne.n	8004fb0 <UART_SetConfig+0x930>
 8004fac:	4b36      	ldr	r3, [pc, #216]	; (8005088 <UART_SetConfig+0xa08>)
 8004fae:	e016      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fb0:	4b34      	ldr	r3, [pc, #208]	; (8005084 <UART_SetConfig+0xa04>)
 8004fb2:	e014      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fb4:	4b35      	ldr	r3, [pc, #212]	; (800508c <UART_SetConfig+0xa0c>)
 8004fb6:	e012      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fb8:	4b35      	ldr	r3, [pc, #212]	; (8005090 <UART_SetConfig+0xa10>)
 8004fba:	e010      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fbc:	4b35      	ldr	r3, [pc, #212]	; (8005094 <UART_SetConfig+0xa14>)
 8004fbe:	e00e      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <UART_SetConfig+0xa18>)
 8004fc2:	e00c      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fc4:	4b35      	ldr	r3, [pc, #212]	; (800509c <UART_SetConfig+0xa1c>)
 8004fc6:	e00a      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fc8:	4b35      	ldr	r3, [pc, #212]	; (80050a0 <UART_SetConfig+0xa20>)
 8004fca:	e008      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fcc:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <UART_SetConfig+0xa24>)
 8004fce:	e006      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fd0:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <UART_SetConfig+0xa28>)
 8004fd2:	e004      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fd4:	4b35      	ldr	r3, [pc, #212]	; (80050ac <UART_SetConfig+0xa2c>)
 8004fd6:	e002      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fd8:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <UART_SetConfig+0xa30>)
 8004fda:	e000      	b.n	8004fde <UART_SetConfig+0x95e>
 8004fdc:	4b29      	ldr	r3, [pc, #164]	; (8005084 <UART_SetConfig+0xa04>)
 8004fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fe0:	e0cb      	b.n	800517a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d046      	beq.n	8005078 <UART_SetConfig+0x9f8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d040      	beq.n	8005074 <UART_SetConfig+0x9f4>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d03a      	beq.n	8005070 <UART_SetConfig+0x9f0>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d034      	beq.n	800506c <UART_SetConfig+0x9ec>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b04      	cmp	r3, #4
 8005008:	d02e      	beq.n	8005068 <UART_SetConfig+0x9e8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b05      	cmp	r3, #5
 8005010:	d028      	beq.n	8005064 <UART_SetConfig+0x9e4>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b06      	cmp	r3, #6
 8005018:	d022      	beq.n	8005060 <UART_SetConfig+0x9e0>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b07      	cmp	r3, #7
 8005020:	d01c      	beq.n	800505c <UART_SetConfig+0x9dc>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b08      	cmp	r3, #8
 8005028:	d016      	beq.n	8005058 <UART_SetConfig+0x9d8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b09      	cmp	r3, #9
 8005030:	d00f      	beq.n	8005052 <UART_SetConfig+0x9d2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b0a      	cmp	r3, #10
 8005038:	d008      	beq.n	800504c <UART_SetConfig+0x9cc>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b0b      	cmp	r3, #11
 8005040:	d102      	bne.n	8005048 <UART_SetConfig+0x9c8>
 8005042:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005046:	e018      	b.n	800507a <UART_SetConfig+0x9fa>
 8005048:	4b13      	ldr	r3, [pc, #76]	; (8005098 <UART_SetConfig+0xa18>)
 800504a:	e016      	b.n	800507a <UART_SetConfig+0x9fa>
 800504c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005050:	e013      	b.n	800507a <UART_SetConfig+0x9fa>
 8005052:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005056:	e010      	b.n	800507a <UART_SetConfig+0x9fa>
 8005058:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <UART_SetConfig+0xa34>)
 800505a:	e00e      	b.n	800507a <UART_SetConfig+0x9fa>
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <UART_SetConfig+0xa08>)
 800505e:	e00c      	b.n	800507a <UART_SetConfig+0x9fa>
 8005060:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <UART_SetConfig+0xa38>)
 8005062:	e00a      	b.n	800507a <UART_SetConfig+0x9fa>
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <UART_SetConfig+0xa3c>)
 8005066:	e008      	b.n	800507a <UART_SetConfig+0x9fa>
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <UART_SetConfig+0xa0c>)
 800506a:	e006      	b.n	800507a <UART_SetConfig+0x9fa>
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <UART_SetConfig+0xa40>)
 800506e:	e004      	b.n	800507a <UART_SetConfig+0x9fa>
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <UART_SetConfig+0xa10>)
 8005072:	e002      	b.n	800507a <UART_SetConfig+0x9fa>
 8005074:	4b07      	ldr	r3, [pc, #28]	; (8005094 <UART_SetConfig+0xa14>)
 8005076:	e000      	b.n	800507a <UART_SetConfig+0x9fa>
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <UART_SetConfig+0xa18>)
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800507c:	e07d      	b.n	800517a <UART_SetConfig+0xafa>
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
 8005084:	03d09000 	.word	0x03d09000
 8005088:	0003d090 	.word	0x0003d090
 800508c:	0007a120 	.word	0x0007a120
 8005090:	000f4240 	.word	0x000f4240
 8005094:	001e8480 	.word	0x001e8480
 8005098:	003d0900 	.word	0x003d0900
 800509c:	00516155 	.word	0x00516155
 80050a0:	0061a800 	.word	0x0061a800
 80050a4:	007a1200 	.word	0x007a1200
 80050a8:	00a2c2aa 	.word	0x00a2c2aa
 80050ac:	00f42400 	.word	0x00f42400
 80050b0:	01e84800 	.word	0x01e84800
 80050b4:	0001e848 	.word	0x0001e848
 80050b8:	00051615 	.word	0x00051615
 80050bc:	00061a80 	.word	0x00061a80
 80050c0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d04e      	beq.n	800516a <UART_SetConfig+0xaea>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d047      	beq.n	8005164 <UART_SetConfig+0xae4>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d040      	beq.n	800515e <UART_SetConfig+0xade>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d039      	beq.n	8005158 <UART_SetConfig+0xad8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d032      	beq.n	8005152 <UART_SetConfig+0xad2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	d02b      	beq.n	800514c <UART_SetConfig+0xacc>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b06      	cmp	r3, #6
 80050fa:	d024      	beq.n	8005146 <UART_SetConfig+0xac6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b07      	cmp	r3, #7
 8005102:	d01d      	beq.n	8005140 <UART_SetConfig+0xac0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b08      	cmp	r3, #8
 800510a:	d016      	beq.n	800513a <UART_SetConfig+0xaba>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b09      	cmp	r3, #9
 8005112:	d00f      	beq.n	8005134 <UART_SetConfig+0xab4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2b0a      	cmp	r3, #10
 800511a:	d008      	beq.n	800512e <UART_SetConfig+0xaae>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2b0b      	cmp	r3, #11
 8005122:	d101      	bne.n	8005128 <UART_SetConfig+0xaa8>
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	e022      	b.n	800516e <UART_SetConfig+0xaee>
 8005128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512c:	e01f      	b.n	800516e <UART_SetConfig+0xaee>
 800512e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005132:	e01c      	b.n	800516e <UART_SetConfig+0xaee>
 8005134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005138:	e019      	b.n	800516e <UART_SetConfig+0xaee>
 800513a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513e:	e016      	b.n	800516e <UART_SetConfig+0xaee>
 8005140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005144:	e013      	b.n	800516e <UART_SetConfig+0xaee>
 8005146:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800514a:	e010      	b.n	800516e <UART_SetConfig+0xaee>
 800514c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005150:	e00d      	b.n	800516e <UART_SetConfig+0xaee>
 8005152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005156:	e00a      	b.n	800516e <UART_SetConfig+0xaee>
 8005158:	f241 5355 	movw	r3, #5461	; 0x1555
 800515c:	e007      	b.n	800516e <UART_SetConfig+0xaee>
 800515e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005162:	e004      	b.n	800516e <UART_SetConfig+0xaee>
 8005164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005168:	e001      	b.n	800516e <UART_SetConfig+0xaee>
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005170:	e003      	b.n	800517a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005178:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	2b00      	cmp	r3, #0
 800517e:	f001 83e8 	beq.w	8006952 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800518e:	429a      	cmp	r2, r3
 8005190:	d305      	bcc.n	800519e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519a:	429a      	cmp	r2, r3
 800519c:	d904      	bls.n	80051a8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a4:	f001 bbd5 	b.w	8006952 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80051a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	f000 8154 	beq.w	800545a <UART_SetConfig+0xdda>
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	dc06      	bgt.n	80051c4 <UART_SetConfig+0xb44>
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d00f      	beq.n	80051da <UART_SetConfig+0xb5a>
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	f000 80ac 	beq.w	8005318 <UART_SetConfig+0xc98>
 80051c0:	f000 bc30 	b.w	8005a24 <UART_SetConfig+0x13a4>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	f000 832d 	beq.w	8005824 <UART_SetConfig+0x11a4>
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	f000 83a5 	beq.w	800591a <UART_SetConfig+0x129a>
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	f000 81e3 	beq.w	800559c <UART_SetConfig+0xf1c>
 80051d6:	f000 bc25 	b.w	8005a24 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80051da:	f7fe fd57 	bl	8003c8c <HAL_RCCEx_GetD3PCLK1Freq>
 80051de:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	4618      	mov	r0, r3
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d067      	beq.n	80052c0 <UART_SetConfig+0xc40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d05e      	beq.n	80052b6 <UART_SetConfig+0xc36>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d055      	beq.n	80052ac <UART_SetConfig+0xc2c>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b03      	cmp	r3, #3
 8005206:	d04c      	beq.n	80052a2 <UART_SetConfig+0xc22>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b04      	cmp	r3, #4
 800520e:	d043      	beq.n	8005298 <UART_SetConfig+0xc18>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	2b05      	cmp	r3, #5
 8005216:	d03a      	beq.n	800528e <UART_SetConfig+0xc0e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b06      	cmp	r3, #6
 800521e:	d031      	beq.n	8005284 <UART_SetConfig+0xc04>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2b07      	cmp	r3, #7
 8005226:	d028      	beq.n	800527a <UART_SetConfig+0xbfa>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b08      	cmp	r3, #8
 800522e:	d01f      	beq.n	8005270 <UART_SetConfig+0xbf0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b09      	cmp	r3, #9
 8005236:	d016      	beq.n	8005266 <UART_SetConfig+0xbe6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	2b0a      	cmp	r3, #10
 800523e:	d00d      	beq.n	800525c <UART_SetConfig+0xbdc>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b0b      	cmp	r3, #11
 8005246:	d104      	bne.n	8005252 <UART_SetConfig+0xbd2>
 8005248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800524c:	f04f 0400 	mov.w	r4, #0
 8005250:	e03a      	b.n	80052c8 <UART_SetConfig+0xc48>
 8005252:	f04f 0301 	mov.w	r3, #1
 8005256:	f04f 0400 	mov.w	r4, #0
 800525a:	e035      	b.n	80052c8 <UART_SetConfig+0xc48>
 800525c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	e030      	b.n	80052c8 <UART_SetConfig+0xc48>
 8005266:	f04f 0340 	mov.w	r3, #64	; 0x40
 800526a:	f04f 0400 	mov.w	r4, #0
 800526e:	e02b      	b.n	80052c8 <UART_SetConfig+0xc48>
 8005270:	f04f 0320 	mov.w	r3, #32
 8005274:	f04f 0400 	mov.w	r4, #0
 8005278:	e026      	b.n	80052c8 <UART_SetConfig+0xc48>
 800527a:	f04f 0310 	mov.w	r3, #16
 800527e:	f04f 0400 	mov.w	r4, #0
 8005282:	e021      	b.n	80052c8 <UART_SetConfig+0xc48>
 8005284:	f04f 030c 	mov.w	r3, #12
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	e01c      	b.n	80052c8 <UART_SetConfig+0xc48>
 800528e:	f04f 030a 	mov.w	r3, #10
 8005292:	f04f 0400 	mov.w	r4, #0
 8005296:	e017      	b.n	80052c8 <UART_SetConfig+0xc48>
 8005298:	f04f 0308 	mov.w	r3, #8
 800529c:	f04f 0400 	mov.w	r4, #0
 80052a0:	e012      	b.n	80052c8 <UART_SetConfig+0xc48>
 80052a2:	f04f 0306 	mov.w	r3, #6
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	e00d      	b.n	80052c8 <UART_SetConfig+0xc48>
 80052ac:	f04f 0304 	mov.w	r3, #4
 80052b0:	f04f 0400 	mov.w	r4, #0
 80052b4:	e008      	b.n	80052c8 <UART_SetConfig+0xc48>
 80052b6:	f04f 0302 	mov.w	r3, #2
 80052ba:	f04f 0400 	mov.w	r4, #0
 80052be:	e003      	b.n	80052c8 <UART_SetConfig+0xc48>
 80052c0:	f04f 0301 	mov.w	r3, #1
 80052c4:	f04f 0400 	mov.w	r4, #0
 80052c8:	461a      	mov	r2, r3
 80052ca:	4623      	mov	r3, r4
 80052cc:	f7fb f860 	bl	8000390 <__aeabi_uldivmod>
 80052d0:	4603      	mov	r3, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	4619      	mov	r1, r3
 80052d6:	4622      	mov	r2, r4
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	0214      	lsls	r4, r2, #8
 80052e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80052e6:	020b      	lsls	r3, r1, #8
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6852      	ldr	r2, [r2, #4]
 80052ec:	0852      	lsrs	r2, r2, #1
 80052ee:	4611      	mov	r1, r2
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	eb13 0b01 	adds.w	fp, r3, r1
 80052f8:	eb44 0c02 	adc.w	ip, r4, r2
 80052fc:	4658      	mov	r0, fp
 80052fe:	4661      	mov	r1, ip
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f04f 0400 	mov.w	r4, #0
 8005308:	461a      	mov	r2, r3
 800530a:	4623      	mov	r3, r4
 800530c:	f7fb f840 	bl	8000390 <__aeabi_uldivmod>
 8005310:	4603      	mov	r3, r0
 8005312:	460c      	mov	r4, r1
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005316:	e389      	b.n	8005a2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005318:	f107 0318 	add.w	r3, r7, #24
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe fccb 	bl	8003cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4618      	mov	r0, r3
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d067      	beq.n	8005402 <UART_SetConfig+0xd82>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b01      	cmp	r3, #1
 8005338:	d05e      	beq.n	80053f8 <UART_SetConfig+0xd78>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b02      	cmp	r3, #2
 8005340:	d055      	beq.n	80053ee <UART_SetConfig+0xd6e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b03      	cmp	r3, #3
 8005348:	d04c      	beq.n	80053e4 <UART_SetConfig+0xd64>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b04      	cmp	r3, #4
 8005350:	d043      	beq.n	80053da <UART_SetConfig+0xd5a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b05      	cmp	r3, #5
 8005358:	d03a      	beq.n	80053d0 <UART_SetConfig+0xd50>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b06      	cmp	r3, #6
 8005360:	d031      	beq.n	80053c6 <UART_SetConfig+0xd46>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b07      	cmp	r3, #7
 8005368:	d028      	beq.n	80053bc <UART_SetConfig+0xd3c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b08      	cmp	r3, #8
 8005370:	d01f      	beq.n	80053b2 <UART_SetConfig+0xd32>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b09      	cmp	r3, #9
 8005378:	d016      	beq.n	80053a8 <UART_SetConfig+0xd28>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b0a      	cmp	r3, #10
 8005380:	d00d      	beq.n	800539e <UART_SetConfig+0xd1e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b0b      	cmp	r3, #11
 8005388:	d104      	bne.n	8005394 <UART_SetConfig+0xd14>
 800538a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800538e:	f04f 0400 	mov.w	r4, #0
 8005392:	e03a      	b.n	800540a <UART_SetConfig+0xd8a>
 8005394:	f04f 0301 	mov.w	r3, #1
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	e035      	b.n	800540a <UART_SetConfig+0xd8a>
 800539e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053a2:	f04f 0400 	mov.w	r4, #0
 80053a6:	e030      	b.n	800540a <UART_SetConfig+0xd8a>
 80053a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	e02b      	b.n	800540a <UART_SetConfig+0xd8a>
 80053b2:	f04f 0320 	mov.w	r3, #32
 80053b6:	f04f 0400 	mov.w	r4, #0
 80053ba:	e026      	b.n	800540a <UART_SetConfig+0xd8a>
 80053bc:	f04f 0310 	mov.w	r3, #16
 80053c0:	f04f 0400 	mov.w	r4, #0
 80053c4:	e021      	b.n	800540a <UART_SetConfig+0xd8a>
 80053c6:	f04f 030c 	mov.w	r3, #12
 80053ca:	f04f 0400 	mov.w	r4, #0
 80053ce:	e01c      	b.n	800540a <UART_SetConfig+0xd8a>
 80053d0:	f04f 030a 	mov.w	r3, #10
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	e017      	b.n	800540a <UART_SetConfig+0xd8a>
 80053da:	f04f 0308 	mov.w	r3, #8
 80053de:	f04f 0400 	mov.w	r4, #0
 80053e2:	e012      	b.n	800540a <UART_SetConfig+0xd8a>
 80053e4:	f04f 0306 	mov.w	r3, #6
 80053e8:	f04f 0400 	mov.w	r4, #0
 80053ec:	e00d      	b.n	800540a <UART_SetConfig+0xd8a>
 80053ee:	f04f 0304 	mov.w	r3, #4
 80053f2:	f04f 0400 	mov.w	r4, #0
 80053f6:	e008      	b.n	800540a <UART_SetConfig+0xd8a>
 80053f8:	f04f 0302 	mov.w	r3, #2
 80053fc:	f04f 0400 	mov.w	r4, #0
 8005400:	e003      	b.n	800540a <UART_SetConfig+0xd8a>
 8005402:	f04f 0301 	mov.w	r3, #1
 8005406:	f04f 0400 	mov.w	r4, #0
 800540a:	461a      	mov	r2, r3
 800540c:	4623      	mov	r3, r4
 800540e:	f7fa ffbf 	bl	8000390 <__aeabi_uldivmod>
 8005412:	4603      	mov	r3, r0
 8005414:	460c      	mov	r4, r1
 8005416:	4619      	mov	r1, r3
 8005418:	4622      	mov	r2, r4
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	f04f 0400 	mov.w	r4, #0
 8005422:	0214      	lsls	r4, r2, #8
 8005424:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005428:	020b      	lsls	r3, r1, #8
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6852      	ldr	r2, [r2, #4]
 800542e:	0852      	lsrs	r2, r2, #1
 8005430:	4611      	mov	r1, r2
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	eb13 0b01 	adds.w	fp, r3, r1
 800543a:	eb44 0c02 	adc.w	ip, r4, r2
 800543e:	4658      	mov	r0, fp
 8005440:	4661      	mov	r1, ip
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f04f 0400 	mov.w	r4, #0
 800544a:	461a      	mov	r2, r3
 800544c:	4623      	mov	r3, r4
 800544e:	f7fa ff9f 	bl	8000390 <__aeabi_uldivmod>
 8005452:	4603      	mov	r3, r0
 8005454:	460c      	mov	r4, r1
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005458:	e2e8      	b.n	8005a2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800545a:	f107 030c 	add.w	r3, r7, #12
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fd76 	bl	8003f50 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4618      	mov	r0, r3
 8005468:	f04f 0100 	mov.w	r1, #0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d067      	beq.n	8005544 <UART_SetConfig+0xec4>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	2b01      	cmp	r3, #1
 800547a:	d05e      	beq.n	800553a <UART_SetConfig+0xeba>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b02      	cmp	r3, #2
 8005482:	d055      	beq.n	8005530 <UART_SetConfig+0xeb0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b03      	cmp	r3, #3
 800548a:	d04c      	beq.n	8005526 <UART_SetConfig+0xea6>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b04      	cmp	r3, #4
 8005492:	d043      	beq.n	800551c <UART_SetConfig+0xe9c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b05      	cmp	r3, #5
 800549a:	d03a      	beq.n	8005512 <UART_SetConfig+0xe92>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d031      	beq.n	8005508 <UART_SetConfig+0xe88>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d028      	beq.n	80054fe <UART_SetConfig+0xe7e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d01f      	beq.n	80054f4 <UART_SetConfig+0xe74>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b09      	cmp	r3, #9
 80054ba:	d016      	beq.n	80054ea <UART_SetConfig+0xe6a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b0a      	cmp	r3, #10
 80054c2:	d00d      	beq.n	80054e0 <UART_SetConfig+0xe60>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b0b      	cmp	r3, #11
 80054ca:	d104      	bne.n	80054d6 <UART_SetConfig+0xe56>
 80054cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d0:	f04f 0400 	mov.w	r4, #0
 80054d4:	e03a      	b.n	800554c <UART_SetConfig+0xecc>
 80054d6:	f04f 0301 	mov.w	r3, #1
 80054da:	f04f 0400 	mov.w	r4, #0
 80054de:	e035      	b.n	800554c <UART_SetConfig+0xecc>
 80054e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	e030      	b.n	800554c <UART_SetConfig+0xecc>
 80054ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	e02b      	b.n	800554c <UART_SetConfig+0xecc>
 80054f4:	f04f 0320 	mov.w	r3, #32
 80054f8:	f04f 0400 	mov.w	r4, #0
 80054fc:	e026      	b.n	800554c <UART_SetConfig+0xecc>
 80054fe:	f04f 0310 	mov.w	r3, #16
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	e021      	b.n	800554c <UART_SetConfig+0xecc>
 8005508:	f04f 030c 	mov.w	r3, #12
 800550c:	f04f 0400 	mov.w	r4, #0
 8005510:	e01c      	b.n	800554c <UART_SetConfig+0xecc>
 8005512:	f04f 030a 	mov.w	r3, #10
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	e017      	b.n	800554c <UART_SetConfig+0xecc>
 800551c:	f04f 0308 	mov.w	r3, #8
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e012      	b.n	800554c <UART_SetConfig+0xecc>
 8005526:	f04f 0306 	mov.w	r3, #6
 800552a:	f04f 0400 	mov.w	r4, #0
 800552e:	e00d      	b.n	800554c <UART_SetConfig+0xecc>
 8005530:	f04f 0304 	mov.w	r3, #4
 8005534:	f04f 0400 	mov.w	r4, #0
 8005538:	e008      	b.n	800554c <UART_SetConfig+0xecc>
 800553a:	f04f 0302 	mov.w	r3, #2
 800553e:	f04f 0400 	mov.w	r4, #0
 8005542:	e003      	b.n	800554c <UART_SetConfig+0xecc>
 8005544:	f04f 0301 	mov.w	r3, #1
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	461a      	mov	r2, r3
 800554e:	4623      	mov	r3, r4
 8005550:	f7fa ff1e 	bl	8000390 <__aeabi_uldivmod>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	4619      	mov	r1, r3
 800555a:	4622      	mov	r2, r4
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	0214      	lsls	r4, r2, #8
 8005566:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800556a:	020b      	lsls	r3, r1, #8
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6852      	ldr	r2, [r2, #4]
 8005570:	0852      	lsrs	r2, r2, #1
 8005572:	4611      	mov	r1, r2
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	eb13 0b01 	adds.w	fp, r3, r1
 800557c:	eb44 0c02 	adc.w	ip, r4, r2
 8005580:	4658      	mov	r0, fp
 8005582:	4661      	mov	r1, ip
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f04f 0400 	mov.w	r4, #0
 800558c:	461a      	mov	r2, r3
 800558e:	4623      	mov	r3, r4
 8005590:	f7fa fefe 	bl	8000390 <__aeabi_uldivmod>
 8005594:	4603      	mov	r3, r0
 8005596:	460c      	mov	r4, r1
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800559a:	e247      	b.n	8005a2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800559c:	4b96      	ldr	r3, [pc, #600]	; (80057f8 <UART_SetConfig+0x1178>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80a3 	beq.w	80056f0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	4b93      	ldr	r3, [pc, #588]	; (80057f8 <UART_SetConfig+0x1178>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	08db      	lsrs	r3, r3, #3
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	4a91      	ldr	r2, [pc, #580]	; (80057fc <UART_SetConfig+0x117c>)
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	4618      	mov	r0, r3
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d067      	beq.n	8005698 <UART_SetConfig+0x1018>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d05e      	beq.n	800568e <UART_SetConfig+0x100e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d055      	beq.n	8005684 <UART_SetConfig+0x1004>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d04c      	beq.n	800567a <UART_SetConfig+0xffa>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d043      	beq.n	8005670 <UART_SetConfig+0xff0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d03a      	beq.n	8005666 <UART_SetConfig+0xfe6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2b06      	cmp	r3, #6
 80055f6:	d031      	beq.n	800565c <UART_SetConfig+0xfdc>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b07      	cmp	r3, #7
 80055fe:	d028      	beq.n	8005652 <UART_SetConfig+0xfd2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b08      	cmp	r3, #8
 8005606:	d01f      	beq.n	8005648 <UART_SetConfig+0xfc8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b09      	cmp	r3, #9
 800560e:	d016      	beq.n	800563e <UART_SetConfig+0xfbe>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b0a      	cmp	r3, #10
 8005616:	d00d      	beq.n	8005634 <UART_SetConfig+0xfb4>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b0b      	cmp	r3, #11
 800561e:	d104      	bne.n	800562a <UART_SetConfig+0xfaa>
 8005620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005624:	f04f 0400 	mov.w	r4, #0
 8005628:	e03a      	b.n	80056a0 <UART_SetConfig+0x1020>
 800562a:	f04f 0301 	mov.w	r3, #1
 800562e:	f04f 0400 	mov.w	r4, #0
 8005632:	e035      	b.n	80056a0 <UART_SetConfig+0x1020>
 8005634:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005638:	f04f 0400 	mov.w	r4, #0
 800563c:	e030      	b.n	80056a0 <UART_SetConfig+0x1020>
 800563e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005642:	f04f 0400 	mov.w	r4, #0
 8005646:	e02b      	b.n	80056a0 <UART_SetConfig+0x1020>
 8005648:	f04f 0320 	mov.w	r3, #32
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	e026      	b.n	80056a0 <UART_SetConfig+0x1020>
 8005652:	f04f 0310 	mov.w	r3, #16
 8005656:	f04f 0400 	mov.w	r4, #0
 800565a:	e021      	b.n	80056a0 <UART_SetConfig+0x1020>
 800565c:	f04f 030c 	mov.w	r3, #12
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	e01c      	b.n	80056a0 <UART_SetConfig+0x1020>
 8005666:	f04f 030a 	mov.w	r3, #10
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	e017      	b.n	80056a0 <UART_SetConfig+0x1020>
 8005670:	f04f 0308 	mov.w	r3, #8
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	e012      	b.n	80056a0 <UART_SetConfig+0x1020>
 800567a:	f04f 0306 	mov.w	r3, #6
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	e00d      	b.n	80056a0 <UART_SetConfig+0x1020>
 8005684:	f04f 0304 	mov.w	r3, #4
 8005688:	f04f 0400 	mov.w	r4, #0
 800568c:	e008      	b.n	80056a0 <UART_SetConfig+0x1020>
 800568e:	f04f 0302 	mov.w	r3, #2
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	e003      	b.n	80056a0 <UART_SetConfig+0x1020>
 8005698:	f04f 0301 	mov.w	r3, #1
 800569c:	f04f 0400 	mov.w	r4, #0
 80056a0:	461a      	mov	r2, r3
 80056a2:	4623      	mov	r3, r4
 80056a4:	f7fa fe74 	bl	8000390 <__aeabi_uldivmod>
 80056a8:	4603      	mov	r3, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	4619      	mov	r1, r3
 80056ae:	4622      	mov	r2, r4
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	f04f 0400 	mov.w	r4, #0
 80056b8:	0214      	lsls	r4, r2, #8
 80056ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80056be:	020b      	lsls	r3, r1, #8
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6852      	ldr	r2, [r2, #4]
 80056c4:	0852      	lsrs	r2, r2, #1
 80056c6:	4611      	mov	r1, r2
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	eb13 0b01 	adds.w	fp, r3, r1
 80056d0:	eb44 0c02 	adc.w	ip, r4, r2
 80056d4:	4658      	mov	r0, fp
 80056d6:	4661      	mov	r1, ip
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f04f 0400 	mov.w	r4, #0
 80056e0:	461a      	mov	r2, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	f7fa fe54 	bl	8000390 <__aeabi_uldivmod>
 80056e8:	4603      	mov	r3, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80056ee:	e19d      	b.n	8005a2c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05b      	beq.n	80057b0 <UART_SetConfig+0x1130>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d053      	beq.n	80057a8 <UART_SetConfig+0x1128>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b02      	cmp	r3, #2
 8005706:	d04b      	beq.n	80057a0 <UART_SetConfig+0x1120>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	2b03      	cmp	r3, #3
 800570e:	d043      	beq.n	8005798 <UART_SetConfig+0x1118>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2b04      	cmp	r3, #4
 8005716:	d03b      	beq.n	8005790 <UART_SetConfig+0x1110>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	2b05      	cmp	r3, #5
 800571e:	d033      	beq.n	8005788 <UART_SetConfig+0x1108>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	2b06      	cmp	r3, #6
 8005726:	d02b      	beq.n	8005780 <UART_SetConfig+0x1100>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	2b07      	cmp	r3, #7
 800572e:	d023      	beq.n	8005778 <UART_SetConfig+0x10f8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b08      	cmp	r3, #8
 8005736:	d01b      	beq.n	8005770 <UART_SetConfig+0x10f0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b09      	cmp	r3, #9
 800573e:	d013      	beq.n	8005768 <UART_SetConfig+0x10e8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b0a      	cmp	r3, #10
 8005746:	d00b      	beq.n	8005760 <UART_SetConfig+0x10e0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	2b0b      	cmp	r3, #11
 800574e:	d103      	bne.n	8005758 <UART_SetConfig+0x10d8>
 8005750:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <UART_SetConfig+0x117c>)
 8005752:	f04f 0400 	mov.w	r4, #0
 8005756:	e02e      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005758:	4b29      	ldr	r3, [pc, #164]	; (8005800 <UART_SetConfig+0x1180>)
 800575a:	f04f 0403 	mov.w	r4, #3
 800575e:	e02a      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005760:	4b28      	ldr	r3, [pc, #160]	; (8005804 <UART_SetConfig+0x1184>)
 8005762:	f04f 0400 	mov.w	r4, #0
 8005766:	e026      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005768:	4b27      	ldr	r3, [pc, #156]	; (8005808 <UART_SetConfig+0x1188>)
 800576a:	f04f 0400 	mov.w	r4, #0
 800576e:	e022      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005770:	4b26      	ldr	r3, [pc, #152]	; (800580c <UART_SetConfig+0x118c>)
 8005772:	f04f 0400 	mov.w	r4, #0
 8005776:	e01e      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005778:	4b25      	ldr	r3, [pc, #148]	; (8005810 <UART_SetConfig+0x1190>)
 800577a:	f04f 0400 	mov.w	r4, #0
 800577e:	e01a      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005780:	a419      	add	r4, pc, #100	; (adr r4, 80057e8 <UART_SetConfig+0x1168>)
 8005782:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005786:	e016      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <UART_SetConfig+0x1194>)
 800578a:	f04f 0400 	mov.w	r4, #0
 800578e:	e012      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005790:	4b21      	ldr	r3, [pc, #132]	; (8005818 <UART_SetConfig+0x1198>)
 8005792:	f04f 0400 	mov.w	r4, #0
 8005796:	e00e      	b.n	80057b6 <UART_SetConfig+0x1136>
 8005798:	a415      	add	r4, pc, #84	; (adr r4, 80057f0 <UART_SetConfig+0x1170>)
 800579a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800579e:	e00a      	b.n	80057b6 <UART_SetConfig+0x1136>
 80057a0:	4b1e      	ldr	r3, [pc, #120]	; (800581c <UART_SetConfig+0x119c>)
 80057a2:	f04f 0400 	mov.w	r4, #0
 80057a6:	e006      	b.n	80057b6 <UART_SetConfig+0x1136>
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <UART_SetConfig+0x11a0>)
 80057aa:	f04f 0401 	mov.w	r4, #1
 80057ae:	e002      	b.n	80057b6 <UART_SetConfig+0x1136>
 80057b0:	4b13      	ldr	r3, [pc, #76]	; (8005800 <UART_SetConfig+0x1180>)
 80057b2:	f04f 0403 	mov.w	r4, #3
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6852      	ldr	r2, [r2, #4]
 80057ba:	0852      	lsrs	r2, r2, #1
 80057bc:	4611      	mov	r1, r2
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	eb13 0b01 	adds.w	fp, r3, r1
 80057c6:	eb44 0c02 	adc.w	ip, r4, r2
 80057ca:	4658      	mov	r0, fp
 80057cc:	4661      	mov	r1, ip
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f04f 0400 	mov.w	r4, #0
 80057d6:	461a      	mov	r2, r3
 80057d8:	4623      	mov	r3, r4
 80057da:	f7fa fdd9 	bl	8000390 <__aeabi_uldivmod>
 80057de:	4603      	mov	r3, r0
 80057e0:	460c      	mov	r4, r1
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80057e4:	e122      	b.n	8005a2c <UART_SetConfig+0x13ac>
 80057e6:	bf00      	nop
 80057e8:	51615500 	.word	0x51615500
 80057ec:	00000000 	.word	0x00000000
 80057f0:	a2c2aa00 	.word	0xa2c2aa00
 80057f4:	00000000 	.word	0x00000000
 80057f8:	58024400 	.word	0x58024400
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	d0900000 	.word	0xd0900000
 8005804:	07a12000 	.word	0x07a12000
 8005808:	0f424000 	.word	0x0f424000
 800580c:	1e848000 	.word	0x1e848000
 8005810:	3d090000 	.word	0x3d090000
 8005814:	61a80000 	.word	0x61a80000
 8005818:	7a120000 	.word	0x7a120000
 800581c:	f4240000 	.word	0xf4240000
 8005820:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d05b      	beq.n	80058e4 <UART_SetConfig+0x1264>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	2b01      	cmp	r3, #1
 8005832:	d053      	beq.n	80058dc <UART_SetConfig+0x125c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	2b02      	cmp	r3, #2
 800583a:	d04b      	beq.n	80058d4 <UART_SetConfig+0x1254>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	2b03      	cmp	r3, #3
 8005842:	d043      	beq.n	80058cc <UART_SetConfig+0x124c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2b04      	cmp	r3, #4
 800584a:	d03b      	beq.n	80058c4 <UART_SetConfig+0x1244>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2b05      	cmp	r3, #5
 8005852:	d033      	beq.n	80058bc <UART_SetConfig+0x123c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	2b06      	cmp	r3, #6
 800585a:	d02b      	beq.n	80058b4 <UART_SetConfig+0x1234>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	2b07      	cmp	r3, #7
 8005862:	d023      	beq.n	80058ac <UART_SetConfig+0x122c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	2b08      	cmp	r3, #8
 800586a:	d01b      	beq.n	80058a4 <UART_SetConfig+0x1224>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	2b09      	cmp	r3, #9
 8005872:	d013      	beq.n	800589c <UART_SetConfig+0x121c>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2b0a      	cmp	r3, #10
 800587a:	d00b      	beq.n	8005894 <UART_SetConfig+0x1214>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b0b      	cmp	r3, #11
 8005882:	d103      	bne.n	800588c <UART_SetConfig+0x120c>
 8005884:	4bc0      	ldr	r3, [pc, #768]	; (8005b88 <UART_SetConfig+0x1508>)
 8005886:	f04f 0400 	mov.w	r4, #0
 800588a:	e02e      	b.n	80058ea <UART_SetConfig+0x126a>
 800588c:	4bbf      	ldr	r3, [pc, #764]	; (8005b8c <UART_SetConfig+0x150c>)
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	e02a      	b.n	80058ea <UART_SetConfig+0x126a>
 8005894:	4bbe      	ldr	r3, [pc, #760]	; (8005b90 <UART_SetConfig+0x1510>)
 8005896:	f04f 0400 	mov.w	r4, #0
 800589a:	e026      	b.n	80058ea <UART_SetConfig+0x126a>
 800589c:	4bbd      	ldr	r3, [pc, #756]	; (8005b94 <UART_SetConfig+0x1514>)
 800589e:	f04f 0400 	mov.w	r4, #0
 80058a2:	e022      	b.n	80058ea <UART_SetConfig+0x126a>
 80058a4:	4bbc      	ldr	r3, [pc, #752]	; (8005b98 <UART_SetConfig+0x1518>)
 80058a6:	f04f 0400 	mov.w	r4, #0
 80058aa:	e01e      	b.n	80058ea <UART_SetConfig+0x126a>
 80058ac:	4bbb      	ldr	r3, [pc, #748]	; (8005b9c <UART_SetConfig+0x151c>)
 80058ae:	f04f 0400 	mov.w	r4, #0
 80058b2:	e01a      	b.n	80058ea <UART_SetConfig+0x126a>
 80058b4:	a4b0      	add	r4, pc, #704	; (adr r4, 8005b78 <UART_SetConfig+0x14f8>)
 80058b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80058ba:	e016      	b.n	80058ea <UART_SetConfig+0x126a>
 80058bc:	4bb8      	ldr	r3, [pc, #736]	; (8005ba0 <UART_SetConfig+0x1520>)
 80058be:	f04f 0400 	mov.w	r4, #0
 80058c2:	e012      	b.n	80058ea <UART_SetConfig+0x126a>
 80058c4:	4bb7      	ldr	r3, [pc, #732]	; (8005ba4 <UART_SetConfig+0x1524>)
 80058c6:	f04f 0400 	mov.w	r4, #0
 80058ca:	e00e      	b.n	80058ea <UART_SetConfig+0x126a>
 80058cc:	a4ac      	add	r4, pc, #688	; (adr r4, 8005b80 <UART_SetConfig+0x1500>)
 80058ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80058d2:	e00a      	b.n	80058ea <UART_SetConfig+0x126a>
 80058d4:	4bb4      	ldr	r3, [pc, #720]	; (8005ba8 <UART_SetConfig+0x1528>)
 80058d6:	f04f 0400 	mov.w	r4, #0
 80058da:	e006      	b.n	80058ea <UART_SetConfig+0x126a>
 80058dc:	4bb3      	ldr	r3, [pc, #716]	; (8005bac <UART_SetConfig+0x152c>)
 80058de:	f04f 0400 	mov.w	r4, #0
 80058e2:	e002      	b.n	80058ea <UART_SetConfig+0x126a>
 80058e4:	4ba9      	ldr	r3, [pc, #676]	; (8005b8c <UART_SetConfig+0x150c>)
 80058e6:	f04f 0400 	mov.w	r4, #0
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6852      	ldr	r2, [r2, #4]
 80058ee:	0852      	lsrs	r2, r2, #1
 80058f0:	4611      	mov	r1, r2
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	eb13 0b01 	adds.w	fp, r3, r1
 80058fa:	eb44 0c02 	adc.w	ip, r4, r2
 80058fe:	4658      	mov	r0, fp
 8005900:	4661      	mov	r1, ip
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	461a      	mov	r2, r3
 800590c:	4623      	mov	r3, r4
 800590e:	f7fa fd3f 	bl	8000390 <__aeabi_uldivmod>
 8005912:	4603      	mov	r3, r0
 8005914:	460c      	mov	r4, r1
 8005916:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005918:	e088      	b.n	8005a2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d064      	beq.n	80059ec <UART_SetConfig+0x136c>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b01      	cmp	r3, #1
 8005928:	d05b      	beq.n	80059e2 <UART_SetConfig+0x1362>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b02      	cmp	r3, #2
 8005930:	d052      	beq.n	80059d8 <UART_SetConfig+0x1358>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b03      	cmp	r3, #3
 8005938:	d04a      	beq.n	80059d0 <UART_SetConfig+0x1350>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	2b04      	cmp	r3, #4
 8005940:	d041      	beq.n	80059c6 <UART_SetConfig+0x1346>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b05      	cmp	r3, #5
 8005948:	d039      	beq.n	80059be <UART_SetConfig+0x133e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b06      	cmp	r3, #6
 8005950:	d031      	beq.n	80059b6 <UART_SetConfig+0x1336>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2b07      	cmp	r3, #7
 8005958:	d028      	beq.n	80059ac <UART_SetConfig+0x132c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2b08      	cmp	r3, #8
 8005960:	d01f      	beq.n	80059a2 <UART_SetConfig+0x1322>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b09      	cmp	r3, #9
 8005968:	d016      	beq.n	8005998 <UART_SetConfig+0x1318>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b0a      	cmp	r3, #10
 8005970:	d00d      	beq.n	800598e <UART_SetConfig+0x130e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2b0b      	cmp	r3, #11
 8005978:	d104      	bne.n	8005984 <UART_SetConfig+0x1304>
 800597a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	e037      	b.n	80059f4 <UART_SetConfig+0x1374>
 8005984:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005988:	f04f 0400 	mov.w	r4, #0
 800598c:	e032      	b.n	80059f4 <UART_SetConfig+0x1374>
 800598e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005992:	f04f 0400 	mov.w	r4, #0
 8005996:	e02d      	b.n	80059f4 <UART_SetConfig+0x1374>
 8005998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800599c:	f04f 0400 	mov.w	r4, #0
 80059a0:	e028      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059a6:	f04f 0400 	mov.w	r4, #0
 80059aa:	e023      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80059b0:	f04f 0400 	mov.w	r4, #0
 80059b4:	e01e      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059b6:	4b7e      	ldr	r3, [pc, #504]	; (8005bb0 <UART_SetConfig+0x1530>)
 80059b8:	f04f 0400 	mov.w	r4, #0
 80059bc:	e01a      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059be:	4b7d      	ldr	r3, [pc, #500]	; (8005bb4 <UART_SetConfig+0x1534>)
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	e016      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059ca:	f04f 0400 	mov.w	r4, #0
 80059ce:	e011      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059d0:	4b79      	ldr	r3, [pc, #484]	; (8005bb8 <UART_SetConfig+0x1538>)
 80059d2:	f04f 0400 	mov.w	r4, #0
 80059d6:	e00d      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059dc:	f04f 0400 	mov.w	r4, #0
 80059e0:	e008      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059e6:	f04f 0400 	mov.w	r4, #0
 80059ea:	e003      	b.n	80059f4 <UART_SetConfig+0x1374>
 80059ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80059f0:	f04f 0400 	mov.w	r4, #0
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6852      	ldr	r2, [r2, #4]
 80059f8:	0852      	lsrs	r2, r2, #1
 80059fa:	4611      	mov	r1, r2
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	eb13 0b01 	adds.w	fp, r3, r1
 8005a04:	eb44 0c02 	adc.w	ip, r4, r2
 8005a08:	4658      	mov	r0, fp
 8005a0a:	4661      	mov	r1, ip
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f04f 0400 	mov.w	r4, #0
 8005a14:	461a      	mov	r2, r3
 8005a16:	4623      	mov	r3, r4
 8005a18:	f7fa fcba 	bl	8000390 <__aeabi_uldivmod>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a22:	e003      	b.n	8005a2c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8005a2a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a32:	d309      	bcc.n	8005a48 <UART_SetConfig+0x13c8>
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a3a:	d205      	bcs.n	8005a48 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	f000 bf85 	b.w	8006952 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a4e:	f000 bf80 	b.w	8006952 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5a:	f040 83da 	bne.w	8006212 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8005a5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	f200 83b3 	bhi.w	80061ce <UART_SetConfig+0x1b4e>
 8005a68:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <UART_SetConfig+0x13f0>)
 8005a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6e:	bf00      	nop
 8005a70:	08005bbd 	.word	0x08005bbd
 8005a74:	08005c75 	.word	0x08005c75
 8005a78:	080061cf 	.word	0x080061cf
 8005a7c:	080061cf 	.word	0x080061cf
 8005a80:	08005d2d 	.word	0x08005d2d
 8005a84:	080061cf 	.word	0x080061cf
 8005a88:	080061cf 	.word	0x080061cf
 8005a8c:	080061cf 	.word	0x080061cf
 8005a90:	08005de9 	.word	0x08005de9
 8005a94:	080061cf 	.word	0x080061cf
 8005a98:	080061cf 	.word	0x080061cf
 8005a9c:	080061cf 	.word	0x080061cf
 8005aa0:	080061cf 	.word	0x080061cf
 8005aa4:	080061cf 	.word	0x080061cf
 8005aa8:	080061cf 	.word	0x080061cf
 8005aac:	080061cf 	.word	0x080061cf
 8005ab0:	08005ea5 	.word	0x08005ea5
 8005ab4:	080061cf 	.word	0x080061cf
 8005ab8:	080061cf 	.word	0x080061cf
 8005abc:	080061cf 	.word	0x080061cf
 8005ac0:	080061cf 	.word	0x080061cf
 8005ac4:	080061cf 	.word	0x080061cf
 8005ac8:	080061cf 	.word	0x080061cf
 8005acc:	080061cf 	.word	0x080061cf
 8005ad0:	080061cf 	.word	0x080061cf
 8005ad4:	080061cf 	.word	0x080061cf
 8005ad8:	080061cf 	.word	0x080061cf
 8005adc:	080061cf 	.word	0x080061cf
 8005ae0:	080061cf 	.word	0x080061cf
 8005ae4:	080061cf 	.word	0x080061cf
 8005ae8:	080061cf 	.word	0x080061cf
 8005aec:	080061cf 	.word	0x080061cf
 8005af0:	08006017 	.word	0x08006017
 8005af4:	080061cf 	.word	0x080061cf
 8005af8:	080061cf 	.word	0x080061cf
 8005afc:	080061cf 	.word	0x080061cf
 8005b00:	080061cf 	.word	0x080061cf
 8005b04:	080061cf 	.word	0x080061cf
 8005b08:	080061cf 	.word	0x080061cf
 8005b0c:	080061cf 	.word	0x080061cf
 8005b10:	080061cf 	.word	0x080061cf
 8005b14:	080061cf 	.word	0x080061cf
 8005b18:	080061cf 	.word	0x080061cf
 8005b1c:	080061cf 	.word	0x080061cf
 8005b20:	080061cf 	.word	0x080061cf
 8005b24:	080061cf 	.word	0x080061cf
 8005b28:	080061cf 	.word	0x080061cf
 8005b2c:	080061cf 	.word	0x080061cf
 8005b30:	080061cf 	.word	0x080061cf
 8005b34:	080061cf 	.word	0x080061cf
 8005b38:	080061cf 	.word	0x080061cf
 8005b3c:	080061cf 	.word	0x080061cf
 8005b40:	080061cf 	.word	0x080061cf
 8005b44:	080061cf 	.word	0x080061cf
 8005b48:	080061cf 	.word	0x080061cf
 8005b4c:	080061cf 	.word	0x080061cf
 8005b50:	080061cf 	.word	0x080061cf
 8005b54:	080061cf 	.word	0x080061cf
 8005b58:	080061cf 	.word	0x080061cf
 8005b5c:	080061cf 	.word	0x080061cf
 8005b60:	080061cf 	.word	0x080061cf
 8005b64:	080061cf 	.word	0x080061cf
 8005b68:	080061cf 	.word	0x080061cf
 8005b6c:	080061cf 	.word	0x080061cf
 8005b70:	0800610d 	.word	0x0800610d
 8005b74:	f3af 8000 	nop.w
 8005b78:	05161500 	.word	0x05161500
 8005b7c:	00000000 	.word	0x00000000
 8005b80:	0a2c2a00 	.word	0x0a2c2a00
 8005b84:	00000000 	.word	0x00000000
 8005b88:	003d0900 	.word	0x003d0900
 8005b8c:	3d090000 	.word	0x3d090000
 8005b90:	007a1200 	.word	0x007a1200
 8005b94:	00f42400 	.word	0x00f42400
 8005b98:	01e84800 	.word	0x01e84800
 8005b9c:	03d09000 	.word	0x03d09000
 8005ba0:	061a8000 	.word	0x061a8000
 8005ba4:	07a12000 	.word	0x07a12000
 8005ba8:	0f424000 	.word	0x0f424000
 8005bac:	1e848000 	.word	0x1e848000
 8005bb0:	000aaa00 	.word	0x000aaa00
 8005bb4:	000ccc00 	.word	0x000ccc00
 8005bb8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f7fd f930 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8005bc0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d044      	beq.n	8005c54 <UART_SetConfig+0x15d4>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d03e      	beq.n	8005c50 <UART_SetConfig+0x15d0>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d038      	beq.n	8005c4c <UART_SetConfig+0x15cc>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d032      	beq.n	8005c48 <UART_SetConfig+0x15c8>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d02c      	beq.n	8005c44 <UART_SetConfig+0x15c4>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	d026      	beq.n	8005c40 <UART_SetConfig+0x15c0>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	2b06      	cmp	r3, #6
 8005bf8:	d020      	beq.n	8005c3c <UART_SetConfig+0x15bc>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	2b07      	cmp	r3, #7
 8005c00:	d01a      	beq.n	8005c38 <UART_SetConfig+0x15b8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d014      	beq.n	8005c34 <UART_SetConfig+0x15b4>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2b09      	cmp	r3, #9
 8005c10:	d00e      	beq.n	8005c30 <UART_SetConfig+0x15b0>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	2b0a      	cmp	r3, #10
 8005c18:	d008      	beq.n	8005c2c <UART_SetConfig+0x15ac>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	2b0b      	cmp	r3, #11
 8005c20:	d102      	bne.n	8005c28 <UART_SetConfig+0x15a8>
 8005c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c26:	e016      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e014      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	e012      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c30:	2340      	movs	r3, #64	; 0x40
 8005c32:	e010      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c34:	2320      	movs	r3, #32
 8005c36:	e00e      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	e00c      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	e00a      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c40:	230a      	movs	r3, #10
 8005c42:	e008      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c44:	2308      	movs	r3, #8
 8005c46:	e006      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c48:	2306      	movs	r3, #6
 8005c4a:	e004      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	e002      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e000      	b.n	8005c56 <UART_SetConfig+0x15d6>
 8005c54:	2301      	movs	r3, #1
 8005c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	005a      	lsls	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c72:	e2b0      	b.n	80061d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c74:	f7fd f8ea 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8005c78:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d044      	beq.n	8005d0c <UART_SetConfig+0x168c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d03e      	beq.n	8005d08 <UART_SetConfig+0x1688>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d038      	beq.n	8005d04 <UART_SetConfig+0x1684>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d032      	beq.n	8005d00 <UART_SetConfig+0x1680>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d02c      	beq.n	8005cfc <UART_SetConfig+0x167c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	2b05      	cmp	r3, #5
 8005ca8:	d026      	beq.n	8005cf8 <UART_SetConfig+0x1678>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b06      	cmp	r3, #6
 8005cb0:	d020      	beq.n	8005cf4 <UART_SetConfig+0x1674>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	d01a      	beq.n	8005cf0 <UART_SetConfig+0x1670>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d014      	beq.n	8005cec <UART_SetConfig+0x166c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	d00e      	beq.n	8005ce8 <UART_SetConfig+0x1668>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b0a      	cmp	r3, #10
 8005cd0:	d008      	beq.n	8005ce4 <UART_SetConfig+0x1664>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2b0b      	cmp	r3, #11
 8005cd8:	d102      	bne.n	8005ce0 <UART_SetConfig+0x1660>
 8005cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cde:	e016      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e014      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	e012      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	e010      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005cec:	2320      	movs	r3, #32
 8005cee:	e00e      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	e00c      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	e00a      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005cf8:	230a      	movs	r3, #10
 8005cfa:	e008      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	e006      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005d00:	2306      	movs	r3, #6
 8005d02:	e004      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005d04:	2304      	movs	r3, #4
 8005d06:	e002      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e000      	b.n	8005d0e <UART_SetConfig+0x168e>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	005a      	lsls	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	441a      	add	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d2a:	e254      	b.n	80061d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d2c:	f107 0318 	add.w	r3, r7, #24
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fd ffc1 	bl	8003cb8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d044      	beq.n	8005dca <UART_SetConfig+0x174a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d03e      	beq.n	8005dc6 <UART_SetConfig+0x1746>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d038      	beq.n	8005dc2 <UART_SetConfig+0x1742>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d032      	beq.n	8005dbe <UART_SetConfig+0x173e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d02c      	beq.n	8005dba <UART_SetConfig+0x173a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2b05      	cmp	r3, #5
 8005d66:	d026      	beq.n	8005db6 <UART_SetConfig+0x1736>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	2b06      	cmp	r3, #6
 8005d6e:	d020      	beq.n	8005db2 <UART_SetConfig+0x1732>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	d01a      	beq.n	8005dae <UART_SetConfig+0x172e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d014      	beq.n	8005daa <UART_SetConfig+0x172a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d00e      	beq.n	8005da6 <UART_SetConfig+0x1726>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b0a      	cmp	r3, #10
 8005d8e:	d008      	beq.n	8005da2 <UART_SetConfig+0x1722>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b0b      	cmp	r3, #11
 8005d96:	d102      	bne.n	8005d9e <UART_SetConfig+0x171e>
 8005d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d9c:	e016      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e014      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	e012      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005da6:	2340      	movs	r3, #64	; 0x40
 8005da8:	e010      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005daa:	2320      	movs	r3, #32
 8005dac:	e00e      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005dae:	2310      	movs	r3, #16
 8005db0:	e00c      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005db2:	230c      	movs	r3, #12
 8005db4:	e00a      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005db6:	230a      	movs	r3, #10
 8005db8:	e008      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005dba:	2308      	movs	r3, #8
 8005dbc:	e006      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005dbe:	2306      	movs	r3, #6
 8005dc0:	e004      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005dc2:	2304      	movs	r3, #4
 8005dc4:	e002      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e000      	b.n	8005dcc <UART_SetConfig+0x174c>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd0:	005a      	lsls	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005de6:	e1f6      	b.n	80061d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005de8:	f107 030c 	add.w	r3, r7, #12
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe f8af 	bl	8003f50 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d044      	beq.n	8005e86 <UART_SetConfig+0x1806>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d03e      	beq.n	8005e82 <UART_SetConfig+0x1802>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d038      	beq.n	8005e7e <UART_SetConfig+0x17fe>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d032      	beq.n	8005e7a <UART_SetConfig+0x17fa>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d02c      	beq.n	8005e76 <UART_SetConfig+0x17f6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	d026      	beq.n	8005e72 <UART_SetConfig+0x17f2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2b06      	cmp	r3, #6
 8005e2a:	d020      	beq.n	8005e6e <UART_SetConfig+0x17ee>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b07      	cmp	r3, #7
 8005e32:	d01a      	beq.n	8005e6a <UART_SetConfig+0x17ea>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d014      	beq.n	8005e66 <UART_SetConfig+0x17e6>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d00e      	beq.n	8005e62 <UART_SetConfig+0x17e2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b0a      	cmp	r3, #10
 8005e4a:	d008      	beq.n	8005e5e <UART_SetConfig+0x17de>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b0b      	cmp	r3, #11
 8005e52:	d102      	bne.n	8005e5a <UART_SetConfig+0x17da>
 8005e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e58:	e016      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e014      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	e012      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e62:	2340      	movs	r3, #64	; 0x40
 8005e64:	e010      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e66:	2320      	movs	r3, #32
 8005e68:	e00e      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	e00c      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	e00a      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e72:	230a      	movs	r3, #10
 8005e74:	e008      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e76:	2308      	movs	r3, #8
 8005e78:	e006      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e7a:	2306      	movs	r3, #6
 8005e7c:	e004      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e7e:	2304      	movs	r3, #4
 8005e80:	e002      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e000      	b.n	8005e88 <UART_SetConfig+0x1808>
 8005e86:	2301      	movs	r3, #1
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	005a      	lsls	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	441a      	add	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ea2:	e198      	b.n	80061d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea4:	4b87      	ldr	r3, [pc, #540]	; (80060c4 <UART_SetConfig+0x1a44>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d05e      	beq.n	8005f6e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb0:	4b84      	ldr	r3, [pc, #528]	; (80060c4 <UART_SetConfig+0x1a44>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	08db      	lsrs	r3, r3, #3
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	4a83      	ldr	r2, [pc, #524]	; (80060c8 <UART_SetConfig+0x1a48>)
 8005ebc:	40da      	lsrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d044      	beq.n	8005f50 <UART_SetConfig+0x18d0>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d03e      	beq.n	8005f4c <UART_SetConfig+0x18cc>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d038      	beq.n	8005f48 <UART_SetConfig+0x18c8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d032      	beq.n	8005f44 <UART_SetConfig+0x18c4>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d02c      	beq.n	8005f40 <UART_SetConfig+0x18c0>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d026      	beq.n	8005f3c <UART_SetConfig+0x18bc>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d020      	beq.n	8005f38 <UART_SetConfig+0x18b8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b07      	cmp	r3, #7
 8005efc:	d01a      	beq.n	8005f34 <UART_SetConfig+0x18b4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d014      	beq.n	8005f30 <UART_SetConfig+0x18b0>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b09      	cmp	r3, #9
 8005f0c:	d00e      	beq.n	8005f2c <UART_SetConfig+0x18ac>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b0a      	cmp	r3, #10
 8005f14:	d008      	beq.n	8005f28 <UART_SetConfig+0x18a8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b0b      	cmp	r3, #11
 8005f1c:	d102      	bne.n	8005f24 <UART_SetConfig+0x18a4>
 8005f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f22:	e016      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e014      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	e012      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f2c:	2340      	movs	r3, #64	; 0x40
 8005f2e:	e010      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f30:	2320      	movs	r3, #32
 8005f32:	e00e      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f34:	2310      	movs	r3, #16
 8005f36:	e00c      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	e00a      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f3c:	230a      	movs	r3, #10
 8005f3e:	e008      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f40:	2308      	movs	r3, #8
 8005f42:	e006      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f44:	2306      	movs	r3, #6
 8005f46:	e004      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	e002      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e000      	b.n	8005f52 <UART_SetConfig+0x18d2>
 8005f50:	2301      	movs	r3, #1
 8005f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f56:	005a      	lsls	r2, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	441a      	add	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005f6c:	e133      	b.n	80061d6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d043      	beq.n	8005ffe <UART_SetConfig+0x197e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d03d      	beq.n	8005ffa <UART_SetConfig+0x197a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d037      	beq.n	8005ff6 <UART_SetConfig+0x1976>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d031      	beq.n	8005ff2 <UART_SetConfig+0x1972>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d02b      	beq.n	8005fee <UART_SetConfig+0x196e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d025      	beq.n	8005fea <UART_SetConfig+0x196a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d01f      	beq.n	8005fe6 <UART_SetConfig+0x1966>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	2b07      	cmp	r3, #7
 8005fac:	d019      	beq.n	8005fe2 <UART_SetConfig+0x1962>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d013      	beq.n	8005fde <UART_SetConfig+0x195e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	d00d      	beq.n	8005fda <UART_SetConfig+0x195a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b0a      	cmp	r3, #10
 8005fc4:	d007      	beq.n	8005fd6 <UART_SetConfig+0x1956>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	2b0b      	cmp	r3, #11
 8005fcc:	d101      	bne.n	8005fd2 <UART_SetConfig+0x1952>
 8005fce:	4b3f      	ldr	r3, [pc, #252]	; (80060cc <UART_SetConfig+0x1a4c>)
 8005fd0:	e016      	b.n	8006000 <UART_SetConfig+0x1980>
 8005fd2:	4b3f      	ldr	r3, [pc, #252]	; (80060d0 <UART_SetConfig+0x1a50>)
 8005fd4:	e014      	b.n	8006000 <UART_SetConfig+0x1980>
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <UART_SetConfig+0x1a54>)
 8005fd8:	e012      	b.n	8006000 <UART_SetConfig+0x1980>
 8005fda:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <UART_SetConfig+0x1a58>)
 8005fdc:	e010      	b.n	8006000 <UART_SetConfig+0x1980>
 8005fde:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <UART_SetConfig+0x1a5c>)
 8005fe0:	e00e      	b.n	8006000 <UART_SetConfig+0x1980>
 8005fe2:	4b3f      	ldr	r3, [pc, #252]	; (80060e0 <UART_SetConfig+0x1a60>)
 8005fe4:	e00c      	b.n	8006000 <UART_SetConfig+0x1980>
 8005fe6:	4b3f      	ldr	r3, [pc, #252]	; (80060e4 <UART_SetConfig+0x1a64>)
 8005fe8:	e00a      	b.n	8006000 <UART_SetConfig+0x1980>
 8005fea:	4b3f      	ldr	r3, [pc, #252]	; (80060e8 <UART_SetConfig+0x1a68>)
 8005fec:	e008      	b.n	8006000 <UART_SetConfig+0x1980>
 8005fee:	4b3f      	ldr	r3, [pc, #252]	; (80060ec <UART_SetConfig+0x1a6c>)
 8005ff0:	e006      	b.n	8006000 <UART_SetConfig+0x1980>
 8005ff2:	4b3f      	ldr	r3, [pc, #252]	; (80060f0 <UART_SetConfig+0x1a70>)
 8005ff4:	e004      	b.n	8006000 <UART_SetConfig+0x1980>
 8005ff6:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <UART_SetConfig+0x1a74>)
 8005ff8:	e002      	b.n	8006000 <UART_SetConfig+0x1980>
 8005ffa:	4b33      	ldr	r3, [pc, #204]	; (80060c8 <UART_SetConfig+0x1a48>)
 8005ffc:	e000      	b.n	8006000 <UART_SetConfig+0x1980>
 8005ffe:	4b34      	ldr	r3, [pc, #208]	; (80060d0 <UART_SetConfig+0x1a50>)
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	0852      	lsrs	r2, r2, #1
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	b29b      	uxth	r3, r3
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006014:	e0df      	b.n	80061d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d045      	beq.n	80060aa <UART_SetConfig+0x1a2a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	2b01      	cmp	r3, #1
 8006024:	d03f      	beq.n	80060a6 <UART_SetConfig+0x1a26>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	2b02      	cmp	r3, #2
 800602c:	d039      	beq.n	80060a2 <UART_SetConfig+0x1a22>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2b03      	cmp	r3, #3
 8006034:	d033      	beq.n	800609e <UART_SetConfig+0x1a1e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	2b04      	cmp	r3, #4
 800603c:	d02d      	beq.n	800609a <UART_SetConfig+0x1a1a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2b05      	cmp	r3, #5
 8006044:	d027      	beq.n	8006096 <UART_SetConfig+0x1a16>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	2b06      	cmp	r3, #6
 800604c:	d021      	beq.n	8006092 <UART_SetConfig+0x1a12>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b07      	cmp	r3, #7
 8006054:	d01b      	beq.n	800608e <UART_SetConfig+0x1a0e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	2b08      	cmp	r3, #8
 800605c:	d015      	beq.n	800608a <UART_SetConfig+0x1a0a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b09      	cmp	r3, #9
 8006064:	d00f      	beq.n	8006086 <UART_SetConfig+0x1a06>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	2b0a      	cmp	r3, #10
 800606c:	d008      	beq.n	8006080 <UART_SetConfig+0x1a00>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b0b      	cmp	r3, #11
 8006074:	d102      	bne.n	800607c <UART_SetConfig+0x19fc>
 8006076:	f647 2312 	movw	r3, #31250	; 0x7a12
 800607a:	e017      	b.n	80060ac <UART_SetConfig+0x1a2c>
 800607c:	4b18      	ldr	r3, [pc, #96]	; (80060e0 <UART_SetConfig+0x1a60>)
 800607e:	e015      	b.n	80060ac <UART_SetConfig+0x1a2c>
 8006080:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006084:	e012      	b.n	80060ac <UART_SetConfig+0x1a2c>
 8006086:	4b1c      	ldr	r3, [pc, #112]	; (80060f8 <UART_SetConfig+0x1a78>)
 8006088:	e010      	b.n	80060ac <UART_SetConfig+0x1a2c>
 800608a:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <UART_SetConfig+0x1a7c>)
 800608c:	e00e      	b.n	80060ac <UART_SetConfig+0x1a2c>
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <UART_SetConfig+0x1a4c>)
 8006090:	e00c      	b.n	80060ac <UART_SetConfig+0x1a2c>
 8006092:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <UART_SetConfig+0x1a80>)
 8006094:	e00a      	b.n	80060ac <UART_SetConfig+0x1a2c>
 8006096:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <UART_SetConfig+0x1a84>)
 8006098:	e008      	b.n	80060ac <UART_SetConfig+0x1a2c>
 800609a:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <UART_SetConfig+0x1a54>)
 800609c:	e006      	b.n	80060ac <UART_SetConfig+0x1a2c>
 800609e:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <UART_SetConfig+0x1a88>)
 80060a0:	e004      	b.n	80060ac <UART_SetConfig+0x1a2c>
 80060a2:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <UART_SetConfig+0x1a58>)
 80060a4:	e002      	b.n	80060ac <UART_SetConfig+0x1a2c>
 80060a6:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <UART_SetConfig+0x1a5c>)
 80060a8:	e000      	b.n	80060ac <UART_SetConfig+0x1a2c>
 80060aa:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <UART_SetConfig+0x1a60>)
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6852      	ldr	r2, [r2, #4]
 80060b0:	0852      	lsrs	r2, r2, #1
 80060b2:	441a      	add	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060bc:	b29b      	uxth	r3, r3
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060c0:	e089      	b.n	80061d6 <UART_SetConfig+0x1b56>
 80060c2:	bf00      	nop
 80060c4:	58024400 	.word	0x58024400
 80060c8:	03d09000 	.word	0x03d09000
 80060cc:	0007a120 	.word	0x0007a120
 80060d0:	07a12000 	.word	0x07a12000
 80060d4:	000f4240 	.word	0x000f4240
 80060d8:	001e8480 	.word	0x001e8480
 80060dc:	003d0900 	.word	0x003d0900
 80060e0:	007a1200 	.word	0x007a1200
 80060e4:	00a2c2aa 	.word	0x00a2c2aa
 80060e8:	00c35000 	.word	0x00c35000
 80060ec:	00f42400 	.word	0x00f42400
 80060f0:	01458554 	.word	0x01458554
 80060f4:	01e84800 	.word	0x01e84800
 80060f8:	0001e848 	.word	0x0001e848
 80060fc:	0003d090 	.word	0x0003d090
 8006100:	000a2c2a 	.word	0x000a2c2a
 8006104:	000c3500 	.word	0x000c3500
 8006108:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	d04f      	beq.n	80061b4 <UART_SetConfig+0x1b34>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b01      	cmp	r3, #1
 800611a:	d048      	beq.n	80061ae <UART_SetConfig+0x1b2e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b02      	cmp	r3, #2
 8006122:	d041      	beq.n	80061a8 <UART_SetConfig+0x1b28>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b03      	cmp	r3, #3
 800612a:	d03a      	beq.n	80061a2 <UART_SetConfig+0x1b22>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b04      	cmp	r3, #4
 8006132:	d033      	beq.n	800619c <UART_SetConfig+0x1b1c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	2b05      	cmp	r3, #5
 800613a:	d02c      	beq.n	8006196 <UART_SetConfig+0x1b16>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b06      	cmp	r3, #6
 8006142:	d025      	beq.n	8006190 <UART_SetConfig+0x1b10>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	2b07      	cmp	r3, #7
 800614a:	d01e      	beq.n	800618a <UART_SetConfig+0x1b0a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	2b08      	cmp	r3, #8
 8006152:	d017      	beq.n	8006184 <UART_SetConfig+0x1b04>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	2b09      	cmp	r3, #9
 800615a:	d010      	beq.n	800617e <UART_SetConfig+0x1afe>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b0a      	cmp	r3, #10
 8006162:	d009      	beq.n	8006178 <UART_SetConfig+0x1af8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2b0b      	cmp	r3, #11
 800616a:	d102      	bne.n	8006172 <UART_SetConfig+0x1af2>
 800616c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006170:	e022      	b.n	80061b8 <UART_SetConfig+0x1b38>
 8006172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006176:	e01f      	b.n	80061b8 <UART_SetConfig+0x1b38>
 8006178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617c:	e01c      	b.n	80061b8 <UART_SetConfig+0x1b38>
 800617e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006182:	e019      	b.n	80061b8 <UART_SetConfig+0x1b38>
 8006184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006188:	e016      	b.n	80061b8 <UART_SetConfig+0x1b38>
 800618a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800618e:	e013      	b.n	80061b8 <UART_SetConfig+0x1b38>
 8006190:	f241 5354 	movw	r3, #5460	; 0x1554
 8006194:	e010      	b.n	80061b8 <UART_SetConfig+0x1b38>
 8006196:	f641 1398 	movw	r3, #6552	; 0x1998
 800619a:	e00d      	b.n	80061b8 <UART_SetConfig+0x1b38>
 800619c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061a0:	e00a      	b.n	80061b8 <UART_SetConfig+0x1b38>
 80061a2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80061a6:	e007      	b.n	80061b8 <UART_SetConfig+0x1b38>
 80061a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061ac:	e004      	b.n	80061b8 <UART_SetConfig+0x1b38>
 80061ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b2:	e001      	b.n	80061b8 <UART_SetConfig+0x1b38>
 80061b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6852      	ldr	r2, [r2, #4]
 80061bc:	0852      	lsrs	r2, r2, #1
 80061be:	441a      	add	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061cc:	e003      	b.n	80061d6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80061d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d8:	2b0f      	cmp	r3, #15
 80061da:	d916      	bls.n	800620a <UART_SetConfig+0x1b8a>
 80061dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e2:	d212      	bcs.n	800620a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f023 030f 	bic.w	r3, r3, #15
 80061ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061fc:	4313      	orrs	r3, r2
 80061fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006206:	60da      	str	r2, [r3, #12]
 8006208:	e3a3      	b.n	8006952 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006210:	e39f      	b.n	8006952 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8006212:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	f200 8388 	bhi.w	800692c <UART_SetConfig+0x22ac>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x1ba4>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006329 	.word	0x08006329
 8006228:	080063df 	.word	0x080063df
 800622c:	0800692d 	.word	0x0800692d
 8006230:	0800692d 	.word	0x0800692d
 8006234:	08006495 	.word	0x08006495
 8006238:	0800692d 	.word	0x0800692d
 800623c:	0800692d 	.word	0x0800692d
 8006240:	0800692d 	.word	0x0800692d
 8006244:	0800654f 	.word	0x0800654f
 8006248:	0800692d 	.word	0x0800692d
 800624c:	0800692d 	.word	0x0800692d
 8006250:	0800692d 	.word	0x0800692d
 8006254:	0800692d 	.word	0x0800692d
 8006258:	0800692d 	.word	0x0800692d
 800625c:	0800692d 	.word	0x0800692d
 8006260:	0800692d 	.word	0x0800692d
 8006264:	08006609 	.word	0x08006609
 8006268:	0800692d 	.word	0x0800692d
 800626c:	0800692d 	.word	0x0800692d
 8006270:	0800692d 	.word	0x0800692d
 8006274:	0800692d 	.word	0x0800692d
 8006278:	0800692d 	.word	0x0800692d
 800627c:	0800692d 	.word	0x0800692d
 8006280:	0800692d 	.word	0x0800692d
 8006284:	0800692d 	.word	0x0800692d
 8006288:	0800692d 	.word	0x0800692d
 800628c:	0800692d 	.word	0x0800692d
 8006290:	0800692d 	.word	0x0800692d
 8006294:	0800692d 	.word	0x0800692d
 8006298:	0800692d 	.word	0x0800692d
 800629c:	0800692d 	.word	0x0800692d
 80062a0:	0800692d 	.word	0x0800692d
 80062a4:	08006779 	.word	0x08006779
 80062a8:	0800692d 	.word	0x0800692d
 80062ac:	0800692d 	.word	0x0800692d
 80062b0:	0800692d 	.word	0x0800692d
 80062b4:	0800692d 	.word	0x0800692d
 80062b8:	0800692d 	.word	0x0800692d
 80062bc:	0800692d 	.word	0x0800692d
 80062c0:	0800692d 	.word	0x0800692d
 80062c4:	0800692d 	.word	0x0800692d
 80062c8:	0800692d 	.word	0x0800692d
 80062cc:	0800692d 	.word	0x0800692d
 80062d0:	0800692d 	.word	0x0800692d
 80062d4:	0800692d 	.word	0x0800692d
 80062d8:	0800692d 	.word	0x0800692d
 80062dc:	0800692d 	.word	0x0800692d
 80062e0:	0800692d 	.word	0x0800692d
 80062e4:	0800692d 	.word	0x0800692d
 80062e8:	0800692d 	.word	0x0800692d
 80062ec:	0800692d 	.word	0x0800692d
 80062f0:	0800692d 	.word	0x0800692d
 80062f4:	0800692d 	.word	0x0800692d
 80062f8:	0800692d 	.word	0x0800692d
 80062fc:	0800692d 	.word	0x0800692d
 8006300:	0800692d 	.word	0x0800692d
 8006304:	0800692d 	.word	0x0800692d
 8006308:	0800692d 	.word	0x0800692d
 800630c:	0800692d 	.word	0x0800692d
 8006310:	0800692d 	.word	0x0800692d
 8006314:	0800692d 	.word	0x0800692d
 8006318:	0800692d 	.word	0x0800692d
 800631c:	0800692d 	.word	0x0800692d
 8006320:	0800692d 	.word	0x0800692d
 8006324:	0800686d 	.word	0x0800686d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006328:	f7fc fd7a 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 800632c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d044      	beq.n	80063c0 <UART_SetConfig+0x1d40>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2b01      	cmp	r3, #1
 800633c:	d03e      	beq.n	80063bc <UART_SetConfig+0x1d3c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b02      	cmp	r3, #2
 8006344:	d038      	beq.n	80063b8 <UART_SetConfig+0x1d38>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b03      	cmp	r3, #3
 800634c:	d032      	beq.n	80063b4 <UART_SetConfig+0x1d34>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	2b04      	cmp	r3, #4
 8006354:	d02c      	beq.n	80063b0 <UART_SetConfig+0x1d30>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2b05      	cmp	r3, #5
 800635c:	d026      	beq.n	80063ac <UART_SetConfig+0x1d2c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2b06      	cmp	r3, #6
 8006364:	d020      	beq.n	80063a8 <UART_SetConfig+0x1d28>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	2b07      	cmp	r3, #7
 800636c:	d01a      	beq.n	80063a4 <UART_SetConfig+0x1d24>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b08      	cmp	r3, #8
 8006374:	d014      	beq.n	80063a0 <UART_SetConfig+0x1d20>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b09      	cmp	r3, #9
 800637c:	d00e      	beq.n	800639c <UART_SetConfig+0x1d1c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2b0a      	cmp	r3, #10
 8006384:	d008      	beq.n	8006398 <UART_SetConfig+0x1d18>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	2b0b      	cmp	r3, #11
 800638c:	d102      	bne.n	8006394 <UART_SetConfig+0x1d14>
 800638e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006392:	e016      	b.n	80063c2 <UART_SetConfig+0x1d42>
 8006394:	2301      	movs	r3, #1
 8006396:	e014      	b.n	80063c2 <UART_SetConfig+0x1d42>
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	e012      	b.n	80063c2 <UART_SetConfig+0x1d42>
 800639c:	2340      	movs	r3, #64	; 0x40
 800639e:	e010      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063a0:	2320      	movs	r3, #32
 80063a2:	e00e      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063a4:	2310      	movs	r3, #16
 80063a6:	e00c      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063a8:	230c      	movs	r3, #12
 80063aa:	e00a      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063ac:	230a      	movs	r3, #10
 80063ae:	e008      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063b0:	2308      	movs	r3, #8
 80063b2:	e006      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063b4:	2306      	movs	r3, #6
 80063b6:	e004      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063b8:	2304      	movs	r3, #4
 80063ba:	e002      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063bc:	2302      	movs	r3, #2
 80063be:	e000      	b.n	80063c2 <UART_SetConfig+0x1d42>
 80063c0:	2301      	movs	r3, #1
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	441a      	add	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	b29b      	uxth	r3, r3
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063dc:	e2aa      	b.n	8006934 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063de:	f7fc fd35 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 80063e2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d044      	beq.n	8006476 <UART_SetConfig+0x1df6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d03e      	beq.n	8006472 <UART_SetConfig+0x1df2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d038      	beq.n	800646e <UART_SetConfig+0x1dee>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	2b03      	cmp	r3, #3
 8006402:	d032      	beq.n	800646a <UART_SetConfig+0x1dea>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	2b04      	cmp	r3, #4
 800640a:	d02c      	beq.n	8006466 <UART_SetConfig+0x1de6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	2b05      	cmp	r3, #5
 8006412:	d026      	beq.n	8006462 <UART_SetConfig+0x1de2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	2b06      	cmp	r3, #6
 800641a:	d020      	beq.n	800645e <UART_SetConfig+0x1dde>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b07      	cmp	r3, #7
 8006422:	d01a      	beq.n	800645a <UART_SetConfig+0x1dda>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	2b08      	cmp	r3, #8
 800642a:	d014      	beq.n	8006456 <UART_SetConfig+0x1dd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2b09      	cmp	r3, #9
 8006432:	d00e      	beq.n	8006452 <UART_SetConfig+0x1dd2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	2b0a      	cmp	r3, #10
 800643a:	d008      	beq.n	800644e <UART_SetConfig+0x1dce>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b0b      	cmp	r3, #11
 8006442:	d102      	bne.n	800644a <UART_SetConfig+0x1dca>
 8006444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006448:	e016      	b.n	8006478 <UART_SetConfig+0x1df8>
 800644a:	2301      	movs	r3, #1
 800644c:	e014      	b.n	8006478 <UART_SetConfig+0x1df8>
 800644e:	2380      	movs	r3, #128	; 0x80
 8006450:	e012      	b.n	8006478 <UART_SetConfig+0x1df8>
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	e010      	b.n	8006478 <UART_SetConfig+0x1df8>
 8006456:	2320      	movs	r3, #32
 8006458:	e00e      	b.n	8006478 <UART_SetConfig+0x1df8>
 800645a:	2310      	movs	r3, #16
 800645c:	e00c      	b.n	8006478 <UART_SetConfig+0x1df8>
 800645e:	230c      	movs	r3, #12
 8006460:	e00a      	b.n	8006478 <UART_SetConfig+0x1df8>
 8006462:	230a      	movs	r3, #10
 8006464:	e008      	b.n	8006478 <UART_SetConfig+0x1df8>
 8006466:	2308      	movs	r3, #8
 8006468:	e006      	b.n	8006478 <UART_SetConfig+0x1df8>
 800646a:	2306      	movs	r3, #6
 800646c:	e004      	b.n	8006478 <UART_SetConfig+0x1df8>
 800646e:	2304      	movs	r3, #4
 8006470:	e002      	b.n	8006478 <UART_SetConfig+0x1df8>
 8006472:	2302      	movs	r3, #2
 8006474:	e000      	b.n	8006478 <UART_SetConfig+0x1df8>
 8006476:	2301      	movs	r3, #1
 8006478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800647a:	fbb2 f2f3 	udiv	r2, r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	441a      	add	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	b29b      	uxth	r3, r3
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006492:	e24f      	b.n	8006934 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006494:	f107 0318 	add.w	r3, r7, #24
 8006498:	4618      	mov	r0, r3
 800649a:	f7fd fc0d 	bl	8003cb8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d044      	beq.n	8006532 <UART_SetConfig+0x1eb2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d03e      	beq.n	800652e <UART_SetConfig+0x1eae>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d038      	beq.n	800652a <UART_SetConfig+0x1eaa>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d032      	beq.n	8006526 <UART_SetConfig+0x1ea6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d02c      	beq.n	8006522 <UART_SetConfig+0x1ea2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d026      	beq.n	800651e <UART_SetConfig+0x1e9e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	2b06      	cmp	r3, #6
 80064d6:	d020      	beq.n	800651a <UART_SetConfig+0x1e9a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b07      	cmp	r3, #7
 80064de:	d01a      	beq.n	8006516 <UART_SetConfig+0x1e96>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d014      	beq.n	8006512 <UART_SetConfig+0x1e92>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	2b09      	cmp	r3, #9
 80064ee:	d00e      	beq.n	800650e <UART_SetConfig+0x1e8e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	2b0a      	cmp	r3, #10
 80064f6:	d008      	beq.n	800650a <UART_SetConfig+0x1e8a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b0b      	cmp	r3, #11
 80064fe:	d102      	bne.n	8006506 <UART_SetConfig+0x1e86>
 8006500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006504:	e016      	b.n	8006534 <UART_SetConfig+0x1eb4>
 8006506:	2301      	movs	r3, #1
 8006508:	e014      	b.n	8006534 <UART_SetConfig+0x1eb4>
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	e012      	b.n	8006534 <UART_SetConfig+0x1eb4>
 800650e:	2340      	movs	r3, #64	; 0x40
 8006510:	e010      	b.n	8006534 <UART_SetConfig+0x1eb4>
 8006512:	2320      	movs	r3, #32
 8006514:	e00e      	b.n	8006534 <UART_SetConfig+0x1eb4>
 8006516:	2310      	movs	r3, #16
 8006518:	e00c      	b.n	8006534 <UART_SetConfig+0x1eb4>
 800651a:	230c      	movs	r3, #12
 800651c:	e00a      	b.n	8006534 <UART_SetConfig+0x1eb4>
 800651e:	230a      	movs	r3, #10
 8006520:	e008      	b.n	8006534 <UART_SetConfig+0x1eb4>
 8006522:	2308      	movs	r3, #8
 8006524:	e006      	b.n	8006534 <UART_SetConfig+0x1eb4>
 8006526:	2306      	movs	r3, #6
 8006528:	e004      	b.n	8006534 <UART_SetConfig+0x1eb4>
 800652a:	2304      	movs	r3, #4
 800652c:	e002      	b.n	8006534 <UART_SetConfig+0x1eb4>
 800652e:	2302      	movs	r3, #2
 8006530:	e000      	b.n	8006534 <UART_SetConfig+0x1eb4>
 8006532:	2301      	movs	r3, #1
 8006534:	fbb2 f2f3 	udiv	r2, r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	441a      	add	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	b29b      	uxth	r3, r3
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800654c:	e1f2      	b.n	8006934 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800654e:	f107 030c 	add.w	r3, r7, #12
 8006552:	4618      	mov	r0, r3
 8006554:	f7fd fcfc 	bl	8003f50 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	2b00      	cmp	r3, #0
 8006560:	d044      	beq.n	80065ec <UART_SetConfig+0x1f6c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b01      	cmp	r3, #1
 8006568:	d03e      	beq.n	80065e8 <UART_SetConfig+0x1f68>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2b02      	cmp	r3, #2
 8006570:	d038      	beq.n	80065e4 <UART_SetConfig+0x1f64>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	2b03      	cmp	r3, #3
 8006578:	d032      	beq.n	80065e0 <UART_SetConfig+0x1f60>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2b04      	cmp	r3, #4
 8006580:	d02c      	beq.n	80065dc <UART_SetConfig+0x1f5c>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	2b05      	cmp	r3, #5
 8006588:	d026      	beq.n	80065d8 <UART_SetConfig+0x1f58>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	2b06      	cmp	r3, #6
 8006590:	d020      	beq.n	80065d4 <UART_SetConfig+0x1f54>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b07      	cmp	r3, #7
 8006598:	d01a      	beq.n	80065d0 <UART_SetConfig+0x1f50>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d014      	beq.n	80065cc <UART_SetConfig+0x1f4c>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	2b09      	cmp	r3, #9
 80065a8:	d00e      	beq.n	80065c8 <UART_SetConfig+0x1f48>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2b0a      	cmp	r3, #10
 80065b0:	d008      	beq.n	80065c4 <UART_SetConfig+0x1f44>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	2b0b      	cmp	r3, #11
 80065b8:	d102      	bne.n	80065c0 <UART_SetConfig+0x1f40>
 80065ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065be:	e016      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e014      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065c4:	2380      	movs	r3, #128	; 0x80
 80065c6:	e012      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065c8:	2340      	movs	r3, #64	; 0x40
 80065ca:	e010      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065cc:	2320      	movs	r3, #32
 80065ce:	e00e      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065d0:	2310      	movs	r3, #16
 80065d2:	e00c      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065d4:	230c      	movs	r3, #12
 80065d6:	e00a      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065d8:	230a      	movs	r3, #10
 80065da:	e008      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065dc:	2308      	movs	r3, #8
 80065de:	e006      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065e0:	2306      	movs	r3, #6
 80065e2:	e004      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065e4:	2304      	movs	r3, #4
 80065e6:	e002      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e000      	b.n	80065ee <UART_SetConfig+0x1f6e>
 80065ec:	2301      	movs	r3, #1
 80065ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006602:	b29b      	uxth	r3, r3
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006606:	e195      	b.n	8006934 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006608:	4b87      	ldr	r3, [pc, #540]	; (8006828 <UART_SetConfig+0x21a8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d05d      	beq.n	80066d0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006614:	4b84      	ldr	r3, [pc, #528]	; (8006828 <UART_SetConfig+0x21a8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	4a83      	ldr	r2, [pc, #524]	; (800682c <UART_SetConfig+0x21ac>)
 8006620:	40da      	lsrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d044      	beq.n	80066b4 <UART_SetConfig+0x2034>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	2b01      	cmp	r3, #1
 8006630:	d03e      	beq.n	80066b0 <UART_SetConfig+0x2030>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	2b02      	cmp	r3, #2
 8006638:	d038      	beq.n	80066ac <UART_SetConfig+0x202c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b03      	cmp	r3, #3
 8006640:	d032      	beq.n	80066a8 <UART_SetConfig+0x2028>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	2b04      	cmp	r3, #4
 8006648:	d02c      	beq.n	80066a4 <UART_SetConfig+0x2024>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	2b05      	cmp	r3, #5
 8006650:	d026      	beq.n	80066a0 <UART_SetConfig+0x2020>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2b06      	cmp	r3, #6
 8006658:	d020      	beq.n	800669c <UART_SetConfig+0x201c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2b07      	cmp	r3, #7
 8006660:	d01a      	beq.n	8006698 <UART_SetConfig+0x2018>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	2b08      	cmp	r3, #8
 8006668:	d014      	beq.n	8006694 <UART_SetConfig+0x2014>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	2b09      	cmp	r3, #9
 8006670:	d00e      	beq.n	8006690 <UART_SetConfig+0x2010>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b0a      	cmp	r3, #10
 8006678:	d008      	beq.n	800668c <UART_SetConfig+0x200c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	2b0b      	cmp	r3, #11
 8006680:	d102      	bne.n	8006688 <UART_SetConfig+0x2008>
 8006682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006686:	e016      	b.n	80066b6 <UART_SetConfig+0x2036>
 8006688:	2301      	movs	r3, #1
 800668a:	e014      	b.n	80066b6 <UART_SetConfig+0x2036>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	e012      	b.n	80066b6 <UART_SetConfig+0x2036>
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	e010      	b.n	80066b6 <UART_SetConfig+0x2036>
 8006694:	2320      	movs	r3, #32
 8006696:	e00e      	b.n	80066b6 <UART_SetConfig+0x2036>
 8006698:	2310      	movs	r3, #16
 800669a:	e00c      	b.n	80066b6 <UART_SetConfig+0x2036>
 800669c:	230c      	movs	r3, #12
 800669e:	e00a      	b.n	80066b6 <UART_SetConfig+0x2036>
 80066a0:	230a      	movs	r3, #10
 80066a2:	e008      	b.n	80066b6 <UART_SetConfig+0x2036>
 80066a4:	2308      	movs	r3, #8
 80066a6:	e006      	b.n	80066b6 <UART_SetConfig+0x2036>
 80066a8:	2306      	movs	r3, #6
 80066aa:	e004      	b.n	80066b6 <UART_SetConfig+0x2036>
 80066ac:	2304      	movs	r3, #4
 80066ae:	e002      	b.n	80066b6 <UART_SetConfig+0x2036>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e000      	b.n	80066b6 <UART_SetConfig+0x2036>
 80066b4:	2301      	movs	r3, #1
 80066b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	441a      	add	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80066ce:	e131      	b.n	8006934 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d043      	beq.n	8006760 <UART_SetConfig+0x20e0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d03d      	beq.n	800675c <UART_SetConfig+0x20dc>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d037      	beq.n	8006758 <UART_SetConfig+0x20d8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d031      	beq.n	8006754 <UART_SetConfig+0x20d4>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d02b      	beq.n	8006750 <UART_SetConfig+0x20d0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b05      	cmp	r3, #5
 80066fe:	d025      	beq.n	800674c <UART_SetConfig+0x20cc>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	2b06      	cmp	r3, #6
 8006706:	d01f      	beq.n	8006748 <UART_SetConfig+0x20c8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2b07      	cmp	r3, #7
 800670e:	d019      	beq.n	8006744 <UART_SetConfig+0x20c4>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	2b08      	cmp	r3, #8
 8006716:	d013      	beq.n	8006740 <UART_SetConfig+0x20c0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	2b09      	cmp	r3, #9
 800671e:	d00d      	beq.n	800673c <UART_SetConfig+0x20bc>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	2b0a      	cmp	r3, #10
 8006726:	d007      	beq.n	8006738 <UART_SetConfig+0x20b8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	2b0b      	cmp	r3, #11
 800672e:	d101      	bne.n	8006734 <UART_SetConfig+0x20b4>
 8006730:	4b3f      	ldr	r3, [pc, #252]	; (8006830 <UART_SetConfig+0x21b0>)
 8006732:	e016      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006734:	4b3d      	ldr	r3, [pc, #244]	; (800682c <UART_SetConfig+0x21ac>)
 8006736:	e014      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006738:	4b3e      	ldr	r3, [pc, #248]	; (8006834 <UART_SetConfig+0x21b4>)
 800673a:	e012      	b.n	8006762 <UART_SetConfig+0x20e2>
 800673c:	4b3e      	ldr	r3, [pc, #248]	; (8006838 <UART_SetConfig+0x21b8>)
 800673e:	e010      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006740:	4b3e      	ldr	r3, [pc, #248]	; (800683c <UART_SetConfig+0x21bc>)
 8006742:	e00e      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006744:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <UART_SetConfig+0x21c0>)
 8006746:	e00c      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006748:	4b3e      	ldr	r3, [pc, #248]	; (8006844 <UART_SetConfig+0x21c4>)
 800674a:	e00a      	b.n	8006762 <UART_SetConfig+0x20e2>
 800674c:	4b3e      	ldr	r3, [pc, #248]	; (8006848 <UART_SetConfig+0x21c8>)
 800674e:	e008      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006750:	4b3e      	ldr	r3, [pc, #248]	; (800684c <UART_SetConfig+0x21cc>)
 8006752:	e006      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006754:	4b3e      	ldr	r3, [pc, #248]	; (8006850 <UART_SetConfig+0x21d0>)
 8006756:	e004      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006758:	4b3e      	ldr	r3, [pc, #248]	; (8006854 <UART_SetConfig+0x21d4>)
 800675a:	e002      	b.n	8006762 <UART_SetConfig+0x20e2>
 800675c:	4b3e      	ldr	r3, [pc, #248]	; (8006858 <UART_SetConfig+0x21d8>)
 800675e:	e000      	b.n	8006762 <UART_SetConfig+0x20e2>
 8006760:	4b32      	ldr	r3, [pc, #200]	; (800682c <UART_SetConfig+0x21ac>)
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6852      	ldr	r2, [r2, #4]
 8006766:	0852      	lsrs	r2, r2, #1
 8006768:	441a      	add	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006772:	b29b      	uxth	r3, r3
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006776:	e0dd      	b.n	8006934 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d046      	beq.n	800680e <UART_SetConfig+0x218e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	2b01      	cmp	r3, #1
 8006786:	d040      	beq.n	800680a <UART_SetConfig+0x218a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	2b02      	cmp	r3, #2
 800678e:	d03a      	beq.n	8006806 <UART_SetConfig+0x2186>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2b03      	cmp	r3, #3
 8006796:	d034      	beq.n	8006802 <UART_SetConfig+0x2182>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	2b04      	cmp	r3, #4
 800679e:	d02e      	beq.n	80067fe <UART_SetConfig+0x217e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	2b05      	cmp	r3, #5
 80067a6:	d028      	beq.n	80067fa <UART_SetConfig+0x217a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	2b06      	cmp	r3, #6
 80067ae:	d022      	beq.n	80067f6 <UART_SetConfig+0x2176>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	2b07      	cmp	r3, #7
 80067b6:	d01c      	beq.n	80067f2 <UART_SetConfig+0x2172>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d016      	beq.n	80067ee <UART_SetConfig+0x216e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d00f      	beq.n	80067e8 <UART_SetConfig+0x2168>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	2b0a      	cmp	r3, #10
 80067ce:	d008      	beq.n	80067e2 <UART_SetConfig+0x2162>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	2b0b      	cmp	r3, #11
 80067d6:	d102      	bne.n	80067de <UART_SetConfig+0x215e>
 80067d8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80067dc:	e018      	b.n	8006810 <UART_SetConfig+0x2190>
 80067de:	4b18      	ldr	r3, [pc, #96]	; (8006840 <UART_SetConfig+0x21c0>)
 80067e0:	e016      	b.n	8006810 <UART_SetConfig+0x2190>
 80067e2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80067e6:	e013      	b.n	8006810 <UART_SetConfig+0x2190>
 80067e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80067ec:	e010      	b.n	8006810 <UART_SetConfig+0x2190>
 80067ee:	4b1b      	ldr	r3, [pc, #108]	; (800685c <UART_SetConfig+0x21dc>)
 80067f0:	e00e      	b.n	8006810 <UART_SetConfig+0x2190>
 80067f2:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <UART_SetConfig+0x21b0>)
 80067f4:	e00c      	b.n	8006810 <UART_SetConfig+0x2190>
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <UART_SetConfig+0x21e0>)
 80067f8:	e00a      	b.n	8006810 <UART_SetConfig+0x2190>
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <UART_SetConfig+0x21e4>)
 80067fc:	e008      	b.n	8006810 <UART_SetConfig+0x2190>
 80067fe:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <UART_SetConfig+0x21b4>)
 8006800:	e006      	b.n	8006810 <UART_SetConfig+0x2190>
 8006802:	4b19      	ldr	r3, [pc, #100]	; (8006868 <UART_SetConfig+0x21e8>)
 8006804:	e004      	b.n	8006810 <UART_SetConfig+0x2190>
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <UART_SetConfig+0x21b8>)
 8006808:	e002      	b.n	8006810 <UART_SetConfig+0x2190>
 800680a:	4b0c      	ldr	r3, [pc, #48]	; (800683c <UART_SetConfig+0x21bc>)
 800680c:	e000      	b.n	8006810 <UART_SetConfig+0x2190>
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <UART_SetConfig+0x21c0>)
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6852      	ldr	r2, [r2, #4]
 8006814:	0852      	lsrs	r2, r2, #1
 8006816:	441a      	add	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006824:	e086      	b.n	8006934 <UART_SetConfig+0x22b4>
 8006826:	bf00      	nop
 8006828:	58024400 	.word	0x58024400
 800682c:	03d09000 	.word	0x03d09000
 8006830:	0003d090 	.word	0x0003d090
 8006834:	0007a120 	.word	0x0007a120
 8006838:	000f4240 	.word	0x000f4240
 800683c:	001e8480 	.word	0x001e8480
 8006840:	003d0900 	.word	0x003d0900
 8006844:	00516155 	.word	0x00516155
 8006848:	0061a800 	.word	0x0061a800
 800684c:	007a1200 	.word	0x007a1200
 8006850:	00a2c2aa 	.word	0x00a2c2aa
 8006854:	00f42400 	.word	0x00f42400
 8006858:	01e84800 	.word	0x01e84800
 800685c:	0001e848 	.word	0x0001e848
 8006860:	00051615 	.word	0x00051615
 8006864:	00061a80 	.word	0x00061a80
 8006868:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d04e      	beq.n	8006912 <UART_SetConfig+0x2292>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	2b01      	cmp	r3, #1
 800687a:	d047      	beq.n	800690c <UART_SetConfig+0x228c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	2b02      	cmp	r3, #2
 8006882:	d040      	beq.n	8006906 <UART_SetConfig+0x2286>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	2b03      	cmp	r3, #3
 800688a:	d039      	beq.n	8006900 <UART_SetConfig+0x2280>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2b04      	cmp	r3, #4
 8006892:	d032      	beq.n	80068fa <UART_SetConfig+0x227a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2b05      	cmp	r3, #5
 800689a:	d02b      	beq.n	80068f4 <UART_SetConfig+0x2274>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	2b06      	cmp	r3, #6
 80068a2:	d024      	beq.n	80068ee <UART_SetConfig+0x226e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	2b07      	cmp	r3, #7
 80068aa:	d01d      	beq.n	80068e8 <UART_SetConfig+0x2268>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d016      	beq.n	80068e2 <UART_SetConfig+0x2262>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	d00f      	beq.n	80068dc <UART_SetConfig+0x225c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	2b0a      	cmp	r3, #10
 80068c2:	d008      	beq.n	80068d6 <UART_SetConfig+0x2256>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	2b0b      	cmp	r3, #11
 80068ca:	d101      	bne.n	80068d0 <UART_SetConfig+0x2250>
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	e022      	b.n	8006916 <UART_SetConfig+0x2296>
 80068d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d4:	e01f      	b.n	8006916 <UART_SetConfig+0x2296>
 80068d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068da:	e01c      	b.n	8006916 <UART_SetConfig+0x2296>
 80068dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e0:	e019      	b.n	8006916 <UART_SetConfig+0x2296>
 80068e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068e6:	e016      	b.n	8006916 <UART_SetConfig+0x2296>
 80068e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068ec:	e013      	b.n	8006916 <UART_SetConfig+0x2296>
 80068ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80068f2:	e010      	b.n	8006916 <UART_SetConfig+0x2296>
 80068f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80068f8:	e00d      	b.n	8006916 <UART_SetConfig+0x2296>
 80068fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068fe:	e00a      	b.n	8006916 <UART_SetConfig+0x2296>
 8006900:	f241 5355 	movw	r3, #5461	; 0x1555
 8006904:	e007      	b.n	8006916 <UART_SetConfig+0x2296>
 8006906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800690a:	e004      	b.n	8006916 <UART_SetConfig+0x2296>
 800690c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006910:	e001      	b.n	8006916 <UART_SetConfig+0x2296>
 8006912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6852      	ldr	r2, [r2, #4]
 800691a:	0852      	lsrs	r2, r2, #1
 800691c:	441a      	add	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	fbb2 f3f3 	udiv	r3, r2, r3
 8006926:	b29b      	uxth	r3, r3
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800692a:	e003      	b.n	8006934 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006932:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	2b0f      	cmp	r3, #15
 8006938:	d908      	bls.n	800694c <UART_SetConfig+0x22cc>
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d204      	bcs.n	800694c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006948:	60da      	str	r2, [r3, #12]
 800694a:	e002      	b.n	8006952 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800696e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006972:	4618      	mov	r0, r3
 8006974:	3740      	adds	r7, #64	; 0x40
 8006976:	46bd      	mov	sp, r7
 8006978:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800697c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01a      	beq.n	8006a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7a:	d10a      	bne.n	8006a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006ad0:	f7fa fb48 	bl	8001164 <HAL_GetTick>
 8006ad4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d10e      	bne.n	8006b02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f82c 	bl	8006b50 <UART_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e022      	b.n	8006b48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d10e      	bne.n	8006b2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f816 	bl	8006b50 <UART_WaitOnFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00c      	b.n	8006b48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b60:	e062      	b.n	8006c28 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d05e      	beq.n	8006c28 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6a:	f7fa fafb 	bl	8001164 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d302      	bcc.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d11d      	bne.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0201 	bic.w	r2, r2, #1
 8006b9e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e045      	b.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d02e      	beq.n	8006c28 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd8:	d126      	bne.n	8006c28 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bf2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e00f      	b.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69da      	ldr	r2, [r3, #28]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	4013      	ands	r3, r2
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	bf0c      	ite	eq
 8006c38:	2301      	moveq	r3, #1
 8006c3a:	2300      	movne	r3, #0
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d08d      	beq.n	8006b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e027      	b.n	8006cb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2224      	movs	r2, #36	; 0x24
 8006c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0201 	bic.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e02d      	b.n	8006d36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2224      	movs	r2, #36	; 0x24
 8006ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f850 	bl	8006dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e02d      	b.n	8006db2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2224      	movs	r2, #36	; 0x24
 8006d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f812 	bl	8006dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b089      	sub	sp, #36	; 0x24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006dc4:	4a2f      	ldr	r2, [pc, #188]	; (8006e84 <UARTEx_SetNbDataToProcess+0xc8>)
 8006dc6:	f107 0314 	add.w	r3, r7, #20
 8006dca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006dd2:	4a2d      	ldr	r2, [pc, #180]	; (8006e88 <UARTEx_SetNbDataToProcess+0xcc>)
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ddc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d108      	bne.n	8006dfa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006df8:	e03d      	b.n	8006e76 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dfe:	2308      	movs	r3, #8
 8006e00:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	0e5b      	lsrs	r3, r3, #25
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	0f5b      	lsrs	r3, r3, #29
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006e22:	7fbb      	ldrb	r3, [r7, #30]
 8006e24:	7f3a      	ldrb	r2, [r7, #28]
 8006e26:	f107 0120 	add.w	r1, r7, #32
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e30:	fb02 f303 	mul.w	r3, r2, r3
 8006e34:	7f3a      	ldrb	r2, [r7, #28]
 8006e36:	f107 0120 	add.w	r1, r7, #32
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006e4c:	7ffb      	ldrb	r3, [r7, #31]
 8006e4e:	7f7a      	ldrb	r2, [r7, #29]
 8006e50:	f107 0120 	add.w	r1, r7, #32
 8006e54:	440a      	add	r2, r1
 8006e56:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006e5a:	fb02 f303 	mul.w	r3, r2, r3
 8006e5e:	7f7a      	ldrb	r2, [r7, #29]
 8006e60:	f107 0120 	add.w	r1, r7, #32
 8006e64:	440a      	add	r2, r1
 8006e66:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e76:	bf00      	nop
 8006e78:	3724      	adds	r7, #36	; 0x24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	08007730 	.word	0x08007730
 8006e88:	08007738 	.word	0x08007738

08006e8c <__errno>:
 8006e8c:	4b01      	ldr	r3, [pc, #4]	; (8006e94 <__errno+0x8>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	20000010 	.word	0x20000010

08006e98 <__libc_init_array>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	4e0d      	ldr	r6, [pc, #52]	; (8006ed0 <__libc_init_array+0x38>)
 8006e9c:	4c0d      	ldr	r4, [pc, #52]	; (8006ed4 <__libc_init_array+0x3c>)
 8006e9e:	1ba4      	subs	r4, r4, r6
 8006ea0:	10a4      	asrs	r4, r4, #2
 8006ea2:	2500      	movs	r5, #0
 8006ea4:	42a5      	cmp	r5, r4
 8006ea6:	d109      	bne.n	8006ebc <__libc_init_array+0x24>
 8006ea8:	4e0b      	ldr	r6, [pc, #44]	; (8006ed8 <__libc_init_array+0x40>)
 8006eaa:	4c0c      	ldr	r4, [pc, #48]	; (8006edc <__libc_init_array+0x44>)
 8006eac:	f000 fc26 	bl	80076fc <_init>
 8006eb0:	1ba4      	subs	r4, r4, r6
 8006eb2:	10a4      	asrs	r4, r4, #2
 8006eb4:	2500      	movs	r5, #0
 8006eb6:	42a5      	cmp	r5, r4
 8006eb8:	d105      	bne.n	8006ec6 <__libc_init_array+0x2e>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ec0:	4798      	blx	r3
 8006ec2:	3501      	adds	r5, #1
 8006ec4:	e7ee      	b.n	8006ea4 <__libc_init_array+0xc>
 8006ec6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eca:	4798      	blx	r3
 8006ecc:	3501      	adds	r5, #1
 8006ece:	e7f2      	b.n	8006eb6 <__libc_init_array+0x1e>
 8006ed0:	0800778c 	.word	0x0800778c
 8006ed4:	0800778c 	.word	0x0800778c
 8006ed8:	0800778c 	.word	0x0800778c
 8006edc:	08007790 	.word	0x08007790

08006ee0 <memset>:
 8006ee0:	4402      	add	r2, r0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d100      	bne.n	8006eea <memset+0xa>
 8006ee8:	4770      	bx	lr
 8006eea:	f803 1b01 	strb.w	r1, [r3], #1
 8006eee:	e7f9      	b.n	8006ee4 <memset+0x4>

08006ef0 <siprintf>:
 8006ef0:	b40e      	push	{r1, r2, r3}
 8006ef2:	b500      	push	{lr}
 8006ef4:	b09c      	sub	sp, #112	; 0x70
 8006ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ef8:	9002      	str	r0, [sp, #8]
 8006efa:	9006      	str	r0, [sp, #24]
 8006efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f00:	4809      	ldr	r0, [pc, #36]	; (8006f28 <siprintf+0x38>)
 8006f02:	9107      	str	r1, [sp, #28]
 8006f04:	9104      	str	r1, [sp, #16]
 8006f06:	4909      	ldr	r1, [pc, #36]	; (8006f2c <siprintf+0x3c>)
 8006f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0c:	9105      	str	r1, [sp, #20]
 8006f0e:	6800      	ldr	r0, [r0, #0]
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	a902      	add	r1, sp, #8
 8006f14:	f000 f866 	bl	8006fe4 <_svfiprintf_r>
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	b01c      	add	sp, #112	; 0x70
 8006f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f24:	b003      	add	sp, #12
 8006f26:	4770      	bx	lr
 8006f28:	20000010 	.word	0x20000010
 8006f2c:	ffff0208 	.word	0xffff0208

08006f30 <__ssputs_r>:
 8006f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	688e      	ldr	r6, [r1, #8]
 8006f36:	429e      	cmp	r6, r3
 8006f38:	4682      	mov	sl, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	4699      	mov	r9, r3
 8006f40:	d837      	bhi.n	8006fb2 <__ssputs_r+0x82>
 8006f42:	898a      	ldrh	r2, [r1, #12]
 8006f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f48:	d031      	beq.n	8006fae <__ssputs_r+0x7e>
 8006f4a:	6825      	ldr	r5, [r4, #0]
 8006f4c:	6909      	ldr	r1, [r1, #16]
 8006f4e:	1a6f      	subs	r7, r5, r1
 8006f50:	6965      	ldr	r5, [r4, #20]
 8006f52:	2302      	movs	r3, #2
 8006f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f58:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f5c:	f109 0301 	add.w	r3, r9, #1
 8006f60:	443b      	add	r3, r7
 8006f62:	429d      	cmp	r5, r3
 8006f64:	bf38      	it	cc
 8006f66:	461d      	movcc	r5, r3
 8006f68:	0553      	lsls	r3, r2, #21
 8006f6a:	d530      	bpl.n	8006fce <__ssputs_r+0x9e>
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f000 fb2b 	bl	80075c8 <_malloc_r>
 8006f72:	4606      	mov	r6, r0
 8006f74:	b950      	cbnz	r0, 8006f8c <__ssputs_r+0x5c>
 8006f76:	230c      	movs	r3, #12
 8006f78:	f8ca 3000 	str.w	r3, [sl]
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f82:	81a3      	strh	r3, [r4, #12]
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295
 8006f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8c:	463a      	mov	r2, r7
 8006f8e:	6921      	ldr	r1, [r4, #16]
 8006f90:	f000 faa8 	bl	80074e4 <memcpy>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	6126      	str	r6, [r4, #16]
 8006fa2:	6165      	str	r5, [r4, #20]
 8006fa4:	443e      	add	r6, r7
 8006fa6:	1bed      	subs	r5, r5, r7
 8006fa8:	6026      	str	r6, [r4, #0]
 8006faa:	60a5      	str	r5, [r4, #8]
 8006fac:	464e      	mov	r6, r9
 8006fae:	454e      	cmp	r6, r9
 8006fb0:	d900      	bls.n	8006fb4 <__ssputs_r+0x84>
 8006fb2:	464e      	mov	r6, r9
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	f000 fa9e 	bl	80074fa <memmove>
 8006fbe:	68a3      	ldr	r3, [r4, #8]
 8006fc0:	1b9b      	subs	r3, r3, r6
 8006fc2:	60a3      	str	r3, [r4, #8]
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	441e      	add	r6, r3
 8006fc8:	6026      	str	r6, [r4, #0]
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e7dc      	b.n	8006f88 <__ssputs_r+0x58>
 8006fce:	462a      	mov	r2, r5
 8006fd0:	f000 fb54 	bl	800767c <_realloc_r>
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d1e2      	bne.n	8006fa0 <__ssputs_r+0x70>
 8006fda:	6921      	ldr	r1, [r4, #16]
 8006fdc:	4650      	mov	r0, sl
 8006fde:	f000 faa5 	bl	800752c <_free_r>
 8006fe2:	e7c8      	b.n	8006f76 <__ssputs_r+0x46>

08006fe4 <_svfiprintf_r>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	461d      	mov	r5, r3
 8006fea:	898b      	ldrh	r3, [r1, #12]
 8006fec:	061f      	lsls	r7, r3, #24
 8006fee:	b09d      	sub	sp, #116	; 0x74
 8006ff0:	4680      	mov	r8, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	d50f      	bpl.n	8007018 <_svfiprintf_r+0x34>
 8006ff8:	690b      	ldr	r3, [r1, #16]
 8006ffa:	b96b      	cbnz	r3, 8007018 <_svfiprintf_r+0x34>
 8006ffc:	2140      	movs	r1, #64	; 0x40
 8006ffe:	f000 fae3 	bl	80075c8 <_malloc_r>
 8007002:	6020      	str	r0, [r4, #0]
 8007004:	6120      	str	r0, [r4, #16]
 8007006:	b928      	cbnz	r0, 8007014 <_svfiprintf_r+0x30>
 8007008:	230c      	movs	r3, #12
 800700a:	f8c8 3000 	str.w	r3, [r8]
 800700e:	f04f 30ff 	mov.w	r0, #4294967295
 8007012:	e0c8      	b.n	80071a6 <_svfiprintf_r+0x1c2>
 8007014:	2340      	movs	r3, #64	; 0x40
 8007016:	6163      	str	r3, [r4, #20]
 8007018:	2300      	movs	r3, #0
 800701a:	9309      	str	r3, [sp, #36]	; 0x24
 800701c:	2320      	movs	r3, #32
 800701e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007022:	2330      	movs	r3, #48	; 0x30
 8007024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007028:	9503      	str	r5, [sp, #12]
 800702a:	f04f 0b01 	mov.w	fp, #1
 800702e:	4637      	mov	r7, r6
 8007030:	463d      	mov	r5, r7
 8007032:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007036:	b10b      	cbz	r3, 800703c <_svfiprintf_r+0x58>
 8007038:	2b25      	cmp	r3, #37	; 0x25
 800703a:	d13e      	bne.n	80070ba <_svfiprintf_r+0xd6>
 800703c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007040:	d00b      	beq.n	800705a <_svfiprintf_r+0x76>
 8007042:	4653      	mov	r3, sl
 8007044:	4632      	mov	r2, r6
 8007046:	4621      	mov	r1, r4
 8007048:	4640      	mov	r0, r8
 800704a:	f7ff ff71 	bl	8006f30 <__ssputs_r>
 800704e:	3001      	adds	r0, #1
 8007050:	f000 80a4 	beq.w	800719c <_svfiprintf_r+0x1b8>
 8007054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007056:	4453      	add	r3, sl
 8007058:	9309      	str	r3, [sp, #36]	; 0x24
 800705a:	783b      	ldrb	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 809d 	beq.w	800719c <_svfiprintf_r+0x1b8>
 8007062:	2300      	movs	r3, #0
 8007064:	f04f 32ff 	mov.w	r2, #4294967295
 8007068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007074:	931a      	str	r3, [sp, #104]	; 0x68
 8007076:	462f      	mov	r7, r5
 8007078:	2205      	movs	r2, #5
 800707a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800707e:	4850      	ldr	r0, [pc, #320]	; (80071c0 <_svfiprintf_r+0x1dc>)
 8007080:	f7f9 f936 	bl	80002f0 <memchr>
 8007084:	9b04      	ldr	r3, [sp, #16]
 8007086:	b9d0      	cbnz	r0, 80070be <_svfiprintf_r+0xda>
 8007088:	06d9      	lsls	r1, r3, #27
 800708a:	bf44      	itt	mi
 800708c:	2220      	movmi	r2, #32
 800708e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007092:	071a      	lsls	r2, r3, #28
 8007094:	bf44      	itt	mi
 8007096:	222b      	movmi	r2, #43	; 0x2b
 8007098:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800709c:	782a      	ldrb	r2, [r5, #0]
 800709e:	2a2a      	cmp	r2, #42	; 0x2a
 80070a0:	d015      	beq.n	80070ce <_svfiprintf_r+0xea>
 80070a2:	9a07      	ldr	r2, [sp, #28]
 80070a4:	462f      	mov	r7, r5
 80070a6:	2000      	movs	r0, #0
 80070a8:	250a      	movs	r5, #10
 80070aa:	4639      	mov	r1, r7
 80070ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b0:	3b30      	subs	r3, #48	; 0x30
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d94d      	bls.n	8007152 <_svfiprintf_r+0x16e>
 80070b6:	b1b8      	cbz	r0, 80070e8 <_svfiprintf_r+0x104>
 80070b8:	e00f      	b.n	80070da <_svfiprintf_r+0xf6>
 80070ba:	462f      	mov	r7, r5
 80070bc:	e7b8      	b.n	8007030 <_svfiprintf_r+0x4c>
 80070be:	4a40      	ldr	r2, [pc, #256]	; (80071c0 <_svfiprintf_r+0x1dc>)
 80070c0:	1a80      	subs	r0, r0, r2
 80070c2:	fa0b f000 	lsl.w	r0, fp, r0
 80070c6:	4318      	orrs	r0, r3
 80070c8:	9004      	str	r0, [sp, #16]
 80070ca:	463d      	mov	r5, r7
 80070cc:	e7d3      	b.n	8007076 <_svfiprintf_r+0x92>
 80070ce:	9a03      	ldr	r2, [sp, #12]
 80070d0:	1d11      	adds	r1, r2, #4
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	9103      	str	r1, [sp, #12]
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	db01      	blt.n	80070de <_svfiprintf_r+0xfa>
 80070da:	9207      	str	r2, [sp, #28]
 80070dc:	e004      	b.n	80070e8 <_svfiprintf_r+0x104>
 80070de:	4252      	negs	r2, r2
 80070e0:	f043 0302 	orr.w	r3, r3, #2
 80070e4:	9207      	str	r2, [sp, #28]
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	783b      	ldrb	r3, [r7, #0]
 80070ea:	2b2e      	cmp	r3, #46	; 0x2e
 80070ec:	d10c      	bne.n	8007108 <_svfiprintf_r+0x124>
 80070ee:	787b      	ldrb	r3, [r7, #1]
 80070f0:	2b2a      	cmp	r3, #42	; 0x2a
 80070f2:	d133      	bne.n	800715c <_svfiprintf_r+0x178>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	9203      	str	r2, [sp, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bfb8      	it	lt
 8007100:	f04f 33ff 	movlt.w	r3, #4294967295
 8007104:	3702      	adds	r7, #2
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	4d2e      	ldr	r5, [pc, #184]	; (80071c4 <_svfiprintf_r+0x1e0>)
 800710a:	7839      	ldrb	r1, [r7, #0]
 800710c:	2203      	movs	r2, #3
 800710e:	4628      	mov	r0, r5
 8007110:	f7f9 f8ee 	bl	80002f0 <memchr>
 8007114:	b138      	cbz	r0, 8007126 <_svfiprintf_r+0x142>
 8007116:	2340      	movs	r3, #64	; 0x40
 8007118:	1b40      	subs	r0, r0, r5
 800711a:	fa03 f000 	lsl.w	r0, r3, r0
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	4303      	orrs	r3, r0
 8007122:	3701      	adds	r7, #1
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	7839      	ldrb	r1, [r7, #0]
 8007128:	4827      	ldr	r0, [pc, #156]	; (80071c8 <_svfiprintf_r+0x1e4>)
 800712a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800712e:	2206      	movs	r2, #6
 8007130:	1c7e      	adds	r6, r7, #1
 8007132:	f7f9 f8dd 	bl	80002f0 <memchr>
 8007136:	2800      	cmp	r0, #0
 8007138:	d038      	beq.n	80071ac <_svfiprintf_r+0x1c8>
 800713a:	4b24      	ldr	r3, [pc, #144]	; (80071cc <_svfiprintf_r+0x1e8>)
 800713c:	bb13      	cbnz	r3, 8007184 <_svfiprintf_r+0x1a0>
 800713e:	9b03      	ldr	r3, [sp, #12]
 8007140:	3307      	adds	r3, #7
 8007142:	f023 0307 	bic.w	r3, r3, #7
 8007146:	3308      	adds	r3, #8
 8007148:	9303      	str	r3, [sp, #12]
 800714a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714c:	444b      	add	r3, r9
 800714e:	9309      	str	r3, [sp, #36]	; 0x24
 8007150:	e76d      	b.n	800702e <_svfiprintf_r+0x4a>
 8007152:	fb05 3202 	mla	r2, r5, r2, r3
 8007156:	2001      	movs	r0, #1
 8007158:	460f      	mov	r7, r1
 800715a:	e7a6      	b.n	80070aa <_svfiprintf_r+0xc6>
 800715c:	2300      	movs	r3, #0
 800715e:	3701      	adds	r7, #1
 8007160:	9305      	str	r3, [sp, #20]
 8007162:	4619      	mov	r1, r3
 8007164:	250a      	movs	r5, #10
 8007166:	4638      	mov	r0, r7
 8007168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800716c:	3a30      	subs	r2, #48	; 0x30
 800716e:	2a09      	cmp	r2, #9
 8007170:	d903      	bls.n	800717a <_svfiprintf_r+0x196>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0c8      	beq.n	8007108 <_svfiprintf_r+0x124>
 8007176:	9105      	str	r1, [sp, #20]
 8007178:	e7c6      	b.n	8007108 <_svfiprintf_r+0x124>
 800717a:	fb05 2101 	mla	r1, r5, r1, r2
 800717e:	2301      	movs	r3, #1
 8007180:	4607      	mov	r7, r0
 8007182:	e7f0      	b.n	8007166 <_svfiprintf_r+0x182>
 8007184:	ab03      	add	r3, sp, #12
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4622      	mov	r2, r4
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <_svfiprintf_r+0x1ec>)
 800718c:	a904      	add	r1, sp, #16
 800718e:	4640      	mov	r0, r8
 8007190:	f3af 8000 	nop.w
 8007194:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007198:	4681      	mov	r9, r0
 800719a:	d1d6      	bne.n	800714a <_svfiprintf_r+0x166>
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	065b      	lsls	r3, r3, #25
 80071a0:	f53f af35 	bmi.w	800700e <_svfiprintf_r+0x2a>
 80071a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071a6:	b01d      	add	sp, #116	; 0x74
 80071a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ac:	ab03      	add	r3, sp, #12
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	4622      	mov	r2, r4
 80071b2:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <_svfiprintf_r+0x1ec>)
 80071b4:	a904      	add	r1, sp, #16
 80071b6:	4640      	mov	r0, r8
 80071b8:	f000 f882 	bl	80072c0 <_printf_i>
 80071bc:	e7ea      	b.n	8007194 <_svfiprintf_r+0x1b0>
 80071be:	bf00      	nop
 80071c0:	08007750 	.word	0x08007750
 80071c4:	08007756 	.word	0x08007756
 80071c8:	0800775a 	.word	0x0800775a
 80071cc:	00000000 	.word	0x00000000
 80071d0:	08006f31 	.word	0x08006f31

080071d4 <_printf_common>:
 80071d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	4691      	mov	r9, r2
 80071da:	461f      	mov	r7, r3
 80071dc:	688a      	ldr	r2, [r1, #8]
 80071de:	690b      	ldr	r3, [r1, #16]
 80071e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	bfb8      	it	lt
 80071e8:	4613      	movlt	r3, r2
 80071ea:	f8c9 3000 	str.w	r3, [r9]
 80071ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071f2:	4606      	mov	r6, r0
 80071f4:	460c      	mov	r4, r1
 80071f6:	b112      	cbz	r2, 80071fe <_printf_common+0x2a>
 80071f8:	3301      	adds	r3, #1
 80071fa:	f8c9 3000 	str.w	r3, [r9]
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	0699      	lsls	r1, r3, #26
 8007202:	bf42      	ittt	mi
 8007204:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007208:	3302      	addmi	r3, #2
 800720a:	f8c9 3000 	strmi.w	r3, [r9]
 800720e:	6825      	ldr	r5, [r4, #0]
 8007210:	f015 0506 	ands.w	r5, r5, #6
 8007214:	d107      	bne.n	8007226 <_printf_common+0x52>
 8007216:	f104 0a19 	add.w	sl, r4, #25
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	f8d9 2000 	ldr.w	r2, [r9]
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	42ab      	cmp	r3, r5
 8007224:	dc28      	bgt.n	8007278 <_printf_common+0xa4>
 8007226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800722a:	6822      	ldr	r2, [r4, #0]
 800722c:	3300      	adds	r3, #0
 800722e:	bf18      	it	ne
 8007230:	2301      	movne	r3, #1
 8007232:	0692      	lsls	r2, r2, #26
 8007234:	d42d      	bmi.n	8007292 <_printf_common+0xbe>
 8007236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800723a:	4639      	mov	r1, r7
 800723c:	4630      	mov	r0, r6
 800723e:	47c0      	blx	r8
 8007240:	3001      	adds	r0, #1
 8007242:	d020      	beq.n	8007286 <_printf_common+0xb2>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	68e5      	ldr	r5, [r4, #12]
 8007248:	f8d9 2000 	ldr.w	r2, [r9]
 800724c:	f003 0306 	and.w	r3, r3, #6
 8007250:	2b04      	cmp	r3, #4
 8007252:	bf08      	it	eq
 8007254:	1aad      	subeq	r5, r5, r2
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	6922      	ldr	r2, [r4, #16]
 800725a:	bf0c      	ite	eq
 800725c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007260:	2500      	movne	r5, #0
 8007262:	4293      	cmp	r3, r2
 8007264:	bfc4      	itt	gt
 8007266:	1a9b      	subgt	r3, r3, r2
 8007268:	18ed      	addgt	r5, r5, r3
 800726a:	f04f 0900 	mov.w	r9, #0
 800726e:	341a      	adds	r4, #26
 8007270:	454d      	cmp	r5, r9
 8007272:	d11a      	bne.n	80072aa <_printf_common+0xd6>
 8007274:	2000      	movs	r0, #0
 8007276:	e008      	b.n	800728a <_printf_common+0xb6>
 8007278:	2301      	movs	r3, #1
 800727a:	4652      	mov	r2, sl
 800727c:	4639      	mov	r1, r7
 800727e:	4630      	mov	r0, r6
 8007280:	47c0      	blx	r8
 8007282:	3001      	adds	r0, #1
 8007284:	d103      	bne.n	800728e <_printf_common+0xba>
 8007286:	f04f 30ff 	mov.w	r0, #4294967295
 800728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728e:	3501      	adds	r5, #1
 8007290:	e7c3      	b.n	800721a <_printf_common+0x46>
 8007292:	18e1      	adds	r1, r4, r3
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	2030      	movs	r0, #48	; 0x30
 8007298:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800729c:	4422      	add	r2, r4
 800729e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072a6:	3302      	adds	r3, #2
 80072a8:	e7c5      	b.n	8007236 <_printf_common+0x62>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4622      	mov	r2, r4
 80072ae:	4639      	mov	r1, r7
 80072b0:	4630      	mov	r0, r6
 80072b2:	47c0      	blx	r8
 80072b4:	3001      	adds	r0, #1
 80072b6:	d0e6      	beq.n	8007286 <_printf_common+0xb2>
 80072b8:	f109 0901 	add.w	r9, r9, #1
 80072bc:	e7d8      	b.n	8007270 <_printf_common+0x9c>
	...

080072c0 <_printf_i>:
 80072c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80072c8:	460c      	mov	r4, r1
 80072ca:	7e09      	ldrb	r1, [r1, #24]
 80072cc:	b085      	sub	sp, #20
 80072ce:	296e      	cmp	r1, #110	; 0x6e
 80072d0:	4617      	mov	r7, r2
 80072d2:	4606      	mov	r6, r0
 80072d4:	4698      	mov	r8, r3
 80072d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072d8:	f000 80b3 	beq.w	8007442 <_printf_i+0x182>
 80072dc:	d822      	bhi.n	8007324 <_printf_i+0x64>
 80072de:	2963      	cmp	r1, #99	; 0x63
 80072e0:	d036      	beq.n	8007350 <_printf_i+0x90>
 80072e2:	d80a      	bhi.n	80072fa <_printf_i+0x3a>
 80072e4:	2900      	cmp	r1, #0
 80072e6:	f000 80b9 	beq.w	800745c <_printf_i+0x19c>
 80072ea:	2958      	cmp	r1, #88	; 0x58
 80072ec:	f000 8083 	beq.w	80073f6 <_printf_i+0x136>
 80072f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80072f8:	e032      	b.n	8007360 <_printf_i+0xa0>
 80072fa:	2964      	cmp	r1, #100	; 0x64
 80072fc:	d001      	beq.n	8007302 <_printf_i+0x42>
 80072fe:	2969      	cmp	r1, #105	; 0x69
 8007300:	d1f6      	bne.n	80072f0 <_printf_i+0x30>
 8007302:	6820      	ldr	r0, [r4, #0]
 8007304:	6813      	ldr	r3, [r2, #0]
 8007306:	0605      	lsls	r5, r0, #24
 8007308:	f103 0104 	add.w	r1, r3, #4
 800730c:	d52a      	bpl.n	8007364 <_printf_i+0xa4>
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6011      	str	r1, [r2, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	da03      	bge.n	800731e <_printf_i+0x5e>
 8007316:	222d      	movs	r2, #45	; 0x2d
 8007318:	425b      	negs	r3, r3
 800731a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800731e:	486f      	ldr	r0, [pc, #444]	; (80074dc <_printf_i+0x21c>)
 8007320:	220a      	movs	r2, #10
 8007322:	e039      	b.n	8007398 <_printf_i+0xd8>
 8007324:	2973      	cmp	r1, #115	; 0x73
 8007326:	f000 809d 	beq.w	8007464 <_printf_i+0x1a4>
 800732a:	d808      	bhi.n	800733e <_printf_i+0x7e>
 800732c:	296f      	cmp	r1, #111	; 0x6f
 800732e:	d020      	beq.n	8007372 <_printf_i+0xb2>
 8007330:	2970      	cmp	r1, #112	; 0x70
 8007332:	d1dd      	bne.n	80072f0 <_printf_i+0x30>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	f043 0320 	orr.w	r3, r3, #32
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	e003      	b.n	8007346 <_printf_i+0x86>
 800733e:	2975      	cmp	r1, #117	; 0x75
 8007340:	d017      	beq.n	8007372 <_printf_i+0xb2>
 8007342:	2978      	cmp	r1, #120	; 0x78
 8007344:	d1d4      	bne.n	80072f0 <_printf_i+0x30>
 8007346:	2378      	movs	r3, #120	; 0x78
 8007348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800734c:	4864      	ldr	r0, [pc, #400]	; (80074e0 <_printf_i+0x220>)
 800734e:	e055      	b.n	80073fc <_printf_i+0x13c>
 8007350:	6813      	ldr	r3, [r2, #0]
 8007352:	1d19      	adds	r1, r3, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6011      	str	r1, [r2, #0]
 8007358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800735c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007360:	2301      	movs	r3, #1
 8007362:	e08c      	b.n	800747e <_printf_i+0x1be>
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6011      	str	r1, [r2, #0]
 8007368:	f010 0f40 	tst.w	r0, #64	; 0x40
 800736c:	bf18      	it	ne
 800736e:	b21b      	sxthne	r3, r3
 8007370:	e7cf      	b.n	8007312 <_printf_i+0x52>
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	6825      	ldr	r5, [r4, #0]
 8007376:	1d18      	adds	r0, r3, #4
 8007378:	6010      	str	r0, [r2, #0]
 800737a:	0628      	lsls	r0, r5, #24
 800737c:	d501      	bpl.n	8007382 <_printf_i+0xc2>
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	e002      	b.n	8007388 <_printf_i+0xc8>
 8007382:	0668      	lsls	r0, r5, #25
 8007384:	d5fb      	bpl.n	800737e <_printf_i+0xbe>
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	4854      	ldr	r0, [pc, #336]	; (80074dc <_printf_i+0x21c>)
 800738a:	296f      	cmp	r1, #111	; 0x6f
 800738c:	bf14      	ite	ne
 800738e:	220a      	movne	r2, #10
 8007390:	2208      	moveq	r2, #8
 8007392:	2100      	movs	r1, #0
 8007394:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007398:	6865      	ldr	r5, [r4, #4]
 800739a:	60a5      	str	r5, [r4, #8]
 800739c:	2d00      	cmp	r5, #0
 800739e:	f2c0 8095 	blt.w	80074cc <_printf_i+0x20c>
 80073a2:	6821      	ldr	r1, [r4, #0]
 80073a4:	f021 0104 	bic.w	r1, r1, #4
 80073a8:	6021      	str	r1, [r4, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d13d      	bne.n	800742a <_printf_i+0x16a>
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	f040 808e 	bne.w	80074d0 <_printf_i+0x210>
 80073b4:	4665      	mov	r5, ip
 80073b6:	2a08      	cmp	r2, #8
 80073b8:	d10b      	bne.n	80073d2 <_printf_i+0x112>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	07db      	lsls	r3, r3, #31
 80073be:	d508      	bpl.n	80073d2 <_printf_i+0x112>
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	6862      	ldr	r2, [r4, #4]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	bfde      	ittt	le
 80073c8:	2330      	movle	r3, #48	; 0x30
 80073ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073d2:	ebac 0305 	sub.w	r3, ip, r5
 80073d6:	6123      	str	r3, [r4, #16]
 80073d8:	f8cd 8000 	str.w	r8, [sp]
 80073dc:	463b      	mov	r3, r7
 80073de:	aa03      	add	r2, sp, #12
 80073e0:	4621      	mov	r1, r4
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7ff fef6 	bl	80071d4 <_printf_common>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d14d      	bne.n	8007488 <_printf_i+0x1c8>
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	b005      	add	sp, #20
 80073f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073f6:	4839      	ldr	r0, [pc, #228]	; (80074dc <_printf_i+0x21c>)
 80073f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80073fc:	6813      	ldr	r3, [r2, #0]
 80073fe:	6821      	ldr	r1, [r4, #0]
 8007400:	1d1d      	adds	r5, r3, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6015      	str	r5, [r2, #0]
 8007406:	060a      	lsls	r2, r1, #24
 8007408:	d50b      	bpl.n	8007422 <_printf_i+0x162>
 800740a:	07ca      	lsls	r2, r1, #31
 800740c:	bf44      	itt	mi
 800740e:	f041 0120 	orrmi.w	r1, r1, #32
 8007412:	6021      	strmi	r1, [r4, #0]
 8007414:	b91b      	cbnz	r3, 800741e <_printf_i+0x15e>
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	f022 0220 	bic.w	r2, r2, #32
 800741c:	6022      	str	r2, [r4, #0]
 800741e:	2210      	movs	r2, #16
 8007420:	e7b7      	b.n	8007392 <_printf_i+0xd2>
 8007422:	064d      	lsls	r5, r1, #25
 8007424:	bf48      	it	mi
 8007426:	b29b      	uxthmi	r3, r3
 8007428:	e7ef      	b.n	800740a <_printf_i+0x14a>
 800742a:	4665      	mov	r5, ip
 800742c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007430:	fb02 3311 	mls	r3, r2, r1, r3
 8007434:	5cc3      	ldrb	r3, [r0, r3]
 8007436:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800743a:	460b      	mov	r3, r1
 800743c:	2900      	cmp	r1, #0
 800743e:	d1f5      	bne.n	800742c <_printf_i+0x16c>
 8007440:	e7b9      	b.n	80073b6 <_printf_i+0xf6>
 8007442:	6813      	ldr	r3, [r2, #0]
 8007444:	6825      	ldr	r5, [r4, #0]
 8007446:	6961      	ldr	r1, [r4, #20]
 8007448:	1d18      	adds	r0, r3, #4
 800744a:	6010      	str	r0, [r2, #0]
 800744c:	0628      	lsls	r0, r5, #24
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	d501      	bpl.n	8007456 <_printf_i+0x196>
 8007452:	6019      	str	r1, [r3, #0]
 8007454:	e002      	b.n	800745c <_printf_i+0x19c>
 8007456:	066a      	lsls	r2, r5, #25
 8007458:	d5fb      	bpl.n	8007452 <_printf_i+0x192>
 800745a:	8019      	strh	r1, [r3, #0]
 800745c:	2300      	movs	r3, #0
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	4665      	mov	r5, ip
 8007462:	e7b9      	b.n	80073d8 <_printf_i+0x118>
 8007464:	6813      	ldr	r3, [r2, #0]
 8007466:	1d19      	adds	r1, r3, #4
 8007468:	6011      	str	r1, [r2, #0]
 800746a:	681d      	ldr	r5, [r3, #0]
 800746c:	6862      	ldr	r2, [r4, #4]
 800746e:	2100      	movs	r1, #0
 8007470:	4628      	mov	r0, r5
 8007472:	f7f8 ff3d 	bl	80002f0 <memchr>
 8007476:	b108      	cbz	r0, 800747c <_printf_i+0x1bc>
 8007478:	1b40      	subs	r0, r0, r5
 800747a:	6060      	str	r0, [r4, #4]
 800747c:	6863      	ldr	r3, [r4, #4]
 800747e:	6123      	str	r3, [r4, #16]
 8007480:	2300      	movs	r3, #0
 8007482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007486:	e7a7      	b.n	80073d8 <_printf_i+0x118>
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	462a      	mov	r2, r5
 800748c:	4639      	mov	r1, r7
 800748e:	4630      	mov	r0, r6
 8007490:	47c0      	blx	r8
 8007492:	3001      	adds	r0, #1
 8007494:	d0aa      	beq.n	80073ec <_printf_i+0x12c>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	079b      	lsls	r3, r3, #30
 800749a:	d413      	bmi.n	80074c4 <_printf_i+0x204>
 800749c:	68e0      	ldr	r0, [r4, #12]
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	4298      	cmp	r0, r3
 80074a2:	bfb8      	it	lt
 80074a4:	4618      	movlt	r0, r3
 80074a6:	e7a3      	b.n	80073f0 <_printf_i+0x130>
 80074a8:	2301      	movs	r3, #1
 80074aa:	464a      	mov	r2, r9
 80074ac:	4639      	mov	r1, r7
 80074ae:	4630      	mov	r0, r6
 80074b0:	47c0      	blx	r8
 80074b2:	3001      	adds	r0, #1
 80074b4:	d09a      	beq.n	80073ec <_printf_i+0x12c>
 80074b6:	3501      	adds	r5, #1
 80074b8:	68e3      	ldr	r3, [r4, #12]
 80074ba:	9a03      	ldr	r2, [sp, #12]
 80074bc:	1a9b      	subs	r3, r3, r2
 80074be:	42ab      	cmp	r3, r5
 80074c0:	dcf2      	bgt.n	80074a8 <_printf_i+0x1e8>
 80074c2:	e7eb      	b.n	800749c <_printf_i+0x1dc>
 80074c4:	2500      	movs	r5, #0
 80074c6:	f104 0919 	add.w	r9, r4, #25
 80074ca:	e7f5      	b.n	80074b8 <_printf_i+0x1f8>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1ac      	bne.n	800742a <_printf_i+0x16a>
 80074d0:	7803      	ldrb	r3, [r0, #0]
 80074d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074da:	e76c      	b.n	80073b6 <_printf_i+0xf6>
 80074dc:	08007761 	.word	0x08007761
 80074e0:	08007772 	.word	0x08007772

080074e4 <memcpy>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	1e43      	subs	r3, r0, #1
 80074e8:	440a      	add	r2, r1
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d100      	bne.n	80074f0 <memcpy+0xc>
 80074ee:	bd10      	pop	{r4, pc}
 80074f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074f8:	e7f7      	b.n	80074ea <memcpy+0x6>

080074fa <memmove>:
 80074fa:	4288      	cmp	r0, r1
 80074fc:	b510      	push	{r4, lr}
 80074fe:	eb01 0302 	add.w	r3, r1, r2
 8007502:	d807      	bhi.n	8007514 <memmove+0x1a>
 8007504:	1e42      	subs	r2, r0, #1
 8007506:	4299      	cmp	r1, r3
 8007508:	d00a      	beq.n	8007520 <memmove+0x26>
 800750a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800750e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007512:	e7f8      	b.n	8007506 <memmove+0xc>
 8007514:	4283      	cmp	r3, r0
 8007516:	d9f5      	bls.n	8007504 <memmove+0xa>
 8007518:	1881      	adds	r1, r0, r2
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	42d3      	cmn	r3, r2
 800751e:	d100      	bne.n	8007522 <memmove+0x28>
 8007520:	bd10      	pop	{r4, pc}
 8007522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007526:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800752a:	e7f7      	b.n	800751c <memmove+0x22>

0800752c <_free_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4605      	mov	r5, r0
 8007530:	2900      	cmp	r1, #0
 8007532:	d045      	beq.n	80075c0 <_free_r+0x94>
 8007534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007538:	1f0c      	subs	r4, r1, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	bfb8      	it	lt
 800753e:	18e4      	addlt	r4, r4, r3
 8007540:	f000 f8d2 	bl	80076e8 <__malloc_lock>
 8007544:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <_free_r+0x98>)
 8007546:	6813      	ldr	r3, [r2, #0]
 8007548:	4610      	mov	r0, r2
 800754a:	b933      	cbnz	r3, 800755a <_free_r+0x2e>
 800754c:	6063      	str	r3, [r4, #4]
 800754e:	6014      	str	r4, [r2, #0]
 8007550:	4628      	mov	r0, r5
 8007552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007556:	f000 b8c8 	b.w	80076ea <__malloc_unlock>
 800755a:	42a3      	cmp	r3, r4
 800755c:	d90c      	bls.n	8007578 <_free_r+0x4c>
 800755e:	6821      	ldr	r1, [r4, #0]
 8007560:	1862      	adds	r2, r4, r1
 8007562:	4293      	cmp	r3, r2
 8007564:	bf04      	itt	eq
 8007566:	681a      	ldreq	r2, [r3, #0]
 8007568:	685b      	ldreq	r3, [r3, #4]
 800756a:	6063      	str	r3, [r4, #4]
 800756c:	bf04      	itt	eq
 800756e:	1852      	addeq	r2, r2, r1
 8007570:	6022      	streq	r2, [r4, #0]
 8007572:	6004      	str	r4, [r0, #0]
 8007574:	e7ec      	b.n	8007550 <_free_r+0x24>
 8007576:	4613      	mov	r3, r2
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	b10a      	cbz	r2, 8007580 <_free_r+0x54>
 800757c:	42a2      	cmp	r2, r4
 800757e:	d9fa      	bls.n	8007576 <_free_r+0x4a>
 8007580:	6819      	ldr	r1, [r3, #0]
 8007582:	1858      	adds	r0, r3, r1
 8007584:	42a0      	cmp	r0, r4
 8007586:	d10b      	bne.n	80075a0 <_free_r+0x74>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	4401      	add	r1, r0
 800758c:	1858      	adds	r0, r3, r1
 800758e:	4282      	cmp	r2, r0
 8007590:	6019      	str	r1, [r3, #0]
 8007592:	d1dd      	bne.n	8007550 <_free_r+0x24>
 8007594:	6810      	ldr	r0, [r2, #0]
 8007596:	6852      	ldr	r2, [r2, #4]
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	4401      	add	r1, r0
 800759c:	6019      	str	r1, [r3, #0]
 800759e:	e7d7      	b.n	8007550 <_free_r+0x24>
 80075a0:	d902      	bls.n	80075a8 <_free_r+0x7c>
 80075a2:	230c      	movs	r3, #12
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	e7d3      	b.n	8007550 <_free_r+0x24>
 80075a8:	6820      	ldr	r0, [r4, #0]
 80075aa:	1821      	adds	r1, r4, r0
 80075ac:	428a      	cmp	r2, r1
 80075ae:	bf04      	itt	eq
 80075b0:	6811      	ldreq	r1, [r2, #0]
 80075b2:	6852      	ldreq	r2, [r2, #4]
 80075b4:	6062      	str	r2, [r4, #4]
 80075b6:	bf04      	itt	eq
 80075b8:	1809      	addeq	r1, r1, r0
 80075ba:	6021      	streq	r1, [r4, #0]
 80075bc:	605c      	str	r4, [r3, #4]
 80075be:	e7c7      	b.n	8007550 <_free_r+0x24>
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	bf00      	nop
 80075c4:	20000098 	.word	0x20000098

080075c8 <_malloc_r>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	1ccd      	adds	r5, r1, #3
 80075cc:	f025 0503 	bic.w	r5, r5, #3
 80075d0:	3508      	adds	r5, #8
 80075d2:	2d0c      	cmp	r5, #12
 80075d4:	bf38      	it	cc
 80075d6:	250c      	movcc	r5, #12
 80075d8:	2d00      	cmp	r5, #0
 80075da:	4606      	mov	r6, r0
 80075dc:	db01      	blt.n	80075e2 <_malloc_r+0x1a>
 80075de:	42a9      	cmp	r1, r5
 80075e0:	d903      	bls.n	80075ea <_malloc_r+0x22>
 80075e2:	230c      	movs	r3, #12
 80075e4:	6033      	str	r3, [r6, #0]
 80075e6:	2000      	movs	r0, #0
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
 80075ea:	f000 f87d 	bl	80076e8 <__malloc_lock>
 80075ee:	4a21      	ldr	r2, [pc, #132]	; (8007674 <_malloc_r+0xac>)
 80075f0:	6814      	ldr	r4, [r2, #0]
 80075f2:	4621      	mov	r1, r4
 80075f4:	b991      	cbnz	r1, 800761c <_malloc_r+0x54>
 80075f6:	4c20      	ldr	r4, [pc, #128]	; (8007678 <_malloc_r+0xb0>)
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	b91b      	cbnz	r3, 8007604 <_malloc_r+0x3c>
 80075fc:	4630      	mov	r0, r6
 80075fe:	f000 f863 	bl	80076c8 <_sbrk_r>
 8007602:	6020      	str	r0, [r4, #0]
 8007604:	4629      	mov	r1, r5
 8007606:	4630      	mov	r0, r6
 8007608:	f000 f85e 	bl	80076c8 <_sbrk_r>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d124      	bne.n	800765a <_malloc_r+0x92>
 8007610:	230c      	movs	r3, #12
 8007612:	6033      	str	r3, [r6, #0]
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f868 	bl	80076ea <__malloc_unlock>
 800761a:	e7e4      	b.n	80075e6 <_malloc_r+0x1e>
 800761c:	680b      	ldr	r3, [r1, #0]
 800761e:	1b5b      	subs	r3, r3, r5
 8007620:	d418      	bmi.n	8007654 <_malloc_r+0x8c>
 8007622:	2b0b      	cmp	r3, #11
 8007624:	d90f      	bls.n	8007646 <_malloc_r+0x7e>
 8007626:	600b      	str	r3, [r1, #0]
 8007628:	50cd      	str	r5, [r1, r3]
 800762a:	18cc      	adds	r4, r1, r3
 800762c:	4630      	mov	r0, r6
 800762e:	f000 f85c 	bl	80076ea <__malloc_unlock>
 8007632:	f104 000b 	add.w	r0, r4, #11
 8007636:	1d23      	adds	r3, r4, #4
 8007638:	f020 0007 	bic.w	r0, r0, #7
 800763c:	1ac3      	subs	r3, r0, r3
 800763e:	d0d3      	beq.n	80075e8 <_malloc_r+0x20>
 8007640:	425a      	negs	r2, r3
 8007642:	50e2      	str	r2, [r4, r3]
 8007644:	e7d0      	b.n	80075e8 <_malloc_r+0x20>
 8007646:	428c      	cmp	r4, r1
 8007648:	684b      	ldr	r3, [r1, #4]
 800764a:	bf16      	itet	ne
 800764c:	6063      	strne	r3, [r4, #4]
 800764e:	6013      	streq	r3, [r2, #0]
 8007650:	460c      	movne	r4, r1
 8007652:	e7eb      	b.n	800762c <_malloc_r+0x64>
 8007654:	460c      	mov	r4, r1
 8007656:	6849      	ldr	r1, [r1, #4]
 8007658:	e7cc      	b.n	80075f4 <_malloc_r+0x2c>
 800765a:	1cc4      	adds	r4, r0, #3
 800765c:	f024 0403 	bic.w	r4, r4, #3
 8007660:	42a0      	cmp	r0, r4
 8007662:	d005      	beq.n	8007670 <_malloc_r+0xa8>
 8007664:	1a21      	subs	r1, r4, r0
 8007666:	4630      	mov	r0, r6
 8007668:	f000 f82e 	bl	80076c8 <_sbrk_r>
 800766c:	3001      	adds	r0, #1
 800766e:	d0cf      	beq.n	8007610 <_malloc_r+0x48>
 8007670:	6025      	str	r5, [r4, #0]
 8007672:	e7db      	b.n	800762c <_malloc_r+0x64>
 8007674:	20000098 	.word	0x20000098
 8007678:	2000009c 	.word	0x2000009c

0800767c <_realloc_r>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	4607      	mov	r7, r0
 8007680:	4614      	mov	r4, r2
 8007682:	460e      	mov	r6, r1
 8007684:	b921      	cbnz	r1, 8007690 <_realloc_r+0x14>
 8007686:	4611      	mov	r1, r2
 8007688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800768c:	f7ff bf9c 	b.w	80075c8 <_malloc_r>
 8007690:	b922      	cbnz	r2, 800769c <_realloc_r+0x20>
 8007692:	f7ff ff4b 	bl	800752c <_free_r>
 8007696:	4625      	mov	r5, r4
 8007698:	4628      	mov	r0, r5
 800769a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800769c:	f000 f826 	bl	80076ec <_malloc_usable_size_r>
 80076a0:	42a0      	cmp	r0, r4
 80076a2:	d20f      	bcs.n	80076c4 <_realloc_r+0x48>
 80076a4:	4621      	mov	r1, r4
 80076a6:	4638      	mov	r0, r7
 80076a8:	f7ff ff8e 	bl	80075c8 <_malloc_r>
 80076ac:	4605      	mov	r5, r0
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d0f2      	beq.n	8007698 <_realloc_r+0x1c>
 80076b2:	4631      	mov	r1, r6
 80076b4:	4622      	mov	r2, r4
 80076b6:	f7ff ff15 	bl	80074e4 <memcpy>
 80076ba:	4631      	mov	r1, r6
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff ff35 	bl	800752c <_free_r>
 80076c2:	e7e9      	b.n	8007698 <_realloc_r+0x1c>
 80076c4:	4635      	mov	r5, r6
 80076c6:	e7e7      	b.n	8007698 <_realloc_r+0x1c>

080076c8 <_sbrk_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4c06      	ldr	r4, [pc, #24]	; (80076e4 <_sbrk_r+0x1c>)
 80076cc:	2300      	movs	r3, #0
 80076ce:	4605      	mov	r5, r0
 80076d0:	4608      	mov	r0, r1
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	f7f9 fc6a 	bl	8000fac <_sbrk>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_sbrk_r+0x1a>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_sbrk_r+0x1a>
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	20000350 	.word	0x20000350

080076e8 <__malloc_lock>:
 80076e8:	4770      	bx	lr

080076ea <__malloc_unlock>:
 80076ea:	4770      	bx	lr

080076ec <_malloc_usable_size_r>:
 80076ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076f0:	1f18      	subs	r0, r3, #4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bfbc      	itt	lt
 80076f6:	580b      	ldrlt	r3, [r1, r0]
 80076f8:	18c0      	addlt	r0, r0, r3
 80076fa:	4770      	bx	lr

080076fc <_init>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr

08007708 <_fini>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	bf00      	nop
 800770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770e:	bc08      	pop	{r3}
 8007710:	469e      	mov	lr, r3
 8007712:	4770      	bx	lr
