
Testing Dual Core_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006964  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  20000010  08006c48  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000214  08006c48  00020214  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018c3c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000285e  00000000  00000000  00038c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000df0  00000000  00000000  0003b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cf8  00000000  00000000  0003c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f12a  00000000  00000000  0003cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d3e8  00000000  00000000  0007c0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019d1c3  00000000  00000000  000894d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00226695  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a08  00000000  00000000  00226710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006be4 	.word	0x08006be4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08006be4 	.word	0x08006be4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <SystemInit+0xc4>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <SystemInit+0xc4>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemInit+0xc4>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemInit+0xc4>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemInit+0xc8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <SystemInit+0xc8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemInit+0xc8>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemInit+0xc8>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4924      	ldr	r1, [pc, #144]	; (80006a0 <SystemInit+0xc8>)
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SystemInit+0xcc>)
 8000612:	4013      	ands	r3, r2
 8000614:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemInit+0xc8>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <SystemInit+0xc8>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemInit+0xc8>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemInit+0xc8>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <SystemInit+0xc8>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SystemInit+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemInit+0xc8>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <SystemInit+0xc8>)
 8000642:	2200      	movs	r2, #0
 8000644:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <SystemInit+0xc8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <SystemInit+0xc8>)
 800064e:	2200      	movs	r2, #0
 8000650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <SystemInit+0xc8>)
 8000654:	2200      	movs	r2, #0
 8000656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <SystemInit+0xc8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <SystemInit+0xc8>)
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <SystemInit+0xc8>)
 8000666:	2200      	movs	r2, #0
 8000668:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <SystemInit+0xd0>)
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <SystemInit+0xd0>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <SystemInit+0xd4>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <SystemInit+0xd8>)
 800067c:	4013      	ands	r3, r2
 800067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000682:	d202      	bcs.n	800068a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <SystemInit+0xdc>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SystemInit+0xc4>)
 800068c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000690:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	58024400 	.word	0x58024400
 80006a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006a8:	580000c0 	.word	0x580000c0
 80006ac:	5c001000 	.word	0x5c001000
 80006b0:	ffff0000 	.word	0xffff0000
 80006b4:	51008108 	.word	0x51008108

080006b8 <Led_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Led_init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <Led_init+0x54>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <Led_init+0x54>)
 80006d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <Led_init+0x54>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <Led_init+0x58>)
 8000700:	f000 fd44 	bl	800118c <HAL_GPIO_Init>
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	58024400 	.word	0x58024400
 8000710:	58022400 	.word	0x58022400

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0a0      	sub	sp, #128	; 0x80
 8000718:	af02      	add	r7, sp, #8
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800071a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071e:	677b      	str	r3, [r7, #116]	; 0x74
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000720:	bf00      	nop
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <main+0xd8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d004      	beq.n	8000738 <main+0x24>
 800072e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	677a      	str	r2, [r7, #116]	; 0x74
 8000734:	2b00      	cmp	r3, #0
 8000736:	dcf4      	bgt.n	8000722 <main+0xe>
  if ( timeout < 0 )
 8000738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800073a:	2b00      	cmp	r3, #0
 800073c:	da01      	bge.n	8000742 <main+0x2e>
  {
  Error_Handler();
 800073e:	f000 fa95 	bl	8000c6c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fba1 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f857 	bl	80007f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <main+0xd8>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	4a26      	ldr	r2, [pc, #152]	; (80007ec <main+0xd8>)
 8000752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <main+0xd8>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000768:	2000      	movs	r0, #0
 800076a:	f000 febf 	bl	80014ec <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800076e:	2100      	movs	r1, #0
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fed5 	bl	8001520 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077a:	677b      	str	r3, [r7, #116]	; 0x74
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800077c:	bf00      	nop
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <main+0xd8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d104      	bne.n	8000794 <main+0x80>
 800078a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	677a      	str	r2, [r7, #116]	; 0x74
 8000790:	2b00      	cmp	r3, #0
 8000792:	dcf4      	bgt.n	800077e <main+0x6a>
if ( timeout < 0 )
 8000794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000796:	2b00      	cmp	r3, #0
 8000798:	da01      	bge.n	800079e <main+0x8a>
{
Error_Handler();
 800079a:	f000 fa67 	bl	8000c6c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079e:	f000 fa05 	bl	8000bac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a2:	f000 f96b 	bl	8000a7c <MX_USART1_UART_Init>
//  MX_I2C4_Init();
  /* USER CODE BEGIN 2 */
  Led_init();
 80007a6:	f7ff ff87 	bl	80006b8 <Led_init>
  UART8_Init();
 80007aa:	f000 f9b3 	bl	8000b14 <UART8_Init>
   MX_I2C4_Init();
 80007ae:	f000 f925 	bl	80009fc <MX_I2C4_Init>
//	  HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
//
//	  // Wait 500ms
//	  HAL_Delay(500);

	  buf1[0] = Commandbyte;
 80007b2:	2300      	movs	r3, #0
 80007b4:	723b      	strb	r3, [r7, #8]
	  buf1[1] = Databyte;
 80007b6:	23ff      	movs	r3, #255	; 0xff
 80007b8:	727b      	strb	r3, [r7, #9]


	  ret = HAL_I2C_Master_Transmit(&hi2c4, Controlbyte, buf1, 2, HAL_MAX_DELAY);
 80007ba:	23a0      	movs	r3, #160	; 0xa0
 80007bc:	b299      	uxth	r1, r3
 80007be:	f107 0208 	add.w	r2, r7, #8
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2302      	movs	r3, #2
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <main+0xdc>)
 80007cc:	f000 ff4c 	bl	8001668 <HAL_I2C_Master_Transmit>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	  	  if(ret!=HAL_OK)
 80007d6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0e9      	beq.n	80007b2 <main+0x9e>
	  	  {
	  		  strcpy((char*)buf, "Error Tx\r \n");
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <main+0xe0>)
 80007e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  buf1[0] = Commandbyte;
 80007ea:	e7e2      	b.n	80007b2 <main+0x9e>
 80007ec:	58024400 	.word	0x58024400
 80007f0:	2000002c 	.word	0x2000002c
 80007f4:	08006bfc 	.word	0x08006bfc

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0cc      	sub	sp, #304	; 0x130
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000802:	224c      	movs	r2, #76	; 0x4c
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f006 f9e4 	bl	8006bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f006 f9dd 	bl	8006bd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4618      	mov	r0, r3
 800081e:	23c0      	movs	r3, #192	; 0xc0
 8000820:	461a      	mov	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f006 f9d6 	bl	8006bd4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000828:	2004      	movs	r0, #4
 800082a:	f001 fa1d 	bl	8001c68 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	4b6d      	ldr	r3, [pc, #436]	; (80009ec <SystemClock_Config+0x1f4>)
 8000836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000838:	4a6c      	ldr	r2, [pc, #432]	; (80009ec <SystemClock_Config+0x1f4>)
 800083a:	f023 0301 	bic.w	r3, r3, #1
 800083e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000840:	4b6a      	ldr	r3, [pc, #424]	; (80009ec <SystemClock_Config+0x1f4>)
 8000842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000844:	f003 0201 	and.w	r2, r3, #1
 8000848:	463b      	mov	r3, r7
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <SystemClock_Config+0x1f8>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a67      	ldr	r2, [pc, #412]	; (80009f0 <SystemClock_Config+0x1f8>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b65      	ldr	r3, [pc, #404]	; (80009f0 <SystemClock_Config+0x1f8>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000860:	463b      	mov	r3, r7
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	463b      	mov	r3, r7
 8000866:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000868:	bf00      	nop
 800086a:	4b61      	ldr	r3, [pc, #388]	; (80009f0 <SystemClock_Config+0x1f8>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000876:	d1f8      	bne.n	800086a <SystemClock_Config+0x72>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000878:	4b5e      	ldr	r3, [pc, #376]	; (80009f4 <SystemClock_Config+0x1fc>)
 800087a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087c:	4a5d      	ldr	r2, [pc, #372]	; (80009f4 <SystemClock_Config+0x1fc>)
 800087e:	f023 0303 	bic.w	r3, r3, #3
 8000882:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000884:	230a      	movs	r3, #10
 8000886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800088a:	2301      	movs	r3, #1
 800088c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80008a8:	2320      	movs	r3, #32
 80008aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 80008ae:	2381      	movs	r3, #129	; 0x81
 80008b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008c6:	2304      	movs	r3, #4
 80008c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fa1d 	bl	8001d1c <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008e8:	f000 f9c0 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	233f      	movs	r3, #63	; 0x3f
 80008ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800091c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fdd2 	bl	80024cc <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800092e:	f000 f99d 	bl	8000c6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4a30      	ldr	r2, [pc, #192]	; (80009f8 <SystemClock_Config+0x200>)
 8000936:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CEC|RCC_PERIPHCLK_QSPI
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2281      	movs	r2, #129	; 0x81
 8000942:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2202      	movs	r2, #2
 8000948:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2202      	movs	r2, #2
 800094e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2202      	movs	r2, #2
 8000954:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2240      	movs	r2, #64	; 0x40
 800095a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	665a      	str	r2, [r3, #100]	; 0x64
  PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 f96f 	bl	8002ca8 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x1dc>
  {
    Error_Handler();
 80009d0:	f000 f94c 	bl	8000c6c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f001 ff2c 	bl	8002838 <HAL_RCC_MCOConfig>
}
 80009e0:	bf00      	nop
 80009e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58000400 	.word	0x58000400
 80009f0:	58024800 	.word	0x58024800
 80009f4:	58024400 	.word	0x58024400
 80009f8:	0bc93113 	.word	0x0bc93113

080009fc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C4_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C4_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a38:	f000 fd86 	bl	8001548 <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 f913 	bl	8000c6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a4a:	f001 f875 	bl	8001b38 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 f90a 	bl	8000c6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_I2C4_Init+0x74>)
 8000a5c:	f001 f8b7 	bl	8001bce <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 f901 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000002c 	.word	0x2000002c
 8000a74:	58001c00 	.word	0x58001c00
 8000a78:	10707dbc 	.word	0x10707dbc

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a82:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <MX_USART1_UART_Init+0x94>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ac6:	f003 fc0b 	bl	80042e0 <HAL_UART_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ad0:	f000 f8cc 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000ad8:	f005 ff73 	bl	80069c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae2:	f000 f8c3 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000aea:	f005 ffa8 	bl	8006a3e <HAL_UARTEx_SetRxFifoThreshold>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 f8ba 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_USART1_UART_Init+0x90>)
 8000afa:	f005 ff29 	bl	8006950 <HAL_UARTEx_DisableFifoMode>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f000 f8b2 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000078 	.word	0x20000078
 8000b10:	40011000 	.word	0x40011000

08000b14 <UART8_Init>:



static void UART8_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart8.Instance = UART8;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <UART8_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <UART8_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <UART8_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <UART8_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <UART8_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <UART8_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <UART8_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <UART8_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <UART8_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <UART8_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <UART8_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <UART8_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <UART8_Init+0x90>)
 8000b5e:	f003 fbbf 	bl	80042e0 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <UART8_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 f880 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <UART8_Init+0x90>)
 8000b70:	f005 ff27 	bl	80069c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <UART8_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 f877 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <UART8_Init+0x90>)
 8000b82:	f005 ff5c 	bl	8006a3e <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <UART8_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 f86e 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <UART8_Init+0x90>)
 8000b92:	f005 fedd 	bl	8006950 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <UART8_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f866 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000184 	.word	0x20000184
 8000ba8:	40007c00 	.word	0x40007c00

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_GPIO_Init+0xb8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_GPIO_Init+0xbc>)
 8000c58:	f000 fa98 	bl	800118c <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020000 	.word	0x58020000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_MspInit+0x30>)
 8000c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x30>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x30>)
 8000c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	58024400 	.word	0x58024400

08000cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <HAL_I2C_MspInit+0x88>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12e      	bne.n	8000d30 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_I2C_MspInit+0x8c>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0x8c>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_I2C_MspInit+0x8c>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f003 0308 	and.w	r3, r3, #8
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cf0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf6:	2312      	movs	r3, #18
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d02:	2304      	movs	r3, #4
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <HAL_I2C_MspInit+0x90>)
 8000d0e:	f000 fa3d 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_I2C_MspInit+0x8c>)
 8000d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0x8c>)
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_I2C_MspInit+0x8c>)
 8000d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58001c00 	.word	0x58001c00
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020c00 	.word	0x58020c00

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12e      	bne.n	8000dc4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d7c:	f003 0310 	and.w	r3, r3, #16
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000da2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000db4:	2307      	movs	r3, #7
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_UART_MspInit+0x90>)
 8000dc0:	f000 f9e4 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020000 	.word	0x58020000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2c:	f000 f89e 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e3a:	e003      	b.n	8000e44 <LoopCopyDataInit>

08000e3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e42:	3104      	adds	r1, #4

08000e44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e4c:	d3f6      	bcc.n	8000e3c <CopyDataInit>
  ldr  r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e50:	e002      	b.n	8000e58 <LoopFillZerobss>

08000e52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e54:	f842 3b04 	str.w	r3, [r2], #4

08000e58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e5c:	d3f9      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff fbbb 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f005 fe93 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fc55 	bl	8000714 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e70:	08006c38 	.word	0x08006c38
  ldr  r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e78:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000e7c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000e80:	20000214 	.word	0x20000214

08000e84 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC3_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 f94a 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e94:	f001 fd3a 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8000e98:	4601      	mov	r1, r0
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_Init+0x68>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	f003 030f 	and.w	r3, r3, #15
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_Init+0x6c>)
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_Init+0x68>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_Init+0x6c>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_Init+0x70>)
 8000eca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_Init+0x74>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f814 	bl	8000f00 <HAL_InitTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e002      	b.n	8000ee8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee2:	f7ff fecb 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	08006c18 	.word	0x08006c18
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	20000000 	.word	0x20000000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_InitTick+0x60>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e021      	b.n	8000f58 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_InitTick+0x64>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_InitTick+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f921 	bl	8001172 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f8f9 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x68>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000000c 	.word	0x2000000c
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000210 	.word	0x20000210

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000210 	.word	0x20000210

08000fac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetREVID+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0c1b      	lsrs	r3, r3, #16
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	5c001000 	.word	0x5c001000

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <__NVIC_SetPriorityGrouping+0x40>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	05fa0000 	.word	0x05fa0000

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff47 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff5e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff90 	bl	800107c <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5f 	bl	8001028 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffb2 	bl	80010e4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800119a:	4b89      	ldr	r3, [pc, #548]	; (80013c0 <HAL_GPIO_Init+0x234>)
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800119e:	e194      	b.n	80014ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8186 	beq.w	80014c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d00b      	beq.n	80011d8 <HAL_GPIO_Init+0x4c>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011cc:	2b11      	cmp	r3, #17
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b12      	cmp	r3, #18
 80011d6:	d130      	bne.n	800123a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120e:	2201      	movs	r2, #1
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 0201 	and.w	r2, r3, #1
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0xee>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b12      	cmp	r3, #18
 8001278:	d123      	bne.n	80012c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0203 	and.w	r2, r3, #3
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80e0 	beq.w	80014c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_GPIO_Init+0x238>)
 8001306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130a:	4a2e      	ldr	r2, [pc, #184]	; (80013c4 <HAL_GPIO_Init+0x238>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HAL_GPIO_Init+0x238>)
 8001316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <HAL_GPIO_Init+0x23c>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <HAL_GPIO_Init+0x240>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d052      	beq.n	80013f4 <HAL_GPIO_Init+0x268>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <HAL_GPIO_Init+0x244>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d031      	beq.n	80013ba <HAL_GPIO_Init+0x22e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_GPIO_Init+0x248>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d02b      	beq.n	80013b6 <HAL_GPIO_Init+0x22a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <HAL_GPIO_Init+0x24c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <HAL_GPIO_Init+0x250>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_GPIO_Init+0x254>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <HAL_GPIO_Init+0x258>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_GPIO_Init+0x25c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <HAL_GPIO_Init+0x260>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x212>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_GPIO_Init+0x264>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x20e>
 8001396:	2309      	movs	r3, #9
 8001398:	e02d      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 800139a:	230a      	movs	r3, #10
 800139c:	e02b      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 800139e:	2308      	movs	r3, #8
 80013a0:	e029      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e027      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 80013a6:	2306      	movs	r3, #6
 80013a8:	e025      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 80013aa:	2305      	movs	r3, #5
 80013ac:	e023      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 80013ae:	2304      	movs	r3, #4
 80013b0:	e021      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e01f      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e01d      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e01b      	b.n	80013f6 <HAL_GPIO_Init+0x26a>
 80013be:	bf00      	nop
 80013c0:	58000080 	.word	0x58000080
 80013c4:	58024400 	.word	0x58024400
 80013c8:	58000400 	.word	0x58000400
 80013cc:	58020000 	.word	0x58020000
 80013d0:	58020400 	.word	0x58020400
 80013d4:	58020800 	.word	0x58020800
 80013d8:	58020c00 	.word	0x58020c00
 80013dc:	58021000 	.word	0x58021000
 80013e0:	58021400 	.word	0x58021400
 80013e4:	58021800 	.word	0x58021800
 80013e8:	58021c00 	.word	0x58021c00
 80013ec:	58022000 	.word	0x58022000
 80013f0:	58022400 	.word	0x58022400
 80013f4:	2300      	movs	r3, #0
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	f002 0203 	and.w	r2, r2, #3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4093      	lsls	r3, r2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001406:	4938      	ldr	r1, [pc, #224]	; (80014e8 <HAL_GPIO_Init+0x35c>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800148e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	3301      	adds	r3, #1
 80014c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f ae63 	bne.w	80011a0 <HAL_GPIO_Init+0x14>
  }
}
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	58000400 	.word	0x58000400

080014ec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_HSEM_FastTake+0x2c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3320      	adds	r3, #32
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_HSEM_FastTake+0x30>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	e000      	b.n	800150a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	58026400 	.word	0x58026400
 800151c:	80000300 	.word	0x80000300

08001520 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800152a:	4906      	ldr	r1, [pc, #24]	; (8001544 <HAL_HSEM_Release+0x24>)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	58026400 	.word	0x58026400

08001548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e07f      	b.n	800165a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fb9e 	bl	8000cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2224      	movs	r2, #36	; 0x24
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001598:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	e006      	b.n	80015d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d104      	bne.n	80015e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_I2C_Init+0x11c>)
 80015ee:	430b      	orrs	r3, r1
 80015f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	ea42 0103 	orr.w	r1, r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	021a      	lsls	r2, r3, #8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69d9      	ldr	r1, [r3, #28]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	02008000 	.word	0x02008000

08001668 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	460b      	mov	r3, r1
 8001676:	817b      	strh	r3, [r7, #10]
 8001678:	4613      	mov	r3, r2
 800167a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b20      	cmp	r3, #32
 8001686:	f040 80da 	bne.w	800183e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_I2C_Master_Transmit+0x30>
 8001694:	2302      	movs	r3, #2
 8001696:	e0d3      	b.n	8001840 <HAL_I2C_Master_Transmit+0x1d8>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a0:	f7ff fc78 	bl	8000f94 <HAL_GetTick>
 80016a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2319      	movs	r3, #25
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 f8f0 	bl	8001898 <I2C_WaitOnFlagUntilTimeout>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0be      	b.n	8001840 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2221      	movs	r2, #33	; 0x21
 80016c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2210      	movs	r2, #16
 80016ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	893a      	ldrh	r2, [r7, #8]
 80016e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	2bff      	cmp	r3, #255	; 0xff
 80016f2:	d90e      	bls.n	8001712 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	22ff      	movs	r2, #255	; 0xff
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	8979      	ldrh	r1, [r7, #10]
 8001702:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_I2C_Master_Transmit+0x1e0>)
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f9e6 	bl	8001adc <I2C_TransferConfig>
 8001710:	e06c      	b.n	80017ec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	b2da      	uxtb	r2, r3
 8001722:	8979      	ldrh	r1, [r7, #10]
 8001724:	4b48      	ldr	r3, [pc, #288]	; (8001848 <HAL_I2C_Master_Transmit+0x1e0>)
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f9d5 	bl	8001adc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001732:	e05b      	b.n	80017ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	6a39      	ldr	r1, [r7, #32]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f8ed 	bl	8001918 <I2C_WaitOnTXISFlagUntilTimeout>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e07b      	b.n	8001840 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	781a      	ldrb	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	3b01      	subs	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d034      	beq.n	80017ec <HAL_I2C_Master_Transmit+0x184>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001786:	2b00      	cmp	r3, #0
 8001788:	d130      	bne.n	80017ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	2200      	movs	r2, #0
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f87f 	bl	8001898 <I2C_WaitOnFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e04d      	b.n	8001840 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d90e      	bls.n	80017cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	22ff      	movs	r2, #255	; 0xff
 80017b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	8979      	ldrh	r1, [r7, #10]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f989 	bl	8001adc <I2C_TransferConfig>
 80017ca:	e00f      	b.n	80017ec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	8979      	ldrh	r1, [r7, #10]
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f978 	bl	8001adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d19e      	bne.n	8001734 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f8cc 	bl	8001998 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e01a      	b.n	8001840 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2220      	movs	r2, #32
 8001810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_I2C_Master_Transmit+0x1e4>)
 800181e:	400b      	ands	r3, r1
 8001820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2220      	movs	r2, #32
 8001826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800183e:	2302      	movs	r3, #2
  }
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	80002000 	.word	0x80002000
 800184c:	fe00e800 	.word	0xfe00e800

08001850 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b02      	cmp	r3, #2
 8001864:	d103      	bne.n	800186e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d007      	beq.n	800188c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	619a      	str	r2, [r3, #24]
  }
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	4613      	mov	r3, r2
 80018a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018a8:	e022      	b.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d01e      	beq.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b2:	f7ff fb6f 	bl	8000f94 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d302      	bcc.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d113      	bne.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f043 0220 	orr.w	r2, r3, #32
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e00f      	b.n	8001910 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	4013      	ands	r3, r2
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	429a      	cmp	r2, r3
 800190c:	d0cd      	beq.n	80018aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001924:	e02c      	b.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f870 	bl	8001a10 <I2C_IsAcknowledgeFailed>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e02a      	b.n	8001990 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d01e      	beq.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001942:	f7ff fb27 	bl	8000f94 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	429a      	cmp	r2, r3
 8001950:	d302      	bcc.n	8001958 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d113      	bne.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e007      	b.n	8001990 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d1cb      	bne.n	8001926 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a4:	e028      	b.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f830 	bl	8001a10 <I2C_IsAcknowledgeFailed>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e026      	b.n	8001a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ba:	f7ff faeb 	bl	8000f94 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d302      	bcc.n	80019d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d113      	bne.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f043 0220 	orr.w	r2, r3, #32
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e007      	b.n	8001a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d1cf      	bne.n	80019a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d151      	bne.n	8001ace <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a2a:	e022      	b.n	8001a72 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a32:	d01e      	beq.n	8001a72 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a34:	f7ff faae 	bl	8000f94 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d302      	bcc.n	8001a4a <I2C_IsAcknowledgeFailed+0x3a>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d113      	bne.n	8001a72 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f043 0220 	orr.w	r2, r3, #32
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e02e      	b.n	8001ad0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d1d5      	bne.n	8001a2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2210      	movs	r2, #16
 8001a86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f7ff fedd 	bl	8001850 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f043 0204 	orr.w	r2, r3, #4
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	fe00e800 	.word	0xfe00e800

08001adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	817b      	strh	r3, [r7, #10]
 8001aea:	4613      	mov	r3, r2
 8001aec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	0d5b      	lsrs	r3, r3, #21
 8001af8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <I2C_TransferConfig+0x58>)
 8001afe:	430b      	orrs	r3, r1
 8001b00:	43db      	mvns	r3, r3
 8001b02:	ea02 0103 	and.w	r1, r2, r3
 8001b06:	897b      	ldrh	r3, [r7, #10]
 8001b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b0c:	7a7b      	ldrb	r3, [r7, #9]
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	03ff63ff 	.word	0x03ff63ff

08001b38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d138      	bne.n	8001bc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e032      	b.n	8001bc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e000      	b.n	8001bc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bc0:	2302      	movs	r3, #2
  }
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d139      	bne.n	8001c58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e033      	b.n	8001c5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2224      	movs	r2, #36	; 0x24
 8001bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	2b06      	cmp	r3, #6
 8001c7a:	d00a      	beq.n	8001c92 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c7c:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e040      	b.n	8001d10 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e03e      	b.n	8001d10 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001c9a:	491f      	ldr	r1, [pc, #124]	; (8001d18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ca2:	f7ff f977 	bl	8000f94 <HAL_GetTick>
 8001ca6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ca8:	e009      	b.n	8001cbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001caa:	f7ff f973 	bl	8000f94 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb8:	d901      	bls.n	8001cbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e028      	b.n	8001d10 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cca:	d1ee      	bne.n	8001caa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b1e      	cmp	r3, #30
 8001cd0:	d008      	beq.n	8001ce4 <HAL_PWREx_ConfigSupply+0x7c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8001cd6:	d005      	beq.n	8001ce4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b1d      	cmp	r3, #29
 8001cdc:	d002      	beq.n	8001ce4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ce2:	d114      	bne.n	8001d0e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ce4:	f7ff f956 	bl	8000f94 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001cea:	e009      	b.n	8001d00 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cec:	f7ff f952 	bl	8000f94 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cfa:	d901      	bls.n	8001d00 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e007      	b.n	8001d10 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0c:	d1ee      	bne.n	8001cec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	58024800 	.word	0x58024800

08001d1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e3c4      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8087 	beq.w	8001e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3c:	4ba2      	ldr	r3, [pc, #648]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d46:	4ba0      	ldr	r3, [pc, #640]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d007      	beq.n	8001d62 <HAL_RCC_OscConfig+0x46>
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	2b18      	cmp	r3, #24
 8001d56:	d110      	bne.n	8001d7a <HAL_RCC_OscConfig+0x5e>
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d10b      	bne.n	8001d7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d62:	4b99      	ldr	r3, [pc, #612]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d06c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x12c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d168      	bne.n	8001e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e39e      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x76>
 8001d84:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a8f      	ldr	r2, [pc, #572]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e02e      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x98>
 8001d9a:	4b8b      	ldr	r3, [pc, #556]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a8a      	ldr	r2, [pc, #552]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b88      	ldr	r3, [pc, #544]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a87      	ldr	r2, [pc, #540]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xbc>
 8001dbe:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a81      	ldr	r2, [pc, #516]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7e      	ldr	r2, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001dd8:	4b7b      	ldr	r3, [pc, #492]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a7a      	ldr	r2, [pc, #488]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a77      	ldr	r2, [pc, #476]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f8cc 	bl	8000f94 <HAL_GetTick>
 8001dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff f8c8 	bl	8000f94 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e352      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e12:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe4>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff f8b8 	bl	8000f94 <HAL_GetTick>
 8001e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff f8b4 	bl	8000f94 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e33e      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e3a:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x10c>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8092 	beq.w	8001f7c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e58:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e62:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_RCC_OscConfig+0x162>
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	2b18      	cmp	r3, #24
 8001e72:	d12d      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1b4>
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d128      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7e:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x17a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e310      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	f7ff f889 	bl	8000fac <HAL_GetREVID>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d80a      	bhi.n	8001eba <HAL_RCC_OscConfig+0x19e>
 8001ea4:	4b48      	ldr	r3, [pc, #288]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	031b      	lsls	r3, r3, #12
 8001eb2:	4945      	ldr	r1, [pc, #276]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	e060      	b.n	8001f7c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	061b      	lsls	r3, r3, #24
 8001ec8:	493f      	ldr	r1, [pc, #252]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ece:	e055      	b.n	8001f7c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d038      	beq.n	8001f4a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0219 	bic.w	r2, r3, #25
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4938      	ldr	r1, [pc, #224]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f853 	bl	8000f94 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f84f 	bl	8000f94 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e2d9      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f04:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	f7ff f84c 	bl	8000fac <HAL_GetREVID>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f241 0303 	movw	r3, #4099	; 0x1003
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d80a      	bhi.n	8001f34 <HAL_RCC_OscConfig+0x218>
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	031b      	lsls	r3, r3, #12
 8001f2c:	4926      	ldr	r1, [pc, #152]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
 8001f32:	e023      	b.n	8001f7c <HAL_RCC_OscConfig+0x260>
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	4921      	ldr	r1, [pc, #132]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
 8001f48:	e018      	b.n	8001f7c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff f81d 	bl	8000f94 <HAL_GetTick>
 8001f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f819 	bl	8000f94 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e2a3      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f70:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8091 	beq.w	80020ac <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d007      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x294>
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b18      	cmp	r3, #24
 8001fa4:	d12f      	bne.n	8002006 <HAL_RCC_OscConfig+0x2ea>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d12a      	bne.n	8002006 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2b0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d003      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e277      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
 8001fc8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fcc:	f7fe ffee 	bl	8000fac <HAL_GetREVID>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f241 0303 	movw	r3, #4099	; 0x1003
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d80a      	bhi.n	8001ff0 <HAL_RCC_OscConfig+0x2d4>
 8001fda:	4ba2      	ldr	r3, [pc, #648]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	069b      	lsls	r3, r3, #26
 8001fe8:	499e      	ldr	r1, [pc, #632]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fee:	e05d      	b.n	80020ac <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ff0:	4b9c      	ldr	r3, [pc, #624]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	4999      	ldr	r1, [pc, #612]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002004:	e052      	b.n	80020ac <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d035      	beq.n	800207a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800200e:	4b95      	ldr	r3, [pc, #596]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a94      	ldr	r2, [pc, #592]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe ffbb 	bl	8000f94 <HAL_GetTick>
 800201e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002022:	f7fe ffb7 	bl	8000f94 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e241      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002034:	4b8b      	ldr	r3, [pc, #556]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002040:	f7fe ffb4 	bl	8000fac <HAL_GetREVID>
 8002044:	4602      	mov	r2, r0
 8002046:	f241 0303 	movw	r3, #4099	; 0x1003
 800204a:	429a      	cmp	r2, r3
 800204c:	d80a      	bhi.n	8002064 <HAL_RCC_OscConfig+0x348>
 800204e:	4b85      	ldr	r3, [pc, #532]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	4981      	ldr	r1, [pc, #516]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
 8002062:	e023      	b.n	80020ac <HAL_RCC_OscConfig+0x390>
 8002064:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	497c      	ldr	r1, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
 8002078:	e018      	b.n	80020ac <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800207a:	4b7a      	ldr	r3, [pc, #488]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a79      	ldr	r2, [pc, #484]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe ff85 	bl	8000f94 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800208e:	f7fe ff81 	bl	8000f94 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e20b      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020a0:	4b70      	ldr	r3, [pc, #448]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d036      	beq.n	8002126 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d019      	beq.n	80020f4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c0:	4b68      	ldr	r3, [pc, #416]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	4a67      	ldr	r2, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe ff62 	bl	8000f94 <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe ff5e 	bl	8000f94 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1e8      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 80020e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x3b8>
 80020f2:	e018      	b.n	8002126 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f8:	4a5a      	ldr	r2, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7fe ff48 	bl	8000f94 <HAL_GetTick>
 8002104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe ff44 	bl	8000f94 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1ce      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800211a:	4b52      	ldr	r3, [pc, #328]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 800211c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d036      	beq.n	80021a0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d019      	beq.n	800216e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800213a:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a49      	ldr	r2, [pc, #292]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002144:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002146:	f7fe ff25 	bl	8000f94 <HAL_GetTick>
 800214a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800214e:	f7fe ff21 	bl	8000f94 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1ab      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002160:	4b40      	ldr	r3, [pc, #256]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x432>
 800216c:	e018      	b.n	80021a0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002178:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800217a:	f7fe ff0b 	bl	8000f94 <HAL_GetTick>
 800217e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002182:	f7fe ff07 	bl	8000f94 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e191      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002194:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8086 	beq.w	80022ba <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021ae:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <HAL_RCC_OscConfig+0x54c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a2d      	ldr	r2, [pc, #180]	; (8002268 <HAL_RCC_OscConfig+0x54c>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ba:	f7fe feeb 	bl	8000f94 <HAL_GetTick>
 80021be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7fe fee7 	bl	8000f94 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e171      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_OscConfig+0x54c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4da>
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6713      	str	r3, [r2, #112]	; 0x70
 80021f4:	e02d      	b.n	8002252 <HAL_RCC_OscConfig+0x536>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x4fc>
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a18      	ldr	r2, [pc, #96]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a15      	ldr	r2, [pc, #84]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	e01c      	b.n	8002252 <HAL_RCC_OscConfig+0x536>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x51e>
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4a0f      	ldr	r2, [pc, #60]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6713      	str	r3, [r2, #112]	; 0x70
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	; 0x70
 8002238:	e00b      	b.n	8002252 <HAL_RCC_OscConfig+0x536>
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a06      	ldr	r2, [pc, #24]	; (8002264 <HAL_RCC_OscConfig+0x548>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01a      	beq.n	8002290 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225a:	f7fe fe9b 	bl	8000f94 <HAL_GetTick>
 800225e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002260:	e00f      	b.n	8002282 <HAL_RCC_OscConfig+0x566>
 8002262:	bf00      	nop
 8002264:	58024400 	.word	0x58024400
 8002268:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7fe fe92 	bl	8000f94 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e11a      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002282:	4b8f      	ldr	r3, [pc, #572]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ee      	beq.n	800226c <HAL_RCC_OscConfig+0x550>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7fe fe80 	bl	8000f94 <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7fe fe7c 	bl	8000f94 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e104      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ae:	4b84      	ldr	r3, [pc, #528]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ee      	bne.n	8002298 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80f9 	beq.w	80024b6 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022c4:	4b7e      	ldr	r3, [pc, #504]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022cc:	2b18      	cmp	r3, #24
 80022ce:	f000 80b4 	beq.w	800243a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	f040 8095 	bne.w	8002406 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b78      	ldr	r3, [pc, #480]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a77      	ldr	r2, [pc, #476]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fe54 	bl	8000f94 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fe50 	bl	8000f94 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0da      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002302:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002312:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCC_OscConfig+0x7a8>)
 8002314:	4013      	ands	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	430a      	orrs	r2, r1
 8002322:	4967      	ldr	r1, [pc, #412]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	628b      	str	r3, [r1, #40]	; 0x28
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	3b01      	subs	r3, #1
 800232e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	3b01      	subs	r3, #1
 8002338:	025b      	lsls	r3, r3, #9
 800233a:	b29b      	uxth	r3, r3
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	3b01      	subs	r3, #1
 8002344:	041b      	lsls	r3, r3, #16
 8002346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	3b01      	subs	r3, #1
 8002352:	061b      	lsls	r3, r3, #24
 8002354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002358:	4959      	ldr	r1, [pc, #356]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800235e:	4b58      	ldr	r3, [pc, #352]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	4a57      	ldr	r2, [pc, #348]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800236a:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 800236c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236e:	4b56      	ldr	r3, [pc, #344]	; (80024c8 <HAL_RCC_OscConfig+0x7ac>)
 8002370:	4013      	ands	r3, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002376:	00d2      	lsls	r2, r2, #3
 8002378:	4951      	ldr	r1, [pc, #324]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800237e:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f023 020c 	bic.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 800238c:	4313      	orrs	r3, r2
 800238e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002390:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f023 0202 	bic.w	r2, r3, #2
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	4948      	ldr	r1, [pc, #288]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	4a46      	ldr	r2, [pc, #280]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ae:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	4a43      	ldr	r2, [pc, #268]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	4a40      	ldr	r2, [pc, #256]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	4a3d      	ldr	r2, [pc, #244]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7fe fdd9 	bl	8000f94 <HAL_GetTick>
 80023e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e6:	f7fe fdd5 	bl	8000f94 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e05f      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x6ca>
 8002404:	e057      	b.n	80024b6 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2d      	ldr	r2, [pc, #180]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 800240c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fdbf 	bl	8000f94 <HAL_GetTick>
 8002416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fdbb 	bl	8000f94 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e045      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x6fe>
 8002438:	e03d      	b.n	80024b6 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002440:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <HAL_RCC_OscConfig+0x7a4>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2b01      	cmp	r3, #1
 800244c:	d031      	beq.n	80024b2 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0203 	and.w	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d12a      	bne.n	80024b2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d122      	bne.n	80024b2 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d11a      	bne.n	80024b2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	0a5b      	lsrs	r3, r3, #9
 8002480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d111      	bne.n	80024b2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d108      	bne.n	80024b2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0e1b      	lsrs	r3, r3, #24
 80024a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3730      	adds	r7, #48	; 0x30
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	58024400 	.word	0x58024400
 80024c4:	fffffc0c 	.word	0xfffffc0c
 80024c8:	ffff0007 	.word	0xffff0007

080024cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e19c      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b87      	ldr	r3, [pc, #540]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	4985      	ldr	r1, [pc, #532]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b83      	ldr	r3, [pc, #524]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e184      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d010      	beq.n	800253e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	4b7b      	ldr	r3, [pc, #492]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002528:	429a      	cmp	r2, r3
 800252a:	d908      	bls.n	800253e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800252c:	4b78      	ldr	r3, [pc, #480]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	4975      	ldr	r1, [pc, #468]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800253a:	4313      	orrs	r3, r2
 800253c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d010      	beq.n	800256c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	4b70      	ldr	r3, [pc, #448]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002556:	429a      	cmp	r2, r3
 8002558:	d908      	bls.n	800256c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800255a:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	496a      	ldr	r1, [pc, #424]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002568:	4313      	orrs	r3, r2
 800256a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	4b64      	ldr	r3, [pc, #400]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002584:	429a      	cmp	r2, r3
 8002586:	d908      	bls.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002588:	4b61      	ldr	r3, [pc, #388]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	495e      	ldr	r1, [pc, #376]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002596:	4313      	orrs	r3, r2
 8002598:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	4b59      	ldr	r3, [pc, #356]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d908      	bls.n	80025c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80025b6:	4b56      	ldr	r3, [pc, #344]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4953      	ldr	r1, [pc, #332]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d908      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f023 020f 	bic.w	r2, r3, #15
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4947      	ldr	r1, [pc, #284]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d055      	beq.n	80026ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002602:	4b43      	ldr	r3, [pc, #268]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4940      	ldr	r1, [pc, #256]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002610:	4313      	orrs	r3, r2
 8002612:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d107      	bne.n	800262c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800261c:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d121      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0f6      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d107      	bne.n	8002644 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d115      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0ea      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0de      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265c:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0d6      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f023 0207 	bic.w	r2, r3, #7
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4925      	ldr	r1, [pc, #148]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800267a:	4313      	orrs	r3, r2
 800267c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe fc89 	bl	8000f94 <HAL_GetTick>
 8002682:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002684:	e00a      	b.n	800269c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002686:	f7fe fc85 	bl	8000f94 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0be      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d1eb      	bne.n	8002686 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d010      	beq.n	80026dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d208      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f023 020f 	bic.w	r2, r3, #15
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	490e      	ldr	r1, [pc, #56]	; (8002710 <HAL_RCC_ClockConfig+0x244>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d214      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 020f 	bic.w	r2, r3, #15
 80026f2:	4906      	ldr	r1, [pc, #24]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCC_ClockConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e086      	b.n	800281a <HAL_RCC_ClockConfig+0x34e>
 800270c:	52002000 	.word	0x52002000
 8002710:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800272c:	429a      	cmp	r2, r3
 800272e:	d208      	bcs.n	8002742 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002730:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4939      	ldr	r1, [pc, #228]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 800273e:	4313      	orrs	r3, r2
 8002740:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d010      	beq.n	8002770 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800275a:	429a      	cmp	r2, r3
 800275c:	d208      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800275e:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	492e      	ldr	r1, [pc, #184]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 800276c:	4313      	orrs	r3, r2
 800276e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002788:	429a      	cmp	r2, r3
 800278a:	d208      	bcs.n	800279e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4922      	ldr	r1, [pc, #136]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 800279a:	4313      	orrs	r3, r2
 800279c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d010      	beq.n	80027cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d208      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4917      	ldr	r1, [pc, #92]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027cc:	f000 f89e 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80027d0:	4601      	mov	r1, r0
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <HAL_RCC_ClockConfig+0x35c>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa21 f303 	lsr.w	r3, r1, r3
 80027e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RCC_ClockConfig+0x358>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_RCC_ClockConfig+0x35c>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x360>)
 8002802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x364>)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x368>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fb76 	bl	8000f00 <HAL_InitTick>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	58024400 	.word	0x58024400
 8002828:	08006c18 	.word	0x08006c18
 800282c:	20000004 	.word	0x20000004
 8002830:	20000000 	.word	0x20000000
 8002834:	20000008 	.word	0x20000008

08002838 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d12a      	bne.n	80028a0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 800285c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	481f      	ldr	r0, [pc, #124]	; (8002904 <HAL_RCC_MCOConfig+0xcc>)
 8002886:	f7fe fc81 	bl	800118c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	430b      	orrs	r3, r1
 8002898:	4919      	ldr	r1, [pc, #100]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800289e:	e02a      	b.n	80028f6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80028be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4619      	mov	r1, r3
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <HAL_RCC_MCOConfig+0xd0>)
 80028dc:	f7fe fc56 	bl	800118c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	01d9      	lsls	r1, r3, #7
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	430b      	orrs	r3, r1
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_MCOConfig+0xc8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	610b      	str	r3, [r1, #16]
}
 80028f6:	bf00      	nop
 80028f8:	3730      	adds	r7, #48	; 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	58024400 	.word	0x58024400
 8002904:	58020000 	.word	0x58020000
 8002908:	58020800 	.word	0x58020800

0800290c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002912:	4baf      	ldr	r3, [pc, #700]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800291a:	2b18      	cmp	r3, #24
 800291c:	f200 814e 	bhi.w	8002bbc <HAL_RCC_GetSysClockFreq+0x2b0>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	0800298d 	.word	0x0800298d
 800292c:	08002bbd 	.word	0x08002bbd
 8002930:	08002bbd 	.word	0x08002bbd
 8002934:	08002bbd 	.word	0x08002bbd
 8002938:	08002bbd 	.word	0x08002bbd
 800293c:	08002bbd 	.word	0x08002bbd
 8002940:	08002bbd 	.word	0x08002bbd
 8002944:	08002bbd 	.word	0x08002bbd
 8002948:	080029b3 	.word	0x080029b3
 800294c:	08002bbd 	.word	0x08002bbd
 8002950:	08002bbd 	.word	0x08002bbd
 8002954:	08002bbd 	.word	0x08002bbd
 8002958:	08002bbd 	.word	0x08002bbd
 800295c:	08002bbd 	.word	0x08002bbd
 8002960:	08002bbd 	.word	0x08002bbd
 8002964:	08002bbd 	.word	0x08002bbd
 8002968:	080029b9 	.word	0x080029b9
 800296c:	08002bbd 	.word	0x08002bbd
 8002970:	08002bbd 	.word	0x08002bbd
 8002974:	08002bbd 	.word	0x08002bbd
 8002978:	08002bbd 	.word	0x08002bbd
 800297c:	08002bbd 	.word	0x08002bbd
 8002980:	08002bbd 	.word	0x08002bbd
 8002984:	08002bbd 	.word	0x08002bbd
 8002988:	080029bf 	.word	0x080029bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800298c:	4b90      	ldr	r3, [pc, #576]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002998:	4b8d      	ldr	r3, [pc, #564]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	4a8c      	ldr	r2, [pc, #560]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80029aa:	e10a      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029ac:	4b89      	ldr	r3, [pc, #548]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80029ae:	61bb      	str	r3, [r7, #24]
    break;
 80029b0:	e107      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80029b2:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80029b4:	61bb      	str	r3, [r7, #24]
    break;
 80029b6:	e104      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80029ba:	61bb      	str	r3, [r7, #24]
    break;
 80029bc:	e101      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029be:	4b84      	ldr	r3, [pc, #528]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80029c8:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029d4:	4b7e      	ldr	r3, [pc, #504]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029de:	4b7c      	ldr	r3, [pc, #496]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80da 	beq.w	8002bb6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d05a      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0x1b2>
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d302      	bcc.n	8002a12 <HAL_RCC_GetSysClockFreq+0x106>
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d078      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002a10:	e099      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a12:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d02d      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a1e:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	08db      	lsrs	r3, r3, #3
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	4a6a      	ldr	r2, [pc, #424]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	ee07 3a90 	vmov	s15, r3
 8002a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a48:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a58:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a5c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002a78:	e087      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a84:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002be4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aa0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002abc:	e065      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002be8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad0:	4b3f      	ldr	r3, [pc, #252]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ae4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002ae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b00:	e043      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002bec <HAL_RCC_GetSysClockFreq+0x2e0>
 8002b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b14:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1c:	ee07 3a90 	vmov	s15, r3
 8002b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b24:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b28:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b44:	e021      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b50:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002be8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b68:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b6c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b88:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	0a5b      	lsrs	r3, r3, #9
 8002b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b94:	3301      	adds	r3, #1
 8002b96:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bae:	ee17 3a90 	vmov	r3, s15
 8002bb2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002bb4:	e005      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
    break;
 8002bba:	e002      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002bbe:	61bb      	str	r3, [r7, #24]
    break;
 8002bc0:	bf00      	nop
  }

  return sysclockfreq;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3724      	adds	r7, #36	; 0x24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	58024400 	.word	0x58024400
 8002bd4:	03d09000 	.word	0x03d09000
 8002bd8:	003d0900 	.word	0x003d0900
 8002bdc:	017d7840 	.word	0x017d7840
 8002be0:	46000000 	.word	0x46000000
 8002be4:	4c742400 	.word	0x4c742400
 8002be8:	4a742400 	.word	0x4a742400
 8002bec:	4bbebc20 	.word	0x4bbebc20

08002bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bf6:	f7ff fe89 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8002bfa:	4601      	mov	r1, r0
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	58024400 	.word	0x58024400
 8002c44:	08006c18 	.word	0x08006c18
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	20000000 	.word	0x20000000

08002c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c54:	f7ff ffcc 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c58:	4601      	mov	r1, r0
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024400 	.word	0x58024400
 8002c78:	08006c18 	.word	0x08006c18

08002c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c80:	f7ff ffb6 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	58024400 	.word	0x58024400
 8002ca4:	08006c18 	.word	0x08006c18

08002ca8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d03d      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ccc:	d013      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd2:	d802      	bhi.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002cd8:	e01f      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cde:	d013      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ce4:	d01c      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ce6:	e018      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce8:	4baf      	ldr	r3, [pc, #700]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4aae      	ldr	r2, [pc, #696]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002cf4:	e015      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 f98b 	bl	8004018 <RCCEx_PLL2_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d06:	e00c      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 fa34 	bl	800417c <RCCEx_PLL3_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d18:	e003      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d28:	4b9f      	ldr	r3, [pc, #636]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d34:	499c      	ldr	r1, [pc, #624]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	650b      	str	r3, [r1, #80]	; 0x50
 8002d3a:	e001      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d826      	bhi.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d71 	.word	0x08002d71
 8002d60:	08002d7f 	.word	0x08002d7f
 8002d64:	08002d91 	.word	0x08002d91
 8002d68:	08002da9 	.word	0x08002da9
 8002d6c:	08002da9 	.word	0x08002da9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d70:	4b8d      	ldr	r3, [pc, #564]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	4a8c      	ldr	r2, [pc, #560]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d7c:	e015      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 f947 	bl	8004018 <RCCEx_PLL2_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d8e:	e00c      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3324      	adds	r3, #36	; 0x24
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 f9f0 	bl	800417c <RCCEx_PLL3_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002da0:	e003      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
      break;
 8002da6:	e000      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002db0:	4b7d      	ldr	r3, [pc, #500]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db4:	f023 0207 	bic.w	r2, r3, #7
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	497a      	ldr	r1, [pc, #488]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	650b      	str	r3, [r1, #80]	; 0x50
 8002dc2:	e001      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03e      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d01c      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d804      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d00d      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002de8:	e01e      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002dea:	2bc0      	cmp	r3, #192	; 0xc0
 8002dec:	d01f      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df2:	d01e      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002df4:	e018      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df6:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	4a6b      	ldr	r2, [pc, #428]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e02:	e017      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f001 f904 	bl	8004018 <RCCEx_PLL2_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e14:	e00e      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3324      	adds	r3, #36	; 0x24
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f001 f9ad 	bl	800417c <RCCEx_PLL3_Config>
 8002e22:	4603      	mov	r3, r0
 8002e24:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e26:	e005      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e2c:	e002      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	4958      	ldr	r1, [pc, #352]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	650b      	str	r3, [r1, #80]	; 0x50
 8002e4c:	e001      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d044      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e68:	d01f      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6e:	d805      	bhi.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e78:	d00e      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002e7a:	e01f      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002e7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e80:	d01f      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e86:	d01e      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e88:	e018      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e8a:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	4a46      	ldr	r2, [pc, #280]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e96:	e017      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 f8ba 	bl	8004018 <RCCEx_PLL2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002ea8:	e00e      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3324      	adds	r3, #36	; 0x24
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 f963 	bl	800417c <RCCEx_PLL3_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002eba:	e005      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec0:	e002      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002edc:	4932      	ldr	r1, [pc, #200]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d044      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002efe:	d01f      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f04:	d805      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f0e:	d00e      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002f10:	e01f      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002f12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f16:	d01f      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f1c:	d01e      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f1e:	e018      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f2c:	e017      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 f86f 	bl	8004018 <RCCEx_PLL2_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f3e:	e00e      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3324      	adds	r3, #36	; 0x24
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f918 	bl	800417c <RCCEx_PLL3_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f50:	e005      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
      break;
 8002f56:	e002      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f72:	490d      	ldr	r1, [pc, #52]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	658b      	str	r3, [r1, #88]	; 0x58
 8002f78:	e001      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d035      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d00c      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d802      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01b      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002f9a:	e017      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d00c      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002fa0:	2b30      	cmp	r3, #48	; 0x30
 8002fa2:	d018      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002fa4:	e012      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002fa6:	bf00      	nop
 8002fa8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fac:	4bae      	ldr	r3, [pc, #696]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	4aad      	ldr	r2, [pc, #692]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002fb8:	e00e      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 f829 	bl	8004018 <RCCEx_PLL2_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002fca:	e005      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fde:	4ba2      	ldr	r3, [pc, #648]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fea:	499f      	ldr	r1, [pc, #636]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ff0:	e001      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d042      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300a:	d01f      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003010:	d805      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d00e      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800301c:	e01f      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800301e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003022:	d01f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003028:	d01e      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800302a:	e018      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302c:	4b8e      	ldr	r3, [pc, #568]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	4a8d      	ldr	r2, [pc, #564]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003036:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003038:	e017      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f000 ffe9 	bl	8004018 <RCCEx_PLL2_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800304a:	e00e      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3324      	adds	r3, #36	; 0x24
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f001 f892 	bl	800417c <RCCEx_PLL3_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800305c:	e005      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
      break;
 8003062:	e002      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003070:	4b7d      	ldr	r3, [pc, #500]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003074:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	497a      	ldr	r1, [pc, #488]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800307e:	4313      	orrs	r3, r2
 8003080:	650b      	str	r3, [r1, #80]	; 0x50
 8003082:	e001      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d042      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800309c:	d01b      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800309e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030a2:	d805      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d022      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x446>
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80030ae:	e01b      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80030b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030b4:	d01d      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80030b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ba:	d01c      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80030bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030c0:	d01b      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x452>
 80030c2:	e011      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ffa4 	bl	8004018 <RCCEx_PLL2_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80030d4:	e012      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3324      	adds	r3, #36	; 0x24
 80030da:	2101      	movs	r1, #1
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 f84d 	bl	800417c <RCCEx_PLL3_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80030e6:	e009      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	75fb      	strb	r3, [r7, #23]
      break;
 80030ec:	e006      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80030ee:	bf00      	nop
 80030f0:	e004      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80030fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003102:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003106:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800310e:	4956      	ldr	r1, [pc, #344]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003110:	4313      	orrs	r3, r2
 8003112:	650b      	str	r3, [r1, #80]	; 0x50
 8003114:	e001      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d044      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800312c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003130:	d01b      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003136:	d805      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d022      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800313c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003142:	e01b      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d01d      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800314a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314e:	d01c      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003154:	d01b      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003156:	e011      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 ff5a 	bl	8004018 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003168:	e012      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3324      	adds	r3, #36	; 0x24
 800316e:	2101      	movs	r1, #1
 8003170:	4618      	mov	r0, r3
 8003172:	f001 f803 	bl	800417c <RCCEx_PLL3_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800317a:	e009      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	75fb      	strb	r3, [r7, #23]
      break;
 8003180:	e006      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003182:	bf00      	nop
 8003184:	e004      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800318e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003196:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031a4:	4930      	ldr	r1, [pc, #192]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	658b      	str	r3, [r1, #88]	; 0x58
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d022      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00e      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 80031c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c8:	d108      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 ff21 	bl	8004018 <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80031da:	e003      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	75fb      	strb	r3, [r7, #23]
      break;
 80031e0:	e000      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 80031e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80031ea:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	491c      	ldr	r1, [pc, #112]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031fc:	e001      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d030      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003216:	d005      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321c:	d009      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d013      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003222:	e00f      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800322a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003230:	e00c      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f000 feed 	bl	8004018 <RCCEx_PLL2_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003242:	e003      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
      break;
 8003248:	e000      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 800324a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003256:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4902      	ldr	r1, [pc, #8]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	650b      	str	r3, [r1, #80]	; 0x50
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003266:	bf00      	nop
 8003268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d032      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	2b03      	cmp	r3, #3
 8003282:	d81b      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032c3 	.word	0x080032c3
 8003290:	0800329d 	.word	0x0800329d
 8003294:	080032ab 	.word	0x080032ab
 8003298:	080032c3 	.word	0x080032c3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329c:	4bb8      	ldr	r3, [pc, #736]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	4ab7      	ldr	r2, [pc, #732]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80032a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032a8:	e00c      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	2102      	movs	r1, #2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 feb1 	bl	8004018 <RCCEx_PLL2_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032ba:	e003      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
      break;
 80032c0:	e000      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 80032c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032ca:	4bad      	ldr	r3, [pc, #692]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	49aa      	ldr	r1, [pc, #680]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032dc:	e001      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
 80032e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8086 	beq.w	80033fc <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f0:	4ba4      	ldr	r3, [pc, #656]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4aa3      	ldr	r2, [pc, #652]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fc:	f7fd fe4a 	bl	8000f94 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003302:	e009      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7fd fe46 	bl	8000f94 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d902      	bls.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	75fb      	strb	r3, [r7, #23]
        break;
 8003316:	e005      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003318:	4b9a      	ldr	r3, [pc, #616]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ef      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d166      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800332a:	4b95      	ldr	r3, [pc, #596]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800332c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003334:	4053      	eors	r3, r2
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	2b00      	cmp	r3, #0
 800333c:	d013      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800333e:	4b90      	ldr	r3, [pc, #576]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003346:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003348:	4b8d      	ldr	r3, [pc, #564]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a8c      	ldr	r2, [pc, #560]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003354:	4b8a      	ldr	r3, [pc, #552]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4a89      	ldr	r2, [pc, #548]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003360:	4a87      	ldr	r2, [pc, #540]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800336c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003370:	d115      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fd fe0f 	bl	8000f94 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003378:	e00b      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd fe0b 	bl	8000f94 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d902      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	75fb      	strb	r3, [r7, #23]
            break;
 8003390:	e005      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003392:	4b7b      	ldr	r3, [pc, #492]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ed      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d126      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80033b4:	4b72      	ldr	r3, [pc, #456]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033c2:	0919      	lsrs	r1, r3, #4
 80033c4:	4b70      	ldr	r3, [pc, #448]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80033c6:	400b      	ands	r3, r1
 80033c8:	496d      	ldr	r1, [pc, #436]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	610b      	str	r3, [r1, #16]
 80033ce:	e005      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x734>
 80033d0:	4b6b      	ldr	r3, [pc, #428]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	4a6a      	ldr	r2, [pc, #424]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80033d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033da:	6113      	str	r3, [r2, #16]
 80033dc:	4b68      	ldr	r3, [pc, #416]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80033de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ea:	4965      	ldr	r1, [pc, #404]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	670b      	str	r3, [r1, #112]	; 0x70
 80033f0:	e004      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	75bb      	strb	r3, [r7, #22]
 80033f6:	e001      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d07e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340c:	2b28      	cmp	r3, #40	; 0x28
 800340e:	d867      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003410:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	080034e7 	.word	0x080034e7
 800341c:	080034e1 	.word	0x080034e1
 8003420:	080034e1 	.word	0x080034e1
 8003424:	080034e1 	.word	0x080034e1
 8003428:	080034e1 	.word	0x080034e1
 800342c:	080034e1 	.word	0x080034e1
 8003430:	080034e1 	.word	0x080034e1
 8003434:	080034e1 	.word	0x080034e1
 8003438:	080034bd 	.word	0x080034bd
 800343c:	080034e1 	.word	0x080034e1
 8003440:	080034e1 	.word	0x080034e1
 8003444:	080034e1 	.word	0x080034e1
 8003448:	080034e1 	.word	0x080034e1
 800344c:	080034e1 	.word	0x080034e1
 8003450:	080034e1 	.word	0x080034e1
 8003454:	080034e1 	.word	0x080034e1
 8003458:	080034cf 	.word	0x080034cf
 800345c:	080034e1 	.word	0x080034e1
 8003460:	080034e1 	.word	0x080034e1
 8003464:	080034e1 	.word	0x080034e1
 8003468:	080034e1 	.word	0x080034e1
 800346c:	080034e1 	.word	0x080034e1
 8003470:	080034e1 	.word	0x080034e1
 8003474:	080034e1 	.word	0x080034e1
 8003478:	080034e7 	.word	0x080034e7
 800347c:	080034e1 	.word	0x080034e1
 8003480:	080034e1 	.word	0x080034e1
 8003484:	080034e1 	.word	0x080034e1
 8003488:	080034e1 	.word	0x080034e1
 800348c:	080034e1 	.word	0x080034e1
 8003490:	080034e1 	.word	0x080034e1
 8003494:	080034e1 	.word	0x080034e1
 8003498:	080034e7 	.word	0x080034e7
 800349c:	080034e1 	.word	0x080034e1
 80034a0:	080034e1 	.word	0x080034e1
 80034a4:	080034e1 	.word	0x080034e1
 80034a8:	080034e1 	.word	0x080034e1
 80034ac:	080034e1 	.word	0x080034e1
 80034b0:	080034e1 	.word	0x080034e1
 80034b4:	080034e1 	.word	0x080034e1
 80034b8:	080034e7 	.word	0x080034e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fda8 	bl	8004018 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80034cc:	e00c      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3324      	adds	r3, #36	; 0x24
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fe51 	bl	800417c <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80034de:	e003      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
      break;
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 80034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034fa:	4921      	ldr	r1, [pc, #132]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003500:	e001      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d03e      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003516:	2b05      	cmp	r3, #5
 8003518:	d820      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <HAL_RCCEx_PeriphCLKConfig+0x878>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003563 	.word	0x08003563
 8003524:	08003539 	.word	0x08003539
 8003528:	0800354b 	.word	0x0800354b
 800352c:	08003563 	.word	0x08003563
 8003530:	08003563 	.word	0x08003563
 8003534:	08003563 	.word	0x08003563
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	2101      	movs	r1, #1
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fd6a 	bl	8004018 <RCCEx_PLL2_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003548:	e00c      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3324      	adds	r3, #36	; 0x24
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fe13 	bl	800417c <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800355a:	e003      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	75fb      	strb	r3, [r7, #23]
      break;
 8003560:	e000      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 8003562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d110      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f023 0207 	bic.w	r2, r3, #7
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003576:	4902      	ldr	r1, [pc, #8]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003578:	4313      	orrs	r3, r2
 800357a:	654b      	str	r3, [r1, #84]	; 0x54
 800357c:	e008      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 800357e:	bf00      	nop
 8003580:	58024400 	.word	0x58024400
 8003584:	58024800 	.word	0x58024800
 8003588:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d039      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d820      	bhi.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x940>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_RCCEx_PeriphCLKConfig+0x904>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035ef 	.word	0x080035ef
 80035b0:	080035c5 	.word	0x080035c5
 80035b4:	080035d7 	.word	0x080035d7
 80035b8:	080035ef 	.word	0x080035ef
 80035bc:	080035ef 	.word	0x080035ef
 80035c0:	080035ef 	.word	0x080035ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	2101      	movs	r1, #1
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fd24 	bl	8004018 <RCCEx_PLL2_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80035d4:	e00c      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3324      	adds	r3, #36	; 0x24
 80035da:	2101      	movs	r1, #1
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fdcd 	bl	800417c <RCCEx_PLL3_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80035e6:	e003      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	75fb      	strb	r3, [r7, #23]
      break;
 80035ec:	e000      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 80035ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035f6:	4bb2      	ldr	r3, [pc, #712]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	f023 0207 	bic.w	r2, r3, #7
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003604:	49ae      	ldr	r1, [pc, #696]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003606:	4313      	orrs	r3, r2
 8003608:	658b      	str	r3, [r1, #88]	; 0x58
 800360a:	e001      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d044      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003626:	d01b      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8003628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362c:	d805      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x992>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d022      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003638:	e01b      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d01d      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003644:	d01c      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8003646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800364a:	d01b      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800364c:	e011      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fcdf 	bl	8004018 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800365e:	e012      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	2102      	movs	r1, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fd88 	bl	800417c <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003670:	e009      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
      break;
 8003676:	e006      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003678:	bf00      	nop
 800367a:	e004      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 800367c:	bf00      	nop
 800367e:	e002      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800368c:	4b8c      	ldr	r3, [pc, #560]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	4989      	ldr	r1, [pc, #548]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800369c:	4313      	orrs	r3, r2
 800369e:	654b      	str	r3, [r1, #84]	; 0x54
 80036a0:	e001      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d044      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036bc:	d01b      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 80036be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c2:	d805      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d022      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80036ce:	e01b      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	d01d      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80036d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80036da:	d01c      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 80036dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036e0:	d01b      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xa72>
 80036e2:	e011      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fc94 	bl	8004018 <RCCEx_PLL2_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80036f4:	e012      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3324      	adds	r3, #36	; 0x24
 80036fa:	2102      	movs	r1, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fd3d 	bl	800417c <RCCEx_PLL3_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003706:	e009      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	75fb      	strb	r3, [r7, #23]
      break;
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 800370e:	bf00      	nop
 8003710:	e004      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 800371a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003722:	4b67      	ldr	r3, [pc, #412]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003730:	4963      	ldr	r1, [pc, #396]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003732:	4313      	orrs	r3, r2
 8003734:	658b      	str	r3, [r1, #88]	; 0x58
 8003736:	e001      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	d044      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800374e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003752:	d01b      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003758:	d805      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d022      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003764:	e01b      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376a:	d01d      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800376c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003770:	d01c      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8003772:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003776:	d01b      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8003778:	e011      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fc49 	bl	8004018 <RCCEx_PLL2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800378a:	e012      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3324      	adds	r3, #36	; 0x24
 8003790:	2102      	movs	r1, #2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fcf2 	bl	800417c <RCCEx_PLL3_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800379c:	e009      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
      break;
 80037a2:	e006      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 80037a4:	bf00      	nop
 80037a6:	e004      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 80037a8:	bf00      	nop
 80037aa:	e002      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 80037b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037b8:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037c6:	493e      	ldr	r1, [pc, #248]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	658b      	str	r3, [r1, #88]	; 0x58
 80037cc:	e001      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e8:	d10a      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3324      	adds	r3, #36	; 0x24
 80037ee:	2102      	movs	r1, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fcc3 	bl	800417c <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003800:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380e:	492c      	ldr	r1, [pc, #176]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003810:	4313      	orrs	r3, r2
 8003812:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382a:	d10a      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3324      	adds	r3, #36	; 0x24
 8003830:	2102      	movs	r1, #2
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fca2 	bl	800417c <RCCEx_PLL3_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003850:	491b      	ldr	r1, [pc, #108]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003852:	4313      	orrs	r3, r2
 8003854:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d032      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d00d      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800386e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003872:	d016      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fbca 	bl	8004018 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003888:	e00c      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3324      	adds	r3, #36	; 0x24
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fc73 	bl	800417c <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800389a:	e003      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	75fb      	strb	r3, [r7, #23]
      break;
 80038a0:	e000      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 80038a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038b8:	4901      	ldr	r1, [pc, #4]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	658b      	str	r3, [r1, #88]	; 0x58
 80038be:	e003      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80038c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02f      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038de:	d00c      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80038e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038e4:	d015      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 80038e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ea:	d10f      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4b72      	ldr	r3, [pc, #456]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a71      	ldr	r2, [pc, #452]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80038f8:	e00c      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3324      	adds	r3, #36	; 0x24
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fc3b 	bl	800417c <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800390a:	e003      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	75fb      	strb	r3, [r7, #23]
      break;
 8003910:	e000      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 8003912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800391a:	4b67      	ldr	r3, [pc, #412]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	4963      	ldr	r1, [pc, #396]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800392a:	4313      	orrs	r3, r2
 800392c:	654b      	str	r3, [r1, #84]	; 0x54
 800392e:	e001      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d029      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d007      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 800394e:	e00f      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003950:	4b59      	ldr	r3, [pc, #356]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a58      	ldr	r2, [pc, #352]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800395c:	e00b      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	2102      	movs	r1, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fb57 	bl	8004018 <RCCEx_PLL2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800396e:	e002      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
      break;
 8003974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800397c:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800397e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003980:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	494b      	ldr	r1, [pc, #300]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800398a:	4313      	orrs	r3, r2
 800398c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800398e:	e001      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3324      	adds	r3, #36	; 0x24
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fbe8 	bl	800417c <RCCEx_PLL3_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d031      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039cc:	d00c      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 80039ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d2:	d802      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xd32>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d011      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd54>
 80039d8:	e00d      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80039da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039de:	d00f      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80039e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e4:	d00e      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80039e6:	e006      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e8:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80039ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80039f4:	e007      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
      break;
 80039fa:	e004      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 80039fc:	bf00      	nop
 80039fe:	e002      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003a00:	bf00      	nop
 8003a02:	e000      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a1a:	4927      	ldr	r1, [pc, #156]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	654b      	str	r3, [r1, #84]	; 0x54
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	491e      	ldr	r1, [pc, #120]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	4916      	ldr	r1, [pc, #88]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a78:	6113      	str	r3, [r2, #16]
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da08      	bge.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	4906      	ldr	r1, [pc, #24]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003aa4:	7dbb      	ldrb	r3, [r7, #22]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  }
  return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	58024400 	.word	0x58024400

08003abc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ac0:	f7ff f896 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8003ac4:	4601      	mov	r1, r0
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	58024400 	.word	0x58024400
 8003ae4:	08006c18 	.word	0x08006c18

08003ae8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003af0:	4b9d      	ldr	r3, [pc, #628]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003afa:	4b9b      	ldr	r3, [pc, #620]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	0b1b      	lsrs	r3, r3, #12
 8003b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b06:	4b98      	ldr	r3, [pc, #608]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003b12:	4b95      	ldr	r3, [pc, #596]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	08db      	lsrs	r3, r3, #3
 8003b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 810a 	beq.w	8003d4a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d05a      	beq.n	8003bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d302      	bcc.n	8003b46 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d078      	beq.n	8003c36 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003b44:	e099      	b.n	8003c7a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b46:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02d      	beq.n	8003bae <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b52:	4b85      	ldr	r3, [pc, #532]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	4a83      	ldr	r2, [pc, #524]	; (8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7c:	4b7a      	ldr	r3, [pc, #488]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b90:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003bac:	e087      	b.n	8003cbe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003d74 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc0:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc8:	ee07 3a90 	vmov	s15, r3
 8003bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bf0:	e065      	b.n	8003cbe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	ee07 3a90 	vmov	s15, r3
 8003bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c04:	4b58      	ldr	r3, [pc, #352]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c18:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c34:	e043      	b.n	8003cbe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	ee07 3a90 	vmov	s15, r3
 8003c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c40:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c48:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c78:	e021      	b.n	8003cbe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c84:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ca0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cbc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003cbe:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	0a5b      	lsrs	r3, r3, #9
 8003cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc8:	ee07 3a90 	vmov	s15, r3
 8003ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce4:	ee17 2a90 	vmov	r2, s15
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d12:	ee17 2a90 	vmov	r2, s15
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	0e1b      	lsrs	r3, r3, #24
 8003d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d40:	ee17 2a90 	vmov	r2, s15
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d48:	e008      	b.n	8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	3724      	adds	r7, #36	; 0x24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	03d09000 	.word	0x03d09000
 8003d70:	46000000 	.word	0x46000000
 8003d74:	4c742400 	.word	0x4c742400
 8003d78:	4a742400 	.word	0x4a742400
 8003d7c:	4bbebc20 	.word	0x4bbebc20

08003d80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d88:	4b9d      	ldr	r3, [pc, #628]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003d92:	4b9b      	ldr	r3, [pc, #620]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	0d1b      	lsrs	r3, r3, #20
 8003d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d9e:	4b98      	ldr	r3, [pc, #608]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003daa:	4b95      	ldr	r3, [pc, #596]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	08db      	lsrs	r3, r3, #3
 8003db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 810a 	beq.w	8003fe2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d05a      	beq.n	8003e8a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d302      	bcc.n	8003dde <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d078      	beq.n	8003ece <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003ddc:	e099      	b.n	8003f12 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dde:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02d      	beq.n	8003e46 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dea:	4b85      	ldr	r3, [pc, #532]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	08db      	lsrs	r3, r3, #3
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	4a83      	ldr	r2, [pc, #524]	; (8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	ee07 3a90 	vmov	s15, r3
 8003e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e14:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e28:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e40:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e44:	e087      	b.n	8003f56 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e50:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800400c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e58:	4b69      	ldr	r3, [pc, #420]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e68:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e6c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e88:	e065      	b.n	8003f56 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e94:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eac:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eb0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ecc:	e043      	b.n	8003f56 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee0:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef0:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ef4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f10:	e021      	b.n	8003f56 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f24:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f38:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f54:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003f56:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	0a5b      	lsrs	r3, r3, #9
 8003f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7c:	ee17 2a90 	vmov	r2, s15
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003faa:	ee17 2a90 	vmov	r2, s15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	0e1b      	lsrs	r3, r3, #24
 8003fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fbc:	ee07 3a90 	vmov	s15, r3
 8003fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd8:	ee17 2a90 	vmov	r2, s15
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	3724      	adds	r7, #36	; 0x24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	58024400 	.word	0x58024400
 8004004:	03d09000 	.word	0x03d09000
 8004008:	46000000 	.word	0x46000000
 800400c:	4c742400 	.word	0x4c742400
 8004010:	4a742400 	.word	0x4a742400
 8004014:	4bbebc20 	.word	0x4bbebc20

08004018 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b03      	cmp	r3, #3
 8004030:	d101      	bne.n	8004036 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e099      	b.n	800416a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004036:	4b4f      	ldr	r3, [pc, #316]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a4e      	ldr	r2, [pc, #312]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800403c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fc ffa7 	bl	8000f94 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004048:	e008      	b.n	800405c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800404a:	f7fc ffa3 	bl	8000f94 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e086      	b.n	800416a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800405c:	4b45      	ldr	r3, [pc, #276]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004068:	4b42      	ldr	r3, [pc, #264]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	493f      	ldr	r1, [pc, #252]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	628b      	str	r3, [r1, #40]	; 0x28
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	3b01      	subs	r3, #1
 8004082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	3b01      	subs	r3, #1
 800408c:	025b      	lsls	r3, r3, #9
 800408e:	b29b      	uxth	r3, r3
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	3b01      	subs	r3, #1
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040ac:	4931      	ldr	r1, [pc, #196]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	492d      	ldr	r1, [pc, #180]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	f023 0220 	bic.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4928      	ldr	r1, [pc, #160]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	4a26      	ldr	r2, [pc, #152]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040dc:	f023 0310 	bic.w	r3, r3, #16
 80040e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <RCCEx_PLL2_Config+0x160>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	69d2      	ldr	r2, [r2, #28]
 80040ee:	00d2      	lsls	r2, r2, #3
 80040f0:	4920      	ldr	r1, [pc, #128]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040f6:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 80040fc:	f043 0310 	orr.w	r3, r3, #16
 8004100:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	4a19      	ldr	r2, [pc, #100]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800410e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004112:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004114:	e00f      	b.n	8004136 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 8004122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004126:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004128:	e005      	b.n	8004136 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 8004130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004134:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800413c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004142:	f7fc ff27 	bl	8000f94 <HAL_GetTick>
 8004146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004148:	e008      	b.n	800415c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800414a:	f7fc ff23 	bl	8000f94 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e006      	b.n	800416a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <RCCEx_PLL2_Config+0x15c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	58024400 	.word	0x58024400
 8004178:	ffff0007 	.word	0xffff0007

0800417c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800418a:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b03      	cmp	r3, #3
 8004194:	d101      	bne.n	800419a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e099      	b.n	80042ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800419a:	4b4f      	ldr	r3, [pc, #316]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4e      	ldr	r2, [pc, #312]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fc fef5 	bl	8000f94 <HAL_GetTick>
 80041aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80041ae:	f7fc fef1 	bl	8000f94 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e086      	b.n	80042ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041c0:	4b45      	ldr	r3, [pc, #276]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041cc:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	051b      	lsls	r3, r3, #20
 80041da:	493f      	ldr	r1, [pc, #252]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	628b      	str	r3, [r1, #40]	; 0x28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	025b      	lsls	r3, r3, #9
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	3b01      	subs	r3, #1
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004210:	4931      	ldr	r1, [pc, #196]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004212:	4313      	orrs	r3, r2
 8004214:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004216:	4b30      	ldr	r3, [pc, #192]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	492d      	ldr	r1, [pc, #180]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004224:	4313      	orrs	r3, r2
 8004226:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004228:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	4928      	ldr	r1, [pc, #160]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004236:	4313      	orrs	r3, r2
 8004238:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800423a:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <RCCEx_PLL3_Config+0x160>)
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	69d2      	ldr	r2, [r2, #28]
 8004252:	00d2      	lsls	r2, r2, #3
 8004254:	4920      	ldr	r1, [pc, #128]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004256:	4313      	orrs	r3, r2
 8004258:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004272:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004276:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004278:	e00f      	b.n	800429a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d106      	bne.n	800428e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004280:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800428a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800428c:	e005      	b.n	800429a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 8004294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004298:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a0e      	ldr	r2, [pc, #56]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a6:	f7fc fe75 	bl	8000f94 <HAL_GetTick>
 80042aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042ac:	e008      	b.n	80042c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80042ae:	f7fc fe71 	bl	8000f94 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e006      	b.n	80042ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <RCCEx_PLL3_Config+0x15c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	58024400 	.word	0x58024400
 80042dc:	ffff0007 	.word	0xffff0007

080042e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e042      	b.n	8004378 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7fc fd1d 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2224      	movs	r2, #36	; 0x24
 800430e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f82c 	bl	8004380 <UART_SetConfig>
 8004328:	4603      	mov	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e022      	b.n	8004378 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f002 f99e 	bl	800667c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800434e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800435e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f002 fa25 	bl	80067c0 <UART_CheckIdleState>
 8004376:	4603      	mov	r3, r0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004384:	b090      	sub	sp, #64	; 0x40
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800438a:	2300      	movs	r3, #0
 800438c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004394:	2300      	movs	r3, #0
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043b6:	4313      	orrs	r3, r2
 80043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4bc1      	ldr	r3, [pc, #772]	; (80046c8 <UART_SetConfig+0x348>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4ab7      	ldr	r2, [pc, #732]	; (80046cc <UART_SetConfig+0x34c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043fa:	4313      	orrs	r3, r2
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	4bb2      	ldr	r3, [pc, #712]	; (80046d0 <UART_SetConfig+0x350>)
 8004406:	4013      	ands	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800440e:	430b      	orrs	r3, r1
 8004410:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f023 010f 	bic.w	r1, r3, #15
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4aa9      	ldr	r2, [pc, #676]	; (80046d4 <UART_SetConfig+0x354>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d177      	bne.n	8004522 <UART_SetConfig+0x1a2>
 8004432:	4ba9      	ldr	r3, [pc, #676]	; (80046d8 <UART_SetConfig+0x358>)
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800443a:	2b28      	cmp	r3, #40	; 0x28
 800443c:	d86c      	bhi.n	8004518 <UART_SetConfig+0x198>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0xc4>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	080044e9 	.word	0x080044e9
 8004448:	08004519 	.word	0x08004519
 800444c:	08004519 	.word	0x08004519
 8004450:	08004519 	.word	0x08004519
 8004454:	08004519 	.word	0x08004519
 8004458:	08004519 	.word	0x08004519
 800445c:	08004519 	.word	0x08004519
 8004460:	08004519 	.word	0x08004519
 8004464:	080044f1 	.word	0x080044f1
 8004468:	08004519 	.word	0x08004519
 800446c:	08004519 	.word	0x08004519
 8004470:	08004519 	.word	0x08004519
 8004474:	08004519 	.word	0x08004519
 8004478:	08004519 	.word	0x08004519
 800447c:	08004519 	.word	0x08004519
 8004480:	08004519 	.word	0x08004519
 8004484:	080044f9 	.word	0x080044f9
 8004488:	08004519 	.word	0x08004519
 800448c:	08004519 	.word	0x08004519
 8004490:	08004519 	.word	0x08004519
 8004494:	08004519 	.word	0x08004519
 8004498:	08004519 	.word	0x08004519
 800449c:	08004519 	.word	0x08004519
 80044a0:	08004519 	.word	0x08004519
 80044a4:	08004501 	.word	0x08004501
 80044a8:	08004519 	.word	0x08004519
 80044ac:	08004519 	.word	0x08004519
 80044b0:	08004519 	.word	0x08004519
 80044b4:	08004519 	.word	0x08004519
 80044b8:	08004519 	.word	0x08004519
 80044bc:	08004519 	.word	0x08004519
 80044c0:	08004519 	.word	0x08004519
 80044c4:	08004509 	.word	0x08004509
 80044c8:	08004519 	.word	0x08004519
 80044cc:	08004519 	.word	0x08004519
 80044d0:	08004519 	.word	0x08004519
 80044d4:	08004519 	.word	0x08004519
 80044d8:	08004519 	.word	0x08004519
 80044dc:	08004519 	.word	0x08004519
 80044e0:	08004519 	.word	0x08004519
 80044e4:	08004511 	.word	0x08004511
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ee:	e233      	b.n	8004958 <UART_SetConfig+0x5d8>
 80044f0:	2304      	movs	r3, #4
 80044f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044f6:	e22f      	b.n	8004958 <UART_SetConfig+0x5d8>
 80044f8:	2308      	movs	r3, #8
 80044fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044fe:	e22b      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004500:	2310      	movs	r3, #16
 8004502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004506:	e227      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004508:	2320      	movs	r3, #32
 800450a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800450e:	e223      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004510:	2340      	movs	r3, #64	; 0x40
 8004512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004516:	e21f      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800451e:	bf00      	nop
 8004520:	e21a      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6d      	ldr	r2, [pc, #436]	; (80046dc <UART_SetConfig+0x35c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d132      	bne.n	8004592 <UART_SetConfig+0x212>
 800452c:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <UART_SetConfig+0x358>)
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	2b05      	cmp	r3, #5
 8004536:	d827      	bhi.n	8004588 <UART_SetConfig+0x208>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0x1c0>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004559 	.word	0x08004559
 8004544:	08004561 	.word	0x08004561
 8004548:	08004569 	.word	0x08004569
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	2300      	movs	r3, #0
 800455a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800455e:	e1fb      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004566:	e1f7      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800456e:	e1f3      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004576:	e1ef      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004578:	2320      	movs	r3, #32
 800457a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800457e:	e1eb      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004586:	e1e7      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800458e:	bf00      	nop
 8004590:	e1e2      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <UART_SetConfig+0x360>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d132      	bne.n	8004602 <UART_SetConfig+0x282>
 800459c:	4b4e      	ldr	r3, [pc, #312]	; (80046d8 <UART_SetConfig+0x358>)
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d827      	bhi.n	80045f8 <UART_SetConfig+0x278>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x230>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045c9 	.word	0x080045c9
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	080045d9 	.word	0x080045d9
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045ce:	e1c3      	b.n	8004958 <UART_SetConfig+0x5d8>
 80045d0:	2304      	movs	r3, #4
 80045d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045d6:	e1bf      	b.n	8004958 <UART_SetConfig+0x5d8>
 80045d8:	2308      	movs	r3, #8
 80045da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045de:	e1bb      	b.n	8004958 <UART_SetConfig+0x5d8>
 80045e0:	2310      	movs	r3, #16
 80045e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045e6:	e1b7      	b.n	8004958 <UART_SetConfig+0x5d8>
 80045e8:	2320      	movs	r3, #32
 80045ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045ee:	e1b3      	b.n	8004958 <UART_SetConfig+0x5d8>
 80045f0:	2340      	movs	r3, #64	; 0x40
 80045f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045f6:	e1af      	b.n	8004958 <UART_SetConfig+0x5d8>
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045fe:	bf00      	nop
 8004600:	e1aa      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <UART_SetConfig+0x364>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d132      	bne.n	8004672 <UART_SetConfig+0x2f2>
 800460c:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <UART_SetConfig+0x358>)
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	2b05      	cmp	r3, #5
 8004616:	d827      	bhi.n	8004668 <UART_SetConfig+0x2e8>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x2a0>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004639 	.word	0x08004639
 8004624:	08004641 	.word	0x08004641
 8004628:	08004649 	.word	0x08004649
 800462c:	08004651 	.word	0x08004651
 8004630:	08004659 	.word	0x08004659
 8004634:	08004661 	.word	0x08004661
 8004638:	2300      	movs	r3, #0
 800463a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800463e:	e18b      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004646:	e187      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800464e:	e183      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004656:	e17f      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004658:	2320      	movs	r3, #32
 800465a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800465e:	e17b      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004660:	2340      	movs	r3, #64	; 0x40
 8004662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004666:	e177      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800466e:	bf00      	nop
 8004670:	e172      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <UART_SetConfig+0x368>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d144      	bne.n	8004706 <UART_SetConfig+0x386>
 800467c:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <UART_SetConfig+0x358>)
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	2b05      	cmp	r3, #5
 8004686:	d839      	bhi.n	80046fc <UART_SetConfig+0x37c>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x310>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046a9 	.word	0x080046a9
 8004694:	080046b1 	.word	0x080046b1
 8004698:	080046b9 	.word	0x080046b9
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	080046ed 	.word	0x080046ed
 80046a4:	080046f5 	.word	0x080046f5
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046ae:	e153      	b.n	8004958 <UART_SetConfig+0x5d8>
 80046b0:	2304      	movs	r3, #4
 80046b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046b6:	e14f      	b.n	8004958 <UART_SetConfig+0x5d8>
 80046b8:	2308      	movs	r3, #8
 80046ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046be:	e14b      	b.n	8004958 <UART_SetConfig+0x5d8>
 80046c0:	2310      	movs	r3, #16
 80046c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046c6:	e147      	b.n	8004958 <UART_SetConfig+0x5d8>
 80046c8:	cfff69f3 	.word	0xcfff69f3
 80046cc:	58000c00 	.word	0x58000c00
 80046d0:	11fff4ff 	.word	0x11fff4ff
 80046d4:	40011000 	.word	0x40011000
 80046d8:	58024400 	.word	0x58024400
 80046dc:	40004400 	.word	0x40004400
 80046e0:	40004800 	.word	0x40004800
 80046e4:	40004c00 	.word	0x40004c00
 80046e8:	40005000 	.word	0x40005000
 80046ec:	2320      	movs	r3, #32
 80046ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046f2:	e131      	b.n	8004958 <UART_SetConfig+0x5d8>
 80046f4:	2340      	movs	r3, #64	; 0x40
 80046f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046fa:	e12d      	b.n	8004958 <UART_SetConfig+0x5d8>
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004702:	bf00      	nop
 8004704:	e128      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4ac3      	ldr	r2, [pc, #780]	; (8004a18 <UART_SetConfig+0x698>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d178      	bne.n	8004802 <UART_SetConfig+0x482>
 8004710:	4bc2      	ldr	r3, [pc, #776]	; (8004a1c <UART_SetConfig+0x69c>)
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004718:	2b28      	cmp	r3, #40	; 0x28
 800471a:	d86d      	bhi.n	80047f8 <UART_SetConfig+0x478>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x3a4>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	080047c9 	.word	0x080047c9
 8004728:	080047f9 	.word	0x080047f9
 800472c:	080047f9 	.word	0x080047f9
 8004730:	080047f9 	.word	0x080047f9
 8004734:	080047f9 	.word	0x080047f9
 8004738:	080047f9 	.word	0x080047f9
 800473c:	080047f9 	.word	0x080047f9
 8004740:	080047f9 	.word	0x080047f9
 8004744:	080047d1 	.word	0x080047d1
 8004748:	080047f9 	.word	0x080047f9
 800474c:	080047f9 	.word	0x080047f9
 8004750:	080047f9 	.word	0x080047f9
 8004754:	080047f9 	.word	0x080047f9
 8004758:	080047f9 	.word	0x080047f9
 800475c:	080047f9 	.word	0x080047f9
 8004760:	080047f9 	.word	0x080047f9
 8004764:	080047d9 	.word	0x080047d9
 8004768:	080047f9 	.word	0x080047f9
 800476c:	080047f9 	.word	0x080047f9
 8004770:	080047f9 	.word	0x080047f9
 8004774:	080047f9 	.word	0x080047f9
 8004778:	080047f9 	.word	0x080047f9
 800477c:	080047f9 	.word	0x080047f9
 8004780:	080047f9 	.word	0x080047f9
 8004784:	080047e1 	.word	0x080047e1
 8004788:	080047f9 	.word	0x080047f9
 800478c:	080047f9 	.word	0x080047f9
 8004790:	080047f9 	.word	0x080047f9
 8004794:	080047f9 	.word	0x080047f9
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047f9 	.word	0x080047f9
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047e9 	.word	0x080047e9
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047f9 	.word	0x080047f9
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047f9 	.word	0x080047f9
 80047b8:	080047f9 	.word	0x080047f9
 80047bc:	080047f9 	.word	0x080047f9
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047ce:	e0c3      	b.n	8004958 <UART_SetConfig+0x5d8>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047d6:	e0bf      	b.n	8004958 <UART_SetConfig+0x5d8>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047de:	e0bb      	b.n	8004958 <UART_SetConfig+0x5d8>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047e6:	e0b7      	b.n	8004958 <UART_SetConfig+0x5d8>
 80047e8:	2320      	movs	r3, #32
 80047ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047ee:	e0b3      	b.n	8004958 <UART_SetConfig+0x5d8>
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047f6:	e0af      	b.n	8004958 <UART_SetConfig+0x5d8>
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047fe:	bf00      	nop
 8004800:	e0aa      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a86      	ldr	r2, [pc, #536]	; (8004a20 <UART_SetConfig+0x6a0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d132      	bne.n	8004872 <UART_SetConfig+0x4f2>
 800480c:	4b83      	ldr	r3, [pc, #524]	; (8004a1c <UART_SetConfig+0x69c>)
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	2b05      	cmp	r3, #5
 8004816:	d827      	bhi.n	8004868 <UART_SetConfig+0x4e8>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x4a0>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004839 	.word	0x08004839
 8004824:	08004841 	.word	0x08004841
 8004828:	08004849 	.word	0x08004849
 800482c:	08004851 	.word	0x08004851
 8004830:	08004859 	.word	0x08004859
 8004834:	08004861 	.word	0x08004861
 8004838:	2300      	movs	r3, #0
 800483a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800483e:	e08b      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004840:	2304      	movs	r3, #4
 8004842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004846:	e087      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004848:	2308      	movs	r3, #8
 800484a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800484e:	e083      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004850:	2310      	movs	r3, #16
 8004852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004856:	e07f      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004858:	2320      	movs	r3, #32
 800485a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800485e:	e07b      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004860:	2340      	movs	r3, #64	; 0x40
 8004862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004866:	e077      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800486e:	bf00      	nop
 8004870:	e072      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a6b      	ldr	r2, [pc, #428]	; (8004a24 <UART_SetConfig+0x6a4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d132      	bne.n	80048e2 <UART_SetConfig+0x562>
 800487c:	4b67      	ldr	r3, [pc, #412]	; (8004a1c <UART_SetConfig+0x69c>)
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	2b05      	cmp	r3, #5
 8004886:	d827      	bhi.n	80048d8 <UART_SetConfig+0x558>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x510>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048a9 	.word	0x080048a9
 8004894:	080048b1 	.word	0x080048b1
 8004898:	080048b9 	.word	0x080048b9
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048ae:	e053      	b.n	8004958 <UART_SetConfig+0x5d8>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048b6:	e04f      	b.n	8004958 <UART_SetConfig+0x5d8>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048be:	e04b      	b.n	8004958 <UART_SetConfig+0x5d8>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048c6:	e047      	b.n	8004958 <UART_SetConfig+0x5d8>
 80048c8:	2320      	movs	r3, #32
 80048ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048ce:	e043      	b.n	8004958 <UART_SetConfig+0x5d8>
 80048d0:	2340      	movs	r3, #64	; 0x40
 80048d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048d6:	e03f      	b.n	8004958 <UART_SetConfig+0x5d8>
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048de:	bf00      	nop
 80048e0:	e03a      	b.n	8004958 <UART_SetConfig+0x5d8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a50      	ldr	r2, [pc, #320]	; (8004a28 <UART_SetConfig+0x6a8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d132      	bne.n	8004952 <UART_SetConfig+0x5d2>
 80048ec:	4b4b      	ldr	r3, [pc, #300]	; (8004a1c <UART_SetConfig+0x69c>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d827      	bhi.n	8004948 <UART_SetConfig+0x5c8>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0x580>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004919 	.word	0x08004919
 8004904:	08004921 	.word	0x08004921
 8004908:	08004929 	.word	0x08004929
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	2302      	movs	r3, #2
 800491a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800491e:	e01b      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004926:	e017      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800492e:	e013      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004938:	2320      	movs	r3, #32
 800493a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800493e:	e00b      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004946:	e007      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800494e:	bf00      	nop
 8004950:	e002      	b.n	8004958 <UART_SetConfig+0x5d8>
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a32      	ldr	r2, [pc, #200]	; (8004a28 <UART_SetConfig+0x6a8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f040 86f7 	bne.w	8005752 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004964:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004968:	2b08      	cmp	r3, #8
 800496a:	f000 80c0 	beq.w	8004aee <UART_SetConfig+0x76e>
 800496e:	2b08      	cmp	r3, #8
 8004970:	dc04      	bgt.n	800497c <UART_SetConfig+0x5fc>
 8004972:	2b02      	cmp	r3, #2
 8004974:	d00c      	beq.n	8004990 <UART_SetConfig+0x610>
 8004976:	2b04      	cmp	r3, #4
 8004978:	d065      	beq.n	8004a46 <UART_SetConfig+0x6c6>
 800497a:	e27a      	b.n	8004e72 <UART_SetConfig+0xaf2>
 800497c:	2b20      	cmp	r3, #32
 800497e:	f000 81b0 	beq.w	8004ce2 <UART_SetConfig+0x962>
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	f000 821e 	beq.w	8004dc4 <UART_SetConfig+0xa44>
 8004988:	2b10      	cmp	r3, #16
 800498a:	f000 8104 	beq.w	8004b96 <UART_SetConfig+0x816>
 800498e:	e270      	b.n	8004e72 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004990:	f7ff f894 	bl	8003abc <HAL_RCCEx_GetD3PCLK1Freq>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b00      	cmp	r3, #0
 800499c:	d04e      	beq.n	8004a3c <UART_SetConfig+0x6bc>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d048      	beq.n	8004a38 <UART_SetConfig+0x6b8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d042      	beq.n	8004a34 <UART_SetConfig+0x6b4>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d03c      	beq.n	8004a30 <UART_SetConfig+0x6b0>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d036      	beq.n	8004a2c <UART_SetConfig+0x6ac>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d026      	beq.n	8004a14 <UART_SetConfig+0x694>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d020      	beq.n	8004a10 <UART_SetConfig+0x690>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b07      	cmp	r3, #7
 80049d4:	d01a      	beq.n	8004a0c <UART_SetConfig+0x68c>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d014      	beq.n	8004a08 <UART_SetConfig+0x688>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	d00e      	beq.n	8004a04 <UART_SetConfig+0x684>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b0a      	cmp	r3, #10
 80049ec:	d008      	beq.n	8004a00 <UART_SetConfig+0x680>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b0b      	cmp	r3, #11
 80049f4:	d102      	bne.n	80049fc <UART_SetConfig+0x67c>
 80049f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049fa:	e020      	b.n	8004a3e <UART_SetConfig+0x6be>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e01e      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	e01c      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a04:	2340      	movs	r3, #64	; 0x40
 8004a06:	e01a      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a08:	2320      	movs	r3, #32
 8004a0a:	e018      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	e016      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a10:	230c      	movs	r3, #12
 8004a12:	e014      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a14:	230a      	movs	r3, #10
 8004a16:	e012      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a18:	40011400 	.word	0x40011400
 8004a1c:	58024400 	.word	0x58024400
 8004a20:	40007800 	.word	0x40007800
 8004a24:	40007c00 	.word	0x40007c00
 8004a28:	58000c00 	.word	0x58000c00
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	e006      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a30:	2306      	movs	r3, #6
 8004a32:	e004      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a34:	2304      	movs	r3, #4
 8004a36:	e002      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e000      	b.n	8004a3e <UART_SetConfig+0x6be>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a44:	e219      	b.n	8004e7a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a46:	f107 0318 	add.w	r3, r7, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff f84c 	bl	8003ae8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d044      	beq.n	8004ae4 <UART_SetConfig+0x764>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d03e      	beq.n	8004ae0 <UART_SetConfig+0x760>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d038      	beq.n	8004adc <UART_SetConfig+0x75c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d032      	beq.n	8004ad8 <UART_SetConfig+0x758>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d02c      	beq.n	8004ad4 <UART_SetConfig+0x754>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d026      	beq.n	8004ad0 <UART_SetConfig+0x750>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d020      	beq.n	8004acc <UART_SetConfig+0x74c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b07      	cmp	r3, #7
 8004a90:	d01a      	beq.n	8004ac8 <UART_SetConfig+0x748>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d014      	beq.n	8004ac4 <UART_SetConfig+0x744>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b09      	cmp	r3, #9
 8004aa0:	d00e      	beq.n	8004ac0 <UART_SetConfig+0x740>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b0a      	cmp	r3, #10
 8004aa8:	d008      	beq.n	8004abc <UART_SetConfig+0x73c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b0b      	cmp	r3, #11
 8004ab0:	d102      	bne.n	8004ab8 <UART_SetConfig+0x738>
 8004ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ab6:	e016      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	e012      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	e010      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e00e      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	e00c      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004acc:	230c      	movs	r3, #12
 8004ace:	e00a      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ad0:	230a      	movs	r3, #10
 8004ad2:	e008      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	e006      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ad8:	2306      	movs	r3, #6
 8004ada:	e004      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004adc:	2304      	movs	r3, #4
 8004ade:	e002      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e000      	b.n	8004ae6 <UART_SetConfig+0x766>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aec:	e1c5      	b.n	8004e7a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff f944 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d044      	beq.n	8004b8c <UART_SetConfig+0x80c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d03e      	beq.n	8004b88 <UART_SetConfig+0x808>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d038      	beq.n	8004b84 <UART_SetConfig+0x804>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d032      	beq.n	8004b80 <UART_SetConfig+0x800>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d02c      	beq.n	8004b7c <UART_SetConfig+0x7fc>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d026      	beq.n	8004b78 <UART_SetConfig+0x7f8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d020      	beq.n	8004b74 <UART_SetConfig+0x7f4>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b07      	cmp	r3, #7
 8004b38:	d01a      	beq.n	8004b70 <UART_SetConfig+0x7f0>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d014      	beq.n	8004b6c <UART_SetConfig+0x7ec>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d00e      	beq.n	8004b68 <UART_SetConfig+0x7e8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b0a      	cmp	r3, #10
 8004b50:	d008      	beq.n	8004b64 <UART_SetConfig+0x7e4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	2b0b      	cmp	r3, #11
 8004b58:	d102      	bne.n	8004b60 <UART_SetConfig+0x7e0>
 8004b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b5e:	e016      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e014      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	e012      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b68:	2340      	movs	r3, #64	; 0x40
 8004b6a:	e010      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	e00e      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b70:	2310      	movs	r3, #16
 8004b72:	e00c      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b74:	230c      	movs	r3, #12
 8004b76:	e00a      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b78:	230a      	movs	r3, #10
 8004b7a:	e008      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	e006      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b80:	2306      	movs	r3, #6
 8004b82:	e004      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b84:	2304      	movs	r3, #4
 8004b86:	e002      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e000      	b.n	8004b8e <UART_SetConfig+0x80e>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b94:	e171      	b.n	8004e7a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b96:	4b7a      	ldr	r3, [pc, #488]	; (8004d80 <UART_SetConfig+0xa00>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d054      	beq.n	8004c4c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ba2:	4b77      	ldr	r3, [pc, #476]	; (8004d80 <UART_SetConfig+0xa00>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	4a75      	ldr	r2, [pc, #468]	; (8004d84 <UART_SetConfig+0xa04>)
 8004bae:	40da      	lsrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d044      	beq.n	8004c42 <UART_SetConfig+0x8c2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d03e      	beq.n	8004c3e <UART_SetConfig+0x8be>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d038      	beq.n	8004c3a <UART_SetConfig+0x8ba>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d032      	beq.n	8004c36 <UART_SetConfig+0x8b6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d02c      	beq.n	8004c32 <UART_SetConfig+0x8b2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d026      	beq.n	8004c2e <UART_SetConfig+0x8ae>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d020      	beq.n	8004c2a <UART_SetConfig+0x8aa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	2b07      	cmp	r3, #7
 8004bee:	d01a      	beq.n	8004c26 <UART_SetConfig+0x8a6>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d014      	beq.n	8004c22 <UART_SetConfig+0x8a2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d00e      	beq.n	8004c1e <UART_SetConfig+0x89e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	2b0a      	cmp	r3, #10
 8004c06:	d008      	beq.n	8004c1a <UART_SetConfig+0x89a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2b0b      	cmp	r3, #11
 8004c0e:	d102      	bne.n	8004c16 <UART_SetConfig+0x896>
 8004c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c14:	e016      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e014      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	e012      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c1e:	2340      	movs	r3, #64	; 0x40
 8004c20:	e010      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c22:	2320      	movs	r3, #32
 8004c24:	e00e      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c26:	2310      	movs	r3, #16
 8004c28:	e00c      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	e00a      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c2e:	230a      	movs	r3, #10
 8004c30:	e008      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c32:	2308      	movs	r3, #8
 8004c34:	e006      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c36:	2306      	movs	r3, #6
 8004c38:	e004      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	e002      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e000      	b.n	8004c44 <UART_SetConfig+0x8c4>
 8004c42:	2301      	movs	r3, #1
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8004c4a:	e116      	b.n	8004e7a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d043      	beq.n	8004cdc <UART_SetConfig+0x95c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d03d      	beq.n	8004cd8 <UART_SetConfig+0x958>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d037      	beq.n	8004cd4 <UART_SetConfig+0x954>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d031      	beq.n	8004cd0 <UART_SetConfig+0x950>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d02b      	beq.n	8004ccc <UART_SetConfig+0x94c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d025      	beq.n	8004cc8 <UART_SetConfig+0x948>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2b06      	cmp	r3, #6
 8004c82:	d01f      	beq.n	8004cc4 <UART_SetConfig+0x944>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	2b07      	cmp	r3, #7
 8004c8a:	d019      	beq.n	8004cc0 <UART_SetConfig+0x940>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d013      	beq.n	8004cbc <UART_SetConfig+0x93c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	2b09      	cmp	r3, #9
 8004c9a:	d00d      	beq.n	8004cb8 <UART_SetConfig+0x938>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	2b0a      	cmp	r3, #10
 8004ca2:	d007      	beq.n	8004cb4 <UART_SetConfig+0x934>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2b0b      	cmp	r3, #11
 8004caa:	d101      	bne.n	8004cb0 <UART_SetConfig+0x930>
 8004cac:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <UART_SetConfig+0xa08>)
 8004cae:	e016      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cb0:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <UART_SetConfig+0xa04>)
 8004cb2:	e014      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cb4:	4b35      	ldr	r3, [pc, #212]	; (8004d8c <UART_SetConfig+0xa0c>)
 8004cb6:	e012      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cb8:	4b35      	ldr	r3, [pc, #212]	; (8004d90 <UART_SetConfig+0xa10>)
 8004cba:	e010      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cbc:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <UART_SetConfig+0xa14>)
 8004cbe:	e00e      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cc0:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <UART_SetConfig+0xa18>)
 8004cc2:	e00c      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cc4:	4b35      	ldr	r3, [pc, #212]	; (8004d9c <UART_SetConfig+0xa1c>)
 8004cc6:	e00a      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cc8:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <UART_SetConfig+0xa20>)
 8004cca:	e008      	b.n	8004cde <UART_SetConfig+0x95e>
 8004ccc:	4b35      	ldr	r3, [pc, #212]	; (8004da4 <UART_SetConfig+0xa24>)
 8004cce:	e006      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cd0:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <UART_SetConfig+0xa28>)
 8004cd2:	e004      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cd4:	4b35      	ldr	r3, [pc, #212]	; (8004dac <UART_SetConfig+0xa2c>)
 8004cd6:	e002      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cd8:	4b35      	ldr	r3, [pc, #212]	; (8004db0 <UART_SetConfig+0xa30>)
 8004cda:	e000      	b.n	8004cde <UART_SetConfig+0x95e>
 8004cdc:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <UART_SetConfig+0xa04>)
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ce0:	e0cb      	b.n	8004e7a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d046      	beq.n	8004d78 <UART_SetConfig+0x9f8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d040      	beq.n	8004d74 <UART_SetConfig+0x9f4>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d03a      	beq.n	8004d70 <UART_SetConfig+0x9f0>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d034      	beq.n	8004d6c <UART_SetConfig+0x9ec>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d02e      	beq.n	8004d68 <UART_SetConfig+0x9e8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d028      	beq.n	8004d64 <UART_SetConfig+0x9e4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d022      	beq.n	8004d60 <UART_SetConfig+0x9e0>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b07      	cmp	r3, #7
 8004d20:	d01c      	beq.n	8004d5c <UART_SetConfig+0x9dc>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d016      	beq.n	8004d58 <UART_SetConfig+0x9d8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d00f      	beq.n	8004d52 <UART_SetConfig+0x9d2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b0a      	cmp	r3, #10
 8004d38:	d008      	beq.n	8004d4c <UART_SetConfig+0x9cc>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	d102      	bne.n	8004d48 <UART_SetConfig+0x9c8>
 8004d42:	f643 5309 	movw	r3, #15625	; 0x3d09
 8004d46:	e018      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d48:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <UART_SetConfig+0xa18>)
 8004d4a:	e016      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d4c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004d50:	e013      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d52:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004d56:	e010      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d58:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <UART_SetConfig+0xa34>)
 8004d5a:	e00e      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <UART_SetConfig+0xa08>)
 8004d5e:	e00c      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <UART_SetConfig+0xa38>)
 8004d62:	e00a      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d64:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <UART_SetConfig+0xa3c>)
 8004d66:	e008      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d68:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <UART_SetConfig+0xa0c>)
 8004d6a:	e006      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <UART_SetConfig+0xa40>)
 8004d6e:	e004      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <UART_SetConfig+0xa10>)
 8004d72:	e002      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <UART_SetConfig+0xa14>)
 8004d76:	e000      	b.n	8004d7a <UART_SetConfig+0x9fa>
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <UART_SetConfig+0xa18>)
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d7c:	e07d      	b.n	8004e7a <UART_SetConfig+0xafa>
 8004d7e:	bf00      	nop
 8004d80:	58024400 	.word	0x58024400
 8004d84:	03d09000 	.word	0x03d09000
 8004d88:	0003d090 	.word	0x0003d090
 8004d8c:	0007a120 	.word	0x0007a120
 8004d90:	000f4240 	.word	0x000f4240
 8004d94:	001e8480 	.word	0x001e8480
 8004d98:	003d0900 	.word	0x003d0900
 8004d9c:	00516155 	.word	0x00516155
 8004da0:	0061a800 	.word	0x0061a800
 8004da4:	007a1200 	.word	0x007a1200
 8004da8:	00a2c2aa 	.word	0x00a2c2aa
 8004dac:	00f42400 	.word	0x00f42400
 8004db0:	01e84800 	.word	0x01e84800
 8004db4:	0001e848 	.word	0x0001e848
 8004db8:	00051615 	.word	0x00051615
 8004dbc:	00061a80 	.word	0x00061a80
 8004dc0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d04e      	beq.n	8004e6a <UART_SetConfig+0xaea>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d047      	beq.n	8004e64 <UART_SetConfig+0xae4>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d040      	beq.n	8004e5e <UART_SetConfig+0xade>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d039      	beq.n	8004e58 <UART_SetConfig+0xad8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d032      	beq.n	8004e52 <UART_SetConfig+0xad2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b05      	cmp	r3, #5
 8004df2:	d02b      	beq.n	8004e4c <UART_SetConfig+0xacc>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2b06      	cmp	r3, #6
 8004dfa:	d024      	beq.n	8004e46 <UART_SetConfig+0xac6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2b07      	cmp	r3, #7
 8004e02:	d01d      	beq.n	8004e40 <UART_SetConfig+0xac0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d016      	beq.n	8004e3a <UART_SetConfig+0xaba>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b09      	cmp	r3, #9
 8004e12:	d00f      	beq.n	8004e34 <UART_SetConfig+0xab4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	2b0a      	cmp	r3, #10
 8004e1a:	d008      	beq.n	8004e2e <UART_SetConfig+0xaae>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	2b0b      	cmp	r3, #11
 8004e22:	d101      	bne.n	8004e28 <UART_SetConfig+0xaa8>
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	e022      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2c:	e01f      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e32:	e01c      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e38:	e019      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e3e:	e016      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e44:	e013      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e46:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004e4a:	e010      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e4c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004e50:	e00d      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e56:	e00a      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e58:	f241 5355 	movw	r3, #5461	; 0x1555
 8004e5c:	e007      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e62:	e004      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e68:	e001      	b.n	8004e6e <UART_SetConfig+0xaee>
 8004e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e70:	e003      	b.n	8004e7a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8004e78:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f001 83e8 	beq.w	8006652 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d305      	bcc.n	8004e9e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d904      	bls.n	8004ea8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ea4:	f001 bbd5 	b.w	8006652 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004ea8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	f000 8154 	beq.w	800515a <UART_SetConfig+0xdda>
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	dc06      	bgt.n	8004ec4 <UART_SetConfig+0xb44>
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d00f      	beq.n	8004eda <UART_SetConfig+0xb5a>
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	f000 80ac 	beq.w	8005018 <UART_SetConfig+0xc98>
 8004ec0:	f000 bc30 	b.w	8005724 <UART_SetConfig+0x13a4>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	f000 832d 	beq.w	8005524 <UART_SetConfig+0x11a4>
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	f000 83a5 	beq.w	800561a <UART_SetConfig+0x129a>
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	f000 81e3 	beq.w	800529c <UART_SetConfig+0xf1c>
 8004ed6:	f000 bc25 	b.w	8005724 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004eda:	f7fe fdef 	bl	8003abc <HAL_RCCEx_GetD3PCLK1Freq>
 8004ede:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d067      	beq.n	8004fc0 <UART_SetConfig+0xc40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d05e      	beq.n	8004fb6 <UART_SetConfig+0xc36>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d055      	beq.n	8004fac <UART_SetConfig+0xc2c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d04c      	beq.n	8004fa2 <UART_SetConfig+0xc22>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d043      	beq.n	8004f98 <UART_SetConfig+0xc18>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	d03a      	beq.n	8004f8e <UART_SetConfig+0xc0e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	2b06      	cmp	r3, #6
 8004f1e:	d031      	beq.n	8004f84 <UART_SetConfig+0xc04>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b07      	cmp	r3, #7
 8004f26:	d028      	beq.n	8004f7a <UART_SetConfig+0xbfa>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d01f      	beq.n	8004f70 <UART_SetConfig+0xbf0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d016      	beq.n	8004f66 <UART_SetConfig+0xbe6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b0a      	cmp	r3, #10
 8004f3e:	d00d      	beq.n	8004f5c <UART_SetConfig+0xbdc>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b0b      	cmp	r3, #11
 8004f46:	d104      	bne.n	8004f52 <UART_SetConfig+0xbd2>
 8004f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	e03a      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004f52:	f04f 0301 	mov.w	r3, #1
 8004f56:	f04f 0400 	mov.w	r4, #0
 8004f5a:	e035      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004f5c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004f60:	f04f 0400 	mov.w	r4, #0
 8004f64:	e030      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004f66:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004f6a:	f04f 0400 	mov.w	r4, #0
 8004f6e:	e02b      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004f70:	f04f 0320 	mov.w	r3, #32
 8004f74:	f04f 0400 	mov.w	r4, #0
 8004f78:	e026      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004f7a:	f04f 0310 	mov.w	r3, #16
 8004f7e:	f04f 0400 	mov.w	r4, #0
 8004f82:	e021      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004f84:	f04f 030c 	mov.w	r3, #12
 8004f88:	f04f 0400 	mov.w	r4, #0
 8004f8c:	e01c      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004f8e:	f04f 030a 	mov.w	r3, #10
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	e017      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004f98:	f04f 0308 	mov.w	r3, #8
 8004f9c:	f04f 0400 	mov.w	r4, #0
 8004fa0:	e012      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004fa2:	f04f 0306 	mov.w	r3, #6
 8004fa6:	f04f 0400 	mov.w	r4, #0
 8004faa:	e00d      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004fac:	f04f 0304 	mov.w	r3, #4
 8004fb0:	f04f 0400 	mov.w	r4, #0
 8004fb4:	e008      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004fb6:	f04f 0302 	mov.w	r3, #2
 8004fba:	f04f 0400 	mov.w	r4, #0
 8004fbe:	e003      	b.n	8004fc8 <UART_SetConfig+0xc48>
 8004fc0:	f04f 0301 	mov.w	r3, #1
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4623      	mov	r3, r4
 8004fcc:	f7fb f984 	bl	80002d8 <__aeabi_uldivmod>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	f04f 0400 	mov.w	r4, #0
 8004fe0:	0214      	lsls	r4, r2, #8
 8004fe2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004fe6:	020b      	lsls	r3, r1, #8
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6852      	ldr	r2, [r2, #4]
 8004fec:	0852      	lsrs	r2, r2, #1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	eb13 0b01 	adds.w	fp, r3, r1
 8004ff8:	eb44 0c02 	adc.w	ip, r4, r2
 8004ffc:	4658      	mov	r0, fp
 8004ffe:	4661      	mov	r1, ip
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f04f 0400 	mov.w	r4, #0
 8005008:	461a      	mov	r2, r3
 800500a:	4623      	mov	r3, r4
 800500c:	f7fb f964 	bl	80002d8 <__aeabi_uldivmod>
 8005010:	4603      	mov	r3, r0
 8005012:	460c      	mov	r4, r1
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005016:	e389      	b.n	800572c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005018:	f107 0318 	add.w	r3, r7, #24
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fd63 	bl	8003ae8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4618      	mov	r0, r3
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d067      	beq.n	8005102 <UART_SetConfig+0xd82>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b01      	cmp	r3, #1
 8005038:	d05e      	beq.n	80050f8 <UART_SetConfig+0xd78>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b02      	cmp	r3, #2
 8005040:	d055      	beq.n	80050ee <UART_SetConfig+0xd6e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	2b03      	cmp	r3, #3
 8005048:	d04c      	beq.n	80050e4 <UART_SetConfig+0xd64>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b04      	cmp	r3, #4
 8005050:	d043      	beq.n	80050da <UART_SetConfig+0xd5a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b05      	cmp	r3, #5
 8005058:	d03a      	beq.n	80050d0 <UART_SetConfig+0xd50>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b06      	cmp	r3, #6
 8005060:	d031      	beq.n	80050c6 <UART_SetConfig+0xd46>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2b07      	cmp	r3, #7
 8005068:	d028      	beq.n	80050bc <UART_SetConfig+0xd3c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b08      	cmp	r3, #8
 8005070:	d01f      	beq.n	80050b2 <UART_SetConfig+0xd32>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b09      	cmp	r3, #9
 8005078:	d016      	beq.n	80050a8 <UART_SetConfig+0xd28>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b0a      	cmp	r3, #10
 8005080:	d00d      	beq.n	800509e <UART_SetConfig+0xd1e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b0b      	cmp	r3, #11
 8005088:	d104      	bne.n	8005094 <UART_SetConfig+0xd14>
 800508a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800508e:	f04f 0400 	mov.w	r4, #0
 8005092:	e03a      	b.n	800510a <UART_SetConfig+0xd8a>
 8005094:	f04f 0301 	mov.w	r3, #1
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	e035      	b.n	800510a <UART_SetConfig+0xd8a>
 800509e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	e030      	b.n	800510a <UART_SetConfig+0xd8a>
 80050a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80050ac:	f04f 0400 	mov.w	r4, #0
 80050b0:	e02b      	b.n	800510a <UART_SetConfig+0xd8a>
 80050b2:	f04f 0320 	mov.w	r3, #32
 80050b6:	f04f 0400 	mov.w	r4, #0
 80050ba:	e026      	b.n	800510a <UART_SetConfig+0xd8a>
 80050bc:	f04f 0310 	mov.w	r3, #16
 80050c0:	f04f 0400 	mov.w	r4, #0
 80050c4:	e021      	b.n	800510a <UART_SetConfig+0xd8a>
 80050c6:	f04f 030c 	mov.w	r3, #12
 80050ca:	f04f 0400 	mov.w	r4, #0
 80050ce:	e01c      	b.n	800510a <UART_SetConfig+0xd8a>
 80050d0:	f04f 030a 	mov.w	r3, #10
 80050d4:	f04f 0400 	mov.w	r4, #0
 80050d8:	e017      	b.n	800510a <UART_SetConfig+0xd8a>
 80050da:	f04f 0308 	mov.w	r3, #8
 80050de:	f04f 0400 	mov.w	r4, #0
 80050e2:	e012      	b.n	800510a <UART_SetConfig+0xd8a>
 80050e4:	f04f 0306 	mov.w	r3, #6
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	e00d      	b.n	800510a <UART_SetConfig+0xd8a>
 80050ee:	f04f 0304 	mov.w	r3, #4
 80050f2:	f04f 0400 	mov.w	r4, #0
 80050f6:	e008      	b.n	800510a <UART_SetConfig+0xd8a>
 80050f8:	f04f 0302 	mov.w	r3, #2
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	e003      	b.n	800510a <UART_SetConfig+0xd8a>
 8005102:	f04f 0301 	mov.w	r3, #1
 8005106:	f04f 0400 	mov.w	r4, #0
 800510a:	461a      	mov	r2, r3
 800510c:	4623      	mov	r3, r4
 800510e:	f7fb f8e3 	bl	80002d8 <__aeabi_uldivmod>
 8005112:	4603      	mov	r3, r0
 8005114:	460c      	mov	r4, r1
 8005116:	4619      	mov	r1, r3
 8005118:	4622      	mov	r2, r4
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	f04f 0400 	mov.w	r4, #0
 8005122:	0214      	lsls	r4, r2, #8
 8005124:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005128:	020b      	lsls	r3, r1, #8
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6852      	ldr	r2, [r2, #4]
 800512e:	0852      	lsrs	r2, r2, #1
 8005130:	4611      	mov	r1, r2
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	eb13 0b01 	adds.w	fp, r3, r1
 800513a:	eb44 0c02 	adc.w	ip, r4, r2
 800513e:	4658      	mov	r0, fp
 8005140:	4661      	mov	r1, ip
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f04f 0400 	mov.w	r4, #0
 800514a:	461a      	mov	r2, r3
 800514c:	4623      	mov	r3, r4
 800514e:	f7fb f8c3 	bl	80002d8 <__aeabi_uldivmod>
 8005152:	4603      	mov	r3, r0
 8005154:	460c      	mov	r4, r1
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005158:	e2e8      	b.n	800572c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800515a:	f107 030c 	add.w	r3, r7, #12
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fe0e 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4618      	mov	r0, r3
 8005168:	f04f 0100 	mov.w	r1, #0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d067      	beq.n	8005244 <UART_SetConfig+0xec4>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2b01      	cmp	r3, #1
 800517a:	d05e      	beq.n	800523a <UART_SetConfig+0xeba>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b02      	cmp	r3, #2
 8005182:	d055      	beq.n	8005230 <UART_SetConfig+0xeb0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b03      	cmp	r3, #3
 800518a:	d04c      	beq.n	8005226 <UART_SetConfig+0xea6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b04      	cmp	r3, #4
 8005192:	d043      	beq.n	800521c <UART_SetConfig+0xe9c>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2b05      	cmp	r3, #5
 800519a:	d03a      	beq.n	8005212 <UART_SetConfig+0xe92>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b06      	cmp	r3, #6
 80051a2:	d031      	beq.n	8005208 <UART_SetConfig+0xe88>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b07      	cmp	r3, #7
 80051aa:	d028      	beq.n	80051fe <UART_SetConfig+0xe7e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d01f      	beq.n	80051f4 <UART_SetConfig+0xe74>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	d016      	beq.n	80051ea <UART_SetConfig+0xe6a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b0a      	cmp	r3, #10
 80051c2:	d00d      	beq.n	80051e0 <UART_SetConfig+0xe60>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b0b      	cmp	r3, #11
 80051ca:	d104      	bne.n	80051d6 <UART_SetConfig+0xe56>
 80051cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	e03a      	b.n	800524c <UART_SetConfig+0xecc>
 80051d6:	f04f 0301 	mov.w	r3, #1
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	e035      	b.n	800524c <UART_SetConfig+0xecc>
 80051e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80051e4:	f04f 0400 	mov.w	r4, #0
 80051e8:	e030      	b.n	800524c <UART_SetConfig+0xecc>
 80051ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80051ee:	f04f 0400 	mov.w	r4, #0
 80051f2:	e02b      	b.n	800524c <UART_SetConfig+0xecc>
 80051f4:	f04f 0320 	mov.w	r3, #32
 80051f8:	f04f 0400 	mov.w	r4, #0
 80051fc:	e026      	b.n	800524c <UART_SetConfig+0xecc>
 80051fe:	f04f 0310 	mov.w	r3, #16
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	e021      	b.n	800524c <UART_SetConfig+0xecc>
 8005208:	f04f 030c 	mov.w	r3, #12
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	e01c      	b.n	800524c <UART_SetConfig+0xecc>
 8005212:	f04f 030a 	mov.w	r3, #10
 8005216:	f04f 0400 	mov.w	r4, #0
 800521a:	e017      	b.n	800524c <UART_SetConfig+0xecc>
 800521c:	f04f 0308 	mov.w	r3, #8
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	e012      	b.n	800524c <UART_SetConfig+0xecc>
 8005226:	f04f 0306 	mov.w	r3, #6
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	e00d      	b.n	800524c <UART_SetConfig+0xecc>
 8005230:	f04f 0304 	mov.w	r3, #4
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	e008      	b.n	800524c <UART_SetConfig+0xecc>
 800523a:	f04f 0302 	mov.w	r3, #2
 800523e:	f04f 0400 	mov.w	r4, #0
 8005242:	e003      	b.n	800524c <UART_SetConfig+0xecc>
 8005244:	f04f 0301 	mov.w	r3, #1
 8005248:	f04f 0400 	mov.w	r4, #0
 800524c:	461a      	mov	r2, r3
 800524e:	4623      	mov	r3, r4
 8005250:	f7fb f842 	bl	80002d8 <__aeabi_uldivmod>
 8005254:	4603      	mov	r3, r0
 8005256:	460c      	mov	r4, r1
 8005258:	4619      	mov	r1, r3
 800525a:	4622      	mov	r2, r4
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	0214      	lsls	r4, r2, #8
 8005266:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800526a:	020b      	lsls	r3, r1, #8
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6852      	ldr	r2, [r2, #4]
 8005270:	0852      	lsrs	r2, r2, #1
 8005272:	4611      	mov	r1, r2
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	eb13 0b01 	adds.w	fp, r3, r1
 800527c:	eb44 0c02 	adc.w	ip, r4, r2
 8005280:	4658      	mov	r0, fp
 8005282:	4661      	mov	r1, ip
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	461a      	mov	r2, r3
 800528e:	4623      	mov	r3, r4
 8005290:	f7fb f822 	bl	80002d8 <__aeabi_uldivmod>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800529a:	e247      	b.n	800572c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800529c:	4b96      	ldr	r3, [pc, #600]	; (80054f8 <UART_SetConfig+0x1178>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80a3 	beq.w	80053f0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052aa:	4b93      	ldr	r3, [pc, #588]	; (80054f8 <UART_SetConfig+0x1178>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	08db      	lsrs	r3, r3, #3
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	4a91      	ldr	r2, [pc, #580]	; (80054fc <UART_SetConfig+0x117c>)
 80052b6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ba:	4618      	mov	r0, r3
 80052bc:	f04f 0100 	mov.w	r1, #0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d067      	beq.n	8005398 <UART_SetConfig+0x1018>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d05e      	beq.n	800538e <UART_SetConfig+0x100e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d055      	beq.n	8005384 <UART_SetConfig+0x1004>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d04c      	beq.n	800537a <UART_SetConfig+0xffa>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d043      	beq.n	8005370 <UART_SetConfig+0xff0>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	d03a      	beq.n	8005366 <UART_SetConfig+0xfe6>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2b06      	cmp	r3, #6
 80052f6:	d031      	beq.n	800535c <UART_SetConfig+0xfdc>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b07      	cmp	r3, #7
 80052fe:	d028      	beq.n	8005352 <UART_SetConfig+0xfd2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b08      	cmp	r3, #8
 8005306:	d01f      	beq.n	8005348 <UART_SetConfig+0xfc8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b09      	cmp	r3, #9
 800530e:	d016      	beq.n	800533e <UART_SetConfig+0xfbe>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b0a      	cmp	r3, #10
 8005316:	d00d      	beq.n	8005334 <UART_SetConfig+0xfb4>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b0b      	cmp	r3, #11
 800531e:	d104      	bne.n	800532a <UART_SetConfig+0xfaa>
 8005320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005324:	f04f 0400 	mov.w	r4, #0
 8005328:	e03a      	b.n	80053a0 <UART_SetConfig+0x1020>
 800532a:	f04f 0301 	mov.w	r3, #1
 800532e:	f04f 0400 	mov.w	r4, #0
 8005332:	e035      	b.n	80053a0 <UART_SetConfig+0x1020>
 8005334:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	e030      	b.n	80053a0 <UART_SetConfig+0x1020>
 800533e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005342:	f04f 0400 	mov.w	r4, #0
 8005346:	e02b      	b.n	80053a0 <UART_SetConfig+0x1020>
 8005348:	f04f 0320 	mov.w	r3, #32
 800534c:	f04f 0400 	mov.w	r4, #0
 8005350:	e026      	b.n	80053a0 <UART_SetConfig+0x1020>
 8005352:	f04f 0310 	mov.w	r3, #16
 8005356:	f04f 0400 	mov.w	r4, #0
 800535a:	e021      	b.n	80053a0 <UART_SetConfig+0x1020>
 800535c:	f04f 030c 	mov.w	r3, #12
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	e01c      	b.n	80053a0 <UART_SetConfig+0x1020>
 8005366:	f04f 030a 	mov.w	r3, #10
 800536a:	f04f 0400 	mov.w	r4, #0
 800536e:	e017      	b.n	80053a0 <UART_SetConfig+0x1020>
 8005370:	f04f 0308 	mov.w	r3, #8
 8005374:	f04f 0400 	mov.w	r4, #0
 8005378:	e012      	b.n	80053a0 <UART_SetConfig+0x1020>
 800537a:	f04f 0306 	mov.w	r3, #6
 800537e:	f04f 0400 	mov.w	r4, #0
 8005382:	e00d      	b.n	80053a0 <UART_SetConfig+0x1020>
 8005384:	f04f 0304 	mov.w	r3, #4
 8005388:	f04f 0400 	mov.w	r4, #0
 800538c:	e008      	b.n	80053a0 <UART_SetConfig+0x1020>
 800538e:	f04f 0302 	mov.w	r3, #2
 8005392:	f04f 0400 	mov.w	r4, #0
 8005396:	e003      	b.n	80053a0 <UART_SetConfig+0x1020>
 8005398:	f04f 0301 	mov.w	r3, #1
 800539c:	f04f 0400 	mov.w	r4, #0
 80053a0:	461a      	mov	r2, r3
 80053a2:	4623      	mov	r3, r4
 80053a4:	f7fa ff98 	bl	80002d8 <__aeabi_uldivmod>
 80053a8:	4603      	mov	r3, r0
 80053aa:	460c      	mov	r4, r1
 80053ac:	4619      	mov	r1, r3
 80053ae:	4622      	mov	r2, r4
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	0214      	lsls	r4, r2, #8
 80053ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80053be:	020b      	lsls	r3, r1, #8
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6852      	ldr	r2, [r2, #4]
 80053c4:	0852      	lsrs	r2, r2, #1
 80053c6:	4611      	mov	r1, r2
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	eb13 0b01 	adds.w	fp, r3, r1
 80053d0:	eb44 0c02 	adc.w	ip, r4, r2
 80053d4:	4658      	mov	r0, fp
 80053d6:	4661      	mov	r1, ip
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	461a      	mov	r2, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	f7fa ff78 	bl	80002d8 <__aeabi_uldivmod>
 80053e8:	4603      	mov	r3, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80053ee:	e19d      	b.n	800572c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05b      	beq.n	80054b0 <UART_SetConfig+0x1130>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d053      	beq.n	80054a8 <UART_SetConfig+0x1128>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	2b02      	cmp	r3, #2
 8005406:	d04b      	beq.n	80054a0 <UART_SetConfig+0x1120>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	2b03      	cmp	r3, #3
 800540e:	d043      	beq.n	8005498 <UART_SetConfig+0x1118>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b04      	cmp	r3, #4
 8005416:	d03b      	beq.n	8005490 <UART_SetConfig+0x1110>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2b05      	cmp	r3, #5
 800541e:	d033      	beq.n	8005488 <UART_SetConfig+0x1108>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2b06      	cmp	r3, #6
 8005426:	d02b      	beq.n	8005480 <UART_SetConfig+0x1100>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2b07      	cmp	r3, #7
 800542e:	d023      	beq.n	8005478 <UART_SetConfig+0x10f8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	2b08      	cmp	r3, #8
 8005436:	d01b      	beq.n	8005470 <UART_SetConfig+0x10f0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b09      	cmp	r3, #9
 800543e:	d013      	beq.n	8005468 <UART_SetConfig+0x10e8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b0a      	cmp	r3, #10
 8005446:	d00b      	beq.n	8005460 <UART_SetConfig+0x10e0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2b0b      	cmp	r3, #11
 800544e:	d103      	bne.n	8005458 <UART_SetConfig+0x10d8>
 8005450:	4b2a      	ldr	r3, [pc, #168]	; (80054fc <UART_SetConfig+0x117c>)
 8005452:	f04f 0400 	mov.w	r4, #0
 8005456:	e02e      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005458:	4b29      	ldr	r3, [pc, #164]	; (8005500 <UART_SetConfig+0x1180>)
 800545a:	f04f 0403 	mov.w	r4, #3
 800545e:	e02a      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005460:	4b28      	ldr	r3, [pc, #160]	; (8005504 <UART_SetConfig+0x1184>)
 8005462:	f04f 0400 	mov.w	r4, #0
 8005466:	e026      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005468:	4b27      	ldr	r3, [pc, #156]	; (8005508 <UART_SetConfig+0x1188>)
 800546a:	f04f 0400 	mov.w	r4, #0
 800546e:	e022      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005470:	4b26      	ldr	r3, [pc, #152]	; (800550c <UART_SetConfig+0x118c>)
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	e01e      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005478:	4b25      	ldr	r3, [pc, #148]	; (8005510 <UART_SetConfig+0x1190>)
 800547a:	f04f 0400 	mov.w	r4, #0
 800547e:	e01a      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005480:	a419      	add	r4, pc, #100	; (adr r4, 80054e8 <UART_SetConfig+0x1168>)
 8005482:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005486:	e016      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <UART_SetConfig+0x1194>)
 800548a:	f04f 0400 	mov.w	r4, #0
 800548e:	e012      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005490:	4b21      	ldr	r3, [pc, #132]	; (8005518 <UART_SetConfig+0x1198>)
 8005492:	f04f 0400 	mov.w	r4, #0
 8005496:	e00e      	b.n	80054b6 <UART_SetConfig+0x1136>
 8005498:	a415      	add	r4, pc, #84	; (adr r4, 80054f0 <UART_SetConfig+0x1170>)
 800549a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800549e:	e00a      	b.n	80054b6 <UART_SetConfig+0x1136>
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <UART_SetConfig+0x119c>)
 80054a2:	f04f 0400 	mov.w	r4, #0
 80054a6:	e006      	b.n	80054b6 <UART_SetConfig+0x1136>
 80054a8:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <UART_SetConfig+0x11a0>)
 80054aa:	f04f 0401 	mov.w	r4, #1
 80054ae:	e002      	b.n	80054b6 <UART_SetConfig+0x1136>
 80054b0:	4b13      	ldr	r3, [pc, #76]	; (8005500 <UART_SetConfig+0x1180>)
 80054b2:	f04f 0403 	mov.w	r4, #3
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6852      	ldr	r2, [r2, #4]
 80054ba:	0852      	lsrs	r2, r2, #1
 80054bc:	4611      	mov	r1, r2
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	eb13 0b01 	adds.w	fp, r3, r1
 80054c6:	eb44 0c02 	adc.w	ip, r4, r2
 80054ca:	4658      	mov	r0, fp
 80054cc:	4661      	mov	r1, ip
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f04f 0400 	mov.w	r4, #0
 80054d6:	461a      	mov	r2, r3
 80054d8:	4623      	mov	r3, r4
 80054da:	f7fa fefd 	bl	80002d8 <__aeabi_uldivmod>
 80054de:	4603      	mov	r3, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80054e4:	e122      	b.n	800572c <UART_SetConfig+0x13ac>
 80054e6:	bf00      	nop
 80054e8:	51615500 	.word	0x51615500
 80054ec:	00000000 	.word	0x00000000
 80054f0:	a2c2aa00 	.word	0xa2c2aa00
 80054f4:	00000000 	.word	0x00000000
 80054f8:	58024400 	.word	0x58024400
 80054fc:	03d09000 	.word	0x03d09000
 8005500:	d0900000 	.word	0xd0900000
 8005504:	07a12000 	.word	0x07a12000
 8005508:	0f424000 	.word	0x0f424000
 800550c:	1e848000 	.word	0x1e848000
 8005510:	3d090000 	.word	0x3d090000
 8005514:	61a80000 	.word	0x61a80000
 8005518:	7a120000 	.word	0x7a120000
 800551c:	f4240000 	.word	0xf4240000
 8005520:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	d05b      	beq.n	80055e4 <UART_SetConfig+0x1264>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	2b01      	cmp	r3, #1
 8005532:	d053      	beq.n	80055dc <UART_SetConfig+0x125c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	2b02      	cmp	r3, #2
 800553a:	d04b      	beq.n	80055d4 <UART_SetConfig+0x1254>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	2b03      	cmp	r3, #3
 8005542:	d043      	beq.n	80055cc <UART_SetConfig+0x124c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2b04      	cmp	r3, #4
 800554a:	d03b      	beq.n	80055c4 <UART_SetConfig+0x1244>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2b05      	cmp	r3, #5
 8005552:	d033      	beq.n	80055bc <UART_SetConfig+0x123c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	2b06      	cmp	r3, #6
 800555a:	d02b      	beq.n	80055b4 <UART_SetConfig+0x1234>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b07      	cmp	r3, #7
 8005562:	d023      	beq.n	80055ac <UART_SetConfig+0x122c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b08      	cmp	r3, #8
 800556a:	d01b      	beq.n	80055a4 <UART_SetConfig+0x1224>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b09      	cmp	r3, #9
 8005572:	d013      	beq.n	800559c <UART_SetConfig+0x121c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b0a      	cmp	r3, #10
 800557a:	d00b      	beq.n	8005594 <UART_SetConfig+0x1214>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b0b      	cmp	r3, #11
 8005582:	d103      	bne.n	800558c <UART_SetConfig+0x120c>
 8005584:	4bc0      	ldr	r3, [pc, #768]	; (8005888 <UART_SetConfig+0x1508>)
 8005586:	f04f 0400 	mov.w	r4, #0
 800558a:	e02e      	b.n	80055ea <UART_SetConfig+0x126a>
 800558c:	4bbf      	ldr	r3, [pc, #764]	; (800588c <UART_SetConfig+0x150c>)
 800558e:	f04f 0400 	mov.w	r4, #0
 8005592:	e02a      	b.n	80055ea <UART_SetConfig+0x126a>
 8005594:	4bbe      	ldr	r3, [pc, #760]	; (8005890 <UART_SetConfig+0x1510>)
 8005596:	f04f 0400 	mov.w	r4, #0
 800559a:	e026      	b.n	80055ea <UART_SetConfig+0x126a>
 800559c:	4bbd      	ldr	r3, [pc, #756]	; (8005894 <UART_SetConfig+0x1514>)
 800559e:	f04f 0400 	mov.w	r4, #0
 80055a2:	e022      	b.n	80055ea <UART_SetConfig+0x126a>
 80055a4:	4bbc      	ldr	r3, [pc, #752]	; (8005898 <UART_SetConfig+0x1518>)
 80055a6:	f04f 0400 	mov.w	r4, #0
 80055aa:	e01e      	b.n	80055ea <UART_SetConfig+0x126a>
 80055ac:	4bbb      	ldr	r3, [pc, #748]	; (800589c <UART_SetConfig+0x151c>)
 80055ae:	f04f 0400 	mov.w	r4, #0
 80055b2:	e01a      	b.n	80055ea <UART_SetConfig+0x126a>
 80055b4:	a4b0      	add	r4, pc, #704	; (adr r4, 8005878 <UART_SetConfig+0x14f8>)
 80055b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80055ba:	e016      	b.n	80055ea <UART_SetConfig+0x126a>
 80055bc:	4bb8      	ldr	r3, [pc, #736]	; (80058a0 <UART_SetConfig+0x1520>)
 80055be:	f04f 0400 	mov.w	r4, #0
 80055c2:	e012      	b.n	80055ea <UART_SetConfig+0x126a>
 80055c4:	4bb7      	ldr	r3, [pc, #732]	; (80058a4 <UART_SetConfig+0x1524>)
 80055c6:	f04f 0400 	mov.w	r4, #0
 80055ca:	e00e      	b.n	80055ea <UART_SetConfig+0x126a>
 80055cc:	a4ac      	add	r4, pc, #688	; (adr r4, 8005880 <UART_SetConfig+0x1500>)
 80055ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80055d2:	e00a      	b.n	80055ea <UART_SetConfig+0x126a>
 80055d4:	4bb4      	ldr	r3, [pc, #720]	; (80058a8 <UART_SetConfig+0x1528>)
 80055d6:	f04f 0400 	mov.w	r4, #0
 80055da:	e006      	b.n	80055ea <UART_SetConfig+0x126a>
 80055dc:	4bb3      	ldr	r3, [pc, #716]	; (80058ac <UART_SetConfig+0x152c>)
 80055de:	f04f 0400 	mov.w	r4, #0
 80055e2:	e002      	b.n	80055ea <UART_SetConfig+0x126a>
 80055e4:	4ba9      	ldr	r3, [pc, #676]	; (800588c <UART_SetConfig+0x150c>)
 80055e6:	f04f 0400 	mov.w	r4, #0
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6852      	ldr	r2, [r2, #4]
 80055ee:	0852      	lsrs	r2, r2, #1
 80055f0:	4611      	mov	r1, r2
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	eb13 0b01 	adds.w	fp, r3, r1
 80055fa:	eb44 0c02 	adc.w	ip, r4, r2
 80055fe:	4658      	mov	r0, fp
 8005600:	4661      	mov	r1, ip
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f04f 0400 	mov.w	r4, #0
 800560a:	461a      	mov	r2, r3
 800560c:	4623      	mov	r3, r4
 800560e:	f7fa fe63 	bl	80002d8 <__aeabi_uldivmod>
 8005612:	4603      	mov	r3, r0
 8005614:	460c      	mov	r4, r1
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005618:	e088      	b.n	800572c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d064      	beq.n	80056ec <UART_SetConfig+0x136c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b01      	cmp	r3, #1
 8005628:	d05b      	beq.n	80056e2 <UART_SetConfig+0x1362>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2b02      	cmp	r3, #2
 8005630:	d052      	beq.n	80056d8 <UART_SetConfig+0x1358>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2b03      	cmp	r3, #3
 8005638:	d04a      	beq.n	80056d0 <UART_SetConfig+0x1350>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b04      	cmp	r3, #4
 8005640:	d041      	beq.n	80056c6 <UART_SetConfig+0x1346>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2b05      	cmp	r3, #5
 8005648:	d039      	beq.n	80056be <UART_SetConfig+0x133e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b06      	cmp	r3, #6
 8005650:	d031      	beq.n	80056b6 <UART_SetConfig+0x1336>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b07      	cmp	r3, #7
 8005658:	d028      	beq.n	80056ac <UART_SetConfig+0x132c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b08      	cmp	r3, #8
 8005660:	d01f      	beq.n	80056a2 <UART_SetConfig+0x1322>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b09      	cmp	r3, #9
 8005668:	d016      	beq.n	8005698 <UART_SetConfig+0x1318>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b0a      	cmp	r3, #10
 8005670:	d00d      	beq.n	800568e <UART_SetConfig+0x130e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b0b      	cmp	r3, #11
 8005678:	d104      	bne.n	8005684 <UART_SetConfig+0x1304>
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	e037      	b.n	80056f4 <UART_SetConfig+0x1374>
 8005684:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005688:	f04f 0400 	mov.w	r4, #0
 800568c:	e032      	b.n	80056f4 <UART_SetConfig+0x1374>
 800568e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	e02d      	b.n	80056f4 <UART_SetConfig+0x1374>
 8005698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800569c:	f04f 0400 	mov.w	r4, #0
 80056a0:	e028      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056a6:	f04f 0400 	mov.w	r4, #0
 80056aa:	e023      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	e01e      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056b6:	4b7e      	ldr	r3, [pc, #504]	; (80058b0 <UART_SetConfig+0x1530>)
 80056b8:	f04f 0400 	mov.w	r4, #0
 80056bc:	e01a      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056be:	4b7d      	ldr	r3, [pc, #500]	; (80058b4 <UART_SetConfig+0x1534>)
 80056c0:	f04f 0400 	mov.w	r4, #0
 80056c4:	e016      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	e011      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056d0:	4b79      	ldr	r3, [pc, #484]	; (80058b8 <UART_SetConfig+0x1538>)
 80056d2:	f04f 0400 	mov.w	r4, #0
 80056d6:	e00d      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056dc:	f04f 0400 	mov.w	r4, #0
 80056e0:	e008      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	e003      	b.n	80056f4 <UART_SetConfig+0x1374>
 80056ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056f0:	f04f 0400 	mov.w	r4, #0
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6852      	ldr	r2, [r2, #4]
 80056f8:	0852      	lsrs	r2, r2, #1
 80056fa:	4611      	mov	r1, r2
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	eb13 0b01 	adds.w	fp, r3, r1
 8005704:	eb44 0c02 	adc.w	ip, r4, r2
 8005708:	4658      	mov	r0, fp
 800570a:	4661      	mov	r1, ip
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f04f 0400 	mov.w	r4, #0
 8005714:	461a      	mov	r2, r3
 8005716:	4623      	mov	r3, r4
 8005718:	f7fa fdde 	bl	80002d8 <__aeabi_uldivmod>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005722:	e003      	b.n	800572c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800572a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005732:	d309      	bcc.n	8005748 <UART_SetConfig+0x13c8>
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573a:	d205      	bcs.n	8005748 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005742:	60da      	str	r2, [r3, #12]
 8005744:	f000 bf85 	b.w	8006652 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574e:	f000 bf80 	b.w	8006652 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575a:	f040 83da 	bne.w	8005f12 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800575e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	f200 83b3 	bhi.w	8005ece <UART_SetConfig+0x1b4e>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <UART_SetConfig+0x13f0>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	080058bd 	.word	0x080058bd
 8005774:	08005975 	.word	0x08005975
 8005778:	08005ecf 	.word	0x08005ecf
 800577c:	08005ecf 	.word	0x08005ecf
 8005780:	08005a2d 	.word	0x08005a2d
 8005784:	08005ecf 	.word	0x08005ecf
 8005788:	08005ecf 	.word	0x08005ecf
 800578c:	08005ecf 	.word	0x08005ecf
 8005790:	08005ae9 	.word	0x08005ae9
 8005794:	08005ecf 	.word	0x08005ecf
 8005798:	08005ecf 	.word	0x08005ecf
 800579c:	08005ecf 	.word	0x08005ecf
 80057a0:	08005ecf 	.word	0x08005ecf
 80057a4:	08005ecf 	.word	0x08005ecf
 80057a8:	08005ecf 	.word	0x08005ecf
 80057ac:	08005ecf 	.word	0x08005ecf
 80057b0:	08005ba5 	.word	0x08005ba5
 80057b4:	08005ecf 	.word	0x08005ecf
 80057b8:	08005ecf 	.word	0x08005ecf
 80057bc:	08005ecf 	.word	0x08005ecf
 80057c0:	08005ecf 	.word	0x08005ecf
 80057c4:	08005ecf 	.word	0x08005ecf
 80057c8:	08005ecf 	.word	0x08005ecf
 80057cc:	08005ecf 	.word	0x08005ecf
 80057d0:	08005ecf 	.word	0x08005ecf
 80057d4:	08005ecf 	.word	0x08005ecf
 80057d8:	08005ecf 	.word	0x08005ecf
 80057dc:	08005ecf 	.word	0x08005ecf
 80057e0:	08005ecf 	.word	0x08005ecf
 80057e4:	08005ecf 	.word	0x08005ecf
 80057e8:	08005ecf 	.word	0x08005ecf
 80057ec:	08005ecf 	.word	0x08005ecf
 80057f0:	08005d17 	.word	0x08005d17
 80057f4:	08005ecf 	.word	0x08005ecf
 80057f8:	08005ecf 	.word	0x08005ecf
 80057fc:	08005ecf 	.word	0x08005ecf
 8005800:	08005ecf 	.word	0x08005ecf
 8005804:	08005ecf 	.word	0x08005ecf
 8005808:	08005ecf 	.word	0x08005ecf
 800580c:	08005ecf 	.word	0x08005ecf
 8005810:	08005ecf 	.word	0x08005ecf
 8005814:	08005ecf 	.word	0x08005ecf
 8005818:	08005ecf 	.word	0x08005ecf
 800581c:	08005ecf 	.word	0x08005ecf
 8005820:	08005ecf 	.word	0x08005ecf
 8005824:	08005ecf 	.word	0x08005ecf
 8005828:	08005ecf 	.word	0x08005ecf
 800582c:	08005ecf 	.word	0x08005ecf
 8005830:	08005ecf 	.word	0x08005ecf
 8005834:	08005ecf 	.word	0x08005ecf
 8005838:	08005ecf 	.word	0x08005ecf
 800583c:	08005ecf 	.word	0x08005ecf
 8005840:	08005ecf 	.word	0x08005ecf
 8005844:	08005ecf 	.word	0x08005ecf
 8005848:	08005ecf 	.word	0x08005ecf
 800584c:	08005ecf 	.word	0x08005ecf
 8005850:	08005ecf 	.word	0x08005ecf
 8005854:	08005ecf 	.word	0x08005ecf
 8005858:	08005ecf 	.word	0x08005ecf
 800585c:	08005ecf 	.word	0x08005ecf
 8005860:	08005ecf 	.word	0x08005ecf
 8005864:	08005ecf 	.word	0x08005ecf
 8005868:	08005ecf 	.word	0x08005ecf
 800586c:	08005ecf 	.word	0x08005ecf
 8005870:	08005e0d 	.word	0x08005e0d
 8005874:	f3af 8000 	nop.w
 8005878:	05161500 	.word	0x05161500
 800587c:	00000000 	.word	0x00000000
 8005880:	0a2c2a00 	.word	0x0a2c2a00
 8005884:	00000000 	.word	0x00000000
 8005888:	003d0900 	.word	0x003d0900
 800588c:	3d090000 	.word	0x3d090000
 8005890:	007a1200 	.word	0x007a1200
 8005894:	00f42400 	.word	0x00f42400
 8005898:	01e84800 	.word	0x01e84800
 800589c:	03d09000 	.word	0x03d09000
 80058a0:	061a8000 	.word	0x061a8000
 80058a4:	07a12000 	.word	0x07a12000
 80058a8:	0f424000 	.word	0x0f424000
 80058ac:	1e848000 	.word	0x1e848000
 80058b0:	000aaa00 	.word	0x000aaa00
 80058b4:	000ccc00 	.word	0x000ccc00
 80058b8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058bc:	f7fd f9c8 	bl	8002c50 <HAL_RCC_GetPCLK1Freq>
 80058c0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d044      	beq.n	8005954 <UART_SetConfig+0x15d4>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d03e      	beq.n	8005950 <UART_SetConfig+0x15d0>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d038      	beq.n	800594c <UART_SetConfig+0x15cc>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d032      	beq.n	8005948 <UART_SetConfig+0x15c8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d02c      	beq.n	8005944 <UART_SetConfig+0x15c4>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d026      	beq.n	8005940 <UART_SetConfig+0x15c0>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d020      	beq.n	800593c <UART_SetConfig+0x15bc>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b07      	cmp	r3, #7
 8005900:	d01a      	beq.n	8005938 <UART_SetConfig+0x15b8>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b08      	cmp	r3, #8
 8005908:	d014      	beq.n	8005934 <UART_SetConfig+0x15b4>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b09      	cmp	r3, #9
 8005910:	d00e      	beq.n	8005930 <UART_SetConfig+0x15b0>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b0a      	cmp	r3, #10
 8005918:	d008      	beq.n	800592c <UART_SetConfig+0x15ac>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b0b      	cmp	r3, #11
 8005920:	d102      	bne.n	8005928 <UART_SetConfig+0x15a8>
 8005922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005926:	e016      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005928:	2301      	movs	r3, #1
 800592a:	e014      	b.n	8005956 <UART_SetConfig+0x15d6>
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	e012      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005930:	2340      	movs	r3, #64	; 0x40
 8005932:	e010      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005934:	2320      	movs	r3, #32
 8005936:	e00e      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005938:	2310      	movs	r3, #16
 800593a:	e00c      	b.n	8005956 <UART_SetConfig+0x15d6>
 800593c:	230c      	movs	r3, #12
 800593e:	e00a      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005940:	230a      	movs	r3, #10
 8005942:	e008      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005944:	2308      	movs	r3, #8
 8005946:	e006      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005948:	2306      	movs	r3, #6
 800594a:	e004      	b.n	8005956 <UART_SetConfig+0x15d6>
 800594c:	2304      	movs	r3, #4
 800594e:	e002      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005950:	2302      	movs	r3, #2
 8005952:	e000      	b.n	8005956 <UART_SetConfig+0x15d6>
 8005954:	2301      	movs	r3, #1
 8005956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	005a      	lsls	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	b29b      	uxth	r3, r3
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005972:	e2b0      	b.n	8005ed6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005974:	f7fd f982 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 8005978:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d044      	beq.n	8005a0c <UART_SetConfig+0x168c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	2b01      	cmp	r3, #1
 8005988:	d03e      	beq.n	8005a08 <UART_SetConfig+0x1688>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b02      	cmp	r3, #2
 8005990:	d038      	beq.n	8005a04 <UART_SetConfig+0x1684>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b03      	cmp	r3, #3
 8005998:	d032      	beq.n	8005a00 <UART_SetConfig+0x1680>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d02c      	beq.n	80059fc <UART_SetConfig+0x167c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d026      	beq.n	80059f8 <UART_SetConfig+0x1678>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d020      	beq.n	80059f4 <UART_SetConfig+0x1674>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b07      	cmp	r3, #7
 80059b8:	d01a      	beq.n	80059f0 <UART_SetConfig+0x1670>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d014      	beq.n	80059ec <UART_SetConfig+0x166c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2b09      	cmp	r3, #9
 80059c8:	d00e      	beq.n	80059e8 <UART_SetConfig+0x1668>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b0a      	cmp	r3, #10
 80059d0:	d008      	beq.n	80059e4 <UART_SetConfig+0x1664>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b0b      	cmp	r3, #11
 80059d8:	d102      	bne.n	80059e0 <UART_SetConfig+0x1660>
 80059da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059de:	e016      	b.n	8005a0e <UART_SetConfig+0x168e>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e014      	b.n	8005a0e <UART_SetConfig+0x168e>
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	e012      	b.n	8005a0e <UART_SetConfig+0x168e>
 80059e8:	2340      	movs	r3, #64	; 0x40
 80059ea:	e010      	b.n	8005a0e <UART_SetConfig+0x168e>
 80059ec:	2320      	movs	r3, #32
 80059ee:	e00e      	b.n	8005a0e <UART_SetConfig+0x168e>
 80059f0:	2310      	movs	r3, #16
 80059f2:	e00c      	b.n	8005a0e <UART_SetConfig+0x168e>
 80059f4:	230c      	movs	r3, #12
 80059f6:	e00a      	b.n	8005a0e <UART_SetConfig+0x168e>
 80059f8:	230a      	movs	r3, #10
 80059fa:	e008      	b.n	8005a0e <UART_SetConfig+0x168e>
 80059fc:	2308      	movs	r3, #8
 80059fe:	e006      	b.n	8005a0e <UART_SetConfig+0x168e>
 8005a00:	2306      	movs	r3, #6
 8005a02:	e004      	b.n	8005a0e <UART_SetConfig+0x168e>
 8005a04:	2304      	movs	r3, #4
 8005a06:	e002      	b.n	8005a0e <UART_SetConfig+0x168e>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e000      	b.n	8005a0e <UART_SetConfig+0x168e>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	005a      	lsls	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	441a      	add	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a2a:	e254      	b.n	8005ed6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a2c:	f107 0318 	add.w	r3, r7, #24
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe f859 	bl	8003ae8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d044      	beq.n	8005aca <UART_SetConfig+0x174a>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d03e      	beq.n	8005ac6 <UART_SetConfig+0x1746>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d038      	beq.n	8005ac2 <UART_SetConfig+0x1742>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d032      	beq.n	8005abe <UART_SetConfig+0x173e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d02c      	beq.n	8005aba <UART_SetConfig+0x173a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d026      	beq.n	8005ab6 <UART_SetConfig+0x1736>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b06      	cmp	r3, #6
 8005a6e:	d020      	beq.n	8005ab2 <UART_SetConfig+0x1732>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b07      	cmp	r3, #7
 8005a76:	d01a      	beq.n	8005aae <UART_SetConfig+0x172e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d014      	beq.n	8005aaa <UART_SetConfig+0x172a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b09      	cmp	r3, #9
 8005a86:	d00e      	beq.n	8005aa6 <UART_SetConfig+0x1726>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b0a      	cmp	r3, #10
 8005a8e:	d008      	beq.n	8005aa2 <UART_SetConfig+0x1722>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b0b      	cmp	r3, #11
 8005a96:	d102      	bne.n	8005a9e <UART_SetConfig+0x171e>
 8005a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a9c:	e016      	b.n	8005acc <UART_SetConfig+0x174c>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e014      	b.n	8005acc <UART_SetConfig+0x174c>
 8005aa2:	2380      	movs	r3, #128	; 0x80
 8005aa4:	e012      	b.n	8005acc <UART_SetConfig+0x174c>
 8005aa6:	2340      	movs	r3, #64	; 0x40
 8005aa8:	e010      	b.n	8005acc <UART_SetConfig+0x174c>
 8005aaa:	2320      	movs	r3, #32
 8005aac:	e00e      	b.n	8005acc <UART_SetConfig+0x174c>
 8005aae:	2310      	movs	r3, #16
 8005ab0:	e00c      	b.n	8005acc <UART_SetConfig+0x174c>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	e00a      	b.n	8005acc <UART_SetConfig+0x174c>
 8005ab6:	230a      	movs	r3, #10
 8005ab8:	e008      	b.n	8005acc <UART_SetConfig+0x174c>
 8005aba:	2308      	movs	r3, #8
 8005abc:	e006      	b.n	8005acc <UART_SetConfig+0x174c>
 8005abe:	2306      	movs	r3, #6
 8005ac0:	e004      	b.n	8005acc <UART_SetConfig+0x174c>
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	e002      	b.n	8005acc <UART_SetConfig+0x174c>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e000      	b.n	8005acc <UART_SetConfig+0x174c>
 8005aca:	2301      	movs	r3, #1
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	005a      	lsls	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	085b      	lsrs	r3, r3, #1
 8005ad8:	441a      	add	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae6:	e1f6      	b.n	8005ed6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae8:	f107 030c 	add.w	r3, r7, #12
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe f947 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d044      	beq.n	8005b86 <UART_SetConfig+0x1806>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d03e      	beq.n	8005b82 <UART_SetConfig+0x1802>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d038      	beq.n	8005b7e <UART_SetConfig+0x17fe>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d032      	beq.n	8005b7a <UART_SetConfig+0x17fa>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d02c      	beq.n	8005b76 <UART_SetConfig+0x17f6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b05      	cmp	r3, #5
 8005b22:	d026      	beq.n	8005b72 <UART_SetConfig+0x17f2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b06      	cmp	r3, #6
 8005b2a:	d020      	beq.n	8005b6e <UART_SetConfig+0x17ee>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b07      	cmp	r3, #7
 8005b32:	d01a      	beq.n	8005b6a <UART_SetConfig+0x17ea>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d014      	beq.n	8005b66 <UART_SetConfig+0x17e6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	2b09      	cmp	r3, #9
 8005b42:	d00e      	beq.n	8005b62 <UART_SetConfig+0x17e2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2b0a      	cmp	r3, #10
 8005b4a:	d008      	beq.n	8005b5e <UART_SetConfig+0x17de>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b0b      	cmp	r3, #11
 8005b52:	d102      	bne.n	8005b5a <UART_SetConfig+0x17da>
 8005b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b58:	e016      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e014      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	e012      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b62:	2340      	movs	r3, #64	; 0x40
 8005b64:	e010      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b66:	2320      	movs	r3, #32
 8005b68:	e00e      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b6a:	2310      	movs	r3, #16
 8005b6c:	e00c      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b6e:	230c      	movs	r3, #12
 8005b70:	e00a      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b72:	230a      	movs	r3, #10
 8005b74:	e008      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b76:	2308      	movs	r3, #8
 8005b78:	e006      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b7a:	2306      	movs	r3, #6
 8005b7c:	e004      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b7e:	2304      	movs	r3, #4
 8005b80:	e002      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e000      	b.n	8005b88 <UART_SetConfig+0x1808>
 8005b86:	2301      	movs	r3, #1
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	005a      	lsls	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ba2:	e198      	b.n	8005ed6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba4:	4b87      	ldr	r3, [pc, #540]	; (8005dc4 <UART_SetConfig+0x1a44>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d05e      	beq.n	8005c6e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb0:	4b84      	ldr	r3, [pc, #528]	; (8005dc4 <UART_SetConfig+0x1a44>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	08db      	lsrs	r3, r3, #3
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	4a83      	ldr	r2, [pc, #524]	; (8005dc8 <UART_SetConfig+0x1a48>)
 8005bbc:	40da      	lsrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d044      	beq.n	8005c50 <UART_SetConfig+0x18d0>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d03e      	beq.n	8005c4c <UART_SetConfig+0x18cc>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d038      	beq.n	8005c48 <UART_SetConfig+0x18c8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d032      	beq.n	8005c44 <UART_SetConfig+0x18c4>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d02c      	beq.n	8005c40 <UART_SetConfig+0x18c0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b05      	cmp	r3, #5
 8005bec:	d026      	beq.n	8005c3c <UART_SetConfig+0x18bc>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b06      	cmp	r3, #6
 8005bf4:	d020      	beq.n	8005c38 <UART_SetConfig+0x18b8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b07      	cmp	r3, #7
 8005bfc:	d01a      	beq.n	8005c34 <UART_SetConfig+0x18b4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d014      	beq.n	8005c30 <UART_SetConfig+0x18b0>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b09      	cmp	r3, #9
 8005c0c:	d00e      	beq.n	8005c2c <UART_SetConfig+0x18ac>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b0a      	cmp	r3, #10
 8005c14:	d008      	beq.n	8005c28 <UART_SetConfig+0x18a8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b0b      	cmp	r3, #11
 8005c1c:	d102      	bne.n	8005c24 <UART_SetConfig+0x18a4>
 8005c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c22:	e016      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e014      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	e012      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c2c:	2340      	movs	r3, #64	; 0x40
 8005c2e:	e010      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c30:	2320      	movs	r3, #32
 8005c32:	e00e      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c34:	2310      	movs	r3, #16
 8005c36:	e00c      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c38:	230c      	movs	r3, #12
 8005c3a:	e00a      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c3c:	230a      	movs	r3, #10
 8005c3e:	e008      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c40:	2308      	movs	r3, #8
 8005c42:	e006      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c44:	2306      	movs	r3, #6
 8005c46:	e004      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	e002      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e000      	b.n	8005c52 <UART_SetConfig+0x18d2>
 8005c50:	2301      	movs	r3, #1
 8005c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c56:	005a      	lsls	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	441a      	add	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005c6c:	e133      	b.n	8005ed6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d043      	beq.n	8005cfe <UART_SetConfig+0x197e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d03d      	beq.n	8005cfa <UART_SetConfig+0x197a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d037      	beq.n	8005cf6 <UART_SetConfig+0x1976>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d031      	beq.n	8005cf2 <UART_SetConfig+0x1972>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d02b      	beq.n	8005cee <UART_SetConfig+0x196e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	d025      	beq.n	8005cea <UART_SetConfig+0x196a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d01f      	beq.n	8005ce6 <UART_SetConfig+0x1966>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b07      	cmp	r3, #7
 8005cac:	d019      	beq.n	8005ce2 <UART_SetConfig+0x1962>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d013      	beq.n	8005cde <UART_SetConfig+0x195e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d00d      	beq.n	8005cda <UART_SetConfig+0x195a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b0a      	cmp	r3, #10
 8005cc4:	d007      	beq.n	8005cd6 <UART_SetConfig+0x1956>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b0b      	cmp	r3, #11
 8005ccc:	d101      	bne.n	8005cd2 <UART_SetConfig+0x1952>
 8005cce:	4b3f      	ldr	r3, [pc, #252]	; (8005dcc <UART_SetConfig+0x1a4c>)
 8005cd0:	e016      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cd2:	4b3f      	ldr	r3, [pc, #252]	; (8005dd0 <UART_SetConfig+0x1a50>)
 8005cd4:	e014      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cd6:	4b3f      	ldr	r3, [pc, #252]	; (8005dd4 <UART_SetConfig+0x1a54>)
 8005cd8:	e012      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cda:	4b3f      	ldr	r3, [pc, #252]	; (8005dd8 <UART_SetConfig+0x1a58>)
 8005cdc:	e010      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cde:	4b3f      	ldr	r3, [pc, #252]	; (8005ddc <UART_SetConfig+0x1a5c>)
 8005ce0:	e00e      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005ce2:	4b3f      	ldr	r3, [pc, #252]	; (8005de0 <UART_SetConfig+0x1a60>)
 8005ce4:	e00c      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005ce6:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <UART_SetConfig+0x1a64>)
 8005ce8:	e00a      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cea:	4b3f      	ldr	r3, [pc, #252]	; (8005de8 <UART_SetConfig+0x1a68>)
 8005cec:	e008      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cee:	4b3f      	ldr	r3, [pc, #252]	; (8005dec <UART_SetConfig+0x1a6c>)
 8005cf0:	e006      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cf2:	4b3f      	ldr	r3, [pc, #252]	; (8005df0 <UART_SetConfig+0x1a70>)
 8005cf4:	e004      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cf6:	4b3f      	ldr	r3, [pc, #252]	; (8005df4 <UART_SetConfig+0x1a74>)
 8005cf8:	e002      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cfa:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <UART_SetConfig+0x1a48>)
 8005cfc:	e000      	b.n	8005d00 <UART_SetConfig+0x1980>
 8005cfe:	4b34      	ldr	r3, [pc, #208]	; (8005dd0 <UART_SetConfig+0x1a50>)
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6852      	ldr	r2, [r2, #4]
 8005d04:	0852      	lsrs	r2, r2, #1
 8005d06:	441a      	add	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d14:	e0df      	b.n	8005ed6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d045      	beq.n	8005daa <UART_SetConfig+0x1a2a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d03f      	beq.n	8005da6 <UART_SetConfig+0x1a26>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d039      	beq.n	8005da2 <UART_SetConfig+0x1a22>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d033      	beq.n	8005d9e <UART_SetConfig+0x1a1e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d02d      	beq.n	8005d9a <UART_SetConfig+0x1a1a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d027      	beq.n	8005d96 <UART_SetConfig+0x1a16>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b06      	cmp	r3, #6
 8005d4c:	d021      	beq.n	8005d92 <UART_SetConfig+0x1a12>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b07      	cmp	r3, #7
 8005d54:	d01b      	beq.n	8005d8e <UART_SetConfig+0x1a0e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d015      	beq.n	8005d8a <UART_SetConfig+0x1a0a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b09      	cmp	r3, #9
 8005d64:	d00f      	beq.n	8005d86 <UART_SetConfig+0x1a06>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b0a      	cmp	r3, #10
 8005d6c:	d008      	beq.n	8005d80 <UART_SetConfig+0x1a00>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b0b      	cmp	r3, #11
 8005d74:	d102      	bne.n	8005d7c <UART_SetConfig+0x19fc>
 8005d76:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005d7a:	e017      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d7c:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <UART_SetConfig+0x1a60>)
 8005d7e:	e015      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d80:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005d84:	e012      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d86:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <UART_SetConfig+0x1a78>)
 8005d88:	e010      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d8a:	4b1c      	ldr	r3, [pc, #112]	; (8005dfc <UART_SetConfig+0x1a7c>)
 8005d8c:	e00e      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <UART_SetConfig+0x1a4c>)
 8005d90:	e00c      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d92:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <UART_SetConfig+0x1a80>)
 8005d94:	e00a      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d96:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <UART_SetConfig+0x1a84>)
 8005d98:	e008      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <UART_SetConfig+0x1a54>)
 8005d9c:	e006      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <UART_SetConfig+0x1a88>)
 8005da0:	e004      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005da2:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <UART_SetConfig+0x1a58>)
 8005da4:	e002      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <UART_SetConfig+0x1a5c>)
 8005da8:	e000      	b.n	8005dac <UART_SetConfig+0x1a2c>
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <UART_SetConfig+0x1a60>)
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6852      	ldr	r2, [r2, #4]
 8005db0:	0852      	lsrs	r2, r2, #1
 8005db2:	441a      	add	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc0:	e089      	b.n	8005ed6 <UART_SetConfig+0x1b56>
 8005dc2:	bf00      	nop
 8005dc4:	58024400 	.word	0x58024400
 8005dc8:	03d09000 	.word	0x03d09000
 8005dcc:	0007a120 	.word	0x0007a120
 8005dd0:	07a12000 	.word	0x07a12000
 8005dd4:	000f4240 	.word	0x000f4240
 8005dd8:	001e8480 	.word	0x001e8480
 8005ddc:	003d0900 	.word	0x003d0900
 8005de0:	007a1200 	.word	0x007a1200
 8005de4:	00a2c2aa 	.word	0x00a2c2aa
 8005de8:	00c35000 	.word	0x00c35000
 8005dec:	00f42400 	.word	0x00f42400
 8005df0:	01458554 	.word	0x01458554
 8005df4:	01e84800 	.word	0x01e84800
 8005df8:	0001e848 	.word	0x0001e848
 8005dfc:	0003d090 	.word	0x0003d090
 8005e00:	000a2c2a 	.word	0x000a2c2a
 8005e04:	000c3500 	.word	0x000c3500
 8005e08:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d04f      	beq.n	8005eb4 <UART_SetConfig+0x1b34>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d048      	beq.n	8005eae <UART_SetConfig+0x1b2e>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d041      	beq.n	8005ea8 <UART_SetConfig+0x1b28>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d03a      	beq.n	8005ea2 <UART_SetConfig+0x1b22>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d033      	beq.n	8005e9c <UART_SetConfig+0x1b1c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d02c      	beq.n	8005e96 <UART_SetConfig+0x1b16>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b06      	cmp	r3, #6
 8005e42:	d025      	beq.n	8005e90 <UART_SetConfig+0x1b10>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b07      	cmp	r3, #7
 8005e4a:	d01e      	beq.n	8005e8a <UART_SetConfig+0x1b0a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d017      	beq.n	8005e84 <UART_SetConfig+0x1b04>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b09      	cmp	r3, #9
 8005e5a:	d010      	beq.n	8005e7e <UART_SetConfig+0x1afe>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b0a      	cmp	r3, #10
 8005e62:	d009      	beq.n	8005e78 <UART_SetConfig+0x1af8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b0b      	cmp	r3, #11
 8005e6a:	d102      	bne.n	8005e72 <UART_SetConfig+0x1af2>
 8005e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e70:	e022      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e76:	e01f      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7c:	e01c      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e82:	e019      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005e84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e88:	e016      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e8e:	e013      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005e90:	f241 5354 	movw	r3, #5460	; 0x1554
 8005e94:	e010      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005e96:	f641 1398 	movw	r3, #6552	; 0x1998
 8005e9a:	e00d      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ea0:	e00a      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005ea2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005ea6:	e007      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005ea8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005eac:	e004      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb2:	e001      	b.n	8005eb8 <UART_SetConfig+0x1b38>
 8005eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6852      	ldr	r2, [r2, #4]
 8005ebc:	0852      	lsrs	r2, r2, #1
 8005ebe:	441a      	add	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ecc:	e003      	b.n	8005ed6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed8:	2b0f      	cmp	r3, #15
 8005eda:	d916      	bls.n	8005f0a <UART_SetConfig+0x1b8a>
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee2:	d212      	bcs.n	8005f0a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f023 030f 	bic.w	r3, r3, #15
 8005eec:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005efc:	4313      	orrs	r3, r2
 8005efe:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f06:	60da      	str	r2, [r3, #12]
 8005f08:	e3a3      	b.n	8006652 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f10:	e39f      	b.n	8006652 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8005f12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005f16:	2b40      	cmp	r3, #64	; 0x40
 8005f18:	f200 8388 	bhi.w	800662c <UART_SetConfig+0x22ac>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x1ba4>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08006029 	.word	0x08006029
 8005f28:	080060df 	.word	0x080060df
 8005f2c:	0800662d 	.word	0x0800662d
 8005f30:	0800662d 	.word	0x0800662d
 8005f34:	08006195 	.word	0x08006195
 8005f38:	0800662d 	.word	0x0800662d
 8005f3c:	0800662d 	.word	0x0800662d
 8005f40:	0800662d 	.word	0x0800662d
 8005f44:	0800624f 	.word	0x0800624f
 8005f48:	0800662d 	.word	0x0800662d
 8005f4c:	0800662d 	.word	0x0800662d
 8005f50:	0800662d 	.word	0x0800662d
 8005f54:	0800662d 	.word	0x0800662d
 8005f58:	0800662d 	.word	0x0800662d
 8005f5c:	0800662d 	.word	0x0800662d
 8005f60:	0800662d 	.word	0x0800662d
 8005f64:	08006309 	.word	0x08006309
 8005f68:	0800662d 	.word	0x0800662d
 8005f6c:	0800662d 	.word	0x0800662d
 8005f70:	0800662d 	.word	0x0800662d
 8005f74:	0800662d 	.word	0x0800662d
 8005f78:	0800662d 	.word	0x0800662d
 8005f7c:	0800662d 	.word	0x0800662d
 8005f80:	0800662d 	.word	0x0800662d
 8005f84:	0800662d 	.word	0x0800662d
 8005f88:	0800662d 	.word	0x0800662d
 8005f8c:	0800662d 	.word	0x0800662d
 8005f90:	0800662d 	.word	0x0800662d
 8005f94:	0800662d 	.word	0x0800662d
 8005f98:	0800662d 	.word	0x0800662d
 8005f9c:	0800662d 	.word	0x0800662d
 8005fa0:	0800662d 	.word	0x0800662d
 8005fa4:	08006479 	.word	0x08006479
 8005fa8:	0800662d 	.word	0x0800662d
 8005fac:	0800662d 	.word	0x0800662d
 8005fb0:	0800662d 	.word	0x0800662d
 8005fb4:	0800662d 	.word	0x0800662d
 8005fb8:	0800662d 	.word	0x0800662d
 8005fbc:	0800662d 	.word	0x0800662d
 8005fc0:	0800662d 	.word	0x0800662d
 8005fc4:	0800662d 	.word	0x0800662d
 8005fc8:	0800662d 	.word	0x0800662d
 8005fcc:	0800662d 	.word	0x0800662d
 8005fd0:	0800662d 	.word	0x0800662d
 8005fd4:	0800662d 	.word	0x0800662d
 8005fd8:	0800662d 	.word	0x0800662d
 8005fdc:	0800662d 	.word	0x0800662d
 8005fe0:	0800662d 	.word	0x0800662d
 8005fe4:	0800662d 	.word	0x0800662d
 8005fe8:	0800662d 	.word	0x0800662d
 8005fec:	0800662d 	.word	0x0800662d
 8005ff0:	0800662d 	.word	0x0800662d
 8005ff4:	0800662d 	.word	0x0800662d
 8005ff8:	0800662d 	.word	0x0800662d
 8005ffc:	0800662d 	.word	0x0800662d
 8006000:	0800662d 	.word	0x0800662d
 8006004:	0800662d 	.word	0x0800662d
 8006008:	0800662d 	.word	0x0800662d
 800600c:	0800662d 	.word	0x0800662d
 8006010:	0800662d 	.word	0x0800662d
 8006014:	0800662d 	.word	0x0800662d
 8006018:	0800662d 	.word	0x0800662d
 800601c:	0800662d 	.word	0x0800662d
 8006020:	0800662d 	.word	0x0800662d
 8006024:	0800656d 	.word	0x0800656d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fc fe12 	bl	8002c50 <HAL_RCC_GetPCLK1Freq>
 800602c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d044      	beq.n	80060c0 <UART_SetConfig+0x1d40>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	2b01      	cmp	r3, #1
 800603c:	d03e      	beq.n	80060bc <UART_SetConfig+0x1d3c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2b02      	cmp	r3, #2
 8006044:	d038      	beq.n	80060b8 <UART_SetConfig+0x1d38>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	2b03      	cmp	r3, #3
 800604c:	d032      	beq.n	80060b4 <UART_SetConfig+0x1d34>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b04      	cmp	r3, #4
 8006054:	d02c      	beq.n	80060b0 <UART_SetConfig+0x1d30>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	2b05      	cmp	r3, #5
 800605c:	d026      	beq.n	80060ac <UART_SetConfig+0x1d2c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b06      	cmp	r3, #6
 8006064:	d020      	beq.n	80060a8 <UART_SetConfig+0x1d28>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	2b07      	cmp	r3, #7
 800606c:	d01a      	beq.n	80060a4 <UART_SetConfig+0x1d24>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b08      	cmp	r3, #8
 8006074:	d014      	beq.n	80060a0 <UART_SetConfig+0x1d20>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b09      	cmp	r3, #9
 800607c:	d00e      	beq.n	800609c <UART_SetConfig+0x1d1c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	2b0a      	cmp	r3, #10
 8006084:	d008      	beq.n	8006098 <UART_SetConfig+0x1d18>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	2b0b      	cmp	r3, #11
 800608c:	d102      	bne.n	8006094 <UART_SetConfig+0x1d14>
 800608e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006092:	e016      	b.n	80060c2 <UART_SetConfig+0x1d42>
 8006094:	2301      	movs	r3, #1
 8006096:	e014      	b.n	80060c2 <UART_SetConfig+0x1d42>
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	e012      	b.n	80060c2 <UART_SetConfig+0x1d42>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	e010      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060a0:	2320      	movs	r3, #32
 80060a2:	e00e      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060a4:	2310      	movs	r3, #16
 80060a6:	e00c      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060a8:	230c      	movs	r3, #12
 80060aa:	e00a      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060ac:	230a      	movs	r3, #10
 80060ae:	e008      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060b0:	2308      	movs	r3, #8
 80060b2:	e006      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060b4:	2306      	movs	r3, #6
 80060b6:	e004      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060b8:	2304      	movs	r3, #4
 80060ba:	e002      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060bc:	2302      	movs	r3, #2
 80060be:	e000      	b.n	80060c2 <UART_SetConfig+0x1d42>
 80060c0:	2301      	movs	r3, #1
 80060c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	085b      	lsrs	r3, r3, #1
 80060ce:	441a      	add	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d8:	b29b      	uxth	r3, r3
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060dc:	e2aa      	b.n	8006634 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060de:	f7fc fdcd 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 80060e2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d044      	beq.n	8006176 <UART_SetConfig+0x1df6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d03e      	beq.n	8006172 <UART_SetConfig+0x1df2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d038      	beq.n	800616e <UART_SetConfig+0x1dee>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b03      	cmp	r3, #3
 8006102:	d032      	beq.n	800616a <UART_SetConfig+0x1dea>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b04      	cmp	r3, #4
 800610a:	d02c      	beq.n	8006166 <UART_SetConfig+0x1de6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b05      	cmp	r3, #5
 8006112:	d026      	beq.n	8006162 <UART_SetConfig+0x1de2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b06      	cmp	r3, #6
 800611a:	d020      	beq.n	800615e <UART_SetConfig+0x1dde>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b07      	cmp	r3, #7
 8006122:	d01a      	beq.n	800615a <UART_SetConfig+0x1dda>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b08      	cmp	r3, #8
 800612a:	d014      	beq.n	8006156 <UART_SetConfig+0x1dd6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b09      	cmp	r3, #9
 8006132:	d00e      	beq.n	8006152 <UART_SetConfig+0x1dd2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	2b0a      	cmp	r3, #10
 800613a:	d008      	beq.n	800614e <UART_SetConfig+0x1dce>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b0b      	cmp	r3, #11
 8006142:	d102      	bne.n	800614a <UART_SetConfig+0x1dca>
 8006144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006148:	e016      	b.n	8006178 <UART_SetConfig+0x1df8>
 800614a:	2301      	movs	r3, #1
 800614c:	e014      	b.n	8006178 <UART_SetConfig+0x1df8>
 800614e:	2380      	movs	r3, #128	; 0x80
 8006150:	e012      	b.n	8006178 <UART_SetConfig+0x1df8>
 8006152:	2340      	movs	r3, #64	; 0x40
 8006154:	e010      	b.n	8006178 <UART_SetConfig+0x1df8>
 8006156:	2320      	movs	r3, #32
 8006158:	e00e      	b.n	8006178 <UART_SetConfig+0x1df8>
 800615a:	2310      	movs	r3, #16
 800615c:	e00c      	b.n	8006178 <UART_SetConfig+0x1df8>
 800615e:	230c      	movs	r3, #12
 8006160:	e00a      	b.n	8006178 <UART_SetConfig+0x1df8>
 8006162:	230a      	movs	r3, #10
 8006164:	e008      	b.n	8006178 <UART_SetConfig+0x1df8>
 8006166:	2308      	movs	r3, #8
 8006168:	e006      	b.n	8006178 <UART_SetConfig+0x1df8>
 800616a:	2306      	movs	r3, #6
 800616c:	e004      	b.n	8006178 <UART_SetConfig+0x1df8>
 800616e:	2304      	movs	r3, #4
 8006170:	e002      	b.n	8006178 <UART_SetConfig+0x1df8>
 8006172:	2302      	movs	r3, #2
 8006174:	e000      	b.n	8006178 <UART_SetConfig+0x1df8>
 8006176:	2301      	movs	r3, #1
 8006178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800617a:	fbb2 f2f3 	udiv	r2, r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	b29b      	uxth	r3, r3
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006192:	e24f      	b.n	8006634 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006194:	f107 0318 	add.w	r3, r7, #24
 8006198:	4618      	mov	r0, r3
 800619a:	f7fd fca5 	bl	8003ae8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d044      	beq.n	8006232 <UART_SetConfig+0x1eb2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d03e      	beq.n	800622e <UART_SetConfig+0x1eae>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d038      	beq.n	800622a <UART_SetConfig+0x1eaa>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d032      	beq.n	8006226 <UART_SetConfig+0x1ea6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d02c      	beq.n	8006222 <UART_SetConfig+0x1ea2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	2b05      	cmp	r3, #5
 80061ce:	d026      	beq.n	800621e <UART_SetConfig+0x1e9e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	d020      	beq.n	800621a <UART_SetConfig+0x1e9a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b07      	cmp	r3, #7
 80061de:	d01a      	beq.n	8006216 <UART_SetConfig+0x1e96>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d014      	beq.n	8006212 <UART_SetConfig+0x1e92>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b09      	cmp	r3, #9
 80061ee:	d00e      	beq.n	800620e <UART_SetConfig+0x1e8e>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2b0a      	cmp	r3, #10
 80061f6:	d008      	beq.n	800620a <UART_SetConfig+0x1e8a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	2b0b      	cmp	r3, #11
 80061fe:	d102      	bne.n	8006206 <UART_SetConfig+0x1e86>
 8006200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006204:	e016      	b.n	8006234 <UART_SetConfig+0x1eb4>
 8006206:	2301      	movs	r3, #1
 8006208:	e014      	b.n	8006234 <UART_SetConfig+0x1eb4>
 800620a:	2380      	movs	r3, #128	; 0x80
 800620c:	e012      	b.n	8006234 <UART_SetConfig+0x1eb4>
 800620e:	2340      	movs	r3, #64	; 0x40
 8006210:	e010      	b.n	8006234 <UART_SetConfig+0x1eb4>
 8006212:	2320      	movs	r3, #32
 8006214:	e00e      	b.n	8006234 <UART_SetConfig+0x1eb4>
 8006216:	2310      	movs	r3, #16
 8006218:	e00c      	b.n	8006234 <UART_SetConfig+0x1eb4>
 800621a:	230c      	movs	r3, #12
 800621c:	e00a      	b.n	8006234 <UART_SetConfig+0x1eb4>
 800621e:	230a      	movs	r3, #10
 8006220:	e008      	b.n	8006234 <UART_SetConfig+0x1eb4>
 8006222:	2308      	movs	r3, #8
 8006224:	e006      	b.n	8006234 <UART_SetConfig+0x1eb4>
 8006226:	2306      	movs	r3, #6
 8006228:	e004      	b.n	8006234 <UART_SetConfig+0x1eb4>
 800622a:	2304      	movs	r3, #4
 800622c:	e002      	b.n	8006234 <UART_SetConfig+0x1eb4>
 800622e:	2302      	movs	r3, #2
 8006230:	e000      	b.n	8006234 <UART_SetConfig+0x1eb4>
 8006232:	2301      	movs	r3, #1
 8006234:	fbb2 f2f3 	udiv	r2, r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	441a      	add	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	b29b      	uxth	r3, r3
 800624a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800624c:	e1f2      	b.n	8006634 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800624e:	f107 030c 	add.w	r3, r7, #12
 8006252:	4618      	mov	r0, r3
 8006254:	f7fd fd94 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d044      	beq.n	80062ec <UART_SetConfig+0x1f6c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b01      	cmp	r3, #1
 8006268:	d03e      	beq.n	80062e8 <UART_SetConfig+0x1f68>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b02      	cmp	r3, #2
 8006270:	d038      	beq.n	80062e4 <UART_SetConfig+0x1f64>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b03      	cmp	r3, #3
 8006278:	d032      	beq.n	80062e0 <UART_SetConfig+0x1f60>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b04      	cmp	r3, #4
 8006280:	d02c      	beq.n	80062dc <UART_SetConfig+0x1f5c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b05      	cmp	r3, #5
 8006288:	d026      	beq.n	80062d8 <UART_SetConfig+0x1f58>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b06      	cmp	r3, #6
 8006290:	d020      	beq.n	80062d4 <UART_SetConfig+0x1f54>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b07      	cmp	r3, #7
 8006298:	d01a      	beq.n	80062d0 <UART_SetConfig+0x1f50>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d014      	beq.n	80062cc <UART_SetConfig+0x1f4c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d00e      	beq.n	80062c8 <UART_SetConfig+0x1f48>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b0a      	cmp	r3, #10
 80062b0:	d008      	beq.n	80062c4 <UART_SetConfig+0x1f44>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b0b      	cmp	r3, #11
 80062b8:	d102      	bne.n	80062c0 <UART_SetConfig+0x1f40>
 80062ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062be:	e016      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e014      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	e012      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062c8:	2340      	movs	r3, #64	; 0x40
 80062ca:	e010      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062cc:	2320      	movs	r3, #32
 80062ce:	e00e      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062d0:	2310      	movs	r3, #16
 80062d2:	e00c      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062d4:	230c      	movs	r3, #12
 80062d6:	e00a      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062d8:	230a      	movs	r3, #10
 80062da:	e008      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062dc:	2308      	movs	r3, #8
 80062de:	e006      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062e0:	2306      	movs	r3, #6
 80062e2:	e004      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062e4:	2304      	movs	r3, #4
 80062e6:	e002      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e000      	b.n	80062ee <UART_SetConfig+0x1f6e>
 80062ec:	2301      	movs	r3, #1
 80062ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	b29b      	uxth	r3, r3
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006306:	e195      	b.n	8006634 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006308:	4b87      	ldr	r3, [pc, #540]	; (8006528 <UART_SetConfig+0x21a8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d05d      	beq.n	80063d0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006314:	4b84      	ldr	r3, [pc, #528]	; (8006528 <UART_SetConfig+0x21a8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	08db      	lsrs	r3, r3, #3
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	4a83      	ldr	r2, [pc, #524]	; (800652c <UART_SetConfig+0x21ac>)
 8006320:	40da      	lsrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d044      	beq.n	80063b4 <UART_SetConfig+0x2034>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b01      	cmp	r3, #1
 8006330:	d03e      	beq.n	80063b0 <UART_SetConfig+0x2030>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	2b02      	cmp	r3, #2
 8006338:	d038      	beq.n	80063ac <UART_SetConfig+0x202c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b03      	cmp	r3, #3
 8006340:	d032      	beq.n	80063a8 <UART_SetConfig+0x2028>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	2b04      	cmp	r3, #4
 8006348:	d02c      	beq.n	80063a4 <UART_SetConfig+0x2024>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	2b05      	cmp	r3, #5
 8006350:	d026      	beq.n	80063a0 <UART_SetConfig+0x2020>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	2b06      	cmp	r3, #6
 8006358:	d020      	beq.n	800639c <UART_SetConfig+0x201c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2b07      	cmp	r3, #7
 8006360:	d01a      	beq.n	8006398 <UART_SetConfig+0x2018>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	2b08      	cmp	r3, #8
 8006368:	d014      	beq.n	8006394 <UART_SetConfig+0x2014>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	2b09      	cmp	r3, #9
 8006370:	d00e      	beq.n	8006390 <UART_SetConfig+0x2010>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	2b0a      	cmp	r3, #10
 8006378:	d008      	beq.n	800638c <UART_SetConfig+0x200c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	2b0b      	cmp	r3, #11
 8006380:	d102      	bne.n	8006388 <UART_SetConfig+0x2008>
 8006382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006386:	e016      	b.n	80063b6 <UART_SetConfig+0x2036>
 8006388:	2301      	movs	r3, #1
 800638a:	e014      	b.n	80063b6 <UART_SetConfig+0x2036>
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	e012      	b.n	80063b6 <UART_SetConfig+0x2036>
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	e010      	b.n	80063b6 <UART_SetConfig+0x2036>
 8006394:	2320      	movs	r3, #32
 8006396:	e00e      	b.n	80063b6 <UART_SetConfig+0x2036>
 8006398:	2310      	movs	r3, #16
 800639a:	e00c      	b.n	80063b6 <UART_SetConfig+0x2036>
 800639c:	230c      	movs	r3, #12
 800639e:	e00a      	b.n	80063b6 <UART_SetConfig+0x2036>
 80063a0:	230a      	movs	r3, #10
 80063a2:	e008      	b.n	80063b6 <UART_SetConfig+0x2036>
 80063a4:	2308      	movs	r3, #8
 80063a6:	e006      	b.n	80063b6 <UART_SetConfig+0x2036>
 80063a8:	2306      	movs	r3, #6
 80063aa:	e004      	b.n	80063b6 <UART_SetConfig+0x2036>
 80063ac:	2304      	movs	r3, #4
 80063ae:	e002      	b.n	80063b6 <UART_SetConfig+0x2036>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e000      	b.n	80063b6 <UART_SetConfig+0x2036>
 80063b4:	2301      	movs	r3, #1
 80063b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	441a      	add	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80063ce:	e131      	b.n	8006634 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d043      	beq.n	8006460 <UART_SetConfig+0x20e0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d03d      	beq.n	800645c <UART_SetConfig+0x20dc>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d037      	beq.n	8006458 <UART_SetConfig+0x20d8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d031      	beq.n	8006454 <UART_SetConfig+0x20d4>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d02b      	beq.n	8006450 <UART_SetConfig+0x20d0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	2b05      	cmp	r3, #5
 80063fe:	d025      	beq.n	800644c <UART_SetConfig+0x20cc>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	2b06      	cmp	r3, #6
 8006406:	d01f      	beq.n	8006448 <UART_SetConfig+0x20c8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	2b07      	cmp	r3, #7
 800640e:	d019      	beq.n	8006444 <UART_SetConfig+0x20c4>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2b08      	cmp	r3, #8
 8006416:	d013      	beq.n	8006440 <UART_SetConfig+0x20c0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	2b09      	cmp	r3, #9
 800641e:	d00d      	beq.n	800643c <UART_SetConfig+0x20bc>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	2b0a      	cmp	r3, #10
 8006426:	d007      	beq.n	8006438 <UART_SetConfig+0x20b8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b0b      	cmp	r3, #11
 800642e:	d101      	bne.n	8006434 <UART_SetConfig+0x20b4>
 8006430:	4b3f      	ldr	r3, [pc, #252]	; (8006530 <UART_SetConfig+0x21b0>)
 8006432:	e016      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006434:	4b3d      	ldr	r3, [pc, #244]	; (800652c <UART_SetConfig+0x21ac>)
 8006436:	e014      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006438:	4b3e      	ldr	r3, [pc, #248]	; (8006534 <UART_SetConfig+0x21b4>)
 800643a:	e012      	b.n	8006462 <UART_SetConfig+0x20e2>
 800643c:	4b3e      	ldr	r3, [pc, #248]	; (8006538 <UART_SetConfig+0x21b8>)
 800643e:	e010      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006440:	4b3e      	ldr	r3, [pc, #248]	; (800653c <UART_SetConfig+0x21bc>)
 8006442:	e00e      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006444:	4b3e      	ldr	r3, [pc, #248]	; (8006540 <UART_SetConfig+0x21c0>)
 8006446:	e00c      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006448:	4b3e      	ldr	r3, [pc, #248]	; (8006544 <UART_SetConfig+0x21c4>)
 800644a:	e00a      	b.n	8006462 <UART_SetConfig+0x20e2>
 800644c:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <UART_SetConfig+0x21c8>)
 800644e:	e008      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006450:	4b3e      	ldr	r3, [pc, #248]	; (800654c <UART_SetConfig+0x21cc>)
 8006452:	e006      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006454:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <UART_SetConfig+0x21d0>)
 8006456:	e004      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006458:	4b3e      	ldr	r3, [pc, #248]	; (8006554 <UART_SetConfig+0x21d4>)
 800645a:	e002      	b.n	8006462 <UART_SetConfig+0x20e2>
 800645c:	4b3e      	ldr	r3, [pc, #248]	; (8006558 <UART_SetConfig+0x21d8>)
 800645e:	e000      	b.n	8006462 <UART_SetConfig+0x20e2>
 8006460:	4b32      	ldr	r3, [pc, #200]	; (800652c <UART_SetConfig+0x21ac>)
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6852      	ldr	r2, [r2, #4]
 8006466:	0852      	lsrs	r2, r2, #1
 8006468:	441a      	add	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	b29b      	uxth	r3, r3
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006476:	e0dd      	b.n	8006634 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d046      	beq.n	800650e <UART_SetConfig+0x218e>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	2b01      	cmp	r3, #1
 8006486:	d040      	beq.n	800650a <UART_SetConfig+0x218a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	2b02      	cmp	r3, #2
 800648e:	d03a      	beq.n	8006506 <UART_SetConfig+0x2186>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	2b03      	cmp	r3, #3
 8006496:	d034      	beq.n	8006502 <UART_SetConfig+0x2182>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	2b04      	cmp	r3, #4
 800649e:	d02e      	beq.n	80064fe <UART_SetConfig+0x217e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d028      	beq.n	80064fa <UART_SetConfig+0x217a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	2b06      	cmp	r3, #6
 80064ae:	d022      	beq.n	80064f6 <UART_SetConfig+0x2176>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	2b07      	cmp	r3, #7
 80064b6:	d01c      	beq.n	80064f2 <UART_SetConfig+0x2172>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d016      	beq.n	80064ee <UART_SetConfig+0x216e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	2b09      	cmp	r3, #9
 80064c6:	d00f      	beq.n	80064e8 <UART_SetConfig+0x2168>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b0a      	cmp	r3, #10
 80064ce:	d008      	beq.n	80064e2 <UART_SetConfig+0x2162>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	2b0b      	cmp	r3, #11
 80064d6:	d102      	bne.n	80064de <UART_SetConfig+0x215e>
 80064d8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80064dc:	e018      	b.n	8006510 <UART_SetConfig+0x2190>
 80064de:	4b18      	ldr	r3, [pc, #96]	; (8006540 <UART_SetConfig+0x21c0>)
 80064e0:	e016      	b.n	8006510 <UART_SetConfig+0x2190>
 80064e2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80064e6:	e013      	b.n	8006510 <UART_SetConfig+0x2190>
 80064e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80064ec:	e010      	b.n	8006510 <UART_SetConfig+0x2190>
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <UART_SetConfig+0x21dc>)
 80064f0:	e00e      	b.n	8006510 <UART_SetConfig+0x2190>
 80064f2:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <UART_SetConfig+0x21b0>)
 80064f4:	e00c      	b.n	8006510 <UART_SetConfig+0x2190>
 80064f6:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <UART_SetConfig+0x21e0>)
 80064f8:	e00a      	b.n	8006510 <UART_SetConfig+0x2190>
 80064fa:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <UART_SetConfig+0x21e4>)
 80064fc:	e008      	b.n	8006510 <UART_SetConfig+0x2190>
 80064fe:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <UART_SetConfig+0x21b4>)
 8006500:	e006      	b.n	8006510 <UART_SetConfig+0x2190>
 8006502:	4b19      	ldr	r3, [pc, #100]	; (8006568 <UART_SetConfig+0x21e8>)
 8006504:	e004      	b.n	8006510 <UART_SetConfig+0x2190>
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <UART_SetConfig+0x21b8>)
 8006508:	e002      	b.n	8006510 <UART_SetConfig+0x2190>
 800650a:	4b0c      	ldr	r3, [pc, #48]	; (800653c <UART_SetConfig+0x21bc>)
 800650c:	e000      	b.n	8006510 <UART_SetConfig+0x2190>
 800650e:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <UART_SetConfig+0x21c0>)
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6852      	ldr	r2, [r2, #4]
 8006514:	0852      	lsrs	r2, r2, #1
 8006516:	441a      	add	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	b29b      	uxth	r3, r3
 8006522:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006524:	e086      	b.n	8006634 <UART_SetConfig+0x22b4>
 8006526:	bf00      	nop
 8006528:	58024400 	.word	0x58024400
 800652c:	03d09000 	.word	0x03d09000
 8006530:	0003d090 	.word	0x0003d090
 8006534:	0007a120 	.word	0x0007a120
 8006538:	000f4240 	.word	0x000f4240
 800653c:	001e8480 	.word	0x001e8480
 8006540:	003d0900 	.word	0x003d0900
 8006544:	00516155 	.word	0x00516155
 8006548:	0061a800 	.word	0x0061a800
 800654c:	007a1200 	.word	0x007a1200
 8006550:	00a2c2aa 	.word	0x00a2c2aa
 8006554:	00f42400 	.word	0x00f42400
 8006558:	01e84800 	.word	0x01e84800
 800655c:	0001e848 	.word	0x0001e848
 8006560:	00051615 	.word	0x00051615
 8006564:	00061a80 	.word	0x00061a80
 8006568:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d04e      	beq.n	8006612 <UART_SetConfig+0x2292>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	2b01      	cmp	r3, #1
 800657a:	d047      	beq.n	800660c <UART_SetConfig+0x228c>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b02      	cmp	r3, #2
 8006582:	d040      	beq.n	8006606 <UART_SetConfig+0x2286>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b03      	cmp	r3, #3
 800658a:	d039      	beq.n	8006600 <UART_SetConfig+0x2280>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	2b04      	cmp	r3, #4
 8006592:	d032      	beq.n	80065fa <UART_SetConfig+0x227a>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2b05      	cmp	r3, #5
 800659a:	d02b      	beq.n	80065f4 <UART_SetConfig+0x2274>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2b06      	cmp	r3, #6
 80065a2:	d024      	beq.n	80065ee <UART_SetConfig+0x226e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b07      	cmp	r3, #7
 80065aa:	d01d      	beq.n	80065e8 <UART_SetConfig+0x2268>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d016      	beq.n	80065e2 <UART_SetConfig+0x2262>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d00f      	beq.n	80065dc <UART_SetConfig+0x225c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b0a      	cmp	r3, #10
 80065c2:	d008      	beq.n	80065d6 <UART_SetConfig+0x2256>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b0b      	cmp	r3, #11
 80065ca:	d101      	bne.n	80065d0 <UART_SetConfig+0x2250>
 80065cc:	2380      	movs	r3, #128	; 0x80
 80065ce:	e022      	b.n	8006616 <UART_SetConfig+0x2296>
 80065d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d4:	e01f      	b.n	8006616 <UART_SetConfig+0x2296>
 80065d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065da:	e01c      	b.n	8006616 <UART_SetConfig+0x2296>
 80065dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065e0:	e019      	b.n	8006616 <UART_SetConfig+0x2296>
 80065e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e6:	e016      	b.n	8006616 <UART_SetConfig+0x2296>
 80065e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ec:	e013      	b.n	8006616 <UART_SetConfig+0x2296>
 80065ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80065f2:	e010      	b.n	8006616 <UART_SetConfig+0x2296>
 80065f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80065f8:	e00d      	b.n	8006616 <UART_SetConfig+0x2296>
 80065fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065fe:	e00a      	b.n	8006616 <UART_SetConfig+0x2296>
 8006600:	f241 5355 	movw	r3, #5461	; 0x1555
 8006604:	e007      	b.n	8006616 <UART_SetConfig+0x2296>
 8006606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800660a:	e004      	b.n	8006616 <UART_SetConfig+0x2296>
 800660c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006610:	e001      	b.n	8006616 <UART_SetConfig+0x2296>
 8006612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6852      	ldr	r2, [r2, #4]
 800661a:	0852      	lsrs	r2, r2, #1
 800661c:	441a      	add	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	fbb2 f3f3 	udiv	r3, r2, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800662a:	e003      	b.n	8006634 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	2b0f      	cmp	r3, #15
 8006638:	d908      	bls.n	800664c <UART_SetConfig+0x22cc>
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006640:	d204      	bcs.n	800664c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	e002      	b.n	8006652 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800666e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006672:	4618      	mov	r0, r3
 8006674:	3740      	adds	r7, #64	; 0x40
 8006676:	46bd      	mov	sp, r7
 8006678:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800667c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01a      	beq.n	8006792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677a:	d10a      	bne.n	8006792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	605a      	str	r2, [r3, #4]
  }
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80067d0:	f7fa fbe0 	bl	8000f94 <HAL_GetTick>
 80067d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d10e      	bne.n	8006802 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f82c 	bl	8006850 <UART_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e022      	b.n	8006848 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b04      	cmp	r3, #4
 800680e:	d10e      	bne.n	800682e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f816 	bl	8006850 <UART_WaitOnFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e00c      	b.n	8006848 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	4613      	mov	r3, r2
 800685e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006860:	e062      	b.n	8006928 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006868:	d05e      	beq.n	8006928 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686a:	f7fa fb93 	bl	8000f94 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	429a      	cmp	r2, r3
 8006878:	d302      	bcc.n	8006880 <UART_WaitOnFlagUntilTimeout+0x30>
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11d      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800688e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e045      	b.n	8006948 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d02e      	beq.n	8006928 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d8:	d126      	bne.n	8006928 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0201 	bic.w	r2, r2, #1
 8006902:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e00f      	b.n	8006948 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69da      	ldr	r2, [r3, #28]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4013      	ands	r3, r2
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	429a      	cmp	r2, r3
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	429a      	cmp	r2, r3
 8006944:	d08d      	beq.n	8006862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_UARTEx_DisableFifoMode+0x16>
 8006962:	2302      	movs	r3, #2
 8006964:	e027      	b.n	80069b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2224      	movs	r2, #36	; 0x24
 8006972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0201 	bic.w	r2, r2, #1
 800698c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006994:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e02d      	b.n	8006a36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2224      	movs	r2, #36	; 0x24
 80069e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f850 	bl	8006abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e02d      	b.n	8006ab2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2224      	movs	r2, #36	; 0x24
 8006a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0201 	bic.w	r2, r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f812 	bl	8006abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006ac4:	4a2f      	ldr	r2, [pc, #188]	; (8006b84 <UARTEx_SetNbDataToProcess+0xc8>)
 8006ac6:	f107 0314 	add.w	r3, r7, #20
 8006aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ace:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006ad2:	4a2d      	ldr	r2, [pc, #180]	; (8006b88 <UARTEx_SetNbDataToProcess+0xcc>)
 8006ad4:	f107 030c 	add.w	r3, r7, #12
 8006ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006adc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006af8:	e03d      	b.n	8006b76 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006afa:	2308      	movs	r3, #8
 8006afc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006afe:	2308      	movs	r3, #8
 8006b00:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	0e5b      	lsrs	r3, r3, #25
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	0f5b      	lsrs	r3, r3, #29
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006b22:	7fbb      	ldrb	r3, [r7, #30]
 8006b24:	7f3a      	ldrb	r2, [r7, #28]
 8006b26:	f107 0120 	add.w	r1, r7, #32
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006b30:	fb02 f303 	mul.w	r3, r2, r3
 8006b34:	7f3a      	ldrb	r2, [r7, #28]
 8006b36:	f107 0120 	add.w	r1, r7, #32
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006b40:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006b4c:	7ffb      	ldrb	r3, [r7, #31]
 8006b4e:	7f7a      	ldrb	r2, [r7, #29]
 8006b50:	f107 0120 	add.w	r1, r7, #32
 8006b54:	440a      	add	r2, r1
 8006b56:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	7f7a      	ldrb	r2, [r7, #29]
 8006b60:	f107 0120 	add.w	r1, r7, #32
 8006b64:	440a      	add	r2, r1
 8006b66:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006b6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b76:	bf00      	nop
 8006b78:	3724      	adds	r7, #36	; 0x24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	08006c08 	.word	0x08006c08
 8006b88:	08006c10 	.word	0x08006c10

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4e0d      	ldr	r6, [pc, #52]	; (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1ba4      	subs	r4, r4, r6
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2500      	movs	r5, #0
 8006b98:	42a5      	cmp	r5, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4e0b      	ldr	r6, [pc, #44]	; (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 f820 	bl	8006be4 <_init>
 8006ba4:	1ba4      	subs	r4, r4, r6
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2500      	movs	r5, #0
 8006baa:	42a5      	cmp	r5, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bb4:	4798      	blx	r3
 8006bb6:	3501      	adds	r5, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bbe:	4798      	blx	r3
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08006c30 	.word	0x08006c30
 8006bc8:	08006c30 	.word	0x08006c30
 8006bcc:	08006c30 	.word	0x08006c30
 8006bd0:	08006c34 	.word	0x08006c34

08006bd4 <memset>:
 8006bd4:	4402      	add	r2, r0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d100      	bne.n	8006bde <memset+0xa>
 8006bdc:	4770      	bx	lr
 8006bde:	f803 1b01 	strb.w	r1, [r3], #1
 8006be2:	e7f9      	b.n	8006bd8 <memset+0x4>

08006be4 <_init>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	bf00      	nop
 8006be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bea:	bc08      	pop	{r3}
 8006bec:	469e      	mov	lr, r3
 8006bee:	4770      	bx	lr

08006bf0 <_fini>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr
